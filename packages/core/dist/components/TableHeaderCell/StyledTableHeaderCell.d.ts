/// <reference types="react" />
import { StyledTableHeaderCellProps } from "./types";
export declare const StyledTableHeaderCell: import("styled-components").StyledComponent<import("react").ForwardRefExoticComponent<import("../TableCell").TableCellProps<HTMLTableCellElement> & import("react").RefAttributes<HTMLTableCellElement>>, any, {
    className: string;
    colSpan?: number | undefined;
    rowSpan?: number | undefined;
    as?: "td" | undefined;
    size?: import("../../services/getSizeSpacing").SizeType;
    textAlign?: "left" | "right" | "center" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    summary?: string | undefined;
    width?: string | number | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    style?: import("react").CSSProperties | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: import("react").AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "numeric" | "none" | "text" | "decimal" | "tel" | "url" | "email" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "false" | "true") | undefined;
    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
    'aria-busy'?: (boolean | "false" | "true") | undefined;
    'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "time" | "page" | "false" | "true" | "step" | "location" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-disabled'?: (boolean | "false" | "true") | undefined;
    'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "false" | "true") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "false" | "true") | undefined;
    'aria-haspopup'?: boolean | "dialog" | "menu" | "listbox" | "grid" | "false" | "true" | "tree" | undefined;
    'aria-hidden'?: (boolean | "false" | "true") | undefined;
    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "false" | "true") | undefined;
    'aria-multiline'?: (boolean | "false" | "true") | undefined;
    'aria-multiselectable'?: (boolean | "false" | "true") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-readonly'?: (boolean | "false" | "true") | undefined;
    'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "false" | "true") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "false" | "true") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "other" | "ascending" | "descending" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<HTMLTableCellElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTableCellElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<HTMLTableCellElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTableCellElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<HTMLTableCellElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTableCellElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTableCellElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTableCellElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTableCellElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTableCellElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTableCellElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTableCellElement> | undefined;
    onFocus?: import("react").FocusEventHandler<HTMLTableCellElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTableCellElement> | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLTableCellElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTableCellElement> | undefined;
    onChange?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onBeforeInput?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onInput?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onReset?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onSubmit?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onInvalid?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTableCellElement> | undefined;
    onLoad?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onError?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTableCellElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTableCellElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTableCellElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTableCellElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTableCellElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTableCellElement> | undefined;
    onAbort?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onEnded?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onPause?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onPlay?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onProgress?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onStalled?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onClick?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onDrag?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragExit?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragOver?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragStart?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDrop?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<HTMLTableCellElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTableCellElement> | undefined;
    onSelect?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTableCellElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTableCellElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTableCellElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTableCellElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTableCellElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<HTMLTableCellElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTableCellElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<HTMLTableCellElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTableCellElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableCellElement> | undefined;
    onScroll?: import("react").UIEventHandler<HTMLTableCellElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<HTMLTableCellElement> | undefined;
    onWheel?: import("react").WheelEventHandler<HTMLTableCellElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTableCellElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLTableCellElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTableCellElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTableCellElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTableCellElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTableCellElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTableCellElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTableCellElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTableCellElement> | undefined;
    ref?: import("react").Ref<HTMLTableCellElement> | undefined;
    key?: import("react").Key | null | undefined;
    theme: any;
} & StyledTableHeaderCellProps, "hidden" | "dir" | "slot" | "style" | "summary" | "title" | "color" | "size" | "textAlign" | "translate" | "width" | "prefix" | "children" | "ref" | "key" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "theme" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "draggable" | "placeholder" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "as" | "cellPadding" | "cellSpacing" | "colSpan" | "rowSpan">;
