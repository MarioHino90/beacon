{"version":3,"file":"main.iframe.bundle.js","sources":["webpack:///../core/src/styles.css","webpack:///../commons/src/components/AlertModal/AlertModal.docs.mdx","webpack:///../commons/src/components/AlertModal/AlertModal.stories.tsx","webpack:///../commons/src/components/AlertModal/AlertModal.tsx","webpack:///../commons/src/components/AlertModal/index.ts","webpack:///../commons/src/components/AlertModal/useAlertModal/index.ts","webpack:///../commons/src/components/AlertModal/useAlertModal/useAlertModal.ts","webpack:///../commons/src/components/AlertModalBody/AlertModalBody.tsx","webpack:///../commons/src/components/AlertModalBody/index.ts","webpack:///../commons/src/components/AlertModalButton/AlertModalButton.tsx","webpack:///../commons/src/components/AlertModalButton/index.ts","webpack:///../commons/src/components/AlertModalFooter/AlertModalFooter.tsx","webpack:///../commons/src/components/AlertModalFooter/index.ts","webpack:///../commons/src/components/AlertModalHeading/AlertModalHeading.tsx","webpack:///../commons/src/components/AlertModalHeading/index.ts","webpack:///../commons/src/components/AlertModalIntentContext/AlertModalIntentContext.tsx","webpack:///../commons/src/components/AlertModalIntentContext/index.ts","webpack:///../commons/src/components/IconCircle/IconCircle.docs.mdx","webpack:///../commons/src/components/IconCircle/IconCircle.stories.tsx","webpack:///../commons/src/components/IconCircle/IconCircle.tsx","webpack:///../commons/src/components/IconCircle/StyledIconCircle.ts","webpack:///../commons/src/components/IconCircle/index.ts","webpack:///../commons/src/components/InfoIcon/InfoIcon.stories.mdx","webpack:///../commons/src/components/InfoIcon/InfoIcon.tsx","webpack:///../core/src/components/Annotation/Annotation.docs.mdx","webpack:///../core/src/components/Annotation/Annotation.stories.tsx","webpack:///../core/src/components/Annotation/Annotation.tsx","webpack:///../core/src/components/Annotation/StyledAnnotation.ts","webpack:///../core/src/components/Annotation/index.ts","webpack:///../core/src/components/BannerAlert/BannerAlert.docs.mdx","webpack:///../core/src/components/BannerAlert/BannerAlert.stories.tsx","webpack:///../core/src/components/BannerAlert/BannerAlert.tsx","webpack:///../core/src/components/BannerAlert/IntentContext/IntentContext.tsx","webpack:///../core/src/components/BannerAlert/IntentContext/index.ts","webpack:///../core/src/components/BannerAlert/StyledBannerTransition.ts","webpack:///../core/src/components/BannerAlert/getIntentColor/getIntentColor.ts","webpack:///../core/src/components/BannerAlert/getIntentColor/index.ts","webpack:///../core/src/components/BannerAlert/index.ts","webpack:///../core/src/components/BannerAlertAccordion/BannerAlertAccordion.tsx","webpack:///../core/src/components/BannerAlertAccordion/StyledAccordion.ts","webpack:///../core/src/components/BannerAlertAccordion/index.ts","webpack:///../core/src/components/BannerAlertAccordionBody/BannerAlertAccordionBody.ts","webpack:///../core/src/components/BannerAlertAccordionBody/index.ts","webpack:///../core/src/components/BannerAlertAccordionFooter/BannerAlertAccordionFooter.ts","webpack:///../core/src/components/BannerAlertAccordionFooter/index.ts","webpack:///../core/src/components/BannerAlertAccordionHeader/BannerAlertAccordionHeader.tsx","webpack:///../core/src/components/BannerAlertAccordionHeader/StyledBannerAlertAccordionHeader.ts","webpack:///../core/src/components/BannerAlertAccordionHeader/index.ts","webpack:///../core/src/components/BannerAlertAction/BannerAlertAction.tsx","webpack:///../core/src/components/BannerAlertAction/index.ts","webpack:///../core/src/components/BannerAlertBody/BannerAlertBody.tsx","webpack:///../core/src/components/BannerAlertBody/StyledBannerBody.ts","webpack:///../core/src/components/BannerAlertBody/StyledBannerBodyWrapper.ts","webpack:///../core/src/components/BannerAlertBody/StyledBodyWrapper.ts","webpack:///../core/src/components/BannerAlertBody/index.ts","webpack:///../core/src/components/BannerAlertClose/BannerAlertClose.tsx","webpack:///../core/src/components/BannerAlertClose/StyledClose.ts","webpack:///../core/src/components/BannerAlertClose/index.ts","webpack:///../core/src/components/BannerAlertDescription/BannerAlertDescription.ts","webpack:///../core/src/components/BannerAlertDescription/index.ts","webpack:///../core/src/components/BannerAlertDescriptionText/BannerAlertDescriptionText.ts","webpack:///../core/src/components/BannerAlertDescriptionText/index.ts","webpack:///../core/src/components/BannerAlertIcon/BannerAlertIcon.tsx","webpack:///../core/src/components/BannerAlertIcon/StyledBannerIcon.ts","webpack:///../core/src/components/BannerAlertIcon/index.ts","webpack:///../core/src/components/BannerAlertLink/BannerAlertLink.tsx","webpack:///../core/src/components/BannerAlertLink/BannerAlertLinkStyling/bannerAlertLinkStyling.ts","webpack:///../core/src/components/BannerAlertLink/BannerAlertLinkStyling/index.ts","webpack:///../core/src/components/BannerAlertLink/StyledBannerButton.ts","webpack:///../core/src/components/BannerAlertLink/StyledBannerLink.ts","webpack:///../core/src/components/BannerAlertLink/StyledCaretWrapper.ts","webpack:///../core/src/components/BannerAlertLink/index.ts","webpack:///../core/src/components/BannerAlertTitle/BannerAlertTitle.ts","webpack:///../core/src/components/BannerAlertTitle/index.ts","webpack:///../core/src/components/BodyText/BodyText.docs.mdx","webpack:///../core/src/components/BodyText/BodyText.stories.mdx","webpack:///../core/src/components/BodyText/BodyText.stories.tsx","webpack:///../core/src/components/BodyText/BodyText.tsx","webpack:///../core/src/components/BodyText/StyledBodyText.ts","webpack:///../core/src/components/BodyText/index.ts","webpack:///../core/src/components/Box/Box.docs.mdx","webpack:///../core/src/components/Box/Box.stories.tsx","webpack:///../core/src/components/Box/Box.tsx","webpack:///../core/src/components/Box/StyledBox.ts","webpack:///../core/src/components/Box/getBoxCss/getBoxCss.ts","webpack:///../core/src/components/Box/getBoxCss/index.ts","webpack:///../core/src/components/Box/index.ts","webpack:///../core/src/components/BrazeIcon/BrazeIcon.docs.mdx","webpack:///../core/src/components/BrazeIcon/BrazeIcon.stories.tsx","webpack:///../core/src/components/BrazeIcon/BrazeIcon.tsx","webpack:///../core/src/components/BrazeIcon/StyledBrazeIcon.ts","webpack:///../core/src/components/BrazeIcon/index.ts","webpack:///../core/src/components/Button/Button.docs.mdx","webpack:///../core/src/components/Button/Button.stories.tsx","webpack:///../core/src/components/Button/Button.tsx","webpack:///../core/src/components/Button/ButtonContent/ButtonContent.tsx","webpack:///../core/src/components/Button/ButtonContent/StyledButtonContent.ts","webpack:///../core/src/components/Button/ButtonContent/index.ts","webpack:///../core/src/components/Button/LoadedWithIcon/LoadedWithIcon.tsx","webpack:///../core/src/components/Button/LoadedWithIcon/StyledLoadedWithIcon.ts","webpack:///../core/src/components/Button/LoadedWithIcon/index.ts","webpack:///../core/src/components/Button/LoadingIconWithGradient/LoadingIconWithGradient.tsx","webpack:///../core/src/components/Button/LoadingIconWithGradient/StyledLoadingIconWithGradient.ts","webpack:///../core/src/components/Button/LoadingIconWithGradient/index.ts","webpack:///../core/src/components/Button/StyledButton.ts","webpack:///../core/src/components/Button/index.ts","webpack:///../core/src/components/ButtonGroup/ButtonGroup.docs.mdx","webpack:///../core/src/components/ButtonGroup/ButtonGroup.stories.tsx","webpack:///../core/src/components/ButtonGroup/ButtonGroup.tsx","webpack:///../core/src/components/ButtonGroup/StyledButtonGroup.ts","webpack:///../core/src/components/ButtonGroup/index.ts","webpack:///../core/src/components/Checkbox/Checkbox.docs.mdx","webpack:///../core/src/components/Checkbox/Checkbox.stories.tsx","webpack:///../core/src/components/Checkbox/Checkbox.tsx","webpack:///../core/src/components/Checkbox/CheckboxContainer/CheckboxContainer.tsx","webpack:///../core/src/components/Checkbox/CheckboxContainer/index.ts","webpack:///../core/src/components/Checkbox/CheckboxIcon/CheckboxIcon.tsx","webpack:///../core/src/components/Checkbox/CheckboxIcon/index.ts","webpack:///../core/src/components/Checkbox/CheckboxLabel/CheckboxLabel.tsx","webpack:///../core/src/components/Checkbox/CheckboxLabel/index.ts","webpack:///../core/src/components/Checkbox/CheckedPolyline/CheckedPolyline.tsx","webpack:///../core/src/components/Checkbox/CheckedPolyline/index.ts","webpack:///../core/src/components/Checkbox/HiddenCheckbox/HiddenCheckbox.tsx","webpack:///../core/src/components/Checkbox/HiddenCheckbox/index.ts","webpack:///../core/src/components/Checkbox/IndeterminatePolyline/IndeterminatePolyline.tsx","webpack:///../core/src/components/Checkbox/IndeterminatePolyline/index.ts","webpack:///../core/src/components/Checkbox/StyledCheckbox/StyledCheckbox.ts","webpack:///../core/src/components/Checkbox/StyledCheckbox/index.ts","webpack:///../core/src/components/Checkbox/index.ts","webpack:///../core/src/components/CloseButton/CloseButton.docs.mdx","webpack:///../core/src/components/CloseButton/CloseButton.stories.tsx","webpack:///../core/src/components/CloseButton/CloseButton.tsx","webpack:///../core/src/components/CloseButton/StyledCloseButton/StyledCloseButton.ts","webpack:///../core/src/components/CloseButton/StyledCloseButton/index.ts","webpack:///../core/src/components/CloseButton/index.ts","webpack:///../core/src/components/Collapsible/Collapsible.stories.mdx","webpack:///../core/src/components/Collapsible/Collapsible.tsx","webpack:///../core/src/components/Collapsible/StyledCollapsible.ts","webpack:///../core/src/components/Collapsible/index.ts","webpack:///../core/src/components/CollapsibleBody/CollapsibleBody.tsx","webpack:///../core/src/components/CollapsibleBody/StyledCollapsibleBody.ts","webpack:///../core/src/components/CollapsibleBody/index.ts","webpack:///../core/src/components/CollapsibleButton/CollapsibleButton.tsx","webpack:///../core/src/components/CollapsibleButton/StyledCollapsibleButton.ts","webpack:///../core/src/components/CollapsibleButton/index.ts","webpack:///../core/src/components/CollapsibleContext/CollapsibleContext.tsx","webpack:///../core/src/components/CollapsibleContext/index.ts","webpack:///../core/src/components/CollapsibleHeader/CollapsibleHeader.tsx","webpack:///../core/src/components/CollapsibleHeader/index.ts","webpack:///../core/src/components/CollapsibleHeaderText/CollapsibleHeaderText.tsx","webpack:///../core/src/components/CollapsibleHeaderText/StyledCollapsibleHeaderText.ts","webpack:///../core/src/components/CollapsibleHeaderText/index.ts","webpack:///../core/src/components/CollapsibleIconButton/CollapsibleIconButton.tsx","webpack:///../core/src/components/CollapsibleIconButton/index.ts","webpack:///../core/src/components/CollapsibleList/CollapsibleList.tsx","webpack:///../core/src/components/CollapsibleList/StyledCollapsibleList.ts","webpack:///../core/src/components/CollapsibleList/index.ts","webpack:///../core/src/components/CollapsibleListItem/CollapsibleListItem.tsx","webpack:///../core/src/components/CollapsibleListItem/StyledCollapsibleListItem.ts","webpack:///../core/src/components/CollapsibleListItem/index.ts","webpack:///../core/src/components/CopyField/CopyField.docs.mdx","webpack:///../core/src/components/CopyField/CopyField.stories.tsx","webpack:///../core/src/components/CopyField/CopyField.tsx","webpack:///../core/src/components/CopyField/StyledCopyField.ts","webpack:///../core/src/components/CopyField/index.ts","webpack:///../core/src/components/EmptyState/EmptyState.stories.mdx","webpack:///../core/src/components/EmptyState/EmptyState.ts","webpack:///../core/src/components/EmptyState/index.ts","webpack:///../core/src/components/EmptyStateButtonGroup/EmptyStateButtonGroup.tsx","webpack:///../core/src/components/EmptyStateButtonGroup/index.ts","webpack:///../core/src/components/EmptyStateHeading/EmptyStateHeading.tsx","webpack:///../core/src/components/EmptyStateHeading/index.ts","webpack:///../core/src/components/EmptyStateIcon/EmptyStateIcon.tsx","webpack:///../core/src/components/EmptyStateIcon/index.ts","webpack:///../core/src/components/EmptyStateText/EmptyStateText.tsx","webpack:///../core/src/components/EmptyStateText/index.ts","webpack:///../core/src/components/FieldLabel/FieldLabel.docs.mdx","webpack:///../core/src/components/FieldLabel/FieldLabel.stories.tsx","webpack:///../core/src/components/FieldLabel/FieldLabel.tsx","webpack:///../core/src/components/FieldLabel/FieldLabelEnforceText.tsx","webpack:///../core/src/components/FieldLabel/FieldLabelInfoIconAndPopover.tsx","webpack:///../core/src/components/FieldLabel/FieldLabelInfoIconButton.tsx","webpack:///../core/src/components/FieldLabel/StyledFieldLabel.ts","webpack:///../core/src/components/FieldLabel/StyledFieldLabelInfoIconButton.tsx","webpack:///../core/src/components/FieldLabel/hooks/useFieldLabelPopoverKeyboardAccessibilityEvents.ts","webpack:///../core/src/components/FieldLabel/index.ts","webpack:///../core/src/components/FieldLabel/storybookHelpers.tsx","webpack:///../core/src/components/Flex/Flex.docs.mdx","webpack:///../core/src/components/Flex/Flex.stories.tsx","webpack:///../core/src/components/Flex/Flex.tsx","webpack:///../core/src/components/Flex/StyledFlex.tsx","webpack:///../core/src/components/Flex/getFlexCss/getFlexCss.ts","webpack:///../core/src/components/Flex/getFlexCss/index.ts","webpack:///../core/src/components/Flex/index.ts","webpack:///../core/src/components/FlexBox/FlexBox.docs.mdx","webpack:///../core/src/components/FlexBox/FlexBox.stories.tsx","webpack:///../core/src/components/FlexBox/FlexBox.tsx","webpack:///../core/src/components/FlexBox/StyledFlexBox.tsx","webpack:///../core/src/components/FlexBox/index.ts","webpack:///../core/src/components/FormGroup/FormGroup.stories.mdx","webpack:///../core/src/components/FormGroup/FormGroup.tsx","webpack:///../core/src/components/FormGroup/StyledFormGroup.ts","webpack:///../core/src/components/FormGroup/index.ts","webpack:///../core/src/components/FormGroupLegend/FormGroupLegend.tsx","webpack:///../core/src/components/FormGroupLegend/StyledFormGroupLegend.ts","webpack:///../core/src/components/FormGroupLegend/index.ts","webpack:///../core/src/components/Heading/Heading.docs.mdx","webpack:///../core/src/components/Heading/Heading.stories.tsx","webpack:///../core/src/components/Heading/Heading.tsx","webpack:///../core/src/components/Heading/StyledHeading.ts","webpack:///../core/src/components/Heading/index.ts","webpack:///../core/src/components/HelpText/HelpText.tsx","webpack:///../core/src/components/HelpText/StyledHelpText.ts","webpack:///../core/src/components/HelpText/index.ts","webpack:///../core/src/components/Icon/Icon.docs.mdx","webpack:///../core/src/components/Icon/Icon.stories.tsx","webpack:///../core/src/components/Icon/Icon.tsx","webpack:///../core/src/components/Icon/StyledIcon.tsx","webpack:///../core/src/components/Icon/braze-icons/brazeIcons.ts","webpack:///../core/src/components/Icon/braze-icons/create.ts","webpack:///../core/src/components/Icon/braze-icons/dragAndDrop.ts","webpack:///../core/src/components/Icon/braze-icons/html.ts","webpack:///../core/src/components/Icon/braze-icons/index.ts","webpack:///../core/src/components/Icon/braze-icons/push.ts","webpack:///../core/src/components/Icon/index.ts","webpack:///../core/src/components/IconButton/IconButton.docs.mdx","webpack:///../core/src/components/IconButton/IconButton.stories.tsx","webpack:///../core/src/components/IconButton/IconButton.tsx","webpack:///../core/src/components/IconButton/StyledIconButton.ts","webpack:///../core/src/components/IconButton/index.ts","webpack:///../core/src/components/InlineInput/InlineInput.stories.mdx","webpack:///../core/src/components/InlineInput/InlineInput.tsx","webpack:///../core/src/components/InlineInput/InlineInputEditMode/InlineInputEditMode.tsx","webpack:///../core/src/components/InlineInput/InlineInputEditMode/StyledInlineInputEditMode.ts","webpack:///../core/src/components/InlineInput/InlineInputEditMode/index.ts","webpack:///../core/src/components/InlineInput/InlineInputViewMode/InlineInputViewMode.tsx","webpack:///../core/src/components/InlineInput/InlineInputViewMode/StyledInlineInputViewMode.ts","webpack:///../core/src/components/InlineInput/InlineInputViewMode/index.ts","webpack:///../core/src/components/InlineInput/index.ts","webpack:///../core/src/components/Input/Input.docs.mdx","webpack:///../core/src/components/Input/Input.stories.tsx","webpack:///../core/src/components/Input/Input.tsx","webpack:///../core/src/components/Input/StyledInput.ts","webpack:///../core/src/components/Input/index.ts","webpack:///../core/src/components/InputGroup/InputGroup.stories.mdx","webpack:///../core/src/components/InputGroup/InputGroup.tsx","webpack:///../core/src/components/InputGroup/StyledInputGroup.ts","webpack:///../core/src/components/InputGroup/index.ts","webpack:///../core/src/components/InputGroupAddon/InputGroupAddon.tsx","webpack:///../core/src/components/InputGroupAddon/StyledInputGroupAddon.ts","webpack:///../core/src/components/InputGroupAddon/index.ts","webpack:///../core/src/components/InputGroupContext/InputGroupContext.tsx","webpack:///../core/src/components/InputGroupContext/index.ts","webpack:///../core/src/components/Label/Label.docs.mdx","webpack:///../core/src/components/Label/Label.stories.tsx","webpack:///../core/src/components/Label/Label.tsx","webpack:///../core/src/components/Label/StyledLabel.ts","webpack:///../core/src/components/Label/index.ts","webpack:///../core/src/components/LevelsContext/LevelsContext.tsx","webpack:///../core/src/components/LevelsContext/index.ts","webpack:///../core/src/components/Link/Link.docs.mdx","webpack:///../core/src/components/Link/Link.stories.tsx","webpack:///../core/src/components/Link/Link.tsx","webpack:///../core/src/components/Link/StyledLink.tsx","webpack:///../core/src/components/Link/index.ts","webpack:///../core/src/components/LoremIpsum/LoremIpsum.docs.mdx","webpack:///../core/src/components/LoremIpsum/LoremIpsum.stories.tsx","webpack:///../core/src/components/LoremIpsum/LoremIpsum.tsx","webpack:///../core/src/components/LoremIpsum/index.ts","webpack:///../core/src/components/Menu/Menu.docs.mdx","webpack:///../core/src/components/Menu/Menu.stories.tsx","webpack:///../core/src/components/Menu/Menu.tsx","webpack:///../core/src/components/Menu/StyledMenu.ts","webpack:///../core/src/components/Menu/getKey/getKey.ts","webpack:///../core/src/components/Menu/getKey/index.ts","webpack:///../core/src/components/Menu/index.ts","webpack:///../core/src/components/Menu/useMenuA11y/index.ts","webpack:///../core/src/components/Menu/useMenuA11y/useMenuA11y.ts","webpack:///../core/src/components/MenuActionButton/MenuActionButton.tsx","webpack:///../core/src/components/MenuActionButton/index.ts","webpack:///../core/src/components/MenuButton/MenuButton.tsx","webpack:///../core/src/components/MenuButton/StyledMenuButton.ts","webpack:///../core/src/components/MenuButton/index.ts","webpack:///../core/src/components/MenuCategoryButton/MenuCategoryButton.tsx","webpack:///../core/src/components/MenuCategoryButton/index.ts","webpack:///../core/src/components/MenuGroup/MenuGroup.tsx","webpack:///../core/src/components/MenuGroup/StyledMenuGroup.ts","webpack:///../core/src/components/MenuGroup/index.ts","webpack:///../core/src/components/Modal/Modal.docs.mdx","webpack:///../core/src/components/Modal/Modal.stories.tsx","webpack:///../core/src/components/Modal/Modal.tsx","webpack:///../core/src/components/Modal/ModalBackdrop/ModalBackdrop.tsx","webpack:///../core/src/components/Modal/ModalBackdrop/StyledModalBackdrop.ts","webpack:///../core/src/components/Modal/ModalBackdrop/index.ts","webpack:///../core/src/components/Modal/ModalContent/ModalContent.tsx","webpack:///../core/src/components/Modal/ModalContent/StyledModalContent.ts","webpack:///../core/src/components/Modal/ModalContent/index.ts","webpack:///../core/src/components/Modal/ModalDialog/ModalDialog.tsx","webpack:///../core/src/components/Modal/ModalDialog/StyledModalDialog.ts","webpack:///../core/src/components/Modal/ModalDialog/index.ts","webpack:///../core/src/components/Modal/StyledModal.ts","webpack:///../core/src/components/Modal/index.ts","webpack:///../core/src/components/Modal/useModalLevel/index.ts","webpack:///../core/src/components/Modal/useModalLevel/useModalLevel.ts","webpack:///../core/src/components/ModalBody/ModalBody.tsx","webpack:///../core/src/components/ModalBody/StyledModalBody.ts","webpack:///../core/src/components/ModalBody/index.ts","webpack:///../core/src/components/ModalContext/ModalContext.tsx","webpack:///../core/src/components/ModalContext/index.ts","webpack:///../core/src/components/ModalFooter/ModalFooter.tsx","webpack:///../core/src/components/ModalFooter/StyledModalFooter.ts","webpack:///../core/src/components/ModalFooter/index.ts","webpack:///../core/src/components/ModalHeading/ModalHeading.tsx","webpack:///../core/src/components/ModalHeading/StyledModalHeading.ts","webpack:///../core/src/components/ModalHeading/index.ts","webpack:///../core/src/components/NumberInput/NumberInput.stories.mdx","webpack:///../core/src/components/NumberInput/NumberInput.tsx","webpack:///../core/src/components/NumberInput/NumberInputButton/NumberInputButton.tsx","webpack:///../core/src/components/NumberInput/NumberInputButton/StyledNumberInputButton.ts","webpack:///../core/src/components/NumberInput/NumberInputButton/index.ts","webpack:///../core/src/components/NumberInput/StyledNumberInput.ts","webpack:///../core/src/components/NumberInput/index.ts","webpack:///../core/src/components/Panel/Panel.docs.mdx","webpack:///../core/src/components/Panel/Panel.stories.tsx","webpack:///../core/src/components/Panel/Panel.tsx","webpack:///../core/src/components/Panel/StyledPanel.ts","webpack:///../core/src/components/Panel/index.ts","webpack:///../core/src/components/PanelBody/PanelBody.tsx","webpack:///../core/src/components/PanelBody/StyledPanelBody.ts","webpack:///../core/src/components/PanelBody/index.ts","webpack:///../core/src/components/PanelHeader/PanelHeader.tsx","webpack:///../core/src/components/PanelHeader/StyledPanelHeader.ts","webpack:///../core/src/components/PanelHeader/index.ts","webpack:///../core/src/components/Popover/Popover.docs.mdx","webpack:///../core/src/components/Popover/Popover.stories.tsx","webpack:///../core/src/components/Popover/Popover.tsx","webpack:///../core/src/components/Popover/StyledPopover.ts","webpack:///../core/src/components/Popover/index.ts","webpack:///../core/src/components/PopoverBody/PopoverBody.tsx","webpack:///../core/src/components/PopoverBody/index.ts","webpack:///../core/src/components/PopoverHeading/PopoverHeading.tsx","webpack:///../core/src/components/PopoverHeading/index.ts","webpack:///../core/src/components/Popper/Popper.docs.mdx","webpack:///../core/src/components/Popper/Popper.stories.tsx","webpack:///../core/src/components/Popper/Popper.tsx","webpack:///../core/src/components/Popper/PopperContext/PopperContext.tsx","webpack:///../core/src/components/Popper/PopperContext/index.ts","webpack:///../core/src/components/Popper/PopperManager/PopperManager.tsx","webpack:///../core/src/components/Popper/PopperManager/index.ts","webpack:///../core/src/components/Popper/PopperRenderer/PopperRenderer.tsx","webpack:///../core/src/components/Popper/PopperRenderer/index.ts","webpack:///../core/src/components/Popper/StyledPopper.ts","webpack:///../core/src/components/Popper/index.ts","webpack:///../core/src/components/Popper/useHandleClose/index.ts","webpack:///../core/src/components/Popper/useHandleClose/useHandleClose.ts","webpack:///../core/src/components/Popper/useHandleOpen/index.ts","webpack:///../core/src/components/Popper/useHandleOpen/useHandleOpen.ts","webpack:///../core/src/components/Popper/useMouseLeave/index.ts","webpack:///../core/src/components/Popper/useMouseLeave/useMouseLeave.ts","webpack:///../core/src/components/Popper/useOutsideClick/index.ts","webpack:///../core/src/components/Popper/useOutsideClick/useOutsideClick.ts","webpack:///../core/src/components/Popper/usePopper/index.ts","webpack:///../core/src/components/Popper/usePopper/usePopper.ts","webpack:///../core/src/components/Popper/usePopperEvents/index.ts","webpack:///../core/src/components/Popper/usePopperEvents/usePopperEvents.ts","webpack:///../core/src/components/Popper/usePopperPlacement/index.ts","webpack:///../core/src/components/Popper/usePopperPlacement/usePopperPlacement.ts","webpack:///../core/src/components/Popper/useScrollListener/index.ts","webpack:///../core/src/components/Popper/useScrollListener/useScrollListener.ts","webpack:///../core/src/components/Popper/utils/extractInteractiveChildren/extractInteractiveChildren.ts","webpack:///../core/src/components/Popper/utils/extractInteractiveChildren/index.ts","webpack:///../core/src/components/Popper/utils/getAutoPlacement/getAutoPlacement.ts","webpack:///../core/src/components/Popper/utils/getAutoPlacement/index.ts","webpack:///../core/src/components/Popper/utils/getDelay/getDelay.ts","webpack:///../core/src/components/Popper/utils/getDelay/index.ts","webpack:///../core/src/components/Popper/utils/getElement/getElement.ts","webpack:///../core/src/components/Popper/utils/getElement/index.ts","webpack:///../core/src/components/Popper/utils/getPopperDimensions/getPopperDimensions.ts","webpack:///../core/src/components/Popper/utils/getPopperDimensions/index.ts","webpack:///../core/src/components/Popper/utils/getTargetCoordinates/getTargetCoordinates.ts","webpack:///../core/src/components/Popper/utils/getTargetCoordinates/index.ts","webpack:///../core/src/components/Popper/utils/horizontalPlacementSelector/horizontalPlacementSelector.ts","webpack:///../core/src/components/Popper/utils/horizontalPlacementSelector/index.ts","webpack:///../core/src/components/Popper/utils/index.ts","webpack:///../core/src/components/Popper/utils/isMouseOverTarget/index.ts","webpack:///../core/src/components/Popper/utils/isMouseOverTarget/isMouseOverTarget.ts","webpack:///../core/src/components/Popper/utils/makePopperPlacement/index.ts","webpack:///../core/src/components/Popper/utils/makePopperPlacement/makePopperPlacement.ts","webpack:///../core/src/components/Popper/utils/normalizeDimension/index.ts","webpack:///../core/src/components/Popper/utils/normalizeDimension/normalizeDimension.ts","webpack:///../core/src/components/Popper/utils/verticalPlacementSelector/index.ts","webpack:///../core/src/components/Popper/utils/verticalPlacementSelector/verticalPlacementSelector.ts","webpack:///../core/src/components/Portal/Portal.docs.mdx","webpack:///../core/src/components/Portal/Portal.stories.tsx","webpack:///../core/src/components/Portal/Portal.tsx","webpack:///../core/src/components/Portal/index.ts","webpack:///../core/src/components/RadioButton/RadioButton.docs.mdx","webpack:///../core/src/components/RadioButton/RadioButton.stories.tsx","webpack:///../core/src/components/RadioButton/RadioButton.tsx","webpack:///../core/src/components/RadioButton/RadioLabel/RadioLabel.tsx","webpack:///../core/src/components/RadioButton/RadioLabel/StyledRadioLabel.ts","webpack:///../core/src/components/RadioButton/RadioLabel/index.ts","webpack:///../core/src/components/RadioButton/StyledRadioButton.ts","webpack:///../core/src/components/RadioButton/index.ts","webpack:///../core/src/components/RadioButtonGroup/RadioButtonGroup.stories.mdx","webpack:///../core/src/components/RadioButtonGroup/RadioButtonGroup.tsx","webpack:///../core/src/components/RadioButtonGroup/index.ts","webpack:///../core/src/components/ScreenReaderText/ScreenReaderText.stories.mdx","webpack:///../core/src/components/ScreenReaderText/ScreenReaderText.ts","webpack:///../core/src/components/ScreenReaderText/index.ts","webpack:///../core/src/components/SimpleBannerAlert/SimpleBannerAlert.tsx","webpack:///../core/src/components/SimpleBannerAlert/StyledBannerAlert.ts","webpack:///../core/src/components/SimpleBannerAlert/index.ts","webpack:///../core/src/components/SkeletonLoader/SkeletonLoader.stories.mdx","webpack:///../core/src/components/SkeletonLoader/SkeletonLoader.ts","webpack:///../core/src/components/SkeletonLoader/index.ts","webpack:///../core/src/components/StatusText/StatusText.tsx","webpack:///../core/src/components/StatusText/StyledStatusText.ts","webpack:///../core/src/components/StatusText/index.ts","webpack:///../core/src/components/Switch/StyledSwitch.ts","webpack:///../core/src/components/Switch/Switch.docs.mdx","webpack:///../core/src/components/Switch/Switch.stories.tsx","webpack:///../core/src/components/Switch/Switch.tsx","webpack:///../core/src/components/Switch/SwitchKnob/SwitchKnob.ts","webpack:///../core/src/components/Switch/SwitchKnob/index.ts","webpack:///../core/src/components/Switch/SwitchLabel/SwitchLabel.ts","webpack:///../core/src/components/Switch/SwitchLabel/index.ts","webpack:///../core/src/components/Switch/index.ts","webpack:///../core/src/components/Tab/StyledTab.ts","webpack:///../core/src/components/Tab/Tab.tsx","webpack:///../core/src/components/Tab/index.ts","webpack:///../core/src/components/TabContent/StyledTabContent.ts","webpack:///../core/src/components/TabContent/TabContent.tsx","webpack:///../core/src/components/TabContent/index.ts","webpack:///../core/src/components/Table/StyledTable.ts","webpack:///../core/src/components/Table/Table.docs.mdx","webpack:///../core/src/components/Table/Table.stories.tsx","webpack:///../core/src/components/Table/Table.tsx","webpack:///../core/src/components/Table/index.ts","webpack:///../core/src/components/TableBody/TableBody.tsx","webpack:///../core/src/components/TableBody/index.ts","webpack:///../core/src/components/TableCaption/TableCaption.tsx","webpack:///../core/src/components/TableCaption/index.ts","webpack:///../core/src/components/TableCell/StyledTableCell.ts","webpack:///../core/src/components/TableCell/TableCell.tsx","webpack:///../core/src/components/TableCell/index.ts","webpack:///../core/src/components/TableFooter/TableFooter.tsx","webpack:///../core/src/components/TableFooter/index.ts","webpack:///../core/src/components/TableHeader/StyledTableHeader.ts","webpack:///../core/src/components/TableHeader/TableHeader.tsx","webpack:///../core/src/components/TableHeader/index.ts","webpack:///../core/src/components/TableHeaderCell/SortIcon.ts","webpack:///../core/src/components/TableHeaderCell/StyledTableHeaderCell.ts","webpack:///../core/src/components/TableHeaderCell/TableHeaderCell.tsx","webpack:///../core/src/components/TableHeaderCell/index.ts","webpack:///../core/src/components/TableHeaderCell/utils/tooltipText.ts","webpack:///../core/src/components/TableRow/StyledTableRow.ts","webpack:///../core/src/components/TableRow/TableRow.tsx","webpack:///../core/src/components/TableRow/index.ts","webpack:///../core/src/components/Tabs/TabNavigator/TabNavigator.tsx","webpack:///../core/src/components/Tabs/TabNavigator/index.ts","webpack:///../core/src/components/Tabs/Tabs.stories.mdx","webpack:///../core/src/components/Tabs/Tabs.tsx","webpack:///../core/src/components/Tabs/index.ts","webpack:///../core/src/components/TabsContext/TabsContext.tsx","webpack:///../core/src/components/TabsContext/index.ts","webpack:///../core/src/components/Textarea/StyledTextarea.ts","webpack:///../core/src/components/Textarea/Textarea.stories.mdx","webpack:///../core/src/components/Textarea/Textarea.tsx","webpack:///../core/src/components/Textarea/index.ts","webpack:///../core/src/components/Toaster/StyledToaster.ts","webpack:///../core/src/components/Toaster/Toast/StyledToast.ts","webpack:///../core/src/components/Toaster/Toast/Toast.tsx","webpack:///../core/src/components/Toaster/Toast/index.ts","webpack:///../core/src/components/Toaster/ToastCloseButton/StyledToastCloseButton.ts","webpack:///../core/src/components/Toaster/ToastCloseButton/ToastCloseButton.tsx","webpack:///../core/src/components/Toaster/ToastCloseButton/index.ts","webpack:///../core/src/components/Toaster/Toaster.docs.mdx","webpack:///../core/src/components/Toaster/Toaster.stories.tsx","webpack:///../core/src/components/Toaster/Toaster.tsx","webpack:///../core/src/components/Toaster/index.ts","webpack:///../core/src/components/Tooltip/StyledTooltip.ts","webpack:///../core/src/components/Tooltip/Tooltip.docs.mdx","webpack:///../core/src/components/Tooltip/Tooltip.stories.tsx","webpack:///../core/src/components/Tooltip/Tooltip.tsx","webpack:///../core/src/components/Tooltip/index.ts","webpack:///../core/src/components/UncontrolledTab/UncontrolledTab.tsx","webpack:///../core/src/components/UncontrolledTab/index.ts","webpack:///../core/src/components/UncontrolledTabContent/UncontrolledTabContent.tsx","webpack:///../core/src/components/UncontrolledTabContent/index.ts","webpack:///../core/src/components/UncontrolledTabs/UncontrolledTabs.stories.mdx","webpack:///../core/src/components/UncontrolledTabs/UncontrolledTabs.tsx","webpack:///../core/src/components/UncontrolledTabs/index.ts","webpack:///../core/src/components/UncontrolledTabsContext/UncontrolledTabsContext.tsx","webpack:///../core/src/components/UncontrolledTabsContext/index.ts","webpack:///../core/src/components/UncontrolledTabsContext/onChangeDefault/index.ts","webpack:///../core/src/components/UncontrolledTabsContext/onChangeDefault/onChangeDefault.ts","webpack:///../core/src/components/UncontrolledTabsContext/useActiveTab/index.ts","webpack:///../core/src/components/UncontrolledTabsContext/useActiveTab/useActiveTab.ts","webpack:///../core/src/components/UncontrolledTooltip/UncontrolledTooltip.docs.mdx","webpack:///../core/src/components/UncontrolledTooltip/UncontrolledTooltip.stories.tsx","webpack:///../core/src/components/UncontrolledTooltip/UncontrolledTooltip.tsx","webpack:///../core/src/components/UncontrolledTooltip/index.ts","webpack:///../core/src/components/UntransitionedBannerAlert/StyledBannerContent.ts","webpack:///../core/src/components/UntransitionedBannerAlert/UntransitionedBannerAlert.tsx","webpack:///../core/src/components/UntransitionedBannerAlert/index.ts","webpack:///../core/src/index.ts","webpack:///../core/src/services/getSizeSpacing/getSizeSpacing.ts","webpack:///../core/src/services/getSizeSpacing/index.ts","webpack:///../core/src/styles.css?a520","webpack:///../hooks/src/hooks/useIME/index.ts","webpack:///../hooks/src/hooks/useIME/useIME.ts","webpack:///../hooks/src/hooks/useId/index.ts","webpack:///../hooks/src/hooks/useId/useId.docs.mdx","webpack:///../hooks/src/hooks/useId/useId.stories.tsx","webpack:///../hooks/src/hooks/useId/useId.ts","webpack:///../hooks/src/hooks/useLoadingButton/index.ts","webpack:///../hooks/src/hooks/useLoadingButton/useLoadingButton.ts","webpack:///../hooks/src/index.ts","webpack:///../i18n-dev/src/components/MockUsage.tsx","webpack:///../i18n-dev/src/index.ts","webpack:///../i18n-dev/src/setupI18n.ts","webpack:///../i18n-dev/src/useI18nNamespace.stories.mdx","webpack:///../translations/src/index.ts","webpack:///../translations/src/useCoreI18nNamespace.ts","webpack:///\\.)(","webpack:///./.storybook/preview.js","webpack:///./.storybook/preview.js-generated-config-entry.js","webpack:///./generated-stories-entry.js","webpack:///./stories/ContentStrategy.stories.mdx","webpack:///./stories/Contributing/Code.stories.mdx","webpack:///./stories/Contributing/ComponentStyling.stories.mdx","webpack:///./stories/Contributing/Design.stories.mdx","webpack:///./stories/Contributing/Documentation.stories.mdx","webpack:///./stories/Contributing/Overview.stories.mdx","webpack:///./stories/FAQs.stories.mdx","webpack:///./stories/GettingStarted.stories.mdx","webpack:///./stories/Releases.stories.mdx","webpack:///./stories/StatusAndRoadmap.stories.mdx","webpack:///./stories/Support.stories.mdx","webpack:///./stories/accessibility/A11yBestPractice.stories.mdx","webpack:///./stories/accessibility/Accessibility.stories.mdx","webpack:///./stories/accessibility/AccessibilityChecklist.stories.mdx","webpack:///./storybook-init-framework-entry.js","webpack:///./util.inspect (ignored)"],"sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = require(\"-!../../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/cjs.js??ref--11-1!../../../node_modules/@storybook/builder-webpack4/node_modules/postcss-loader/dist/cjs.js??ref--11-2!react-toastify/dist/ReactToastify.min.css\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.id, \"/* import css file for React Toastify */\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"alertmodal\"\n    }}>{`AlertModal`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`AlertModal`}</inlineCode>{` is a commons component that aims to abstract away\nthe frequent need to alert the user that something did or will happen\nbased on an action they may take.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`AlertModal`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`To indicate the type of information that is being provided, you can set\n`}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{`. By default, `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`info`}</inlineCode>{` as shown below.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: Head over to the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to access the various knobs\navailable for this component.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-alerts-alertmodal--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-hook\"\n    }}>{`With hook`}</h3>\n    <p>{`To further simplify usage, we also provide a `}<inlineCode parentName=\"p\">{`useAlertModal`}</inlineCode>{` hook to which\nwhich returns an object containing the `}<inlineCode parentName=\"p\">{`isOpen`}</inlineCode>{` state and `}<inlineCode parentName=\"p\">{`toggle`}</inlineCode>{` function.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-alerts-alertmodal--with-hook\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"multiple-actions\"\n    }}>{`Multiple Actions`}</h3>\n    <p>{`You can have multiple actions in your alert modal.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-alerts-alertmodal--multiple-actions-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"different-sizes\"\n    }}>{`Different Sizes`}</h3>\n    <p>{`You can render your alert modal in different sizes depending on your content.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Open the \"canvas\" tab to see the different sizes in action!`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The default size is \"md\" - or medium`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-alerts-alertmodal--different-sizes\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"danger-use\"\n    }}>{`Danger use`}</h3>\n    <p>{`To indicate that something dangerous might happen, you can set\n`}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`danger`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-alerts-alertmodal--danger-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"success-use\"\n    }}>{`Success use`}</h3>\n    <p>{`To indicate that something desirable happened, you can set\n`}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`success`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-alerts-alertmodal--success-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"warning-use\"\n    }}>{`Warning use`}</h3>\n    <p>{`To indicate that potentially undesirable things may happen,\nyou can set `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`warning`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-alerts-alertmodal--warning-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { AlertModal, useAlertModal } from \"@braze/beacon-commons\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`buttonText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text for button inside modal footer`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`heading`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`modal heading text`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`info`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`warning`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`success`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`info`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`intent of the alert modal representing the type of information that should be conveyed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onButtonClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to be called when user clicks on button in modal footer`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(`}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`xl`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`md`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size of the `}<inlineCode parentName=\"td\">{`Modal`}</inlineCode>{` to be displayed`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport { Button } from \\\"@braze/beacon-core\\\";\\n\\nimport { AlertModalHeading } from \\\"../AlertModalHeading\\\";\\nimport { AlertModalButton } from \\\"../AlertModalButton\\\";\\nimport { AlertModalBody } from \\\"../AlertModalBody\\\";\\nimport { AlertModalFooter } from \\\"../AlertModalFooter\\\";\\n\\nimport page from \\\"./AlertModal.docs.mdx\\\";\\n\\nimport { AlertModal, AlertModalProps, useAlertModal } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Commons/Alerts/AlertModal\\\",\\n  component: AlertModal,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = (\\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\\n) => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={toggle}>Click to open modal</Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              {args.modalButtonText}\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nBasicUse.argTypes = {\\n  modalHeading: {\\n    label: \\\"Modal alert heading\\\",\\n  },\\n  modalButtonText: {\\n    label: \\\"Modal button text\\\",\\n  },\\n};\\n\\nBasicUse.args = {\\n  intent: \\\"info\\\",\\n  size: \\\"md\\\",\\n  modalHeading: \\\"Some heading\\\",\\n  modalButtonText: \\\"Click me\\\",\\n};\\n\\nexport const WithHook = (\\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\\n) => {\\n  const [isOpen, toggle] = useAlertModal();\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={toggle}>Click to open modal</Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              {args.modalButtonText}\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithHook.storyName = \\\"with hook\\\";\\n\\nWithHook.argTypes = {\\n  modalHeading: {\\n    label: \\\"Modal alert heading\\\",\\n  },\\n  modalButtonText: {\\n    label: \\\"Modal button text\\\",\\n  },\\n};\\n\\nWithHook.args = {\\n  intent: \\\"info\\\",\\n  modalHeading: \\\"Some heading\\\",\\n  modalButtonText: \\\"Click me\\\",\\n};\\n\\nexport const MultipleActionsUse = () => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"warning\\\" onClick={toggle}>\\n        Click to open modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"warning\\\">\\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalButton\\n            variant=\\\"quaternary\\\"\\n            onClick={action(\\\"Modal quartenary button click\\\")}\\n          >\\n            Nutella\\n          </AlertModalButton>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton\\n              variant=\\\"secondary\\\"\\n              onClick={action(\\\"Modal secondary button click\\\")}\\n            >\\n              Peanut Butter\\n            </AlertModalButton>\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Jelly\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nMultipleActionsUse.storyName = \\\"multiple actions use\\\";\\n\\nexport const DifferentSizes = (args: AlertModalProps) => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"success\\\" onClick={toggle}>\\n        Click to open modal\\n      </Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle} intent=\\\"success\\\">\\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalButton\\n            variant=\\\"quaternary\\\"\\n            onClick={action(\\\"Modal quaternary button click\\\")}\\n          >\\n            Nutella\\n          </AlertModalButton>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton\\n              variant=\\\"secondary\\\"\\n              onClick={action(\\\"Modal secondary button click\\\")}\\n            >\\n              Peanut Butter\\n            </AlertModalButton>\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Jelly\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nDifferentSizes.storyName = \\\"different sizes\\\";\\n\\nDifferentSizes.args = {\\n  size: \\\"lg\\\",\\n};\\n\\nexport const DangerUse = () => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"danger\\\" onClick={toggle}>\\n        Click to open danger modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"danger\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nDangerUse.storyName = \\\"danger use\\\";\\n\\nexport const SuccessUse = () => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"success\\\" onClick={toggle}>\\n        Click to open success modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"success\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nSuccessUse.storyName = \\\"success use\\\";\\n\\nexport const WarningUse = () => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"warning\\\" onClick={toggle}>\\n        Click to open warning modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"warning\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nWarningUse.storyName = \\\"warning use\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":23},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":24,\"line\":23},\"endBody\":{\"col\":1,\"line\":49}},\"WithHook\":{\"startLoc\":{\"col\":24,\"line\":69},\"endLoc\":{\"col\":1,\"line\":94},\"startBody\":{\"col\":24,\"line\":69},\"endBody\":{\"col\":1,\"line\":94}},\"MultipleActionsUse\":{\"startLoc\":{\"col\":34,\"line\":113},\"endLoc\":{\"col\":1,\"line\":151},\"startBody\":{\"col\":34,\"line\":113},\"endBody\":{\"col\":1,\"line\":151}},\"DifferentSizes\":{\"startLoc\":{\"col\":30,\"line\":155},\"endLoc\":{\"col\":1,\"line\":193},\"startBody\":{\"col\":30,\"line\":155},\"endBody\":{\"col\":1,\"line\":193}},\"DangerUse\":{\"startLoc\":{\"col\":25,\"line\":201},\"endLoc\":{\"col\":1,\"line\":227},\"startBody\":{\"col\":25,\"line\":201},\"endBody\":{\"col\":1,\"line\":227}},\"SuccessUse\":{\"startLoc\":{\"col\":26,\"line\":231},\"endLoc\":{\"col\":1,\"line\":257},\"startBody\":{\"col\":26,\"line\":231},\"endBody\":{\"col\":1,\"line\":257}},\"WarningUse\":{\"startLoc\":{\"col\":26,\"line\":261},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":26,\"line\":261},\"endBody\":{\"col\":1,\"line\":287}}};\n    \nimport React from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Button } from \"@braze/beacon-core\";\n\nimport { AlertModalHeading } from \"../AlertModalHeading\";\nimport { AlertModalButton } from \"../AlertModalButton\";\nimport { AlertModalBody } from \"../AlertModalBody\";\nimport { AlertModalFooter } from \"../AlertModalFooter\";\n\nimport page from \"./AlertModal.docs.mdx\";\n\nimport { AlertModal, AlertModalProps, useAlertModal } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Commons/Alerts/AlertModal\",\n  component: AlertModal,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = (\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\n) => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button onClick={toggle}>Click to open modal</Button>\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              {args.modalButtonText}\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nBasicUse.argTypes = {\n  modalHeading: {\n    label: \"Modal alert heading\",\n  },\n  modalButtonText: {\n    label: \"Modal button text\",\n  },\n};\n\nBasicUse.args = {\n  intent: \"info\",\n  size: \"md\",\n  modalHeading: \"Some heading\",\n  modalButtonText: \"Click me\",\n};\n\nexport const WithHook = (\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\n) => {\n  const [isOpen, toggle] = useAlertModal();\n\n  return (\n    <React.Fragment>\n      <Button onClick={toggle}>Click to open modal</Button>\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              {args.modalButtonText}\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nWithHook.storyName = \"with hook\";\n\nWithHook.argTypes = {\n  modalHeading: {\n    label: \"Modal alert heading\",\n  },\n  modalButtonText: {\n    label: \"Modal button text\",\n  },\n};\n\nWithHook.args = {\n  intent: \"info\",\n  modalHeading: \"Some heading\",\n  modalButtonText: \"Click me\",\n};\n\nexport const MultipleActionsUse = () => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"warning\" onClick={toggle}>\n        Click to open modal\n      </Button>\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\"warning\">\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalButton\n            variant=\"quaternary\"\n            onClick={action(\"Modal quartenary button click\")}\n          >\n            Nutella\n          </AlertModalButton>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton\n              variant=\"secondary\"\n              onClick={action(\"Modal secondary button click\")}\n            >\n              Peanut Butter\n            </AlertModalButton>\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Jelly\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nMultipleActionsUse.storyName = \"multiple actions use\";\n\nexport const DifferentSizes = (args: AlertModalProps) => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"success\" onClick={toggle}>\n        Click to open modal\n      </Button>\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle} intent=\"success\">\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalButton\n            variant=\"quaternary\"\n            onClick={action(\"Modal quaternary button click\")}\n          >\n            Nutella\n          </AlertModalButton>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton\n              variant=\"secondary\"\n              onClick={action(\"Modal secondary button click\")}\n            >\n              Peanut Butter\n            </AlertModalButton>\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Jelly\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nDifferentSizes.storyName = \"different sizes\";\n\nDifferentSizes.args = {\n  size: \"lg\",\n};\n\nexport const DangerUse = () => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"danger\" onClick={toggle}>\n        Click to open danger modal\n      </Button>\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\"danger\">\n        <AlertModalHeading>Some heading</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Click me\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nDangerUse.storyName = \"danger use\";\n\nexport const SuccessUse = () => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"success\" onClick={toggle}>\n        Click to open success modal\n      </Button>\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\"success\">\n        <AlertModalHeading>Some heading</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Click me\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nSuccessUse.storyName = \"success use\";\n\nexport const WarningUse = () => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"warning\" onClick={toggle}>\n        Click to open warning modal\n      </Button>\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\"warning\">\n        <AlertModalHeading>Some heading</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Click me\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};\n\nWarningUse.storyName = \"warning use\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(\\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\\n) => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={toggle}>Click to open modal</Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              {args.modalButtonText}\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...BasicUse.parameters };\nWithHook.parameters = { storySource: { source: \"(\\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\\n) => {\\n  const [isOpen, toggle] = useAlertModal();\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={toggle}>Click to open modal</Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              {args.modalButtonText}\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithHook.parameters };\nMultipleActionsUse.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"warning\\\" onClick={toggle}>\\n        Click to open modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"warning\\\">\\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalButton\\n            variant=\\\"quaternary\\\"\\n            onClick={action(\\\"Modal quartenary button click\\\")}\\n          >\\n            Nutella\\n          </AlertModalButton>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton\\n              variant=\\\"secondary\\\"\\n              onClick={action(\\\"Modal secondary button click\\\")}\\n            >\\n              Peanut Butter\\n            </AlertModalButton>\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Jelly\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...MultipleActionsUse.parameters };\nDifferentSizes.parameters = { storySource: { source: \"(args: AlertModalProps) => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"success\\\" onClick={toggle}>\\n        Click to open modal\\n      </Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle} intent=\\\"success\\\">\\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalButton\\n            variant=\\\"quaternary\\\"\\n            onClick={action(\\\"Modal quaternary button click\\\")}\\n          >\\n            Nutella\\n          </AlertModalButton>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton\\n              variant=\\\"secondary\\\"\\n              onClick={action(\\\"Modal secondary button click\\\")}\\n            >\\n              Peanut Butter\\n            </AlertModalButton>\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Jelly\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...DifferentSizes.parameters };\nDangerUse.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"danger\\\" onClick={toggle}>\\n        Click to open danger modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"danger\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...DangerUse.parameters };\nSuccessUse.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"success\\\" onClick={toggle}>\\n        Click to open success modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"success\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...SuccessUse.parameters };\nWarningUse.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"warning\\\" onClick={toggle}>\\n        Click to open warning modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"warning\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...WarningUse.parameters };","import React, { ReactElement } from \"react\";\nimport classNames from \"classnames\";\nimport { Modal } from \"@braze/beacon-core\";\n\nimport { AlertModalIntentContext } from \"../AlertModalIntentContext\";\n\nimport { AlertModalProps } from \"./types\";\n\nexport const AlertModal = ({\n  children,\n  className,\n  intent,\n  size = \"md\",\n  ...props\n}: AlertModalProps): ReactElement => (\n  <Modal\n    {...props}\n    className={classNames([\"bcl-alert-modal\", className])}\n    size={size}\n  >\n    <AlertModalIntentContext.Provider value={intent}>\n      {children}\n    </AlertModalIntentContext.Provider>\n  </Modal>\n);\n\nAlertModal.displayName = \"AlertModal\";\n","export { AlertModal } from \"./AlertModal\";\n\nexport { useAlertModal } from \"./useAlertModal\";\n\nexport type { AlertModalProps } from \"./types\";\n","export { useAlertModal } from \"./useAlertModal\";\n","import { useState } from \"react\";\n\nimport { UseAlertModalResult } from \"../types\";\n\nexport const useAlertModal = (defaultValue = false): UseAlertModalResult => {\n  const [isOpen, setState] = useState(defaultValue);\n  const toggle = () => setState(!isOpen);\n\n  return [isOpen, toggle];\n};\n","import React from \"react\";\nimport { ModalBody } from \"@braze/beacon-core\";\n\nimport { AlertModalBodyProps } from \"./types\";\n\nexport const AlertModalBody = (\n  props: AlertModalBodyProps\n): React.ReactElement => <ModalBody {...props} />;\n\nAlertModalBody.displayName = \"AlertModalBody\";\n","export { AlertModalBody } from \"./AlertModalBody\";\n\nexport type { AlertModalBodyProps } from \"./types\";\n","import React, { useContext, ReactElement } from \"react\";\nimport { Button } from \"@braze/beacon-core\";\n\nimport { AlertModalIntentContext } from \"../AlertModalIntentContext\";\n\nimport { AlertModalButtonProps } from \"./types\";\n\nexport const AlertModalButton = (\n  props: AlertModalButtonProps\n): ReactElement => {\n  const intent = useContext(AlertModalIntentContext);\n\n  return <Button intent={intent} {...props} />;\n};\n\nAlertModalButton.displayName = \"AlertModalButton\";\n","export { AlertModalButton } from \"./AlertModalButton\";\n\nexport type { AlertModalButtonProps } from \"./types\";\n","import React from \"react\";\nimport { ModalFooter } from \"@braze/beacon-core\";\n\nimport { AlertModalFooterProps } from \"./types\";\n\nexport const AlertModalFooter = (\n  props: AlertModalFooterProps\n): React.ReactElement => <ModalFooter {...props} />;\n\nAlertModalFooter.displayName = \"AlertModalFooter\";\n","export { AlertModalFooter } from \"./AlertModalFooter\";\n\nexport type { AlertModalFooterProps } from \"./types\";\n","/**\n * @fileoverview a component that handles the heading UI for an alert modal\n */\nimport React, { useContext, ReactElement } from \"react\";\nimport { Box, Flex, ModalHeading } from \"@braze/beacon-core\";\n\nimport { IconCircle } from \"../IconCircle\";\nimport { AlertModalIntentContext } from \"../AlertModalIntentContext\";\n\nimport { AlertModalHeadingProps } from \"./types\";\n\nexport const AlertModalHeading = ({\n  children,\n  ...props\n}: AlertModalHeadingProps): ReactElement => {\n  const intent = useContext(AlertModalIntentContext);\n\n  return (\n    <ModalHeading {...props}>\n      <Flex inline>\n        <IconCircle intent={intent} />\n        <Box boxMargin={{ left: \"lg\" }}>{children}</Box>\n      </Flex>\n    </ModalHeading>\n  );\n};\n\nAlertModalHeading.displayName = \"AlertModalHeading\";\n","export { AlertModalHeading } from \"./AlertModalHeading\";\n\nexport type { AlertModalHeadingProps } from \"./types\";\n","import { createContext } from \"react\";\n\nimport { AlertModalIntentContextType } from \"./types\";\n\nexport const AlertModalIntentContext =\n  createContext<AlertModalIntentContextType>(\"info\");\n","export { AlertModalIntentContext } from \"./AlertModalIntentContext\";\n\nexport type { AlertModalIntentContextType } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { text, select } from \"@storybook/addon-knobs\";\nimport { IconCircle } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Commons/Icons/IconCircle\" component={IconCircle} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"iconcircle\"\n    }}>{`IconCircle`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`IconCircle`}</inlineCode>{` component is a simple abstraction of the `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{`\ncomponent for common use cases, particularly surrounding alerts.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`IconCircle`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`To indicate the type of information that is being provided, you can set\n`}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{`. By default, `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`info`}</inlineCode>{` as shown below.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-icons-iconcircle--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"danger-use\"\n    }}>{`Danger use`}</h3>\n    <p>{`To indicate that something dangerous might happen, you can set\n`}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`danger`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-icons-iconcircle--danger-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"success-use\"\n    }}>{`Success use`}</h3>\n    <p>{`To indicate that something desirable happened, you can set\n`}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`success`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-icons-iconcircle--success-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"warning-use\"\n    }}>{`Warning use`}</h3>\n    <p>{`To indicate that potentially undesirable things may happen,\nyou can set `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`warning`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"commons-icons-iconcircle--warning-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { IconCircle } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`info`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`warning`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`success`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`info`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`intent of the icon representing the type of information that should be conveyed`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { IntentColorType } from \\\"@braze/beacon-styling\\\";\\n\\nimport page from \\\"./IconCircle.docs.mdx\\\";\\n\\nimport { IconCircle } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Commons/Icons/IconCircle\\\",\\n  component: IconCircle,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = ({\\n  intent,\\n}: {\\n  intent: IntentColorType | \\\"default\\\";\\n}) => {\\n  const actualIntent = intent === \\\"default\\\" ? undefined : intent;\\n\\n  return <IconCircle intent={actualIntent} />;\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nBasicUse.argTypes = {\\n  intent: {\\n    options: [\\\"info\\\", \\\"warning\\\", \\\"success\\\", \\\"danger\\\", \\\"primary\\\", \\\"default\\\"],\\n  },\\n};\\n\\nBasicUse.args = {\\n  intent: \\\"info\\\",\\n};\\n\\nexport const DangerUse = () => {\\n  return <IconCircle intent=\\\"danger\\\" />;\\n};\\n\\nDangerUse.storyName = \\\"danger use\\\";\\n\\nexport const SuccessUse = () => {\\n  return <IconCircle intent=\\\"success\\\" />;\\n};\\n\\nSuccessUse.storyName = \\\"success use\\\";\\n\\nexport const WarningUse = () => {\\n  return <IconCircle intent=\\\"warning\\\" />;\\n};\\n\\nWarningUse.storyName = \\\"warning use\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":17},\"endLoc\":{\"col\":1,\"line\":25},\"startBody\":{\"col\":24,\"line\":17},\"endBody\":{\"col\":1,\"line\":25}},\"DangerUse\":{\"startLoc\":{\"col\":25,\"line\":39},\"endLoc\":{\"col\":1,\"line\":41},\"startBody\":{\"col\":25,\"line\":39},\"endBody\":{\"col\":1,\"line\":41}},\"SuccessUse\":{\"startLoc\":{\"col\":26,\"line\":45},\"endLoc\":{\"col\":1,\"line\":47},\"startBody\":{\"col\":26,\"line\":45},\"endBody\":{\"col\":1,\"line\":47}},\"WarningUse\":{\"startLoc\":{\"col\":26,\"line\":51},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":26,\"line\":51},\"endBody\":{\"col\":1,\"line\":53}}};\n    \nimport React from \"react\";\nimport { IntentColorType } from \"@braze/beacon-styling\";\n\nimport page from \"./IconCircle.docs.mdx\";\n\nimport { IconCircle } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Commons/Icons/IconCircle\",\n  component: IconCircle,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = ({\n  intent,\n}: {\n  intent: IntentColorType | \"default\";\n}) => {\n  const actualIntent = intent === \"default\" ? undefined : intent;\n\n  return <IconCircle intent={actualIntent} />;\n};;\n\nBasicUse.storyName = \"basic use\";\n\nBasicUse.argTypes = {\n  intent: {\n    options: [\"info\", \"warning\", \"success\", \"danger\", \"primary\", \"default\"],\n  },\n};\n\nBasicUse.args = {\n  intent: \"info\",\n};\n\nexport const DangerUse = () => {\n  return <IconCircle intent=\"danger\" />;\n};;\n\nDangerUse.storyName = \"danger use\";\n\nexport const SuccessUse = () => {\n  return <IconCircle intent=\"success\" />;\n};;\n\nSuccessUse.storyName = \"success use\";\n\nexport const WarningUse = () => {\n  return <IconCircle intent=\"warning\" />;\n};\n\nWarningUse.storyName = \"warning use\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"({\\n  intent,\\n}: {\\n  intent: IntentColorType | \\\"default\\\";\\n}) => {\\n  const actualIntent = intent === \\\"default\\\" ? undefined : intent;\\n\\n  return <IconCircle intent={actualIntent} />;\\n}\" }, ...BasicUse.parameters };\nDangerUse.parameters = { storySource: { source: \"() => {\\n  return <IconCircle intent=\\\"danger\\\" />;\\n}\" }, ...DangerUse.parameters };\nSuccessUse.parameters = { storySource: { source: \"() => {\\n  return <IconCircle intent=\\\"success\\\" />;\\n}\" }, ...SuccessUse.parameters };\nWarningUse.parameters = { storySource: { source: \"() => {\\n  return <IconCircle intent=\\\"warning\\\" />;\\n}\" }, ...WarningUse.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Icon, IconProps } from \"@braze/beacon-core\";\n\nimport { IconCircleProps } from \"./types\";\nimport { StyledIconCircle } from \"./StyledIconCircle\";\n\nconst getIconByIntent = (\n  intent: IconCircleProps[\"intent\"]\n): IconProps[\"name\"] => {\n  switch (intent) {\n    case \"danger\":\n      return \"times\";\n    case \"success\":\n      return \"check\";\n    case \"warning\":\n      return \"exclamation\";\n    case \"info\":\n    default:\n      return \"info\";\n  }\n};\n\nexport const IconCircle = ({\n  className,\n  intent = \"info\",\n  ...props\n}: IconCircleProps): React.ReactElement | null => (\n  <StyledIconCircle\n    {...props}\n    className={classNames([\"bcl-icon-circle\", className])}\n    intent={intent}\n  >\n    <Icon size=\"1x\" name={getIconByIntent(intent)} />\n  </StyledIconCircle>\n);\n\nIconCircle.displayName = \"IconCircle\";\n","import styled from \"styled-components\";\nimport { intentColorSelector } from \"@braze/beacon-styling\";\nimport { StyledIcon } from \"@braze/beacon-core\";\n\nimport { StyledIconCircleProps } from \"./types\";\n\nexport const StyledIconCircle = styled.div<StyledIconCircleProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background: ${(props) => intentColorSelector(props, props.intent, 100)};\n  min-width: 28px;\n  min-height: 28px;\n  max-width: 28px;\n  max-height: 28px;\n  border-radius: 50%;\n\n  ${StyledIcon} {\n    color: ${(props) => intentColorSelector(props, props.intent, 500)};\n    font-size: 1rem;\n  }\n`;\n","export { IconCircle } from \"./IconCircle\";\n\nexport type { IconCircleProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Box, UncontrolledTooltip } from \"@braze/beacon-core\";\nimport { InfoIcon } from \"./InfoIcon\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Commons/Icons/InfoIcon\" component={InfoIcon} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"infoicon\"\n    }}>{`InfoIcon`}</h1>\n    <p>{`A common component that handles the different info icon use\ncases. Note that info icon should generally be used inside a\n`}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component with `}<inlineCode parentName=\"p\">{`inline`}</inlineCode>{` set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`boxPadding`}</inlineCode>{`\nprops defined for `}<inlineCode parentName=\"p\">{`horizontal`}</inlineCode>{` padding, typically with value\n`}<inlineCode parentName=\"p\">{`sm`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`InfoIcon`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"regular-use\"\n    }}>{`Regular Use`}</h3>\n    <p>{`The basic, default variant for the `}<inlineCode parentName=\"p\">{`InfoIcon`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Regular Use\" mdxType=\"Story\">\n    <Box inline boxPadding={{\n          horizontal: \"sm\"\n        }} mdxType=\"Box\">\n      <InfoIcon mdxType=\"InfoIcon\" />\n    </Box>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"muted-use\"\n    }}>{`Muted Use`}</h3>\n    <p>{`A muted variant for the `}<inlineCode parentName=\"p\">{`InfoIcon`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Muted Use\" mdxType=\"Story\">\n    <Box inline boxPadding={{\n          horizontal: \"sm\"\n        }} mdxType=\"Box\">\n      <InfoIcon variant=\"muted\" mdxType=\"InfoIcon\" />\n    </Box>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"alt-text-use\"\n    }}>{`Alt Text Use`}</h3>\n    <p>{`The aria label can be set by the `}<inlineCode parentName=\"p\">{`altText`}</inlineCode>{` prop. It is defaulted to\n`}<inlineCode parentName=\"p\">{`Information`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Alt Text Use\" mdxType=\"Story\">\n    <Box inline boxPadding={{\n          horizontal: \"sm\"\n        }} mdxType=\"Box\">\n      <InfoIcon altText=\"Hover for Info!!\" mdxType=\"InfoIcon\" />\n    </Box>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"use-with-tooltip\"\n    }}>{`Use with Tooltip`}</h3>\n    <p><inlineCode parentName=\"p\">{`InfoIcon`}</inlineCode>{` can be used with components that require a ref, like an `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Use with Tooltip\" mdxType=\"Story\">\n    <Box inline boxPadding={{\n          horizontal: \"sm\"\n        }} mdxType=\"Box\">\n      <UncontrolledTooltip label=\"Hover for Info!!\" mdxType=\"UncontrolledTooltip\">\n        <InfoIcon altText=\"Hover for Info!!\" mdxType=\"InfoIcon\" />\n      </UncontrolledTooltip>\n    </Box>\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { InfoIcon } from \"@braze/beacon-commons\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"regular\", \"muted\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"regular\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates which variant to use`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`altText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"Information\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`alt text for the info icon`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id for the icon`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const regularUse = () => (\n          <Box inline boxPadding={{\n  horizontal: \"sm\"\n}}>\n      <InfoIcon />\n    </Box>\n        );\nregularUse.storyName = 'Regular Use';\nregularUse.parameters = { storySource: { source: '<Box inline boxPadding={{\\n  horizontal: \\\"sm\\\"\\n}}>\\n      <InfoIcon />\\n    </Box>' } };\n\nexport const mutedUse = () => (\n          <Box inline boxPadding={{\n  horizontal: \"sm\"\n}}>\n      <InfoIcon variant=\"muted\" />\n    </Box>\n        );\nmutedUse.storyName = 'Muted Use';\nmutedUse.parameters = { storySource: { source: '<Box inline boxPadding={{\\n  horizontal: \\\"sm\\\"\\n}}>\\n      <InfoIcon variant=\\\"muted\\\" />\\n    </Box>' } };\n\nexport const altTextUse = () => (\n          <Box inline boxPadding={{\n  horizontal: \"sm\"\n}}>\n      <InfoIcon altText=\"Hover for Info!!\" />\n    </Box>\n        );\naltTextUse.storyName = 'Alt Text Use';\naltTextUse.parameters = { storySource: { source: '<Box inline boxPadding={{\\n  horizontal: \\\"sm\\\"\\n}}>\\n      <InfoIcon altText=\\\"Hover for Info!!\\\" />\\n    </Box>' } };\n\nexport const useWithTooltip = () => (\n          <Box inline boxPadding={{\n  horizontal: \"sm\"\n}}>\n      <UncontrolledTooltip label=\"Hover for Info!!\">\n        <InfoIcon altText=\"Hover for Info!!\" />\n      </UncontrolledTooltip>\n    </Box>\n        );\nuseWithTooltip.storyName = 'Use with Tooltip';\nuseWithTooltip.parameters = { storySource: { source: '<Box inline boxPadding={{\\n  horizontal: \\\"sm\\\"\\n}}>\\n      <UncontrolledTooltip label=\\\"Hover for Info!!\\\">\\n        <InfoIcon altText=\\\"Hover for Info!!\\\" />\\n      </UncontrolledTooltip>\\n    </Box>' } };\n\nconst componentMeta = { title: 'Commons/Icons/InfoIcon', component: InfoIcon, includeStories: [\"regularUse\",\"mutedUse\",\"altTextUse\",\"useWithTooltip\"],  };\n\nconst mdxStoryNameToKey = {\"Regular Use\":\"regularUse\",\"Muted Use\":\"mutedUse\",\"Alt Text Use\":\"altTextUse\",\"Use with Tooltip\":\"useWithTooltip\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Icon } from \"@braze/beacon-core\";\nimport { getIntentColor, getColor } from \"@braze/beacon-styling\";\n\nimport { InfoIconProps } from \"./types\";\n\nexport const InfoIcon = React.forwardRef(\n  (\n    {\n      className,\n      variant = \"regular\",\n      altText = \"Information\",\n      ...props\n    }: InfoIconProps,\n    ref: React.RefObject<HTMLSpanElement>\n  ): React.ReactElement => (\n    <Icon\n      {...props}\n      ref={ref}\n      className={classNames(\"bclcom-info-icon\", className)}\n      aria-label={altText}\n      name=\"info-circle\"\n      color={\n        variant === \"regular\"\n          ? getIntentColor(\"primary\", 500)\n          : getColor(\"gray\", 300)\n      }\n    />\n  )\n);\n\nInfoIcon.displayName = \"InfoIcon\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean, select, withKnobs } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Button } from \"../Button\";\nimport { UncontrolledTooltip } from \"../Popper\";\nimport { Annotation } from \"./Annotation\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Overlay/Annotation\" component={Annotation} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"annotation\"\n    }}>{`Annotation`}</h1>\n    <p>{`An annotation decorates a block element with an icon indicating a state\nor giving the user a hint about an interaction.`}</p>\n    <p>{`Annotations should be used in conjunction with `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{`s or `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`s.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Annotation`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-annotation--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Annotation`}</inlineCode>{` component can be disabled via the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop. This allows\nyou to only show the annotation when needed without having to duplicate a bunch of\ncode.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-annotation--disabled-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Annotation } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the annotation tooltip and its icon should be visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`info`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`warning`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`error`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`info`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`variant that toggles the color and icon of the component`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Button } from \\\"../Button\\\";\\n\\nimport { Annotation } from \\\"./Annotation\\\";\\nimport docs from \\\"./Annotation.docs.mdx\\\";\\nimport { AnnotationProps } from \\\"./types\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Overlay/Annotation\\\",\\n  parameters: {\\n    docs: {\\n      page: docs,\\n    },\\n  },\\n};\\n\\nexport const BasicUse = ({\\n  label,\\n  variant,\\n}: AnnotationProps): React.ReactElement => {\\n  return (\\n    <div>\\n      <Annotation label={label} variant={variant}>\\n        <Button>This button is annotated</Button>\\n      </Annotation>\\n    </div>\\n  );\\n};\\n\\nBasicUse.argTypes = {\\n  label: {\\n    control: { type: \\\"text\\\" },\\n  },\\n  variant: {\\n    options: [\\\"info\\\", \\\"warning\\\", \\\"error\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n};\\n\\nBasicUse.args = {\\n  label: \\\"...with a tooltip\\\",\\n  variant: \\\"info\\\",\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const DisabledUse = ({\\n  disabled,\\n  label,\\n  variant,\\n}: AnnotationProps): React.ReactElement => {\\n  return (\\n    <div>\\n      <Annotation disabled={disabled} label={label} variant={variant}>\\n        <Button>This button is NOT annotated by default</Button>\\n      </Annotation>\\n    </div>\\n  );\\n};\\n\\nDisabledUse.argTypes = {\\n  label: {\\n    control: { type: \\\"text\\\" },\\n    label: \\\"Label\\\",\\n  },\\n  variant: {\\n    options: [\\\"info\\\", \\\"warning\\\", \\\"error\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n  disabled: {\\n    control: { type: \\\"boolean\\\" },\\n    label: \\\"Disabled\\\",\\n  },\\n};\\n\\nDisabledUse.args = {\\n  label: \\\"...with a tooltip\\\",\\n  variant: \\\"info\\\",\\n  disabled: true,\\n};\\n\\nDisabledUse.storyName = \\\"disabled use\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":19},\"endLoc\":{\"col\":1,\"line\":30},\"startBody\":{\"col\":24,\"line\":19},\"endBody\":{\"col\":1,\"line\":30}},\"DisabledUse\":{\"startLoc\":{\"col\":27,\"line\":49},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":27,\"line\":49},\"endBody\":{\"col\":1,\"line\":61}}};\n    \nimport React from \"react\";\n\nimport { Button } from \"../Button\";\n\nimport { Annotation } from \"./Annotation\";\nimport docs from \"./Annotation.docs.mdx\";\nimport { AnnotationProps } from \"./types\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Overlay/Annotation\",\n  parameters: {\n    docs: {\n      page: docs,\n    },\n  },\n};\n\nexport const BasicUse = ({\n  label,\n  variant,\n}: AnnotationProps): React.ReactElement => {\n  return (\n    <div>\n      <Annotation label={label} variant={variant}>\n        <Button>This button is annotated</Button>\n      </Annotation>\n    </div>\n  );\n};;\n\nBasicUse.argTypes = {\n  label: {\n    control: { type: \"text\" },\n  },\n  variant: {\n    options: [\"info\", \"warning\", \"error\"],\n    control: { type: \"select\" },\n  },\n};\n\nBasicUse.args = {\n  label: \"...with a tooltip\",\n  variant: \"info\",\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const DisabledUse = ({\n  disabled,\n  label,\n  variant,\n}: AnnotationProps): React.ReactElement => {\n  return (\n    <div>\n      <Annotation disabled={disabled} label={label} variant={variant}>\n        <Button>This button is NOT annotated by default</Button>\n      </Annotation>\n    </div>\n  );\n};\n\nDisabledUse.argTypes = {\n  label: {\n    control: { type: \"text\" },\n    label: \"Label\",\n  },\n  variant: {\n    options: [\"info\", \"warning\", \"error\"],\n    control: { type: \"select\" },\n  },\n  disabled: {\n    control: { type: \"boolean\" },\n    label: \"Disabled\",\n  },\n};\n\nDisabledUse.args = {\n  label: \"...with a tooltip\",\n  variant: \"info\",\n  disabled: true,\n};\n\nDisabledUse.storyName = \"disabled use\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"({\\n  label,\\n  variant,\\n}: AnnotationProps): React.ReactElement => {\\n  return (\\n    <div>\\n      <Annotation label={label} variant={variant}>\\n        <Button>This button is annotated</Button>\\n      </Annotation>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nDisabledUse.parameters = { storySource: { source: \"({\\n  disabled,\\n  label,\\n  variant,\\n}: AnnotationProps): React.ReactElement => {\\n  return (\\n    <div>\\n      <Annotation disabled={disabled} label={label} variant={variant}>\\n        <Button>This button is NOT annotated by default</Button>\\n      </Annotation>\\n    </div>\\n  );\\n}\" }, ...DisabledUse.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { Icon, BrazeIconName } from \"../Icon\";\nimport { UncontrolledTooltip } from \"../UncontrolledTooltip\";\n\nimport { Variants, AnnotationProps } from \"./types\";\nimport { StyledAnnotation } from \"./StyledAnnotation\";\n\nfunction getVariantIcons(variant: Variants): BrazeIconName {\n  switch (variant) {\n    case \"warning\":\n    case \"error\":\n      return \"exclamation-circle\";\n    case \"info\":\n    default:\n      return \"info-circle\";\n  }\n}\n\nexport const Annotation = ({\n  className,\n  children,\n  disabled,\n  variant = \"info\",\n  ...props\n}: AnnotationProps): React.ReactElement => {\n  if (disabled) {\n    return <>{children}</>;\n  }\n\n  return (\n    <UncontrolledTooltip {...props}>\n      <StyledAnnotation\n        className={classNames([\"bcl-Annotation\", \"bcl-annotation\", className])}\n        variant={variant}\n      >\n        {children}\n        <Icon name={getVariantIcons(variant)} size=\"1x\" />\n      </StyledAnnotation>\n    </UncontrolledTooltip>\n  );\n};\n","import styled, { css } from \"styled-components\";\nimport { getIntentColor } from \"@braze/beacon-styling\";\n\nimport { StyledIcon } from \"../Icon\";\n\nimport { StyledAnnotationProps } from \"./types\";\n\nfunction getVariantCss({ variant }: StyledAnnotationProps) {\n  switch (variant) {\n    case \"error\":\n      return css`\n        color: ${getIntentColor(\"danger\", 500)};\n\n        &:hover {\n          color: ${getIntentColor(\"danger\", 400)};\n        }\n      `;\n    case \"warning\":\n      return css`\n        color: ${getIntentColor(\"warning\", 500)};\n\n        &:hover {\n          color: ${getIntentColor(\"warning\", 400)};\n        }\n      `;\n    case \"info\":\n    default:\n      return css`\n        color: ${getIntentColor(\"info\", 500)};\n\n        &:hover {\n          color: ${getIntentColor(\"info\", 400)};\n        }\n      `;\n  }\n}\n\nexport const StyledAnnotation = styled.div<StyledAnnotationProps>`\n  display: inline-block;\n  position: relative;\n\n  & > ${StyledIcon} {\n    position: absolute;\n    top: -8px;\n    right: -8px;\n    cursor: pointer;\n    background: white;\n    border-radius: 10px;\n    padding: 2px;\n    line-height: 0;\n\n    ${getVariantCss}\n  }\n`;\n","export { Annotation } from \"./Annotation\";\n\nexport type { AnnotationProps, Variants } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"banneralert\"\n    }}>{`BannerAlert`}</h1>\n    <p>{`A `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` is a component for showing inline user alerts.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Use the knobs tab in the canvas to explore different intents and interactions!`}</p>\n    </blockquote>\n    <p>{`Click the \"Close\" button to see the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` transition in action!`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"multiline\"\n    }}>{`Multiline`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` can handle multiple lines of text.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--multiline\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"title-and-description\"\n    }}>{`Title and Description`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` can show description text along with a title.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--title-and-description\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"custom-link-component\"\n    }}>{`Custom Link Component`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` can show a custom link component. This can be useful if you\nwant to use an `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` tag to indicate a navigation change.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`BannerAlertLink`}</inlineCode>{` has the ability to render as either a `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` or an `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{`,\nand it is encouraged to use this component as it is pre-styled.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The `}<inlineCode parentName=\"p\">{`BannerAlertLink`}</inlineCode>{` pulls it's intent from the parent by default, but can be overridden\nby passing the intent prop`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--custom-link-component\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"optional-link\"\n    }}>{`Optional Link`}</h3>\n    <p>{`Having a link in the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` is completely optional. If no link is passed,\nno link will be rendered.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--optional-link\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"optional-close-button\"\n    }}>{`Optional Close Button`}</h3>\n    <p>{`Having a close botton in the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` is completely optional. If the\n`}<inlineCode parentName=\"p\">{`onClose`}</inlineCode>{` prop is not passed to `}<inlineCode parentName=\"p\">{`BannerAlertBody`}</inlineCode>{`, no button will be rendered.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--optional-close-button\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"icon-override\"\n    }}>{`Icon Override`}</h3>\n    <p>{`If you need to display an icon other than the default for the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`\nintent, you can pass a node into the `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` prop on `}<inlineCode parentName=\"p\">{`BannerAlertBody`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--icon-override\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"accordion\"\n    }}>{`Accordion`}</h3>\n    <p>{`You can add an accordion with more information to the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` using the\n`}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Go to the canvas tab knobs to see opening and closing of accordions, as well\nas the intents!`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--accordion\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"different-accordion-intent\"\n    }}>{`Different Accordion Intent`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{` intent pulls from the parent intent by default. However this can\nbe overridden by passing the intent prop in.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--accordion-with-different-intent\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"optional-title\"\n    }}>{`Optional Title`}</h4>\n    <p>{`The accordion title is completely optional. You can remove it by not passing in\na title to `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--accordion-without-title\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"optional-action\"\n    }}>{`Optional Action`}</h4>\n    <p>{`The accordion action is completely optional. You can remove it by not passing in\nan action to `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--accordion-without-action\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"custom-actions\"\n    }}>{`Custom Actions`}</h4>\n    <p>{`The accordion can also accommodate custom actions. You can pass in a custom\naction to the `}<inlineCode parentName=\"p\">{`BannerAlertAccordionFooter`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`BannerAlertAction`}</inlineCode>{`\ncomponent is available for use for this purpose.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The `}<inlineCode parentName=\"p\">{`BannerAlertAction`}</inlineCode>{` pulls it's intent from the parent by default, but can be overridden\nby passing the intent prop`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--accordion-with-custom-action\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"multiple-accordions\"\n    }}>{`Multiple Accordions`}</h3>\n    <p>{`You can supply multiple `}<inlineCode parentName=\"p\">{`BannerAlertAccordionHeader`}</inlineCode>{` components within the same `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{` to create separation between multiple related notices.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--multiple-accordion-bodies\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"without-transition\"\n    }}>{`Without Transition`}</h3>\n    <p>{`If you do not want the default fade-in-and-out transition on the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`,\nyou can use the `}<inlineCode parentName=\"p\">{`UntransitionedBannerAlert`}</inlineCode>{` component. It functions the same as\n`}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`, but does not have open and close states - that has to be added\nmanually.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--without-transition\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"inside-a-modal\"\n    }}>{`Inside a `}<inlineCode parentName=\"h3\">{`Modal`}</inlineCode></h3>\n    <p>{`Often, it may be useful to have a `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` inside a `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` to alert\nthe user in the correct context. You can do this as shown in the following\nexample:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--inside-a-modal\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"inside-a-form\"\n    }}>{`Inside a `}<inlineCode parentName=\"h3\">{`Form`}</inlineCode></h3>\n    <p>{`Often, it may be useful to have a `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` inside a `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{`.\nYou can do this as shown in the following example:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-banneralert--inside-a-form\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { BannerAlert } from \"@braze/beacon-core\";\nimport { UntransitionedBannerAlert } from \"@braze/beacon-core\";\nimport { BannerAlertLink } from \"@braze/beacon-core\";\nimport {\n  BannerAlertBody,\n  BannerAlertTitle,\n  BannerAlertDescription,\n  BannerAlertDescriptionText,\n} from \"@braze/beacon-core\";\nimport {\n  BannerAlertAccordion,\n  BannerAlertAccordionHeader,\n  BannerAlertAccordionBody,\n  BannerAlertAccordionFooter,\n} from \"@braze/beacon-core\";\nimport { BannerAlertAction } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"banneralert-1\"\n    }}>{`BannerAlert`}</h3>\n    <p>{`The top level `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` component. Comes with built in open/close transition.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"success\", \"warning\", \"danger\", \"info\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`intent of banner to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally `}<inlineCode parentName=\"td\">{`BannerAlert`}</inlineCode>{` subcomponents`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates if the banner is visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"untransitionedbanneralert\"\n    }}>{`UntransitionedBannerAlert`}</h3>\n    <p>{`A top level `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` component. No transitions.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` it is discourged to use this component. Only use if the transitions on\n`}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{` should be removed or overwritten.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"success\", \"warning\", \"danger\", \"info\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`intent of banner to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally `}<inlineCode parentName=\"td\">{`BannerAlert`}</inlineCode>{` subcomponents`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertbody\"\n    }}>{`BannerAlertBody`}</h3>\n    <p>{`Body component for the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`. Handles styling, icon, and close button.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"success\", \"warning\", \"danger\", \"info\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`overrides intent of banner to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally `}<inlineCode parentName=\"td\">{`BannerAlertBody`}</inlineCode>{` subcomponents`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Icon`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`icon to display - will override default for intent`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClose`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`() => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback for the close button`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralerttitle\"\n    }}>{`BannerAlertTitle`}</h3>\n    <p>{`Body Title component for the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`. This is the primary text component\nfor the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`. Provides styling.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally text`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertdescription\"\n    }}>{`BannerAlertDescription`}</h3>\n    <p>{`Body text component for the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`. This is the secondary text component\nfor the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`. Provides styling.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally `}<inlineCode parentName=\"td\">{`BannerAlert`}</inlineCode>{` subcomponents`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertdescriptiontext\"\n    }}>{`BannerAlertDescriptionText`}</h3>\n    <p>{`Body text component for the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`. This component provides correct\nstyling for description text that also has a link. Intended for use inside a\n`}<inlineCode parentName=\"p\">{`BannerAlertDescription`}</inlineCode>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally text`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertlink\"\n    }}>{`BannerAlertLink`}</h3>\n    <p>{`Body link component for the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`. This should be used either next to a\n`}<inlineCode parentName=\"p\">{`BannerAlertTitle`}</inlineCode>{` or inside a `}<inlineCode parentName=\"p\">{`BannerAlertDescription`}</inlineCode>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"success\", \"warning\", \"danger\", \"info\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`overrides intent of banner to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally text - to display in link`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`() => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback on click of link`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"button\", \"a\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates which tag the link should render as`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`caret`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"up\", \"down\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`renders a caret icon - intended for use with accordions`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertaccordion\"\n    }}>{`BannerAlertAccordion`}</h3>\n    <p>{`Accordion component for the `}<inlineCode parentName=\"p\">{`BannerAlert`}</inlineCode>{`. This should be used `}<em parentName=\"p\">{`next`}</em>{` to a\n`}<inlineCode parentName=\"p\">{`BannerAlertBody`}</inlineCode>{` component.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"success\", \"warning\", \"danger\", \"info\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`overrides intent of banner to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates if the accordion is visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally `}<inlineCode parentName=\"td\">{`BannerAlertAccordion`}</inlineCode>{` subcomponents`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertaccordionheader\"\n    }}>{`BannerAlertAccordionHeader`}</h3>\n    <p>{`Text heading component for the `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{`. This should be used\ninside of a `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{` component.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally text`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertaccordionbody\"\n    }}>{`BannerAlertAccordionBody`}</h3>\n    <p>{`Text component for the `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{`. This should be used inside of a\n`}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{` component.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally text`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertaccordionfooter\"\n    }}>{`BannerAlertAccordionFooter`}</h3>\n    <p>{`Action section for the `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{`. This should be used inside of a\n`}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{` component. Provides styling.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally `}<inlineCode parentName=\"td\">{`BannerAlertAction`}</inlineCode>{` components`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"banneralertaction\"\n    }}>{`BannerAlertAction`}</h3>\n    <p>{`Button component for `}<inlineCode parentName=\"p\">{`BannerAlertAccordion`}</inlineCode>{` component. Overrides `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` styles\nto provide styling based on intent.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` can take all props from `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` EXCEPT for `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"success\", \"warning\", \"danger\", \"info\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`overrides intent of banner to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children - generally text`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`() => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback on click of button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport { BannerAlertIcon } from \\\"../BannerAlertIcon\\\";\\nimport { BannerAlertAction } from \\\"../BannerAlertAction\\\";\\nimport { BannerAlertLink } from \\\"../BannerAlertLink\\\";\\nimport { BannerAlertAccordion } from \\\"../BannerAlertAccordion\\\";\\nimport { BannerAlertAccordionHeader } from \\\"../BannerAlertAccordionHeader\\\";\\nimport { BannerAlertAccordionBody } from \\\"../BannerAlertAccordionBody\\\";\\nimport { BannerAlertAccordionFooter } from \\\"../BannerAlertAccordionFooter\\\";\\nimport { BannerAlertBody } from \\\"../BannerAlertBody\\\";\\nimport { BannerAlertTitle } from \\\"../BannerAlertTitle\\\";\\nimport { BannerAlertDescription } from \\\"../BannerAlertDescription\\\";\\nimport { BannerAlertDescriptionText } from \\\"../BannerAlertDescriptionText\\\";\\nimport { Button } from \\\"../Button\\\";\\nimport { Modal } from \\\"../Modal\\\";\\nimport { ModalBody } from \\\"../ModalBody\\\";\\nimport { ModalFooter } from \\\"../ModalFooter\\\";\\nimport { ModalHeading } from \\\"../ModalHeading\\\";\\nimport { UntransitionedBannerAlert } from \\\"../UntransitionedBannerAlert\\\";\\nimport { FieldLabel } from \\\"../FieldLabel\\\";\\nimport { Input } from \\\"../Input\\\";\\n\\nimport page from \\\"./BannerAlert.docs.mdx\\\";\\n\\nimport { BannerAlert, BannerAlertProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Alerts/BannerAlert\\\",\\n  component: BannerAlert,\\n  parameters: { docs: { page } },\\n};\\n\\ninterface BasicUseArgs {\\n  intent: BannerAlertProps[\\\"intent\\\"];\\n  closeButton: boolean;\\n  description: boolean;\\n}\\n\\nexport const BasicUse = ({\\n  intent,\\n  closeButton,\\n  description,\\n}: BasicUseArgs) => {\\n  const [isOpen, setIsOpen] = React.useState(true);\\n\\n  return (\\n    <React.Fragment>\\n      <div style={{ marginBottom: \\\"8px\\\" }}>\\n        <Button\\n          className=\\\"open-banner\\\"\\n          variant=\\\"primary\\\"\\n          onClick={() => setIsOpen(true)}\\n        >\\n          Open Banner Alert\\n        </Button>\\n      </div>\\n      <BannerAlert isOpen={isOpen} intent={intent}>\\n        <BannerAlertBody\\n          onClose={\\n            closeButton\\n              ? () => {\\n                  action(\\\"click\\\");\\n\\n                  setIsOpen(false);\\n                }\\n              : undefined\\n          }\\n        >\\n          <BannerAlertTitle>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n          </BannerAlertTitle>\\n          {description ? (\\n            <BannerAlertDescription>\\n              <BannerAlertDescriptionText>\\n                Ut enim ad minim veniam, quis nostrud exercitation ullamco\\n                laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure\\n                dolor in reprehenderit in voluptate velit esse cillum dolore eu\\n                fugiat nulla pariatur.\\n              </BannerAlertDescriptionText>\\n              <BannerAlertLink\\n                onClick={() => {\\n                  action(\\\"click\\\");\\n\\n                  alert(\\\"link!!\\\");\\n                }}\\n              >\\n                Reset\\n              </BannerAlertLink>\\n            </BannerAlertDescription>\\n          ) : (\\n            <BannerAlertLink\\n              onClick={() => {\\n                action(\\\"click\\\");\\n\\n                alert(\\\"link!!\\\");\\n              }}\\n            >\\n              Reset\\n            </BannerAlertLink>\\n          )}\\n        </BannerAlertBody>\\n      </BannerAlert>\\n    </React.Fragment>\\n  );\\n};\\n\\nBasicUse.argTypes = {\\n  closeButton: {\\n    control: \\\"boolean\\\",\\n  },\\n  description: {\\n    control: \\\"boolean\\\",\\n  },\\n};\\n\\nBasicUse.args = {\\n  intent: \\\"success\\\",\\n  closeButton: true,\\n  description: true,\\n};\\n\\nexport const Multiline = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"success\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n        >\\n          Move\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const TitleAndDescription = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"danger\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Here&apos;s a title for the banner</BannerAlertTitle>\\n        <BannerAlertDescription>\\n          <BannerAlertDescriptionText>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n            aliquip ex ea commodo consequat.\\n          </BannerAlertDescriptionText>\\n          <BannerAlertLink\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"link!!\\\");\\n            }}\\n          >\\n            Retry Action\\n          </BannerAlertLink>\\n        </BannerAlertDescription>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const CustomLinkComponent = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"warning\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"custom link!!\\\");\\n          }}\\n          intent=\\\"success\\\"\\n          as=\\\"a\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const OptionalLink = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"info\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const OptionalCloseButton = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"warning\\\">\\n      <BannerAlertBody>\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const IconOverride = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"success\\\">\\n      <BannerAlertBody\\n        Icon={<BannerAlertIcon intent=\\\"danger\\\" />}\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n};\\n\\ninterface AccordionArgs {\\n  intent: BannerAlertProps[\\\"intent\\\"];\\n  isOpen: boolean;\\n}\\n\\nexport const Accordion = ({ intent, isOpen }: AccordionArgs) => {\\n  return (\\n    <BannerAlert isOpen intent={intent}>\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret={isOpen ? \\\"up\\\" : \\\"down\\\"}\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen={isOpen}>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"action!!\\\");\\n            }}\\n          >\\n            Click Me!\\n          </BannerAlertAction>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n};\\n\\nAccordion.argTypes = {\\n  isOpen: {\\n    control: \\\"boolean\\\",\\n  },\\n};\\n\\nAccordion.args = {\\n  intent: \\\"success\\\",\\n  isOpen: true,\\n};\\n\\nexport const AccordionWithDifferentIntent = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"danger\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret=\\\"up\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion intent=\\\"info\\\" isOpen>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"action!!\\\");\\n            }}\\n          >\\n            More Information\\n          </BannerAlertAction>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const AccordionWithoutTitle = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"warning\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret=\\\"up\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"action!!\\\");\\n            }}\\n          >\\n            More Information\\n          </BannerAlertAction>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const AccordionWithoutAction = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"danger\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret=\\\"up\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const AccordionWithCustomAction = () => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"info\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret=\\\"up\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            intent=\\\"danger\\\"\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"danger action!!\\\");\\n            }}\\n          >\\n            Cancel\\n          </BannerAlertAction>\\n          <span style={{ marginLeft: \\\"8px\\\" }}>\\n            <BannerAlertAction\\n              onClick={() => {\\n                action(\\\"click\\\");\\n\\n                alert(\\\"info action!!\\\");\\n              }}\\n            >\\n              More Info\\n            </BannerAlertAction>\\n          </span>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n};\\n\\nexport const MultipleAccordionBodies = ({ intent, isOpen }: AccordionArgs) => {\\n  return (\\n    <BannerAlert isOpen intent={intent}>\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret={isOpen ? \\\"up\\\" : \\\"down\\\"}\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen={isOpen}>\\n        <BannerAlertAccordionHeader>\\n          First Accordion Item\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionHeader>\\n          Second Accordion Item\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"action!!\\\");\\n            }}\\n          >\\n            Click Me!\\n          </BannerAlertAction>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n};\\n\\nMultipleAccordionBodies.argTypes = {\\n  isOpen: {\\n    control: \\\"boolean\\\",\\n  },\\n};\\n\\nMultipleAccordionBodies.args = {\\n  intent: \\\"success\\\",\\n  isOpen: true,\\n};\\n\\nexport const WithoutTransition = () => {\\n  return (\\n    <UntransitionedBannerAlert intent=\\\"info\\\">\\n      <BannerAlertBody>\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n        >\\n          Action On Click!\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </UntransitionedBannerAlert>\\n  );\\n};\\n\\nexport const InsideAModal = () => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"md\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <BannerAlert isOpen intent=\\\"warning\\\">\\n            <BannerAlertBody onClose={action(\\\"close\\\")}>\\n              <BannerAlertTitle>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n                eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n              </BannerAlertTitle>\\n              <BannerAlertLink onClick={action(\\\"click\\\")}>Move</BannerAlertLink>\\n            </BannerAlertBody>\\n          </BannerAlert>\\n          <br />\\n          <div>What do you think you&apos;re doing?</div>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nInsideAModal.storyName = \\\"Inside a Modal\\\";\\n\\nexport const InsideAForm = () => {\\n  const [isOpen, setOpen] = React.useState(true);\\n  const [formWasSubmitted, setFormWasSubmitted] = React.useState(false);\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault();\\n\\n    setFormWasSubmitted(true);\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <BannerAlert isOpen={isOpen} intent=\\\"warning\\\">\\n        <BannerAlertBody onClose={() => setOpen(false)}>\\n          <BannerAlertTitle>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n            eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n          </BannerAlertTitle>\\n          <BannerAlertLink onClick={action(\\\"click\\\")}>Move</BannerAlertLink>\\n        </BannerAlertBody>\\n      </BannerAlert>\\n      {!isOpen && <Button onClick={() => setOpen(true)}>Re-open alert</Button>}\\n      <br />\\n      <FieldLabel label=\\\"Some Field\\\" htmlFor=\\\"some-field\\\">\\n        <Input id=\\\"some-field\\\" />\\n      </FieldLabel>\\n      <span className=\\\"submission-status\\\">\\n        The form has {formWasSubmitted ? \\\"\\\" : \\\"not\\\"} been submitted.\\n      </span>\\n    </form>\\n  );\\n};\\n\\nInsideAForm.storyName = \\\"Inside a Form\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":41},\"endLoc\":{\"col\":1,\"line\":107},\"startBody\":{\"col\":24,\"line\":41},\"endBody\":{\"col\":1,\"line\":107}},\"Multiline\":{\"startLoc\":{\"col\":25,\"line\":124},\"endLoc\":{\"col\":1,\"line\":155},\"startBody\":{\"col\":25,\"line\":124},\"endBody\":{\"col\":1,\"line\":155}},\"TitleAndDescription\":{\"startLoc\":{\"col\":35,\"line\":157},\"endLoc\":{\"col\":1,\"line\":188},\"startBody\":{\"col\":35,\"line\":157},\"endBody\":{\"col\":1,\"line\":188}},\"CustomLinkComponent\":{\"startLoc\":{\"col\":35,\"line\":190},\"endLoc\":{\"col\":1,\"line\":215},\"startBody\":{\"col\":35,\"line\":190},\"endBody\":{\"col\":1,\"line\":215}},\"OptionalLink\":{\"startLoc\":{\"col\":28,\"line\":217},\"endLoc\":{\"col\":1,\"line\":231},\"startBody\":{\"col\":28,\"line\":217},\"endBody\":{\"col\":1,\"line\":231}},\"OptionalCloseButton\":{\"startLoc\":{\"col\":35,\"line\":233},\"endLoc\":{\"col\":1,\"line\":250},\"startBody\":{\"col\":35,\"line\":233},\"endBody\":{\"col\":1,\"line\":250}},\"IconOverride\":{\"startLoc\":{\"col\":28,\"line\":252},\"endLoc\":{\"col\":1,\"line\":276},\"startBody\":{\"col\":28,\"line\":252},\"endBody\":{\"col\":1,\"line\":276}},\"Accordion\":{\"startLoc\":{\"col\":25,\"line\":283},\"endLoc\":{\"col\":1,\"line\":332},\"startBody\":{\"col\":25,\"line\":283},\"endBody\":{\"col\":1,\"line\":332}},\"AccordionWithDifferentIntent\":{\"startLoc\":{\"col\":44,\"line\":345},\"endLoc\":{\"col\":1,\"line\":394},\"startBody\":{\"col\":44,\"line\":345},\"endBody\":{\"col\":1,\"line\":394}},\"AccordionWithoutTitle\":{\"startLoc\":{\"col\":37,\"line\":396},\"endLoc\":{\"col\":1,\"line\":445},\"startBody\":{\"col\":37,\"line\":396},\"endBody\":{\"col\":1,\"line\":445}},\"AccordionWithoutAction\":{\"startLoc\":{\"col\":38,\"line\":447},\"endLoc\":{\"col\":1,\"line\":485},\"startBody\":{\"col\":38,\"line\":447},\"endBody\":{\"col\":1,\"line\":485}},\"AccordionWithCustomAction\":{\"startLoc\":{\"col\":41,\"line\":487},\"endLoc\":{\"col\":1,\"line\":548},\"startBody\":{\"col\":41,\"line\":487},\"endBody\":{\"col\":1,\"line\":548}},\"MultipleAccordionBodies\":{\"startLoc\":{\"col\":39,\"line\":550},\"endLoc\":{\"col\":1,\"line\":611},\"startBody\":{\"col\":39,\"line\":550},\"endBody\":{\"col\":1,\"line\":611}},\"WithoutTransition\":{\"startLoc\":{\"col\":33,\"line\":624},\"endLoc\":{\"col\":1,\"line\":641},\"startBody\":{\"col\":33,\"line\":624},\"endBody\":{\"col\":1,\"line\":641}},\"InsideAModal\":{\"startLoc\":{\"col\":28,\"line\":643},\"endLoc\":{\"col\":1,\"line\":682},\"startBody\":{\"col\":28,\"line\":643},\"endBody\":{\"col\":1,\"line\":682}},\"InsideAForm\":{\"startLoc\":{\"col\":27,\"line\":686},\"endLoc\":{\"col\":1,\"line\":717},\"startBody\":{\"col\":27,\"line\":686},\"endBody\":{\"col\":1,\"line\":717}}};\n    \nimport React from \"react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport { BannerAlertIcon } from \"../BannerAlertIcon\";\nimport { BannerAlertAction } from \"../BannerAlertAction\";\nimport { BannerAlertLink } from \"../BannerAlertLink\";\nimport { BannerAlertAccordion } from \"../BannerAlertAccordion\";\nimport { BannerAlertAccordionHeader } from \"../BannerAlertAccordionHeader\";\nimport { BannerAlertAccordionBody } from \"../BannerAlertAccordionBody\";\nimport { BannerAlertAccordionFooter } from \"../BannerAlertAccordionFooter\";\nimport { BannerAlertBody } from \"../BannerAlertBody\";\nimport { BannerAlertTitle } from \"../BannerAlertTitle\";\nimport { BannerAlertDescription } from \"../BannerAlertDescription\";\nimport { BannerAlertDescriptionText } from \"../BannerAlertDescriptionText\";\nimport { Button } from \"../Button\";\nimport { Modal } from \"../Modal\";\nimport { ModalBody } from \"../ModalBody\";\nimport { ModalFooter } from \"../ModalFooter\";\nimport { ModalHeading } from \"../ModalHeading\";\nimport { UntransitionedBannerAlert } from \"../UntransitionedBannerAlert\";\nimport { FieldLabel } from \"../FieldLabel\";\nimport { Input } from \"../Input\";\n\nimport page from \"./BannerAlert.docs.mdx\";\n\nimport { BannerAlert, BannerAlertProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Alerts/BannerAlert\",\n  component: BannerAlert,\n  parameters: { docs: { page } },\n};\n\ninterface BasicUseArgs {\n  intent: BannerAlertProps[\"intent\"];\n  closeButton: boolean;\n  description: boolean;\n}\n\nexport const BasicUse = ({\n  intent,\n  closeButton,\n  description,\n}: BasicUseArgs) => {\n  const [isOpen, setIsOpen] = React.useState(true);\n\n  return (\n    <React.Fragment>\n      <div style={{ marginBottom: \"8px\" }}>\n        <Button\n          className=\"open-banner\"\n          variant=\"primary\"\n          onClick={() => setIsOpen(true)}\n        >\n          Open Banner Alert\n        </Button>\n      </div>\n      <BannerAlert isOpen={isOpen} intent={intent}>\n        <BannerAlertBody\n          onClose={\n            closeButton\n              ? () => {\n                  action(\"click\");\n\n                  setIsOpen(false);\n                }\n              : undefined\n          }\n        >\n          <BannerAlertTitle>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n          </BannerAlertTitle>\n          {description ? (\n            <BannerAlertDescription>\n              <BannerAlertDescriptionText>\n                Ut enim ad minim veniam, quis nostrud exercitation ullamco\n                laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure\n                dolor in reprehenderit in voluptate velit esse cillum dolore eu\n                fugiat nulla pariatur.\n              </BannerAlertDescriptionText>\n              <BannerAlertLink\n                onClick={() => {\n                  action(\"click\");\n\n                  alert(\"link!!\");\n                }}\n              >\n                Reset\n              </BannerAlertLink>\n            </BannerAlertDescription>\n          ) : (\n            <BannerAlertLink\n              onClick={() => {\n                action(\"click\");\n\n                alert(\"link!!\");\n              }}\n            >\n              Reset\n            </BannerAlertLink>\n          )}\n        </BannerAlertBody>\n      </BannerAlert>\n    </React.Fragment>\n  );\n};;\n\nBasicUse.argTypes = {\n  closeButton: {\n    control: \"boolean\",\n  },\n  description: {\n    control: \"boolean\",\n  },\n};\n\nBasicUse.args = {\n  intent: \"success\",\n  closeButton: true,\n  description: true,\n};\n\nexport const Multiline = () => {\n  return (\n    <BannerAlert isOpen intent=\"success\">\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n        >\n          Move\n        </BannerAlertLink>\n      </BannerAlertBody>\n    </BannerAlert>\n  );\n};;\n\nexport const TitleAndDescription = () => {\n  return (\n    <BannerAlert isOpen intent=\"danger\">\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Here&apos;s a title for the banner</BannerAlertTitle>\n        <BannerAlertDescription>\n          <BannerAlertDescriptionText>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n            aliquip ex ea commodo consequat.\n          </BannerAlertDescriptionText>\n          <BannerAlertLink\n            onClick={() => {\n              action(\"click\");\n\n              alert(\"link!!\");\n            }}\n          >\n            Retry Action\n          </BannerAlertLink>\n        </BannerAlertDescription>\n      </BannerAlertBody>\n    </BannerAlert>\n  );\n};;\n\nexport const CustomLinkComponent = () => {\n  return (\n    <BannerAlert isOpen intent=\"warning\">\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"custom link!!\");\n          }}\n          intent=\"success\"\n          as=\"a\"\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n    </BannerAlert>\n  );\n};;\n\nexport const OptionalLink = () => {\n  return (\n    <BannerAlert isOpen intent=\"info\">\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n      </BannerAlertBody>\n    </BannerAlert>\n  );\n};;\n\nexport const OptionalCloseButton = () => {\n  return (\n    <BannerAlert isOpen intent=\"warning\">\n      <BannerAlertBody>\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n    </BannerAlert>\n  );\n};;\n\nexport const IconOverride = () => {\n  return (\n    <BannerAlert isOpen intent=\"success\">\n      <BannerAlertBody\n        Icon={<BannerAlertIcon intent=\"danger\" />}\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n    </BannerAlert>\n  );\n};;\n\ninterface AccordionArgs {\n  intent: BannerAlertProps[\"intent\"];\n  isOpen: boolean;\n}\n\nexport const Accordion = ({ intent, isOpen }: AccordionArgs) => {\n  return (\n    <BannerAlert isOpen intent={intent}>\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n          caret={isOpen ? \"up\" : \"down\"}\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n      <BannerAlertAccordion isOpen={isOpen}>\n        <BannerAlertAccordionHeader>\n          Some Title Here with Information\n        </BannerAlertAccordionHeader>\n        <BannerAlertAccordionBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </BannerAlertAccordionBody>\n        <BannerAlertAccordionFooter>\n          <BannerAlertAction\n            onClick={() => {\n              action(\"click\");\n\n              alert(\"action!!\");\n            }}\n          >\n            Click Me!\n          </BannerAlertAction>\n        </BannerAlertAccordionFooter>\n      </BannerAlertAccordion>\n    </BannerAlert>\n  );\n};;\n\nAccordion.argTypes = {\n  isOpen: {\n    control: \"boolean\",\n  },\n};\n\nAccordion.args = {\n  intent: \"success\",\n  isOpen: true,\n};\n\nexport const AccordionWithDifferentIntent = () => {\n  return (\n    <BannerAlert isOpen intent=\"danger\">\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n          caret=\"up\"\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n      <BannerAlertAccordion intent=\"info\" isOpen>\n        <BannerAlertAccordionHeader>\n          Some Title Here with Information\n        </BannerAlertAccordionHeader>\n        <BannerAlertAccordionBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </BannerAlertAccordionBody>\n        <BannerAlertAccordionFooter>\n          <BannerAlertAction\n            onClick={() => {\n              action(\"click\");\n\n              alert(\"action!!\");\n            }}\n          >\n            More Information\n          </BannerAlertAction>\n        </BannerAlertAccordionFooter>\n      </BannerAlertAccordion>\n    </BannerAlert>\n  );\n};;\n\nexport const AccordionWithoutTitle = () => {\n  return (\n    <BannerAlert isOpen intent=\"warning\">\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n          caret=\"up\"\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n      <BannerAlertAccordion isOpen>\n        <BannerAlertAccordionHeader>\n          Some Title Here with Information\n        </BannerAlertAccordionHeader>\n        <BannerAlertAccordionBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </BannerAlertAccordionBody>\n        <BannerAlertAccordionFooter>\n          <BannerAlertAction\n            onClick={() => {\n              action(\"click\");\n\n              alert(\"action!!\");\n            }}\n          >\n            More Information\n          </BannerAlertAction>\n        </BannerAlertAccordionFooter>\n      </BannerAlertAccordion>\n    </BannerAlert>\n  );\n};;\n\nexport const AccordionWithoutAction = () => {\n  return (\n    <BannerAlert isOpen intent=\"danger\">\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n          caret=\"up\"\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n      <BannerAlertAccordion isOpen>\n        <BannerAlertAccordionHeader>\n          Some Title Here with Information\n        </BannerAlertAccordionHeader>\n        <BannerAlertAccordionBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </BannerAlertAccordionBody>\n      </BannerAlertAccordion>\n    </BannerAlert>\n  );\n};;\n\nexport const AccordionWithCustomAction = () => {\n  return (\n    <BannerAlert isOpen intent=\"info\">\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n          caret=\"up\"\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n      <BannerAlertAccordion isOpen>\n        <BannerAlertAccordionHeader>\n          Some Title Here with Information\n        </BannerAlertAccordionHeader>\n        <BannerAlertAccordionBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </BannerAlertAccordionBody>\n        <BannerAlertAccordionFooter>\n          <BannerAlertAction\n            intent=\"danger\"\n            onClick={() => {\n              action(\"click\");\n\n              alert(\"danger action!!\");\n            }}\n          >\n            Cancel\n          </BannerAlertAction>\n          <span style={{ marginLeft: \"8px\" }}>\n            <BannerAlertAction\n              onClick={() => {\n                action(\"click\");\n\n                alert(\"info action!!\");\n              }}\n            >\n              More Info\n            </BannerAlertAction>\n          </span>\n        </BannerAlertAccordionFooter>\n      </BannerAlertAccordion>\n    </BannerAlert>\n  );\n};;\n\nexport const MultipleAccordionBodies = ({ intent, isOpen }: AccordionArgs) => {\n  return (\n    <BannerAlert isOpen intent={intent}>\n      <BannerAlertBody\n        onClose={() => {\n          action(\"click\");\n\n          alert(\"close!!\");\n        }}\n      >\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n          caret={isOpen ? \"up\" : \"down\"}\n        >\n          More Information\n        </BannerAlertLink>\n      </BannerAlertBody>\n      <BannerAlertAccordion isOpen={isOpen}>\n        <BannerAlertAccordionHeader>\n          First Accordion Item\n        </BannerAlertAccordionHeader>\n        <BannerAlertAccordionBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </BannerAlertAccordionBody>\n        <BannerAlertAccordionHeader>\n          Second Accordion Item\n        </BannerAlertAccordionHeader>\n        <BannerAlertAccordionBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </BannerAlertAccordionBody>\n        <BannerAlertAccordionFooter>\n          <BannerAlertAction\n            onClick={() => {\n              action(\"click\");\n\n              alert(\"action!!\");\n            }}\n          >\n            Click Me!\n          </BannerAlertAction>\n        </BannerAlertAccordionFooter>\n      </BannerAlertAccordion>\n    </BannerAlert>\n  );\n};;\n\nMultipleAccordionBodies.argTypes = {\n  isOpen: {\n    control: \"boolean\",\n  },\n};\n\nMultipleAccordionBodies.args = {\n  intent: \"success\",\n  isOpen: true,\n};\n\nexport const WithoutTransition = () => {\n  return (\n    <UntransitionedBannerAlert intent=\"info\">\n      <BannerAlertBody>\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\n        <BannerAlertLink\n          onClick={() => {\n            action(\"click\");\n\n            alert(\"link!!\");\n          }}\n        >\n          Action On Click!\n        </BannerAlertLink>\n      </BannerAlertBody>\n    </UntransitionedBannerAlert>\n  );\n};;\n\nexport const InsideAModal = () => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal size=\"md\" isOpen={isOpen} toggle={toggle}>\n        <ModalHeading>You have unsaved changes!</ModalHeading>\n        <ModalBody>\n          <BannerAlert isOpen intent=\"warning\">\n            <BannerAlertBody onClose={action(\"close\")}>\n              <BannerAlertTitle>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n                eiusmod tempor incididunt ut labore et dolore magna aliqua.\n              </BannerAlertTitle>\n              <BannerAlertLink onClick={action(\"click\")}>Move</BannerAlertLink>\n            </BannerAlertBody>\n          </BannerAlert>\n          <br />\n          <div>What do you think you&apos;re doing?</div>\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"left\">\n            <Button variant=\"quaternary\">Don&apos;t save</Button>\n          </ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button variant=\"secondary\" onClick={toggle}>\n              Keep Editing\n            </Button>\n            <Button>Save Draft</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nInsideAModal.storyName = \"Inside a Modal\";\n\nexport const InsideAForm = () => {\n  const [isOpen, setOpen] = React.useState(true);\n  const [formWasSubmitted, setFormWasSubmitted] = React.useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    setFormWasSubmitted(true);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <BannerAlert isOpen={isOpen} intent=\"warning\">\n        <BannerAlertBody onClose={() => setOpen(false)}>\n          <BannerAlertTitle>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          </BannerAlertTitle>\n          <BannerAlertLink onClick={action(\"click\")}>Move</BannerAlertLink>\n        </BannerAlertBody>\n      </BannerAlert>\n      {!isOpen && <Button onClick={() => setOpen(true)}>Re-open alert</Button>}\n      <br />\n      <FieldLabel label=\"Some Field\" htmlFor=\"some-field\">\n        <Input id=\"some-field\" />\n      </FieldLabel>\n      <span className=\"submission-status\">\n        The form has {formWasSubmitted ? \"\" : \"not\"} been submitted.\n      </span>\n    </form>\n  );\n};\n\nInsideAForm.storyName = \"Inside a Form\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"({\\n  intent,\\n  closeButton,\\n  description,\\n}: BasicUseArgs) => {\\n  const [isOpen, setIsOpen] = React.useState(true);\\n\\n  return (\\n    <React.Fragment>\\n      <div style={{ marginBottom: \\\"8px\\\" }}>\\n        <Button\\n          className=\\\"open-banner\\\"\\n          variant=\\\"primary\\\"\\n          onClick={() => setIsOpen(true)}\\n        >\\n          Open Banner Alert\\n        </Button>\\n      </div>\\n      <BannerAlert isOpen={isOpen} intent={intent}>\\n        <BannerAlertBody\\n          onClose={\\n            closeButton\\n              ? () => {\\n                  action(\\\"click\\\");\\n\\n                  setIsOpen(false);\\n                }\\n              : undefined\\n          }\\n        >\\n          <BannerAlertTitle>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n          </BannerAlertTitle>\\n          {description ? (\\n            <BannerAlertDescription>\\n              <BannerAlertDescriptionText>\\n                Ut enim ad minim veniam, quis nostrud exercitation ullamco\\n                laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure\\n                dolor in reprehenderit in voluptate velit esse cillum dolore eu\\n                fugiat nulla pariatur.\\n              </BannerAlertDescriptionText>\\n              <BannerAlertLink\\n                onClick={() => {\\n                  action(\\\"click\\\");\\n\\n                  alert(\\\"link!!\\\");\\n                }}\\n              >\\n                Reset\\n              </BannerAlertLink>\\n            </BannerAlertDescription>\\n          ) : (\\n            <BannerAlertLink\\n              onClick={() => {\\n                action(\\\"click\\\");\\n\\n                alert(\\\"link!!\\\");\\n              }}\\n            >\\n              Reset\\n            </BannerAlertLink>\\n          )}\\n        </BannerAlertBody>\\n      </BannerAlert>\\n    </React.Fragment>\\n  );\\n}\" }, ...BasicUse.parameters };\nMultiline.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"success\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n        >\\n          Move\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n}\" }, ...Multiline.parameters };\nTitleAndDescription.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"danger\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Here&apos;s a title for the banner</BannerAlertTitle>\\n        <BannerAlertDescription>\\n          <BannerAlertDescriptionText>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n            aliquip ex ea commodo consequat.\\n          </BannerAlertDescriptionText>\\n          <BannerAlertLink\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"link!!\\\");\\n            }}\\n          >\\n            Retry Action\\n          </BannerAlertLink>\\n        </BannerAlertDescription>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n}\" }, ...TitleAndDescription.parameters };\nCustomLinkComponent.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"warning\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"custom link!!\\\");\\n          }}\\n          intent=\\\"success\\\"\\n          as=\\\"a\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n}\" }, ...CustomLinkComponent.parameters };\nOptionalLink.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"info\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n}\" }, ...OptionalLink.parameters };\nOptionalCloseButton.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"warning\\\">\\n      <BannerAlertBody>\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n}\" }, ...OptionalCloseButton.parameters };\nIconOverride.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"success\\\">\\n      <BannerAlertBody\\n        Icon={<BannerAlertIcon intent=\\\"danger\\\" />}\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  );\\n}\" }, ...IconOverride.parameters };\nAccordion.parameters = { storySource: { source: \"({ intent, isOpen }: AccordionArgs) => {\\n  return (\\n    <BannerAlert isOpen intent={intent}>\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret={isOpen ? \\\"up\\\" : \\\"down\\\"}\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen={isOpen}>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"action!!\\\");\\n            }}\\n          >\\n            Click Me!\\n          </BannerAlertAction>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n}\" }, ...Accordion.parameters };\nAccordionWithDifferentIntent.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"danger\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret=\\\"up\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion intent=\\\"info\\\" isOpen>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"action!!\\\");\\n            }}\\n          >\\n            More Information\\n          </BannerAlertAction>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n}\" }, ...AccordionWithDifferentIntent.parameters };\nAccordionWithoutTitle.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"warning\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret=\\\"up\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"action!!\\\");\\n            }}\\n          >\\n            More Information\\n          </BannerAlertAction>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n}\" }, ...AccordionWithoutTitle.parameters };\nAccordionWithoutAction.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"danger\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret=\\\"up\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n}\" }, ...AccordionWithoutAction.parameters };\nAccordionWithCustomAction.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BannerAlert isOpen intent=\\\"info\\\">\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret=\\\"up\\\"\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen>\\n        <BannerAlertAccordionHeader>\\n          Some Title Here with Information\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            intent=\\\"danger\\\"\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"danger action!!\\\");\\n            }}\\n          >\\n            Cancel\\n          </BannerAlertAction>\\n          <span style={{ marginLeft: \\\"8px\\\" }}>\\n            <BannerAlertAction\\n              onClick={() => {\\n                action(\\\"click\\\");\\n\\n                alert(\\\"info action!!\\\");\\n              }}\\n            >\\n              More Info\\n            </BannerAlertAction>\\n          </span>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n}\" }, ...AccordionWithCustomAction.parameters };\nMultipleAccordionBodies.parameters = { storySource: { source: \"({ intent, isOpen }: AccordionArgs) => {\\n  return (\\n    <BannerAlert isOpen intent={intent}>\\n      <BannerAlertBody\\n        onClose={() => {\\n          action(\\\"click\\\");\\n\\n          alert(\\\"close!!\\\");\\n        }}\\n      >\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n          caret={isOpen ? \\\"up\\\" : \\\"down\\\"}\\n        >\\n          More Information\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n      <BannerAlertAccordion isOpen={isOpen}>\\n        <BannerAlertAccordionHeader>\\n          First Accordion Item\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionHeader>\\n          Second Accordion Item\\n        </BannerAlertAccordionHeader>\\n        <BannerAlertAccordionBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\n          culpa qui officia deserunt mollit anim id est laborum.\\n        </BannerAlertAccordionBody>\\n        <BannerAlertAccordionFooter>\\n          <BannerAlertAction\\n            onClick={() => {\\n              action(\\\"click\\\");\\n\\n              alert(\\\"action!!\\\");\\n            }}\\n          >\\n            Click Me!\\n          </BannerAlertAction>\\n        </BannerAlertAccordionFooter>\\n      </BannerAlertAccordion>\\n    </BannerAlert>\\n  );\\n}\" }, ...MultipleAccordionBodies.parameters };\nWithoutTransition.parameters = { storySource: { source: \"() => {\\n  return (\\n    <UntransitionedBannerAlert intent=\\\"info\\\">\\n      <BannerAlertBody>\\n        <BannerAlertTitle>Lorem ipsum dolor sit amet</BannerAlertTitle>\\n        <BannerAlertLink\\n          onClick={() => {\\n            action(\\\"click\\\");\\n\\n            alert(\\\"link!!\\\");\\n          }}\\n        >\\n          Action On Click!\\n        </BannerAlertLink>\\n      </BannerAlertBody>\\n    </UntransitionedBannerAlert>\\n  );\\n}\" }, ...WithoutTransition.parameters };\nInsideAModal.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"md\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <BannerAlert isOpen intent=\\\"warning\\\">\\n            <BannerAlertBody onClose={action(\\\"close\\\")}>\\n              <BannerAlertTitle>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n                eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n              </BannerAlertTitle>\\n              <BannerAlertLink onClick={action(\\\"click\\\")}>Move</BannerAlertLink>\\n            </BannerAlertBody>\\n          </BannerAlert>\\n          <br />\\n          <div>What do you think you&apos;re doing?</div>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...InsideAModal.parameters };\nInsideAForm.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setOpen] = React.useState(true);\\n  const [formWasSubmitted, setFormWasSubmitted] = React.useState(false);\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault();\\n\\n    setFormWasSubmitted(true);\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <BannerAlert isOpen={isOpen} intent=\\\"warning\\\">\\n        <BannerAlertBody onClose={() => setOpen(false)}>\\n          <BannerAlertTitle>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n            eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n          </BannerAlertTitle>\\n          <BannerAlertLink onClick={action(\\\"click\\\")}>Move</BannerAlertLink>\\n        </BannerAlertBody>\\n      </BannerAlert>\\n      {!isOpen && <Button onClick={() => setOpen(true)}>Re-open alert</Button>}\\n      <br />\\n      <FieldLabel label=\\\"Some Field\\\" htmlFor=\\\"some-field\\\">\\n        <Input id=\\\"some-field\\\" />\\n      </FieldLabel>\\n      <span className=\\\"submission-status\\\">\\n        The form has {formWasSubmitted ? \\\"\\\" : \\\"not\\\"} been submitted.\\n      </span>\\n    </form>\\n  );\\n}\" }, ...InsideAForm.parameters };","import React, { FC } from \"react\";\nimport classNames from \"classnames\";\n\nimport { UntransitionedBannerAlert } from \"../UntransitionedBannerAlert\";\n\nimport { BannerAlertProps } from \"./types\";\nimport { StyledBannerTransition } from \"./StyledBannerTransition\";\n\nexport const BannerAlert: FC<BannerAlertProps> = ({\n  isOpen,\n  className,\n  intent,\n  children,\n  ...props\n}) => {\n  return (\n    <StyledBannerTransition\n      className={classNames([\"bcl-banner-alert-transition\", className])}\n      isOpen={isOpen}\n      {...props}\n    >\n      <UntransitionedBannerAlert className={className} intent={intent}>\n        {children}\n      </UntransitionedBannerAlert>\n    </StyledBannerTransition>\n  );\n};\n\nBannerAlert.displayName = \"BannerAlert\";\n","import React, { FC, createContext } from \"react\";\n\nimport { Intent, IntentContextProviderProps } from \"../types\";\n\n/**\n * context that handles banner intent\n */\nexport const IntentContext = createContext<Intent>(\"\" as Intent);\n\nexport const IntentContextProvider: FC<IntentContextProviderProps> = ({\n  intent,\n  children,\n}) => (\n  <IntentContext.Provider value={intent}>{children}</IntentContext.Provider>\n);\n\nIntentContextProvider.displayName = \"IntentContextProvider\";\n","export { IntentContextProvider } from \"./IntentContext\";\n\nexport { IntentContext } from \"./IntentContext\";\n","import styled, { css } from \"styled-components\";\n\nimport { StyledBannerTransitionProps } from \"./types\";\n\n/*\n * We have to transition on max-height to have the height of the banner at 0 AND\n * make the transition look good.\n */\nconst closeCss = css`\n  opacity: 0;\n  visibility: hidden;\n  max-height: 0;\n  transition: opacity 0.5s ease-in-out, visibility 0.2s ease 0.6s,\n    max-height 0.2s ease-out 0.6s;\n`;\n\nexport const StyledBannerTransition = styled.div<StyledBannerTransitionProps>`\n  transition: opacity 0.5s ease-in-out;\n  opacity: 1;\n  max-height: 1000px;\n\n  ${({ isOpen }) => !isOpen && closeCss}\n`;\n","import { getIntentColor } from \"@braze/beacon-styling\";\nimport { ColorIntensityTypeNumeric } from \"@braze/beacon-theme\";\n\nimport { IntentColorArgs } from \"../types\";\n\n/**\n * function creator to get the color to display for a specific intent\n *\n * @param shade - the shade of color\n *\n * @return a function to get the intent color, given a intent and theme\n */\nexport const createGetIntentColor =\n  (shade: ColorIntensityTypeNumeric): ((props: IntentColorArgs) => string) =>\n  ({ intent, ...props }: IntentColorArgs): string => {\n    return getIntentColor(intent, shade)(props) || \"\";\n  };\n","export { createGetIntentColor } from \"./getIntentColor\";\n","export { BannerAlert } from \"./BannerAlert\";\n\nexport type { BannerAlertProps, Intent } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { IntentContext } from \"../BannerAlert/IntentContext\";\n\nimport { BannerAlertAccordionProps } from \"./types\";\nimport { StyledAccordion } from \"./StyledAccordion\";\n\nexport const BannerAlertAccordion = ({\n  isOpen,\n  intent: intentOverride,\n  children,\n  className,\n}: BannerAlertAccordionProps): React.ReactElement | null => {\n  const intent = useContext(IntentContext);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <StyledAccordion\n      className={classNames(\"bcl-banner-alert-accordion\", className)}\n      intent={intentOverride || intent}\n    >\n      {children}\n    </StyledAccordion>\n  );\n};\n\nBannerAlertAccordion.displayName = \"BannerAlertAccordion\";\n","import styled from \"styled-components\";\nimport { getSpacing, getRGBAValue } from \"@braze/beacon-styling\";\n\nimport { createGetIntentColor } from \"../BannerAlert/getIntentColor\";\n\nimport { StyledAccordionProps } from \"./types\";\n\n/**\n * get the background color to display for a specific intent\n *\n * @param intent - the intent to get the color for\n *\n * @return the color of the accordion background\n */\nconst getIntentBackgroundColor = createGetIntentColor(50);\n\nexport const StyledAccordion = styled.div<StyledAccordionProps>`\n  padding: ${getSpacing(\"xl\")};\n\n  background: ${(props) => getRGBAValue(getIntentBackgroundColor(props), 0.5)};\n`;\n","export { BannerAlertAccordion } from \"./BannerAlertAccordion\";\n\nexport type { BannerAlertAccordionProps } from \"./types\";\n","import styled from \"styled-components\";\nimport classNames from \"classnames\";\nimport { getColor, getFontSize } from \"@braze/beacon-styling\";\n\nimport { BannerAlertAccordionBodyProps } from \"./types\";\n\nconst getAttrs = ({\n  className,\n}: BannerAlertAccordionBodyProps): BannerAlertAccordionBodyProps => ({\n  className: classNames(\"bcl-banner-alert-accordion-body\", className),\n});\n\nexport const BannerAlertAccordionBody = styled.div.attrs(\n  getAttrs\n)<BannerAlertAccordionBodyProps>`\n  color: ${getColor(\"gray\", 800)};\n  font-size: ${getFontSize(\"body\", \"xs\")};\n`;\n\nBannerAlertAccordionBody.displayName = \"BannerAlertAccordionBody\";\n","export { BannerAlertAccordionBody } from \"./BannerAlertAccordionBody\";\n\nexport type { BannerAlertAccordionBodyProps } from \"./types\";\n","import styled from \"styled-components\";\nimport classNames from \"classnames\";\nimport { getSpacing } from \"@braze/beacon-styling\";\n\nimport { BannerAlertAccordionFooterProps } from \"./types\";\n\nconst getAttrs = ({ className }: BannerAlertAccordionFooterProps) => ({\n  className: classNames(\"bcl-banner-alert-accordion-footer\", className),\n});\n\nexport const BannerAlertAccordionFooter = styled.div.attrs(\n  getAttrs\n)<BannerAlertAccordionFooterProps>`\n  display: flex;\n  justify-content: flex-end;\n  padding-top: ${getSpacing(\"xl\")};\n`;\n\nBannerAlertAccordionFooter.displayName = \"BannerAlertAccordionFooter\";\n","export { BannerAlertAccordionFooter } from \"./BannerAlertAccordionFooter\";\n\nexport type { BannerAlertAccordionFooterProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { StyledBannerAlertAccordionHeaderProps } from \"./types\";\nimport { StyledBannerAlertAccordionHeader } from \"./StyledBannerAlertAccordionHeader\";\n\nexport const BannerAlertAccordionHeader = ({\n  className,\n  ...props\n}: StyledBannerAlertAccordionHeaderProps): React.ReactElement => (\n  <StyledBannerAlertAccordionHeader\n    {...props}\n    className={classNames(\"bcl-banner-alert-accordion-header\", className)}\n    level={6}\n  />\n);\n\nBannerAlertAccordionHeader.displayName = \"BannerAlertAccordionHeader\";\n","import styled from \"styled-components\";\nimport { getColor, getSpacing } from \"@braze/beacon-styling\";\n\nimport { Heading } from \"../Heading\";\n\nimport { StyledBannerAlertAccordionHeaderProps } from \"./types\";\n\nexport const StyledBannerAlertAccordionHeader = styled(\n  Heading\n)<StyledBannerAlertAccordionHeaderProps>`\n  &:not(:first-of-type) {\n    border-top: 1px solid ${getColor(\"gray\", 200)};\n    margin-top: ${getSpacing(\"lg\")};\n    padding-top: ${getSpacing(\"lg\")};\n  }\n`;\n","export { BannerAlertAccordionHeader } from \"./BannerAlertAccordionHeader\";\n\nexport type { BannerAlertAccordionHeaderProps } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { Button } from \"../Button\";\nimport { IntentContext } from \"../BannerAlert/IntentContext\";\n\nimport { BannerAlertActionProps } from \"./types\";\n\nexport const BannerAlertAction = ({\n  intent: intentOverride,\n  className,\n  ...props\n}: BannerAlertActionProps): React.ReactElement => {\n  const intent = useContext(IntentContext);\n\n  return (\n    <Button\n      className={classNames(\"bcl-banner-alert-action\", className)}\n      variant=\"primary\"\n      size=\"sm\"\n      intent={intentOverride || intent}\n      {...props}\n    />\n  );\n};\n\nBannerAlertAction.displayName = \"BannerAlertAction\";\n","export { BannerAlertAction } from \"./BannerAlertAction\";\n\nexport type { BannerAlertActionProps } from \"./types\";\n","import React, { useContext } from \"react\";\n\nimport { BannerAlertClose } from \"../BannerAlertClose\";\nimport { BannerAlertIcon } from \"../BannerAlertIcon\";\nimport { IntentContext } from \"../BannerAlert/IntentContext\";\n\nimport { BannerAlertBodyProps } from \"./types\";\nimport { StyledBannerBodyWrapper } from \"./StyledBannerBodyWrapper\";\nimport { StyledBannerBody } from \"./StyledBannerBody\";\nimport { StyledBodyWrapper } from \"./StyledBodyWrapper\";\n\nexport const BannerAlertBody = ({\n  children,\n  onClose,\n  Icon,\n  ...props\n}: BannerAlertBodyProps): React.ReactElement => {\n  const intent = useContext(IntentContext);\n\n  return (\n    <StyledBannerBodyWrapper\n      className=\"bcl-banner-alert-body\"\n      hasClose={!!onClose}\n      {...props}\n    >\n      <StyledBannerBody className=\"bcl-banner-alert-inner-body\">\n        <div className=\"bcl-banner-alert-body-icon\">\n          {Icon || <BannerAlertIcon intent={intent} />}\n        </div>\n        <StyledBodyWrapper className=\"bcl-banner-alert-body-children-wrapper\">\n          {children}\n        </StyledBodyWrapper>\n      </StyledBannerBody>\n      {onClose ? <BannerAlertClose intent={intent} onClose={onClose} /> : null}\n    </StyledBannerBodyWrapper>\n  );\n};\n\nBannerAlertBody.displayName = \"BannerAlertBody\";\n","import styled from \"styled-components\";\n\nexport const StyledBannerBody = styled.div`\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n`;\n","import styled, { css } from \"styled-components\";\nimport { getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledBannerBodyWrapperProps } from \"./types\";\n\nconst getPadding = ({ hasClose }: StyledBannerBodyWrapperProps) => {\n  if (hasClose) return null;\n\n  return css`\n    padding-right: ${getSpacing(\"md\")};\n  `;\n};\n\nexport const StyledBannerBodyWrapper = styled.div<StyledBannerBodyWrapperProps>`\n  display: flex;\n  align-items: stretch;\n\n  ${getPadding}\n`;\n","import styled from \"styled-components\";\n\nexport const StyledBodyWrapper = styled.div`\n  padding: 12px 0;\n`;\n","export { BannerAlertBody } from \"./BannerAlertBody\";\n\nexport type { BannerAlertBodyProps } from \"./types\";\n","import React from \"react\";\nimport { getColor } from \"@braze/beacon-styling\";\n\nimport { Icon } from \"../Icon\";\n\nimport { BannerAlertCloseProps } from \"./types\";\nimport { StyledClose } from \"./StyledClose\";\n\nexport const BannerAlertClose = ({\n  intent,\n  onClose,\n}: BannerAlertCloseProps): React.ReactElement => (\n  <StyledClose\n    type=\"button\"\n    className=\"bcl-banner-alert-close\"\n    intent={intent}\n    onClick={onClose}\n    aria-label=\"Close\"\n  >\n    <Icon name=\"times\" color={getColor(\"gray\", 300)} />\n  </StyledClose>\n);\n\nBannerAlertClose.displayName = \"BannerAlertClose\";\n","import styled from \"styled-components\";\n\nimport { createGetIntentColor } from \"../BannerAlert/getIntentColor\";\n\nimport { StyledProps } from \"./types\";\n\n/**\n * get the background color for a specific intent on button hover\n *\n * @param intent - the intent to get the color for\n *\n * @return the color for that intent\n */\nexport const getIntentHoverBackgroundColor = createGetIntentColor(50);\n\nexport const StyledClose = styled.button<StyledProps>`\n  width: 40px;\n  flex: 0 0 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  background: none;\n  border: none;\n  padding: 0;\n  margin: 0;\n\n  font-size: 10px;\n\n  cursor: pointer;\n\n  &:hover {\n    background: ${getIntentHoverBackgroundColor};\n  }\n`;\n","export { BannerAlertClose } from \"./BannerAlertClose\";\n\nexport type { BannerAlertCloseProps } from \"./types\";\n","import styled from \"styled-components\";\nimport classNames from \"classnames\";\nimport { getColor, getFontSize, getFontWeight } from \"@braze/beacon-styling\";\n\nimport { BannerAlertDescriptionProps } from \"./types\";\n\nconst getAttrs = ({\n  className,\n}: BannerAlertDescriptionProps): BannerAlertDescriptionProps => ({\n  className: classNames(\"bcl-banner-alert-description\", className),\n});\n\nexport const BannerAlertDescription = styled.div.attrs(\n  getAttrs\n)<BannerAlertDescriptionProps>`\n  font-size: ${getFontSize(\"body\", \"xs\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  color: ${getColor(\"gray\", 900)};\n`;\n\nBannerAlertDescription.displayName = \"BannerAlertDescription\";\n","export { BannerAlertDescription } from \"./BannerAlertDescription\";\n\nexport type { BannerAlertDescriptionProps } from \"./types\";\n","import styled from \"styled-components\";\nimport classNames from \"classnames\";\n\nimport { BannerAlertDescriptionTextProps } from \"./types\";\n\nconst getAttrs = ({\n  className,\n}: BannerAlertDescriptionTextProps): BannerAlertDescriptionTextProps => ({\n  className: classNames(\"bcl-banner-alert-description-text\", className),\n});\n\nexport const BannerAlertDescriptionText = styled.span.attrs(\n  getAttrs\n)<BannerAlertDescriptionTextProps>`\n  margin: 0 10px 0 0;\n`;\n\nBannerAlertDescriptionText.displayName = \"BannerAlertDescriptionText\";\n","export { BannerAlertDescriptionText } from \"./BannerAlertDescriptionText\";\n\nexport type { BannerAlertDescriptionTextProps } from \"./types\";\n","import React from \"react\";\nimport { getIntentColor } from \"@braze/beacon-styling\";\n\nimport { Icon, BrazeIconName } from \"../Icon\";\nimport { Intent } from \"../BannerAlert\";\n\nimport { BannerAlertIconProps } from \"./types\";\nimport { StyledBannerIcon } from \"./StyledBannerIcon\";\n\n/**\n * get the icon to display for a specific intent\n *\n * @param intent - the intent to get an icon for\n *\n * @return the name of the icon to display\n */\nexport const getIcon = (intent: Intent): BrazeIconName => {\n  if (intent === \"info\") {\n    return \"info\";\n  }\n\n  if (intent === \"warning\") {\n    return \"exclamation\";\n  }\n\n  if (intent === \"danger\") {\n    return \"times\";\n  }\n\n  return \"check\";\n};\n\nexport const BannerAlertIcon = ({\n  intent,\n}: BannerAlertIconProps): React.ReactElement => (\n  <StyledBannerIcon\n    className=\"bcl-banner-alert-icon\"\n    intent={intent}\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    boxMargin={{ vertical: \"none\", horizontal: \"md\" }}\n  >\n    <Icon name={getIcon(intent)} color={getIntentColor(intent, 500)} />\n  </StyledBannerIcon>\n);\n\nBannerAlertIcon.displayName = \"BannerAlertIcon\";\n","import styled from \"styled-components\";\n\nimport { FlexBox } from \"../FlexBox\";\nimport { createGetIntentColor } from \"../BannerAlert/getIntentColor\";\n\nimport { StyledBannerIconProps } from \"./types\";\n\nexport const getIntentBackgroundColor = createGetIntentColor(100);\n\nexport const StyledBannerIcon = styled(FlexBox)<StyledBannerIconProps>`\n  height: 24px;\n  width: 24px;\n\n  border-radius: 100%;\n  background: ${getIntentBackgroundColor};\n\n  font-size: ${({ intent }) => (intent === \"danger\" ? \"10px;\" : \"8px\")};\n`;\n","export { BannerAlertIcon } from \"./BannerAlertIcon\";\n\nexport type { BannerAlertIconProps } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { ButtonProps as StyledButtonProps } from \"../Button\";\nimport { Icon, BrazeIconName } from \"../Icon\";\nimport { IntentContext } from \"../BannerAlert/IntentContext\";\n\nimport { StyledBannerButton } from \"./StyledBannerButton\";\nimport { StyledBannerLink } from \"./StyledBannerLink\";\nimport { StyledCaretWrapper } from \"./StyledCaretWrapper\";\nimport { BannerAlertLinkProps, StyledLinkProps } from \"./types\";\n\nexport const BannerAlertLink = ({\n  intent: intentOverride,\n  children,\n  className,\n  onClick,\n  as = \"button\",\n  caret,\n  ...props\n}: BannerAlertLinkProps): React.ReactElement => {\n  const intentContext = useContext(IntentContext);\n  const intent = intentOverride || intentContext;\n\n  const caretName = `angle-${caret}` as BrazeIconName;\n\n  return as === \"a\" ? (\n    <StyledBannerLink\n      {...(props as StyledLinkProps)}\n      className={classNames(\"bcl-banner-alert-link\", className)}\n      onClick={onClick}\n      intent={intent}\n    >\n      {children}\n      {caret ? (\n        <StyledCaretWrapper>\n          <Icon name={caretName} />\n        </StyledCaretWrapper>\n      ) : null}\n    </StyledBannerLink>\n  ) : (\n    <StyledBannerButton\n      onClick={onClick}\n      intent={intent}\n      {...(props as StyledButtonProps)}\n      className={classNames(\"bcl-banner-alert-link\", classNames)}\n    >\n      {children}\n      {caret ? (\n        <StyledCaretWrapper>\n          <Icon name={caretName} />\n        </StyledCaretWrapper>\n      ) : null}\n    </StyledBannerButton>\n  );\n};\n\nBannerAlertLink.displayName = \"BannerAlertLink\";\n","import { css } from \"styled-components\";\nimport {\n  getFontSize,\n  getFontFamily,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\n/** css for styling both the button and the link */\nexport const bannerAlertLinkStyling = css`\n  display: inline-flex;\n  cursor: pointer;\n\n  font-weight: bold;\n  font-size: ${getFontSize(\"body\", \"xs\")};\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  text-decoration: underline;\n`;\n","export { bannerAlertLinkStyling } from \"./bannerAlertLinkStyling\";\n","import styled from \"styled-components\";\n\nimport { Button, StyledButtonContent } from \"../Button\";\n\nimport { bannerAlertLinkStyling } from \"./BannerAlertLinkStyling\";\n\nexport const StyledBannerButton = styled(Button).attrs((props) => ({\n  variant: \"quaternary\",\n  ...props,\n}))`\n  ${bannerAlertLinkStyling}\n\n  ${StyledButtonContent} > *:not(:last-of-type) {\n    margin-right: 0;\n  }\n`;\n\nStyledBannerButton.displayName = \"StyledBannerButton\";\n","import styled from \"styled-components\";\n\nimport { Link } from \"../Link\";\nimport { createGetIntentColor } from \"../BannerAlert/getIntentColor\";\n\nimport { bannerAlertLinkStyling } from \"./BannerAlertLinkStyling\";\nimport { StyledLinkProps } from \"./types\";\n\n/**\n * get the link color to display for a specific intent\n *\n * @param intent - the intent to get the color for\n *\n * @return the color of the link\n */\nexport const getIntentColor = createGetIntentColor(500);\n\n/**\n * get the link color to display on hover for a specific intent\n *\n * @param intent - the intent to get the color for\n *\n * @return the color of the link on hover\n */\nexport const getIntentHoverColor = createGetIntentColor(400);\n\nexport const StyledBannerLink = styled(Link)<StyledLinkProps>`\n  ${bannerAlertLinkStyling}\n\n  color: ${getIntentColor};\n  text-decoration-color: ${getIntentColor};\n\n  &:hover {\n    color: ${getIntentHoverColor};\n    text-decoration-color: ${getIntentHoverColor};\n  }\n`;\n\nStyledBannerLink.displayName = \"StyledBannerLink\";\n","import styled from \"styled-components\";\n\nexport const StyledCaretWrapper = styled.span`\n  margin-left: 5px;\n  line-height: 1;\n`;\n","export { BannerAlertLink } from \"./BannerAlertLink\";\n\nexport type { BannerAlertLinkProps } from \"./types\";\n","import styled from \"styled-components\";\nimport classNames from \"classnames\";\nimport {\n  getFontFamily,\n  getColor,\n  getFontWeight,\n  getFontSize,\n} from \"@braze/beacon-styling\";\n\nimport { BannerAlertTitleProps } from \"./types\";\n\nconst getAttrs = ({\n  className,\n}: BannerAlertTitleProps): BannerAlertTitleProps => ({\n  className: classNames(\"bcl-banner-alert-title\", className),\n});\n\nexport const BannerAlertTitle = styled.span.attrs(\n  getAttrs\n)<BannerAlertTitleProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-size: ${getFontSize(\"body\", \"xs\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  color: ${getColor(\"gray\", 800)};\n  margin: 0 10px 0 0;\n`;\n\nBannerAlertTitle.displayName = \"BannerAlertTitle\";\n","export { BannerAlertTitle } from \"./BannerAlertTitle\";\n\nexport type { BannerAlertTitleProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { select, withKnobs } from \"@storybook/addon-knobs\";\nimport { Icon } from \"../Icon\";\nimport { LoremIpsum } from \"../LoremIpsum\";\nimport { BodyText } from \"./BodyText\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"bodytext\"\n    }}>{`BodyText`}</h1>\n    <Meta title=\"Core/Text/BodyText\" component={BodyText} mdxType=\"Meta\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`BodyText`}</inlineCode>{` component is built using the typography tokens.\nPrefer using this component when incorporating undecorated text\nelements into components or your application rather than\nreferencing typography tokens in your styles.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`See below for some sample use cases on how the `}<inlineCode parentName=\"p\">{`BodyText`}</inlineCode>{` component\ncan be used in different ways.`}</p>\n    <h3 {...{\n      \"id\": \"default-case\"\n    }}>{`Default Case`}</h3>\n    <p>{`Body text is represented by a `}<inlineCode parentName=\"p\">{`BodyText`}</inlineCode>{` component. These\ncome in medium and small sizes. Labels for form components use a\nspecial size as well.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Go to the canvas tab to interact with the font family, size and\nvariants.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-bodytext--default-case\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <p>{`Below is an example usage of the `}<inlineCode parentName=\"p\">{`BodyText`}</inlineCode>{` component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-bodytext--usage-example\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`what the component should be rendered as`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is a class name to apply to the styled component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fontFamily`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"base\", \"code\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"base\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`font family that should be used when rendering text`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fontWeight`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"bold\", \"regular\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"regular\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`font-family that should be used when rendering text`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"sm\", \"md\", \"label\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"md\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`which size the component should be`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"success\", \"danger\", \"warning\", \"info\", \"hint\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`which variant the component should be`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{}}>{`<BodyText\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nconst componentMeta = { includeStories: [],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { LoremIpsum } from \\\"../LoremIpsum\\\";\\n\\nimport page from \\\"./BodyText.docs.mdx\\\";\\n\\nimport { BodyText, BodyTextProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Text/BodyText\\\",\\n  component: BodyText,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\ninterface DefaultCaseArgs extends Omit<BodyTextProps, \\\"variant\\\" | \\\"size\\\"> {\\n  variant: BodyTextProps[\\\"variant\\\"] | \\\"default\\\";\\n  size: BodyTextProps[\\\"size\\\"] | \\\"default\\\";\\n}\\n\\nexport const DefaultCase = ({ variant, size, ...rest }: DefaultCaseArgs) => {\\n  const actualVariant = variant === \\\"default\\\" ? undefined : variant;\\n  const actualSize = size === \\\"default\\\" ? undefined : size;\\n\\n  return (\\n    <BodyText {...rest} variant={actualVariant} size={actualSize}>\\n      <LoremIpsum paragraphs={4} />\\n    </BodyText>\\n  );\\n};\\n\\nDefaultCase.argTypes = {\\n  fontFamily: {\\n    control: { type: \\\"radio\\\" },\\n    options: [\\\"base\\\", \\\"code\\\"],\\n  },\\n  fontWeight: {\\n    control: { type: \\\"radio\\\" },\\n    options: [\\\"regular\\\", \\\"bold\\\"],\\n  },\\n  variant: {\\n    control: { type: \\\"radio\\\" },\\n    options: [\\\"default\\\", \\\"success\\\", \\\"danger\\\", \\\"warning\\\", \\\"info\\\", \\\"hint\\\"],\\n  },\\n  size: {\\n    control: { type: \\\"radio\\\" },\\n    options: [\\\"default\\\", \\\"md\\\", \\\"sm\\\", \\\"label\\\"],\\n  },\\n};\\n\\nDefaultCase.args = {\\n  fontFamily: \\\"base\\\",\\n  fontWeight: \\\"bold\\\",\\n  size: \\\"md\\\",\\n  variant: \\\"default\\\",\\n};\\n\\nexport const UsageExample = () => {\\n  return (\\n    <BodyText size=\\\"md\\\" variant=\\\"info\\\" hidden={false}>\\n      <LoremIpsum />\\n    </BodyText>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DefaultCase\":{\"startLoc\":{\"col\":27,\"line\":23},\"endLoc\":{\"col\":1,\"line\":32},\"startBody\":{\"col\":27,\"line\":23},\"endBody\":{\"col\":1,\"line\":32}},\"UsageExample\":{\"startLoc\":{\"col\":28,\"line\":60},\"endLoc\":{\"col\":1,\"line\":66},\"startBody\":{\"col\":28,\"line\":60},\"endBody\":{\"col\":1,\"line\":66}}};\n    \nimport React from \"react\";\n\nimport { LoremIpsum } from \"../LoremIpsum\";\n\nimport page from \"./BodyText.docs.mdx\";\n\nimport { BodyText, BodyTextProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Text/BodyText\",\n  component: BodyText,\n  parameters: {\n    docs: { page },\n  },\n};\n\ninterface DefaultCaseArgs extends Omit<BodyTextProps, \"variant\" | \"size\"> {\n  variant: BodyTextProps[\"variant\"] | \"default\";\n  size: BodyTextProps[\"size\"] | \"default\";\n}\n\nexport const DefaultCase = ({ variant, size, ...rest }: DefaultCaseArgs) => {\n  const actualVariant = variant === \"default\" ? undefined : variant;\n  const actualSize = size === \"default\" ? undefined : size;\n\n  return (\n    <BodyText {...rest} variant={actualVariant} size={actualSize}>\n      <LoremIpsum paragraphs={4} />\n    </BodyText>\n  );\n};;\n\nDefaultCase.argTypes = {\n  fontFamily: {\n    control: { type: \"radio\" },\n    options: [\"base\", \"code\"],\n  },\n  fontWeight: {\n    control: { type: \"radio\" },\n    options: [\"regular\", \"bold\"],\n  },\n  variant: {\n    control: { type: \"radio\" },\n    options: [\"default\", \"success\", \"danger\", \"warning\", \"info\", \"hint\"],\n  },\n  size: {\n    control: { type: \"radio\" },\n    options: [\"default\", \"md\", \"sm\", \"label\"],\n  },\n};\n\nDefaultCase.args = {\n  fontFamily: \"base\",\n  fontWeight: \"bold\",\n  size: \"md\",\n  variant: \"default\",\n};\n\nexport const UsageExample = () => {\n  return (\n    <BodyText size=\"md\" variant=\"info\" hidden={false}>\n      <LoremIpsum />\n    </BodyText>\n  );\n};\n\n\n\nDefaultCase.parameters = { storySource: { source: \"({ variant, size, ...rest }: DefaultCaseArgs) => {\\n  const actualVariant = variant === \\\"default\\\" ? undefined : variant;\\n  const actualSize = size === \\\"default\\\" ? undefined : size;\\n\\n  return (\\n    <BodyText {...rest} variant={actualVariant} size={actualSize}>\\n      <LoremIpsum paragraphs={4} />\\n    </BodyText>\\n  );\\n}\" }, ...DefaultCase.parameters };\nUsageExample.parameters = { storySource: { source: \"() => {\\n  return (\\n    <BodyText size=\\\"md\\\" variant=\\\"info\\\" hidden={false}>\\n      <LoremIpsum />\\n    </BodyText>\\n  );\\n}\" }, ...UsageExample.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { BodyTextProps } from \"./types\";\nimport { StyledBodyText } from \"./StyledBodyText\";\n\nexport const BodyText = React.forwardRef(\n  (\n    { className, fontFamily = \"base\", size = \"md\", ...props }: BodyTextProps,\n    ref: React.RefObject<HTMLSpanElement>\n  ) => (\n    <StyledBodyText\n      {...props}\n      ref={ref}\n      className={classNames([\"bcl-BodyText\", \"bcl-body-text\", className])}\n      fontFamily={fontFamily}\n      size={size}\n    />\n  )\n);\n\nBodyText.displayName = \"BodyText\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getColor,\n  intentColorSelector,\n  colorSelector,\n  getFontSize,\n  fontFamilySelector,\n  getFontWeight,\n  fontWeightSelector,\n} from \"@braze/beacon-styling\";\n\nimport { StyledBodyTextProps } from \"./types\";\n\nfunction getBodyStyles({ size }: StyledBodyTextProps) {\n  switch (size) {\n    case \"sm\":\n      return css`\n        color: ${getColor(\"gray\", 900)};\n        font-size: ${getFontSize(\"body\", \"xs\")};\n        line-height: 18px;\n      `;\n    case \"label\":\n      return css`\n        font-size: ${getFontSize(\"body\", \"sm\")};\n        color: ${getColor(\"gray\", 800)};\n        font-weight: ${getFontWeight(\"bold\")};\n      `;\n    case \"md\":\n    default:\n      return css`\n        color: ${getColor(\"gray\", 900)};\n        font-size: ${getFontSize(\"body\", \"md\")};\n        line-height: 20px;\n      `;\n  }\n}\n\nfunction getBodyVariant({ variant, ...props }: StyledBodyTextProps) {\n  switch (variant) {\n    case \"success\":\n    case \"danger\":\n    case \"warning\":\n      return css`\n        color: ${intentColorSelector(props, variant, 500)};\n      `;\n    case \"info\":\n      return css`\n        color: ${intentColorSelector(props, \"primary\", 500)};\n      `;\n    case \"hint\":\n      return css`\n        color: ${colorSelector(props, \"gray\", 600)};\n      `;\n    default:\n      return null;\n  }\n}\n\nconst getBodyFontFamily = ({\n  fontFamily = \"base\",\n  ...props\n}: StyledBodyTextProps) => {\n  return css`\n    font-family: ${fontFamilySelector(props, fontFamily)};\n  `;\n};\n\nconst getBodyFontWeight = ({ fontWeight, ...props }: StyledBodyTextProps) => {\n  if (!fontWeight) {\n    return null;\n  }\n\n  return css`\n    font-weight: ${fontWeightSelector(props, fontWeight)};\n  `;\n};\n\nexport const StyledBodyText = styled.span<StyledBodyTextProps>`\n  ${getBodyFontFamily};\n  ${getBodyStyles};\n  ${getBodyVariant};\n  ${getBodyFontWeight};\n\n  font-style: ${(props) => props.italic && \"italic\"};\n  text-decoration: ${(props) => props.decoration};\n`;\n","export { BodyText } from \"./BodyText\";\n\nexport { StyledBodyText } from \"./StyledBodyText\";\n\nexport type {\n  BodyTextProps,\n  BodyTextSizes,\n  BodyTextVariants,\n  BodyTextDecorations,\n} from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"box\"\n    }}>{`Box`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component is a base-level component you to create visual sections with\nhelpful styling tools attached. It can do things like calculate spacing and\nsetting styling.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Often, a section of the DOM has margin and padding applied to it. The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{`\ncomponent can set these css properties for all 4 dimensions when passed a\nspacing option.`}</p>\n    <p>{`The teal border shows the margin. The rose border shows the padding.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-box--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"multiple-sizes\"\n    }}>{`Multiple Sizes`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component can also set each of the 4 dimensions seperately.`}</p>\n    <p>{`The teal border shows the margin. The rose border shows the padding.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-box--multiple-sizes\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"convenience-sizes\"\n    }}>{`Convenience Sizes`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component provides `}<inlineCode parentName=\"p\">{`horizontal`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`vertical`}</inlineCode>{` sizing props.\n`}<inlineCode parentName=\"p\">{`horizontal`}</inlineCode>{` will set the left and right dimensions. `}<inlineCode parentName=\"p\">{`vertical`}</inlineCode>{` will set the top\nand bottom dimensions.`}</p>\n    <p>{`The teal border shows the margin. The rose border shows the padding.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-box--convenience-sizes\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"inline\"\n    }}>{`Inline`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component can be made to display using the `}<inlineCode parentName=\"p\">{`inline-block`}</inlineCode>{`\nattribute by passing it an `}<inlineCode parentName=\"p\">{`inline={true}`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-box--inline\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"other-styling\"\n    }}>{`Other Styling`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component can apply other styles along with spacing. Below is an\nexample showing how to apply flexbox.`}</p>\n    <p>{`The teal border shows the margin. The rose border shows the padding. The green\nborder shows the children's borders.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-box--other-styling\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"spacing-without-box\"\n    }}>{`Spacing Without Box`}</h3>\n    <p>{`While it is encouraged to use the `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component, if spacing needs to be\napplied to other components the `}<inlineCode parentName=\"p\">{`getBoxCss`}</inlineCode>{` function has been made available\nfor use.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getBoxCss`}</inlineCode>{` takes the same types as `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` for margin and padding.`}</p>\n    <p>{`The teal border shows the margin. The rose border shows the padding.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-box--spacing-without-box\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"as-another-element-type\"\n    }}>{`As another element type`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component can be configured to render any other valid React\ncomponent or HTML element via the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop. This is especially useful\nwhen you want a semantically correct container.`}</p>\n    <p>{`Note below that the box is being rendered as a `}<inlineCode parentName=\"p\">{`section`}</inlineCode>{` instead of the\ndefault `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-box--as-another-element\" mdxType=\"Story\" />\n    </Canvas>\n    <p>{`Note also that `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`s are rendered as `}<inlineCode parentName=\"p\">{`display: block`}</inlineCode>{` elements by\ndefault, therefore changing the underlying element to something that\ndoes not render the same way may change the appearance of your\ncontainer. In such scenarios, you may need to wrap your desired\ncomponent with a `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` instead, as shown in earlier stories on this page.`}</p>\n    <p>{`See below a `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` rendered using `}<inlineCode parentName=\"p\">{`span`}</inlineCode>{` as its `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<div\n  className=\"wrapper-display\"\n  style={{\n    display: \"inline-block\",\n    border: \"1px solid\",\n    borderColor: getColor(\"lightBlue\", 500)({ theme }),\n  }}\n>\n  <Box\n    boxMargin=\"md\"\n    boxPadding=\"xl\"\n    style={{\n      border: \"1px solid\",\n      borderColor: getColor(\"red\", 500)({ theme }),\n    }}\n    as=\"span\"\n  >\n    <BodyText>I need spacing!</BodyText>\n  </Box>\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Box } from \"@braze/beacon-core\";\nimport { getBoxCss } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <p>{`These type definitions are needed to understand the property types.`}</p>\n    <h4 {...{\n      \"id\": \"spacingoptions\"\n    }}>{`SpacingOptions`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type SpacingOptions =\n  | \"none\"\n  | \"xs\"\n  | \"sm\"\n  | \"md\"\n  | \"lg\"\n  | \"xl\"\n  | \"xxl\"\n  | \"xxxl\";\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"boxspecs\"\n    }}>{`BoxSpecs`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface BoxSpecs {\n  left?: SpacingOptions;\n  right?: SpacingOptions;\n  top?: SpacingOptions;\n  bottom?: SpacingOptions;\n  vertical?: SpacingOptions;\n  horizontal?: SpacingOptions;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`div`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates what tag what the component should be rendered as`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boxMargin`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(SpacingOptions, BoxSpecs)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`margin options to calculate spacing from`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boxPadding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(SpacingOptions, BoxSpecs)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`padding options to calculate spacing from`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`inline`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that 'inline-block' should be used for display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`style`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`CSSObject`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`styles to be passed to the `}<inlineCode parentName=\"td\">{`Box`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`styledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { getColor } from \\\"@braze/beacon-styling\\\";\\nimport theme from \\\"@braze/beacon-theme\\\";\\nimport { css } from \\\"styled-components\\\";\\n\\nimport { BodyText } from \\\"../BodyText\\\";\\n\\nimport { Box } from \\\"./Box\\\";\\nimport { BoxSpecs, getBoxCss } from \\\"./getBoxCss\\\";\\nimport page from \\\"./Box.docs.mdx\\\";\\n\\nimport { BoxProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Layout/Box\\\",\\n  component: Box,\\n  parameters: { docs: { page } },\\n};\\n\\nexport const BasicUse = ({ inline }: BoxProps) => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin=\\\"md\\\"\\n        boxPadding=\\\"xl\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n        inline={inline}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n};\\n\\nBasicUse.args = {\\n  inline: false,\\n};\\n\\nexport const MultipleSizes = () => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin={{ left: \\\"sm\\\", right: \\\"md\\\", top: \\\"xxl\\\", bottom: \\\"sm\\\" }}\\n        boxPadding={{ left: \\\"xl\\\", right: \\\"lg\\\", top: \\\"xs\\\", bottom: \\\"md\\\" }}\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n};\\n\\nexport const ConvenienceSizes = () => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin={{ horizontal: \\\"md\\\", top: \\\"xxl\\\", bottom: \\\"xs\\\" }}\\n        boxPadding={{ vertical: \\\"sm\\\", left: \\\"xxxl\\\", right: \\\"lg\\\" }}\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n};\\n\\nexport const Inline = () => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin=\\\"md\\\"\\n        boxPadding=\\\"xl\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n        inline\\n      >\\n        <BodyText>I am inline!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n};\\n\\nexport const OtherStyling = () => {\\n  const otherCss = css`\\n    background-color: aliceblue;\\n  `;\\n\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin=\\\"lg\\\"\\n        boxPadding=\\\"sm\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n          display: \\\"flex\\\",\\n          alignItems: \\\"center\\\",\\n          justifyContent: \\\"space-around\\\",\\n        }}\\n        styledCss={otherCss}\\n      >\\n        <BodyText\\n          style={{\\n            border: \\\"1px solid\\\",\\n            borderColor: getColor(\\\"green\\\", 500)({ theme }),\\n          }}\\n        >\\n          Flex Box 1!\\n        </BodyText>\\n        <BodyText\\n          style={{\\n            border: \\\"1px solid\\\",\\n            borderColor: getColor(\\\"green\\\", 500)({ theme }),\\n            height: \\\"100px\\\",\\n          }}\\n        >\\n          Flex Box 2!\\n        </BodyText>\\n        <BodyText\\n          style={{\\n            border: \\\"1px solid\\\",\\n            borderColor: getColor(\\\"green\\\", 500)({ theme }),\\n          }}\\n        >\\n          Flex Box 3!\\n        </BodyText>\\n      </Box>\\n    </div>\\n  );\\n};\\n\\nexport const SpacingWithoutBox = () => {\\n  const margin = \\\"sm\\\";\\n  const padding: BoxSpecs = {\\n    left: \\\"xxl\\\",\\n    right: \\\"lg\\\",\\n    top: \\\"md\\\",\\n    bottom: \\\"xs\\\",\\n  };\\n  const boxStyles = getBoxCss(margin, padding, { theme });\\n\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <div\\n        style={{\\n          ...boxStyles,\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport const AsAnotherElement = () => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin=\\\"md\\\"\\n        boxPadding=\\\"xl\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n        as=\\\"section\\\"\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":21},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":24,\"line\":21},\"endBody\":{\"col\":1,\"line\":44}},\"MultipleSizes\":{\"startLoc\":{\"col\":29,\"line\":50},\"endLoc\":{\"col\":1,\"line\":72},\"startBody\":{\"col\":29,\"line\":50},\"endBody\":{\"col\":1,\"line\":72}},\"ConvenienceSizes\":{\"startLoc\":{\"col\":32,\"line\":74},\"endLoc\":{\"col\":1,\"line\":96},\"startBody\":{\"col\":32,\"line\":74},\"endBody\":{\"col\":1,\"line\":96}},\"Inline\":{\"startLoc\":{\"col\":22,\"line\":98},\"endLoc\":{\"col\":1,\"line\":121},\"startBody\":{\"col\":22,\"line\":98},\"endBody\":{\"col\":1,\"line\":121}},\"OtherStyling\":{\"startLoc\":{\"col\":28,\"line\":123},\"endLoc\":{\"col\":1,\"line\":176},\"startBody\":{\"col\":28,\"line\":123},\"endBody\":{\"col\":1,\"line\":176}},\"SpacingWithoutBox\":{\"startLoc\":{\"col\":33,\"line\":178},\"endLoc\":{\"col\":1,\"line\":208},\"startBody\":{\"col\":33,\"line\":178},\"endBody\":{\"col\":1,\"line\":208}},\"AsAnotherElement\":{\"startLoc\":{\"col\":32,\"line\":210},\"endLoc\":{\"col\":1,\"line\":233},\"startBody\":{\"col\":32,\"line\":210},\"endBody\":{\"col\":1,\"line\":233}}};\n    \nimport React from \"react\";\nimport { getColor } from \"@braze/beacon-styling\";\nimport theme from \"@braze/beacon-theme\";\nimport { css } from \"styled-components\";\n\nimport { BodyText } from \"../BodyText\";\n\nimport { Box } from \"./Box\";\nimport { BoxSpecs, getBoxCss } from \"./getBoxCss\";\nimport page from \"./Box.docs.mdx\";\n\nimport { BoxProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Layout/Box\",\n  component: Box,\n  parameters: { docs: { page } },\n};\n\nexport const BasicUse = ({ inline }: BoxProps) => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: getColor(\"lightBlue\", 500)({ theme }),\n      }}\n    >\n      <Box\n        boxMargin=\"md\"\n        boxPadding=\"xl\"\n        style={{\n          border: \"1px solid\",\n          borderColor: getColor(\"red\", 500)({ theme }),\n        }}\n        inline={inline}\n      >\n        <BodyText>I need spacing!</BodyText>\n      </Box>\n    </div>\n  );\n};;\n\nBasicUse.args = {\n  inline: false,\n};\n\nexport const MultipleSizes = () => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: getColor(\"lightBlue\", 500)({ theme }),\n      }}\n    >\n      <Box\n        boxMargin={{ left: \"sm\", right: \"md\", top: \"xxl\", bottom: \"sm\" }}\n        boxPadding={{ left: \"xl\", right: \"lg\", top: \"xs\", bottom: \"md\" }}\n        style={{\n          border: \"1px solid\",\n          borderColor: getColor(\"red\", 500)({ theme }),\n        }}\n      >\n        <BodyText>I need spacing!</BodyText>\n      </Box>\n    </div>\n  );\n};;\n\nexport const ConvenienceSizes = () => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: getColor(\"lightBlue\", 500)({ theme }),\n      }}\n    >\n      <Box\n        boxMargin={{ horizontal: \"md\", top: \"xxl\", bottom: \"xs\" }}\n        boxPadding={{ vertical: \"sm\", left: \"xxxl\", right: \"lg\" }}\n        style={{\n          border: \"1px solid\",\n          borderColor: getColor(\"red\", 500)({ theme }),\n        }}\n      >\n        <BodyText>I need spacing!</BodyText>\n      </Box>\n    </div>\n  );\n};;\n\nexport const Inline = () => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: getColor(\"lightBlue\", 500)({ theme }),\n      }}\n    >\n      <Box\n        boxMargin=\"md\"\n        boxPadding=\"xl\"\n        style={{\n          border: \"1px solid\",\n          borderColor: getColor(\"red\", 500)({ theme }),\n        }}\n        inline\n      >\n        <BodyText>I am inline!</BodyText>\n      </Box>\n    </div>\n  );\n};;\n\nexport const OtherStyling = () => {\n  const otherCss = css`\n    background-color: aliceblue;\n  `;\n\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        border: \"1px solid\",\n        borderColor: getColor(\"lightBlue\", 500)({ theme }),\n      }}\n    >\n      <Box\n        boxMargin=\"lg\"\n        boxPadding=\"sm\"\n        style={{\n          border: \"1px solid\",\n          borderColor: getColor(\"red\", 500)({ theme }),\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-around\",\n        }}\n        styledCss={otherCss}\n      >\n        <BodyText\n          style={{\n            border: \"1px solid\",\n            borderColor: getColor(\"green\", 500)({ theme }),\n          }}\n        >\n          Flex Box 1!\n        </BodyText>\n        <BodyText\n          style={{\n            border: \"1px solid\",\n            borderColor: getColor(\"green\", 500)({ theme }),\n            height: \"100px\",\n          }}\n        >\n          Flex Box 2!\n        </BodyText>\n        <BodyText\n          style={{\n            border: \"1px solid\",\n            borderColor: getColor(\"green\", 500)({ theme }),\n          }}\n        >\n          Flex Box 3!\n        </BodyText>\n      </Box>\n    </div>\n  );\n};;\n\nexport const SpacingWithoutBox = () => {\n  const margin = \"sm\";\n  const padding: BoxSpecs = {\n    left: \"xxl\",\n    right: \"lg\",\n    top: \"md\",\n    bottom: \"xs\",\n  };\n  const boxStyles = getBoxCss(margin, padding, { theme });\n\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: getColor(\"lightBlue\", 500)({ theme }),\n      }}\n    >\n      <div\n        style={{\n          ...boxStyles,\n          border: \"1px solid\",\n          borderColor: getColor(\"red\", 500)({ theme }),\n        }}\n      >\n        <BodyText>I need spacing!</BodyText>\n      </div>\n    </div>\n  );\n};;\n\nexport const AsAnotherElement = () => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: getColor(\"lightBlue\", 500)({ theme }),\n      }}\n    >\n      <Box\n        boxMargin=\"md\"\n        boxPadding=\"xl\"\n        style={{\n          border: \"1px solid\",\n          borderColor: getColor(\"red\", 500)({ theme }),\n        }}\n        as=\"section\"\n      >\n        <BodyText>I need spacing!</BodyText>\n      </Box>\n    </div>\n  );\n};\n\n\n\nBasicUse.parameters = { storySource: { source: \"({ inline }: BoxProps) => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin=\\\"md\\\"\\n        boxPadding=\\\"xl\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n        inline={inline}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nMultipleSizes.parameters = { storySource: { source: \"() => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin={{ left: \\\"sm\\\", right: \\\"md\\\", top: \\\"xxl\\\", bottom: \\\"sm\\\" }}\\n        boxPadding={{ left: \\\"xl\\\", right: \\\"lg\\\", top: \\\"xs\\\", bottom: \\\"md\\\" }}\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n}\" }, ...MultipleSizes.parameters };\nConvenienceSizes.parameters = { storySource: { source: \"() => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin={{ horizontal: \\\"md\\\", top: \\\"xxl\\\", bottom: \\\"xs\\\" }}\\n        boxPadding={{ vertical: \\\"sm\\\", left: \\\"xxxl\\\", right: \\\"lg\\\" }}\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n}\" }, ...ConvenienceSizes.parameters };\nInline.parameters = { storySource: { source: \"() => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin=\\\"md\\\"\\n        boxPadding=\\\"xl\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n        inline\\n      >\\n        <BodyText>I am inline!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n}\" }, ...Inline.parameters };\nOtherStyling.parameters = { storySource: { source: \"() => {\\n  const otherCss = css`\\n    background-color: aliceblue;\\n  `;\\n\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin=\\\"lg\\\"\\n        boxPadding=\\\"sm\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n          display: \\\"flex\\\",\\n          alignItems: \\\"center\\\",\\n          justifyContent: \\\"space-around\\\",\\n        }}\\n        styledCss={otherCss}\\n      >\\n        <BodyText\\n          style={{\\n            border: \\\"1px solid\\\",\\n            borderColor: getColor(\\\"green\\\", 500)({ theme }),\\n          }}\\n        >\\n          Flex Box 1!\\n        </BodyText>\\n        <BodyText\\n          style={{\\n            border: \\\"1px solid\\\",\\n            borderColor: getColor(\\\"green\\\", 500)({ theme }),\\n            height: \\\"100px\\\",\\n          }}\\n        >\\n          Flex Box 2!\\n        </BodyText>\\n        <BodyText\\n          style={{\\n            border: \\\"1px solid\\\",\\n            borderColor: getColor(\\\"green\\\", 500)({ theme }),\\n          }}\\n        >\\n          Flex Box 3!\\n        </BodyText>\\n      </Box>\\n    </div>\\n  );\\n}\" }, ...OtherStyling.parameters };\nSpacingWithoutBox.parameters = { storySource: { source: \"() => {\\n  const margin = \\\"sm\\\";\\n  const padding: BoxSpecs = {\\n    left: \\\"xxl\\\",\\n    right: \\\"lg\\\",\\n    top: \\\"md\\\",\\n    bottom: \\\"xs\\\",\\n  };\\n  const boxStyles = getBoxCss(margin, padding, { theme });\\n\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <div\\n        style={{\\n          ...boxStyles,\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </div>\\n    </div>\\n  );\\n}\" }, ...SpacingWithoutBox.parameters };\nAsAnotherElement.parameters = { storySource: { source: \"() => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: getColor(\\\"lightBlue\\\", 500)({ theme }),\\n      }}\\n    >\\n      <Box\\n        boxMargin=\\\"md\\\"\\n        boxPadding=\\\"xl\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: getColor(\\\"red\\\", 500)({ theme }),\\n        }}\\n        as=\\\"section\\\"\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </Box>\\n    </div>\\n  );\\n}\" }, ...AsAnotherElement.parameters };","import React, { useEffect } from \"react\";\nimport classNames from \"classnames\";\n\nimport { BoxProps } from \"./types\";\nimport { StyledBox } from \"./StyledBox\";\n\nexport const Box = React.forwardRef(\n  (\n    { className, style, ...props }: BoxProps,\n    ref: React.RefObject<HTMLDivElement>\n  ) => {\n    useEffect(() => {\n      if (!style) {\n        return;\n      }\n\n      if (\n        (style.display === \"flex\" || style.display === \"inline-flex\") &&\n        process.env.NODE_ENV !== \"production\"\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `WARNING: It looks like you supplied a 'display: ${style.display};' attribute to the 'Box' component. To ensure that vendor prefixing is applied correctly, please use the 'FlexBox' component instead.`\n        );\n      }\n    }, [style]);\n\n    return (\n      <StyledBox\n        {...props}\n        className={classNames([\"bcl-box\", className])}\n        ref={ref}\n        style={style}\n      />\n    );\n  }\n);\n\nBox.displayName = \"Box\";\n","import styled from \"styled-components\";\n\nimport { StyledBoxProps } from \"./types\";\nimport { getBoxCss } from \"./getBoxCss\";\n\nexport const StyledBox = styled.div<StyledBoxProps>`\n  display: ${(props) => (props.inline ? \"inline-block\" : \"block\")};\n\n  ${({ boxMargin, boxPadding, ...props }) =>\n    getBoxCss(boxMargin, boxPadding, props)};\n\n  ${(props) => props.styledCss};\n`;\n","import { CSSObject } from \"styled-components\";\nimport { spacingSelector, Props } from \"@braze/beacon-styling\";\nimport { SpacingType } from \"@braze/beacon-theme\";\n\nimport { BoxSpecs } from \"../types\";\n\n/**\n * Calculates the specs for spacing\n *\n * @param header the css property that is being calculated for\n * @param specs the spacing information\n * @param props the props containing `theme`\n *\n * @return the calculated specs\n */\nexport const getSpecs = (\n  header: \"margin\" | \"padding\",\n  specs: BoxSpecs | SpacingType | undefined,\n  props: Props = {}\n): CSSObject => {\n  if (typeof specs === \"string\") {\n    return {\n      [header]: spacingSelector(props, specs),\n    };\n  }\n\n  if (typeof specs === \"object\") {\n    if (specs.horizontal && specs.vertical) {\n      return {\n        [`${header}Left`]: spacingSelector(props, specs.horizontal),\n        [`${header}Right`]: spacingSelector(props, specs.horizontal),\n        [`${header}Top`]: spacingSelector(props, specs.vertical),\n        [`${header}Bottom`]: spacingSelector(props, specs.vertical),\n      };\n    }\n\n    if (specs.horizontal) {\n      return {\n        [`${header}Left`]: spacingSelector(props, specs.horizontal),\n        [`${header}Right`]: spacingSelector(props, specs.horizontal),\n        [`${header}Top`]: specs.top && spacingSelector(props, specs.top),\n        [`${header}Bottom`]:\n          specs.bottom && spacingSelector(props, specs.bottom),\n      };\n    }\n\n    if (specs.vertical) {\n      return {\n        [`${header}Left`]: specs.left && spacingSelector(props, specs.left),\n        [`${header}Right`]: specs.right && spacingSelector(props, specs.right),\n        [`${header}Top`]: spacingSelector(props, specs.vertical),\n        [`${header}Bottom`]: spacingSelector(props, specs.vertical),\n      };\n    }\n\n    return {\n      [`${header}Left`]: specs.left && spacingSelector(props, specs.left),\n      [`${header}Right`]: specs.right && spacingSelector(props, specs.right),\n      [`${header}Top`]: specs.top && spacingSelector(props, specs.top),\n      [`${header}Bottom`]: specs.bottom && spacingSelector(props, specs.bottom),\n    };\n  }\n\n  return {};\n};\n\n/**\n * Creates box styling for a component using token styles\n *\n * @param margin the styling options for margin\n * @param padding the styling options for padding\n * @param props the props containing `theme`\n *\n * @return the styles as CSSProperties\n */\nexport const getBoxCss = (\n  margin: BoxSpecs | SpacingType | undefined,\n  padding: BoxSpecs | SpacingType | undefined,\n  props: Props\n): CSSObject => {\n  const marginStyle = getSpecs(\"margin\", margin, props);\n  const paddingStyle = getSpecs(\"padding\", padding, props);\n\n  return { ...marginStyle, ...paddingStyle };\n};\n","export { getBoxCss } from \"./getBoxCss\";\n\nexport type { BoxSpecs } from \"../types\";\n","export { Box } from \"./Box\";\n\nexport { getBoxCss } from \"./getBoxCss\";\n\nexport type { BoxProps, BoxSpecs } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { select } from \"@storybook/addon-knobs\";\nimport styled from \"styled-components\";\nimport { BrazeIcon, spotIcons } from \".\";\nexport const iconKeys = Object.keys(spotIcons);\n\nconst layoutProps = {\n  iconKeys\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Icons/BrazeIcon\" component={BrazeIcon} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"brazeicon\"\n    }}>{`BrazeIcon`}</h1>\n    <p><inlineCode parentName=\"p\">{`BrazeIcon`}</inlineCode>{` is a component that allows easy and convenient access to\nBraze's custom \"spot icons\".`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: This component does `}<strong parentName=\"p\">{`NOT`}</strong>{` render FontAwesome icons. Please\nuse the `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` component also exported in `}<inlineCode parentName=\"p\">{`@braze/beacon-core`}</inlineCode>{` if\nthat is what you're looking for.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`BrazeIcon`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`To use a spot icon, simply pass in a valid icon name as the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` prop.\nTo see a full list of available icons, see the bottom of this page.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`TIP: Head over to the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see a list of all available\nicons via the provided knob.`}</p>\n    </blockquote>\n\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-icons-brazeicon--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { BrazeIcon } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}{`*`}{` see list below )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`icon to be displayed to user`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"icons\"\n    }}>{`Icons`}</h3>\n    <p>{`The following is a list of icon `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` properties supported by `}<inlineCode parentName=\"p\">{`BrazeIcon`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`add-document`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`add-image-or-document`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`arrow-toggle`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`campaign-comparison`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`content`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`email-settings`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`funnel-report`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mms`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`preview`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`retention-report`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sms`}</inlineCode></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\nimport styled from \\\"styled-components\\\";\\n\\nimport page from \\\"./BrazeIcon.docs.mdx\\\";\\n\\nimport { BrazeIcon, BrazeIconProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Icons/BrazeIcon\\\",\\n  component: BrazeIcon,\\n  parameters: {\\n    docs: { page },\\n  },\\n} as ComponentMeta<typeof BrazeIcon>;\\n\\nconst StyledDiv = styled.div`\\n  background: gray;\\n  padding: 20px;\\n  width: fit-content;\\n`;\\n\\nexport const BasicUse = (args: BrazeIconProps): React.ReactElement => {\\n  return (\\n    <StyledDiv>\\n      <BrazeIcon {...args} />\\n    </StyledDiv>\\n  );\\n};\\n\\nBasicUse.args = { name: \\\"campaign-comparison\\\" };\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":24},\"endLoc\":{\"col\":1,\"line\":30},\"startBody\":{\"col\":24,\"line\":24},\"endBody\":{\"col\":1,\"line\":30}}};\n    \nimport React from \"react\";\nimport { ComponentMeta } from \"@storybook/react\";\nimport styled from \"styled-components\";\n\nimport page from \"./BrazeIcon.docs.mdx\";\n\nimport { BrazeIcon, BrazeIconProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Icons/BrazeIcon\",\n  component: BrazeIcon,\n  parameters: {\n    docs: { page },\n  },\n} as ComponentMeta<typeof BrazeIcon>;\n\nconst StyledDiv = styled.div`\n  background: gray;\n  padding: 20px;\n  width: fit-content;\n`;\n\nexport const BasicUse = (args: BrazeIconProps): React.ReactElement => {\n  return (\n    <StyledDiv>\n      <BrazeIcon {...args} />\n    </StyledDiv>\n  );\n};\n\nBasicUse.args = { name: \"campaign-comparison\" };\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: BrazeIconProps): React.ReactElement => {\\n  return (\\n    <StyledDiv>\\n      <BrazeIcon {...args} />\\n    </StyledDiv>\\n  );\\n}\" }, ...BasicUse.parameters };","import React, { lazy, Suspense } from \"react\";\nimport classNames from \"classnames\";\n\nimport { BrazeIconProps, SpotIcons } from \"./types\";\nimport { StyledBrazeIcon } from \"./StyledBrazeIcon\";\n\n// lazy import icons here\nconst AddDocument = lazy(() =>\n  import(\"./AddDocument\").then((module) => ({ default: module.AddDocument }))\n);\n\nconst AddImageOrDocument = lazy(() =>\n  import(\"./AddImageOrDocument\").then((module) => ({\n    default: module.AddImageOrDocument,\n  }))\n);\n\nconst ArrowToggle = lazy(() =>\n  import(\"./ArrowToggle\").then((module) => ({ default: module.ArrowToggle }))\n);\n\nconst CampaignComparison = lazy(() =>\n  import(\"./CampaignComparison\").then((module) => ({\n    default: module.CampaignComparison,\n  }))\n);\n\nconst Content = lazy(() =>\n  import(\"./Content\").then((module) => ({ default: module.Content }))\n);\n\nconst EmailSettings = lazy(() =>\n  import(\"./EmailSettings\").then((module) => ({\n    default: module.EmailSettings,\n  }))\n);\n\nconst FunnelReport = lazy(() =>\n  import(\"./FunnelReport\").then((module) => ({ default: module.FunnelReport }))\n);\n\nconst MMS = lazy(() =>\n  import(\"./MMS\").then((module) => ({ default: module.MMS }))\n);\n\nconst Preview = lazy(() =>\n  import(\"./Preview\").then((module) => ({ default: module.Preview }))\n);\n\nconst RetentionReport = lazy(() =>\n  import(\"./RetentionReport\").then((module) => ({\n    default: module.RetentionReport,\n  }))\n);\n\nconst SMS = lazy(() =>\n  import(\"./SMS\").then((module) => ({ default: module.SMS }))\n);\n\n// create a way to get to the icons here\nexport const spotIcons: SpotIcons = {\n  \"add-document\": AddDocument,\n  \"add-image-or-document\": AddImageOrDocument,\n  \"arrow-toggle\": ArrowToggle,\n  \"campaign-comparison\": CampaignComparison,\n  content: Content,\n  \"email-settings\": EmailSettings,\n  \"empty-table\": AddDocument,\n  \"funnel-report\": FunnelReport,\n  mms: MMS,\n  preview: Preview,\n  \"retention-report\": RetentionReport,\n  sms: SMS,\n};\n\nexport const BrazeIcon = ({\n  className,\n  name,\n  ...props\n}: BrazeIconProps): React.ReactElement | null => {\n  // bail if no `name` prop is provided\n  if (!name) {\n    return null;\n  }\n\n  // grab icon's component for rendering\n  const Icon = spotIcons[name];\n\n  // bail if provided 'name' prop does not\n  // corespond to any keys in the 'icons' obj\n  if (!Icon) {\n    return null;\n  }\n\n  return (\n    <StyledBrazeIcon\n      {...props}\n      className={classNames([\"bcl-braze-icon\", className])}\n    >\n      <Suspense fallback=\"\">\n        <Icon />\n      </Suspense>\n    </StyledBrazeIcon>\n  );\n};\n\nBrazeIcon.displayName = \"BrazeIcon\";\n","import styled from \"styled-components\";\n\nimport { StyledBrazeIconProps } from \"./types\";\n\nexport const StyledBrazeIcon = styled.div<StyledBrazeIconProps>`\n  display: inline-flex;\n`;\n","export { BrazeIcon, spotIcons } from \"./BrazeIcon\";\n\nexport { StyledBrazeIcon } from \"./StyledBrazeIcon\";\n\nexport type { BrazeIconProps, StyledBrazeIconProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\nimport {\n  BannerAlert,\n  BannerAlertBody,\n  BannerAlertDescription,\n  BannerAlertDescriptionText,\n} from \"@braze/beacon-core\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"button\"\n    }}>{`Button`}</h1>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` allows the user to make things happen.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Try clicking! You can also show icons with text by passing it the\nicon as a child.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Go to the canvas tab to interact with the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`muted`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` props!`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"primary-variant\"\n    }}>{`Primary variant`}</h3>\n    <p>{`The most typical use case of the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`\nvariant indicates that the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` has highest relative importance\nand/or impact relative to other `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` variants.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: try clicking into the box below and tabbing through the\n`}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`s to see their focus state!`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--primary-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"secondary-variant\"\n    }}>{`Secondary variant`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`secondary`}</inlineCode>{` variant usually indicates a contrast to the `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`\nbut is not the intended focus of the user's attention. A common use\ncase is in `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` dialogs where there's a `}<inlineCode parentName=\"p\">{`Keep editing`}</inlineCode>{` action as\na contrast to the primary, which might be `}<inlineCode parentName=\"p\">{`Save and close`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--secondary-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"tertiary-variant\"\n    }}>{`Tertiary variant`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{` variant is the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` that is meant to draw\nthe least attention relative to other button variants. A common\nuse case often involves effects that may be destructive.`}</p>\n    <p>{`For example, in `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` dialogs where there's a `}<inlineCode parentName=\"p\">{`Save and close`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` as the `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`, and a `}<inlineCode parentName=\"p\">{`Keep going`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` as the secondary,\na `}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` may say `}<inlineCode parentName=\"p\">{`Don't save and close`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: The `}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{` variant is being considered for deprecation\nand may be replaced by the `}<inlineCode parentName=\"p\">{`quaternary`}</inlineCode>{` variant (below) in the near\nfuture. If you have use cases that require ongoing support for the\n`}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{` variant, please inform the DASHI team at your earliest\nconvenience.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--tertiary-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"quaternary-variant\"\n    }}>{`Quaternary variant`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`quaternary`}</inlineCode>{` variant is the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` that is meant to\nbehave more like a link than a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` and has a much\nsmaller profile. A common use case often involves including\nit among text or with actions that may be destructive.`}</p>\n    <p>{`For example, in `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` dialogs where there's a `}<inlineCode parentName=\"p\">{`Save and close`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` as the `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`, and a `}<inlineCode parentName=\"p\">{`Keep going`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` as the\n`}<inlineCode parentName=\"p\">{`secondary`}</inlineCode>{`, a `}<inlineCode parentName=\"p\">{`quaternary`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` may say `}<inlineCode parentName=\"p\">{`Don't save and close`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--quaternary-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"different-sizes\"\n    }}>{`Different sizes`}</h3>\n    <p>{`Depending on the layout of your application, you may need to use\ndifferently sized `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` components. The following illustrate\nthe available sizing options.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: go to the `}<inlineCode parentName=\"p\">{`canvas`}</inlineCode>{` tab to change how the different sizes\nappear in different prop configurations.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--different-sizes\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <BannerAlert isOpen intent=\"warning\" mdxType=\"BannerAlert\">\n  <BannerAlertBody mdxType=\"BannerAlertBody\">\n    <BannerAlertDescription mdxType=\"BannerAlertDescription\">\n      <BannerAlertDescriptionText mdxType=\"BannerAlertDescriptionText\">\n        When using a <code>ref</code> with a <code>Button</code>, it will attach to the\n        button, unless it is disabled. Disabled buttons cannot be used to trigger tooltips or\n        annotations. To work around this, when the button is disabled, the entire thing is wrapped in\n        a <code>div</code> element, and the ref is attached to this instead. If the ref is being used\n        to trigger the button action, or any other button-specific interaction, it is important that\n        the button cannot be disabled, or that the code referencing the ref prevent attempting to\n        interact with the button when it is disabled.\n      </BannerAlertDescriptionText>\n    </BannerAlertDescription>\n  </BannerAlertBody>\n    </BannerAlert>\n    <p>{`If you need to prevent the user from being able to take any\naction (e.g. because they need to fill out all the required fields\nin a form before submitting), you can disable the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` entirely\nusing the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop.`}</p>\n    <p>{`When disabled, the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` will NOT call the `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` function upon\nuser click.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--disabled-use\" mdxType=\"Story\" />\n    </Canvas>\n    <p>{`Using tooltips or annotations on disabled buttons is directly supported as well`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--disabled-with-tooltip\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"loading-state-w-success\"\n    }}>{`Loading state (w/ success)`}</h3>\n    <p>{`Clicking a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` may sometimes trigger an async action that can take\nsome time to complete. In such cases, you can set the `}<inlineCode parentName=\"p\">{`loadingState`}</inlineCode>{` prop\nto `}<inlineCode parentName=\"p\">{`loading`}</inlineCode>{` to indicate that the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` is currently loading. Note that\nthe button will automatically be disabled when `}<inlineCode parentName=\"p\">{`loadingState`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`loading`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--loading-state-w-success\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"loading-state-w-error\"\n    }}>{`Loading state (w/ error)`}</h3>\n    <p>{`Occasionally, the async action created by the button may result in an\nerror. In such cases, you can set the `}<inlineCode parentName=\"p\">{`loadingState`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` to\ndenote the failure.`}</p>\n    <p>{`By default, an error state will NOT be reset automatically to the\ndefault button state. If you want to modify this behavior, you can pass\nan `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` object with `}<inlineCode parentName=\"p\">{`resetOnError: true`}</inlineCode>{` as the second argument\nof the `}<inlineCode parentName=\"p\">{`useLoadingButton`}</inlineCode>{` hook.`}</p>\n    <p>{`To get out of the error state, a second element of the `}<inlineCode parentName=\"p\">{`useLoadingButton`}</inlineCode>{`\nreturn is an `}<inlineCode parentName=\"p\">{`onReset`}</inlineCode>{` callback that can be called to imperatively reset\nstate.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: It's recommended that you supplement this with information on\nhow to resolve the error, so that the user can remedy the issue.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--loading-state-w-error\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Button } from \"@braze/beacon-core\";\nimport { useLoadingButton } from \"@braze/beacon-hooks\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"button-1\"\n    }}><inlineCode parentName=\"h3\">{`Button`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the button should be visually and functionally disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`getAriaLabel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(loadingState: ButtonLoadingState OR undefined) => string OR undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`*`}{`see below`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function to get aria label for different loading states; should typically only return something for 'error' and 'success' states`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneof( `}<inlineCode parentName=\"td\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`info`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`succcess`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`warning`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"info\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates to the user the the possible outcome of clicking the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`loadingMessage`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`message to display in the button alongside spinner while loading`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`loadingState`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(`}<inlineCode parentName=\"td\">{`idle`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`loading`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`success`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`error`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the button is currently in a pending, active, or recently completed loading state`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`minWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimum width the button should take`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLButtonElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to access DOM instance of `}<inlineCode parentName=\"td\">{`Button`}</inlineCode>{` element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`full`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"lg\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size of the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies the type of button for the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`primary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`secondary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`tertiary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`quaternary`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"primary\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`visually indicate to the user the relative importance/impact of the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`*`}{`: by default, the aria-label of `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` is set to \"Button click success\" or \"Button click error\"\n(localized via the `}<inlineCode parentName=\"p\">{`@braze/beacon-translations`}</inlineCode>{` package) for \"success\" and \"error\" loading states, resp.`}</p>\n    <h3 {...{\n      \"id\": \"useloadingbutton\"\n    }}><inlineCode parentName=\"h3\">{`useLoadingButton`}</inlineCode></h3>\n    <p>{`This hook is used to handle loading state management for a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: A separate `}<inlineCode parentName=\"p\">{`useLoadingButton`}</inlineCode>{` hook call should be used for each button.`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`status`}</inlineCode>{`: required; must be one of `}<inlineCode parentName=\"li\">{`idle`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`loading`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`success`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`error`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options`}</inlineCode>{`: optional; must be an object that can have any combination of the following key:value pairs:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ref`}</inlineCode>{`: if you want to pass your own `}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{` into the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{`, pass it here instead of into the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` directly`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`timeout`}</inlineCode>{`: miliseconds after which the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` state will reset to `}<inlineCode parentName=\"li\">{`idle`}</inlineCode>{`; default is `}<inlineCode parentName=\"li\">{`3000`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resetOnError`}</inlineCode>{`: indicates that the loading state of the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` should be reset to `}<inlineCode parentName=\"li\">{`idle`}</inlineCode>{` after `}<inlineCode parentName=\"li\">{`timeout`}</inlineCode>{`; default: `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Returns an array with two elements:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Props to be passed directly into the button, including the following (see `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` properties for details):`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`loadingState`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minWidth`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ref`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`A reset callback that resets the hook's loading state to `}<inlineCode parentName=\"li\">{`idle`}</inlineCode></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useEffect, useReducer, useState } from \\\"react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport { ButtonLoadingState, useLoadingButton } from \\\"@braze/beacon-hooks\\\";\\n\\nimport { Annotation } from \\\"../Annotation\\\";\\nimport { Box } from \\\"../Box\\\";\\nimport { Flex } from \\\"../Flex\\\";\\nimport { Icon, IconComponentName } from \\\"../Icon\\\";\\nimport { UncontrolledTooltip } from \\\"../UncontrolledTooltip\\\";\\n\\nimport page from \\\"./Button.docs.mdx\\\";\\n\\nimport { Button, ButtonProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Primitives/Button\\\",\\n  component: Button,\\n  parameters: {\\n    docs: { page },\\n  },\\n  argTypes: {\\n    disabled: {\\n      control: \\\"boolean\\\",\\n    },\\n  },\\n};\\n\\nexport const BasicUse = (\\n  args: ButtonProps & { icon: IconComponentName }\\n): React.ReactElement => {\\n  const [clicks, increment] = useReducer((clicks) => clicks + 1, 0);\\n\\n  return (\\n    <Flex direction=\\\"column\\\" className=\\\"buttons\\\">\\n      <Flex justifyContent=\\\"space-around\\\">\\n        <Button {...args} onClick={() => increment()} />\\n        <Button {...args} onClick={() => increment()}>\\n          <Icon name={args.icon} />\\n          {args.children}\\n        </Button>\\n      </Flex>\\n      <div id=\\\"clicks\\\">Clicked {clicks} times</div>\\n    </Flex>\\n  );\\n};\\n\\nBasicUse.args = {\\n  children: \\\"Label\\\",\\n  icon: \\\"calendar-alt\\\",\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const PrimaryVariant = (): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"primary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"primary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"primary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"primary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"primary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nPrimaryVariant.storyName = \\\"primary variant\\\";\\n\\nexport const SecondaryVariant = (): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"secondary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"secondary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"secondary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"secondary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"secondary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nSecondaryVariant.storyName = \\\"secondary variant\\\";\\n\\nexport const TertiaryVariant = (): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"tertiary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"tertiary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"tertiary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"tertiary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"tertiary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nTertiaryVariant.storyName = \\\"tertiary variant\\\";\\n\\nexport const QuaternaryVariant = (): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"quaternary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"quaternary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"quaternary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"quaternary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"quaternary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nQuaternaryVariant.storyName = \\\"quaternary variant\\\";\\n\\nexport const DifferentSizes = (args: ButtonProps): React.ReactElement => (\\n  <Flex className=\\\"buttons\\\" direction=\\\"column\\\">\\n    <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n      <Button {...args} onClick={action(\\\"lg button click\\\")} size=\\\"lg\\\">\\n        Large\\n      </Button>\\n    </Box>\\n    <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n      <Button {...args} onClick={action(\\\"sm button click\\\")} size=\\\"sm\\\">\\n        Small\\n      </Button>\\n    </Box>\\n    <Box>\\n      <Button {...args} onClick={action(\\\"full button click\\\")} size=\\\"full\\\">\\n        Full\\n      </Button>\\n    </Box>\\n  </Flex>\\n);\\n\\nDifferentSizes.storyName = \\\"different sizes\\\";\\n\\nexport const DisabledUse = (): React.ReactElement => (\\n  <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n    <Button variant=\\\"primary\\\" disabled>\\n      Primary\\n    </Button>\\n    <Button variant=\\\"secondary\\\" disabled>\\n      Secondary\\n    </Button>\\n    <Button variant=\\\"tertiary\\\" disabled>\\n      Tertiary\\n    </Button>\\n    <Button variant=\\\"quaternary\\\" disabled>\\n      Quaternary\\n    </Button>\\n    <Button intent=\\\"muted\\\" disabled>\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nDisabledUse.storyName = \\\"disabled use\\\";\\n\\nexport const DisabledWithTooltip = (): React.ReactElement => (\\n  <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n    <UncontrolledTooltip label=\\\"launching is disabled for this archived campaign\\\">\\n      <Button variant=\\\"primary\\\" disabled>\\n        Launch Campaign\\n      </Button>\\n    </UncontrolledTooltip>\\n    <Annotation\\n      label=\\\"There was a problem deleting this current. Refresh your page and try again.\\\"\\n      variant=\\\"error\\\"\\n    >\\n      <Button variant=\\\"primary\\\" disabled>\\n        Delete Current\\n      </Button>\\n    </Annotation>\\n  </Flex>\\n);\\n\\nDisabledWithTooltip.storyName = \\\"disabled with tooltip\\\";\\n\\nexport const LoadingStateWSuccess = (args: ButtonProps): React.ReactElement => {\\n  const [status, setStatus] = useState<ButtonLoadingState>(\\\"idle\\\");\\n\\n  React.useEffect(() => {\\n    if (status !== \\\"loading\\\") {\\n      return;\\n    }\\n\\n    const timeout = setTimeout(() => {\\n      setStatus(\\\"success\\\");\\n    }, 3000);\\n\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }, [status]);\\n\\n  const [buttonProps] = useLoadingButton(status);\\n\\n  return (\\n    <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n      <Button\\n        {...buttonProps}\\n        {...args}\\n        loadingMessage=\\\"Loading...\\\"\\n        onClick={() => setStatus(\\\"loading\\\")}\\n      >\\n        Primary\\n      </Button>\\n    </Flex>\\n  );\\n};\\n\\nLoadingStateWSuccess.storyName = \\\"loading state w/ success\\\";\\n\\nexport const LoadingStateWError = (args: ButtonProps): React.ReactElement => {\\n  const [status, setStatus] = useState<ButtonLoadingState>(\\\"idle\\\");\\n\\n  useEffect(() => {\\n    if (status !== \\\"loading\\\") {\\n      return;\\n    }\\n\\n    const timeout = setTimeout(() => {\\n      setStatus(\\\"error\\\");\\n    }, 3000);\\n\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }, [status]);\\n\\n  const [buttonProps, onReset] = useLoadingButton(status);\\n\\n  const handleReset = () => {\\n    onReset();\\n\\n    setStatus(\\\"idle\\\");\\n  };\\n\\n  return (\\n    <>\\n      <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n        <Annotation\\n          disabled={buttonProps.loadingState !== \\\"error\\\"}\\n          label=\\\"There was a problem deleting this current. Refresh your page and try again.\\\"\\n          variant=\\\"error\\\"\\n        >\\n          <Button\\n            {...buttonProps}\\n            {...args}\\n            loadingMessage=\\\"Loading...\\\"\\n            onClick={() => setStatus(\\\"loading\\\")}\\n          >\\n            Primary\\n          </Button>\\n        </Annotation>\\n      </Flex>\\n      <br />\\n      <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n        <Button\\n          className=\\\"reset-loading-state-btn\\\"\\n          variant=\\\"secondary\\\"\\n          onClick={handleReset}\\n        >\\n          Reset loading state\\n        </Button>\\n      </Flex>\\n    </>\\n  );\\n};\\n\\nLoadingStateWError.storyName = \\\"loading state w/ error\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":29},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":24,\"line\":29},\"endBody\":{\"col\":1,\"line\":46}},\"PrimaryVariant\":{\"startLoc\":{\"col\":30,\"line\":55},\"endLoc\":{\"col\":1,\"line\":97},\"startBody\":{\"col\":30,\"line\":55},\"endBody\":{\"col\":1,\"line\":97}},\"SecondaryVariant\":{\"startLoc\":{\"col\":32,\"line\":101},\"endLoc\":{\"col\":1,\"line\":143},\"startBody\":{\"col\":32,\"line\":101},\"endBody\":{\"col\":1,\"line\":143}},\"TertiaryVariant\":{\"startLoc\":{\"col\":31,\"line\":147},\"endLoc\":{\"col\":1,\"line\":189},\"startBody\":{\"col\":31,\"line\":147},\"endBody\":{\"col\":1,\"line\":189}},\"QuaternaryVariant\":{\"startLoc\":{\"col\":33,\"line\":193},\"endLoc\":{\"col\":1,\"line\":235},\"startBody\":{\"col\":33,\"line\":193},\"endBody\":{\"col\":1,\"line\":235}},\"DifferentSizes\":{\"startLoc\":{\"col\":30,\"line\":239},\"endLoc\":{\"col\":1,\"line\":257},\"startBody\":{\"col\":30,\"line\":239},\"endBody\":{\"col\":1,\"line\":257}},\"DisabledUse\":{\"startLoc\":{\"col\":27,\"line\":261},\"endLoc\":{\"col\":1,\"line\":279},\"startBody\":{\"col\":27,\"line\":261},\"endBody\":{\"col\":1,\"line\":279}},\"DisabledWithTooltip\":{\"startLoc\":{\"col\":35,\"line\":283},\"endLoc\":{\"col\":1,\"line\":299},\"startBody\":{\"col\":35,\"line\":283},\"endBody\":{\"col\":1,\"line\":299}},\"LoadingStateWSuccess\":{\"startLoc\":{\"col\":36,\"line\":303},\"endLoc\":{\"col\":1,\"line\":334},\"startBody\":{\"col\":36,\"line\":303},\"endBody\":{\"col\":1,\"line\":334}},\"LoadingStateWError\":{\"startLoc\":{\"col\":34,\"line\":338},\"endLoc\":{\"col\":1,\"line\":393},\"startBody\":{\"col\":34,\"line\":338},\"endBody\":{\"col\":1,\"line\":393}}};\n    \nimport React, { useEffect, useReducer, useState } from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { ButtonLoadingState, useLoadingButton } from \"@braze/beacon-hooks\";\n\nimport { Annotation } from \"../Annotation\";\nimport { Box } from \"../Box\";\nimport { Flex } from \"../Flex\";\nimport { Icon, IconComponentName } from \"../Icon\";\nimport { UncontrolledTooltip } from \"../UncontrolledTooltip\";\n\nimport page from \"./Button.docs.mdx\";\n\nimport { Button, ButtonProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Primitives/Button\",\n  component: Button,\n  parameters: {\n    docs: { page },\n  },\n  argTypes: {\n    disabled: {\n      control: \"boolean\",\n    },\n  },\n};\n\nexport const BasicUse = (\n  args: ButtonProps & { icon: IconComponentName }\n): React.ReactElement => {\n  const [clicks, increment] = useReducer((clicks) => clicks + 1, 0);\n\n  return (\n    <Flex direction=\"column\" className=\"buttons\">\n      <Flex justifyContent=\"space-around\">\n        <Button {...args} onClick={() => increment()} />\n        <Button {...args} onClick={() => increment()}>\n          <Icon name={args.icon} />\n          {args.children}\n        </Button>\n      </Flex>\n      <div id=\"clicks\">Clicked {clicks} times</div>\n    </Flex>\n  );\n};;\n\nBasicUse.args = {\n  children: \"Label\",\n  icon: \"calendar-alt\",\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const PrimaryVariant = (): React.ReactElement => (\n  <Flex\n    justifyContent=\"space-around\"\n    className=\"buttons\"\n    style={{ backgroundColor: \"#EEE\" }}\n  >\n    <Button\n      variant=\"primary\"\n      intent=\"info\"\n      onClick={action(\"primary info click\")}\n    >\n      Info\n    </Button>\n    <Button\n      variant=\"primary\"\n      intent=\"success\"\n      onClick={action(\"primary success click\")}\n    >\n      Success\n    </Button>\n    <Button\n      variant=\"primary\"\n      intent=\"danger\"\n      onClick={action(\"primary danger click\")}\n    >\n      Danger\n    </Button>\n    <Button\n      variant=\"primary\"\n      intent=\"warning\"\n      onClick={action(\"primary warning click\")}\n    >\n      Warning\n    </Button>\n    <Button\n      variant=\"primary\"\n      intent=\"muted\"\n      onClick={action(\"primary warning click\")}\n    >\n      Muted\n    </Button>\n  </Flex>\n);;\n\nPrimaryVariant.storyName = \"primary variant\";\n\nexport const SecondaryVariant = (): React.ReactElement => (\n  <Flex\n    justifyContent=\"space-around\"\n    className=\"buttons\"\n    style={{ backgroundColor: \"#EEE\" }}\n  >\n    <Button\n      variant=\"secondary\"\n      intent=\"info\"\n      onClick={action(\"secondary info click\")}\n    >\n      Info\n    </Button>\n    <Button\n      variant=\"secondary\"\n      intent=\"success\"\n      onClick={action(\"secondary success click\")}\n    >\n      Success\n    </Button>\n    <Button\n      variant=\"secondary\"\n      intent=\"danger\"\n      onClick={action(\"secondary danger click\")}\n    >\n      Danger\n    </Button>\n    <Button\n      variant=\"secondary\"\n      intent=\"warning\"\n      onClick={action(\"secondary warning click\")}\n    >\n      Warning\n    </Button>\n    <Button\n      variant=\"secondary\"\n      intent=\"muted\"\n      onClick={action(\"secondary warning click\")}\n    >\n      Muted\n    </Button>\n  </Flex>\n);;\n\nSecondaryVariant.storyName = \"secondary variant\";\n\nexport const TertiaryVariant = (): React.ReactElement => (\n  <Flex\n    justifyContent=\"space-around\"\n    className=\"buttons\"\n    style={{ backgroundColor: \"#EEE\" }}\n  >\n    <Button\n      variant=\"tertiary\"\n      intent=\"info\"\n      onClick={action(\"tertiary info click\")}\n    >\n      Info\n    </Button>\n    <Button\n      variant=\"tertiary\"\n      intent=\"success\"\n      onClick={action(\"tertiary success click\")}\n    >\n      Success\n    </Button>\n    <Button\n      variant=\"tertiary\"\n      intent=\"danger\"\n      onClick={action(\"tertiary danger click\")}\n    >\n      Danger\n    </Button>\n    <Button\n      variant=\"tertiary\"\n      intent=\"warning\"\n      onClick={action(\"tertiary warning click\")}\n    >\n      Warning\n    </Button>\n    <Button\n      variant=\"tertiary\"\n      intent=\"muted\"\n      onClick={action(\"tertiary warning click\")}\n    >\n      Muted\n    </Button>\n  </Flex>\n);;\n\nTertiaryVariant.storyName = \"tertiary variant\";\n\nexport const QuaternaryVariant = (): React.ReactElement => (\n  <Flex\n    justifyContent=\"space-around\"\n    className=\"buttons\"\n    style={{ backgroundColor: \"#EEE\" }}\n  >\n    <Button\n      variant=\"quaternary\"\n      intent=\"info\"\n      onClick={action(\"quaternary info click\")}\n    >\n      Info\n    </Button>\n    <Button\n      variant=\"quaternary\"\n      intent=\"success\"\n      onClick={action(\"quaternary success click\")}\n    >\n      Success\n    </Button>\n    <Button\n      variant=\"quaternary\"\n      intent=\"danger\"\n      onClick={action(\"quaternary danger click\")}\n    >\n      Danger\n    </Button>\n    <Button\n      variant=\"quaternary\"\n      intent=\"warning\"\n      onClick={action(\"quaternary warning click\")}\n    >\n      Warning\n    </Button>\n    <Button\n      variant=\"quaternary\"\n      intent=\"muted\"\n      onClick={action(\"quaternary warning click\")}\n    >\n      Muted\n    </Button>\n  </Flex>\n);;\n\nQuaternaryVariant.storyName = \"quaternary variant\";\n\nexport const DifferentSizes = (args: ButtonProps): React.ReactElement => (\n  <Flex className=\"buttons\" direction=\"column\">\n    <Box boxMargin={{ bottom: \"md\" }}>\n      <Button {...args} onClick={action(\"lg button click\")} size=\"lg\">\n        Large\n      </Button>\n    </Box>\n    <Box boxMargin={{ bottom: \"md\" }}>\n      <Button {...args} onClick={action(\"sm button click\")} size=\"sm\">\n        Small\n      </Button>\n    </Box>\n    <Box>\n      <Button {...args} onClick={action(\"full button click\")} size=\"full\">\n        Full\n      </Button>\n    </Box>\n  </Flex>\n);;\n\nDifferentSizes.storyName = \"different sizes\";\n\nexport const DisabledUse = (): React.ReactElement => (\n  <Flex justifyContent=\"space-around\" className=\"buttons\">\n    <Button variant=\"primary\" disabled>\n      Primary\n    </Button>\n    <Button variant=\"secondary\" disabled>\n      Secondary\n    </Button>\n    <Button variant=\"tertiary\" disabled>\n      Tertiary\n    </Button>\n    <Button variant=\"quaternary\" disabled>\n      Quaternary\n    </Button>\n    <Button intent=\"muted\" disabled>\n      Muted\n    </Button>\n  </Flex>\n);;\n\nDisabledUse.storyName = \"disabled use\";\n\nexport const DisabledWithTooltip = (): React.ReactElement => (\n  <Flex justifyContent=\"space-around\" className=\"buttons\">\n    <UncontrolledTooltip label=\"launching is disabled for this archived campaign\">\n      <Button variant=\"primary\" disabled>\n        Launch Campaign\n      </Button>\n    </UncontrolledTooltip>\n    <Annotation\n      label=\"There was a problem deleting this current. Refresh your page and try again.\"\n      variant=\"error\"\n    >\n      <Button variant=\"primary\" disabled>\n        Delete Current\n      </Button>\n    </Annotation>\n  </Flex>\n);;\n\nDisabledWithTooltip.storyName = \"disabled with tooltip\";\n\nexport const LoadingStateWSuccess = (args: ButtonProps): React.ReactElement => {\n  const [status, setStatus] = useState<ButtonLoadingState>(\"idle\");\n\n  React.useEffect(() => {\n    if (status !== \"loading\") {\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      setStatus(\"success\");\n    }, 3000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [status]);\n\n  const [buttonProps] = useLoadingButton(status);\n\n  return (\n    <Flex justifyContent=\"space-around\" className=\"buttons\">\n      <Button\n        {...buttonProps}\n        {...args}\n        loadingMessage=\"Loading...\"\n        onClick={() => setStatus(\"loading\")}\n      >\n        Primary\n      </Button>\n    </Flex>\n  );\n};;\n\nLoadingStateWSuccess.storyName = \"loading state w/ success\";\n\nexport const LoadingStateWError = (args: ButtonProps): React.ReactElement => {\n  const [status, setStatus] = useState<ButtonLoadingState>(\"idle\");\n\n  useEffect(() => {\n    if (status !== \"loading\") {\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      setStatus(\"error\");\n    }, 3000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [status]);\n\n  const [buttonProps, onReset] = useLoadingButton(status);\n\n  const handleReset = () => {\n    onReset();\n\n    setStatus(\"idle\");\n  };\n\n  return (\n    <>\n      <Flex justifyContent=\"space-around\" className=\"buttons\">\n        <Annotation\n          disabled={buttonProps.loadingState !== \"error\"}\n          label=\"There was a problem deleting this current. Refresh your page and try again.\"\n          variant=\"error\"\n        >\n          <Button\n            {...buttonProps}\n            {...args}\n            loadingMessage=\"Loading...\"\n            onClick={() => setStatus(\"loading\")}\n          >\n            Primary\n          </Button>\n        </Annotation>\n      </Flex>\n      <br />\n      <Flex justifyContent=\"space-around\" className=\"buttons\">\n        <Button\n          className=\"reset-loading-state-btn\"\n          variant=\"secondary\"\n          onClick={handleReset}\n        >\n          Reset loading state\n        </Button>\n      </Flex>\n    </>\n  );\n};\n\nLoadingStateWError.storyName = \"loading state w/ error\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(\\n  args: ButtonProps & { icon: IconComponentName }\\n): React.ReactElement => {\\n  const [clicks, increment] = useReducer((clicks) => clicks + 1, 0);\\n\\n  return (\\n    <Flex direction=\\\"column\\\" className=\\\"buttons\\\">\\n      <Flex justifyContent=\\\"space-around\\\">\\n        <Button {...args} onClick={() => increment()} />\\n        <Button {...args} onClick={() => increment()}>\\n          <Icon name={args.icon} />\\n          {args.children}\\n        </Button>\\n      </Flex>\\n      <div id=\\\"clicks\\\">Clicked {clicks} times</div>\\n    </Flex>\\n  );\\n}\" }, ...BasicUse.parameters };\nPrimaryVariant.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"primary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"primary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"primary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"primary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"primary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...PrimaryVariant.parameters };\nSecondaryVariant.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"secondary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"secondary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"secondary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"secondary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"secondary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...SecondaryVariant.parameters };\nTertiaryVariant.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"tertiary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"tertiary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"tertiary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"tertiary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"tertiary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...TertiaryVariant.parameters };\nQuaternaryVariant.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"quaternary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"quaternary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"quaternary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"quaternary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"quaternary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...QuaternaryVariant.parameters };\nDifferentSizes.parameters = { storySource: { source: \"(args: ButtonProps): React.ReactElement => (\\n  <Flex className=\\\"buttons\\\" direction=\\\"column\\\">\\n    <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n      <Button {...args} onClick={action(\\\"lg button click\\\")} size=\\\"lg\\\">\\n        Large\\n      </Button>\\n    </Box>\\n    <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n      <Button {...args} onClick={action(\\\"sm button click\\\")} size=\\\"sm\\\">\\n        Small\\n      </Button>\\n    </Box>\\n    <Box>\\n      <Button {...args} onClick={action(\\\"full button click\\\")} size=\\\"full\\\">\\n        Full\\n      </Button>\\n    </Box>\\n  </Flex>\\n)\" }, ...DifferentSizes.parameters };\nDisabledUse.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n    <Button variant=\\\"primary\\\" disabled>\\n      Primary\\n    </Button>\\n    <Button variant=\\\"secondary\\\" disabled>\\n      Secondary\\n    </Button>\\n    <Button variant=\\\"tertiary\\\" disabled>\\n      Tertiary\\n    </Button>\\n    <Button variant=\\\"quaternary\\\" disabled>\\n      Quaternary\\n    </Button>\\n    <Button intent=\\\"muted\\\" disabled>\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...DisabledUse.parameters };\nDisabledWithTooltip.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n    <UncontrolledTooltip label=\\\"launching is disabled for this archived campaign\\\">\\n      <Button variant=\\\"primary\\\" disabled>\\n        Launch Campaign\\n      </Button>\\n    </UncontrolledTooltip>\\n    <Annotation\\n      label=\\\"There was a problem deleting this current. Refresh your page and try again.\\\"\\n      variant=\\\"error\\\"\\n    >\\n      <Button variant=\\\"primary\\\" disabled>\\n        Delete Current\\n      </Button>\\n    </Annotation>\\n  </Flex>\\n)\" }, ...DisabledWithTooltip.parameters };\nLoadingStateWSuccess.parameters = { storySource: { source: \"(args: ButtonProps): React.ReactElement => {\\n  const [status, setStatus] = useState<ButtonLoadingState>(\\\"idle\\\");\\n\\n  React.useEffect(() => {\\n    if (status !== \\\"loading\\\") {\\n      return;\\n    }\\n\\n    const timeout = setTimeout(() => {\\n      setStatus(\\\"success\\\");\\n    }, 3000);\\n\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }, [status]);\\n\\n  const [buttonProps] = useLoadingButton(status);\\n\\n  return (\\n    <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n      <Button\\n        {...buttonProps}\\n        {...args}\\n        loadingMessage=\\\"Loading...\\\"\\n        onClick={() => setStatus(\\\"loading\\\")}\\n      >\\n        Primary\\n      </Button>\\n    </Flex>\\n  );\\n}\" }, ...LoadingStateWSuccess.parameters };\nLoadingStateWError.parameters = { storySource: { source: \"(args: ButtonProps): React.ReactElement => {\\n  const [status, setStatus] = useState<ButtonLoadingState>(\\\"idle\\\");\\n\\n  useEffect(() => {\\n    if (status !== \\\"loading\\\") {\\n      return;\\n    }\\n\\n    const timeout = setTimeout(() => {\\n      setStatus(\\\"error\\\");\\n    }, 3000);\\n\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }, [status]);\\n\\n  const [buttonProps, onReset] = useLoadingButton(status);\\n\\n  const handleReset = () => {\\n    onReset();\\n\\n    setStatus(\\\"idle\\\");\\n  };\\n\\n  return (\\n    <>\\n      <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n        <Annotation\\n          disabled={buttonProps.loadingState !== \\\"error\\\"}\\n          label=\\\"There was a problem deleting this current. Refresh your page and try again.\\\"\\n          variant=\\\"error\\\"\\n        >\\n          <Button\\n            {...buttonProps}\\n            {...args}\\n            loadingMessage=\\\"Loading...\\\"\\n            onClick={() => setStatus(\\\"loading\\\")}\\n          >\\n            Primary\\n          </Button>\\n        </Annotation>\\n      </Flex>\\n      <br />\\n      <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n        <Button\\n          className=\\\"reset-loading-state-btn\\\"\\n          variant=\\\"secondary\\\"\\n          onClick={handleReset}\\n        >\\n          Reset loading state\\n        </Button>\\n      </Flex>\\n    </>\\n  );\\n}\" }, ...LoadingStateWError.parameters };","import React from \"react\";\nimport styled from \"styled-components\";\nimport classNames from \"classnames\";\nimport { ButtonLoadingState } from \"@braze/beacon-hooks\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\n\nimport { ButtonProps } from \"./types\";\nimport { StyledButton } from \"./StyledButton\";\nimport { ButtonContent } from \"./ButtonContent\";\n\nconst useDefaultAriaLabel = (\n  loadingState: ButtonLoadingState | undefined\n): string | undefined => {\n  const { t } = useI18nNamespace(\"beacon-button\");\n\n  if (!loadingState) {\n    return undefined;\n  }\n\n  switch (loadingState) {\n    case \"success\":\n      return t(\"button-click-success-aria-label\", \"Button click success\");\n    case \"error\":\n      return t(\"button-click-error-aria-label\", \"Button click error\");\n    case \"idle\":\n    case \"loading\":\n      return undefined;\n  }\n};\n\nconst InnerButton = React.forwardRef(\n  (\n    {\n      children,\n      className,\n      disabled,\n      getAriaLabel,\n      intent = \"info\",\n      loadingState,\n      loadingMessage,\n      size = \"lg\",\n      variant = \"primary\",\n      type = \"button\",\n      ...props\n    }: ButtonProps,\n    ref: React.RefObject<HTMLButtonElement>\n  ) => {\n    const defaultAriaLabel = useDefaultAriaLabel(loadingState);\n\n    return (\n      <StyledButton\n        {...props}\n        ref={ref}\n        data-is-loading={loadingState ? loadingState === \"loading\" : false}\n        data-loading-state={loadingState ?? \"idle\"}\n        aria-live={loadingState ? \"polite\" : undefined}\n        aria-label={\n          props[\"aria-label\"] ??\n          (getAriaLabel ? getAriaLabel(loadingState) : defaultAriaLabel)\n        }\n        disabled={\n          disabled || (loadingState ? loadingState !== \"idle\" : undefined)\n        }\n        className={classNames([\n          \"bcl-button\",\n          `bcl-button-${variant}`,\n          className,\n        ])}\n        intent={intent}\n        size={size}\n        type={type}\n        variant={variant}\n      >\n        <ButtonContent\n          intent={intent}\n          loadingMessage={loadingMessage}\n          loadingState={loadingState}\n          variant={variant}\n          size={size}\n        >\n          {children}\n        </ButtonContent>\n      </StyledButton>\n    );\n  }\n);\n\nInnerButton.displayName = \"InnerButton\";\n\nconst DisabledWrapper = styled.div`\n  display: inline-flex;\n`;\n\nexport const Button = React.forwardRef(\n  (props: ButtonProps, ref: React.RefObject<HTMLButtonElement>) => {\n    if (props.disabled) {\n      const castedRef = ref as unknown as React.RefObject<HTMLDivElement>;\n\n      // this allows tooltips to work without modification when the button is disabled\n      return (\n        <DisabledWrapper\n          ref={castedRef}\n          className=\"bcl-button__disabled-wrapper\"\n        >\n          <InnerButton {...props} />\n        </DisabledWrapper>\n      );\n    }\n\n    return <InnerButton {...props} ref={ref} />;\n  }\n);\n\nButton.displayName = \"Button\";\n","import React, { useEffect, useRef } from \"react\";\n\nimport { LoadedWithIcon } from \"../LoadedWithIcon\";\nimport { LoadingIconWithGradient } from \"../LoadingIconWithGradient\";\nimport { ButtonContentProps } from \"../types\";\n\nimport { StyledButtonContent } from \"./StyledButtonContent\";\n\nexport const ButtonContent = ({\n  children,\n  loadingMessage,\n  loadingState,\n  intent,\n  size,\n  variant,\n}: ButtonContentProps): React.ReactElement => {\n  // keep track of whether it's the first render of the component\n  // we use this to ensure that the opacity is set to 1 when the\n  // component first appears onscreen\n  const firstRender = useRef(true);\n\n  // when the loading state is changed, then it's no longer the\n  // first render so set it to false\n  useEffect(() => {\n    if (loadingState && loadingState !== \"idle\") {\n      firstRender.current = false;\n    }\n  }, [loadingState]);\n\n  // when it's loading, display loading icon\n  if (loadingState === \"loading\") {\n    return (\n      <>\n        <LoadingIconWithGradient\n          intent={intent}\n          variant={variant}\n          size={size}\n        />\n        {loadingMessage}\n      </>\n    );\n  }\n\n  // when loading state is errored out, display the error icon\n  if (loadingState === \"error\") {\n    return <LoadedWithIcon name=\"times\" />;\n  }\n\n  return (\n    <>\n      {loadingState === \"success\" && <LoadedWithIcon name=\"check\" isAnimated />}\n      <StyledButtonContent\n        isAnimated={!firstRender.current && loadingState === \"idle\"}\n        firstRender={firstRender.current}\n      >\n        {React.Children.map(children, (child) =>\n          typeof child === \"string\" ? <span>{child}</span> : child\n        )}\n      </StyledButtonContent>\n    </>\n  );\n};\n","import { getSpacing } from \"@braze/beacon-styling\";\nimport styled, { css, keyframes } from \"styled-components\";\n\nimport { StyledButtonContentProps } from \"../types\";\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`;\n\nexport const StyledButtonContent = styled.span<StyledButtonContentProps>`\n  display: inline-flex;\n  opacity: ${({ firstRender }) => (firstRender ? 1 : 0)};\n\n  ${({ isAnimated }) =>\n    isAnimated &&\n    css`\n      animation: ${fadeIn} 0.3s linear;\n      animation-fill-mode: forwards;\n    `}\n\n  & > *:not(:last-of-type) {\n    margin-right: ${getSpacing(\"sm\")};\n  }\n`;\n","export { ButtonContent } from \"./ButtonContent\";\n\nexport { StyledButtonContent } from \"./StyledButtonContent\";\n","import React from \"react\";\n\nimport { Icon } from \"../../Icon\";\nimport { LoadedWithIconProps } from \"../types\";\n\nimport { StyledLoadedWithIcon } from \"./StyledLoadedWithIcon\";\n\nexport const LoadedWithIcon = ({\n  isAnimated,\n  name,\n}: LoadedWithIconProps): React.ReactElement => {\n  return (\n    <StyledLoadedWithIcon isAnimated={isAnimated}>\n      <Icon name={name} />\n    </StyledLoadedWithIcon>\n  );\n};\n","import styled, { css, keyframes } from \"styled-components\";\n\nimport { StyledIcon } from \"../../Icon\";\nimport { StyledLoadedWithIconProps } from \"../types\";\n\nconst scale = keyframes`\n  0% {\n   transform: scale(10);\n  }\n  50% {\n   transform: scale(0.2);\n  }\n  70% {\n   transform: scale(1.2);\n  }\n  90% {\n   transform: scale(0.7);\n  }\n  100% {\n   transform: scale(1);\n  }\n`;\n\nexport const StyledLoadedWithIcon = styled.span<StyledLoadedWithIconProps>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  ${StyledIcon} {\n    ${({ isAnimated }) =>\n      isAnimated &&\n      css`\n        animation: ${scale} 1s linear;\n      `}\n\n    i {\n      transform-origin: center center;\n    }\n  }\n`;\n","export { LoadedWithIcon } from \"./LoadedWithIcon\";\n","import React from \"react\";\nimport { useId } from \"@braze/beacon-hooks\";\n\nimport { FlexBox } from \"../../FlexBox\";\nimport { LoadingIconWithGradientProps } from \"../types\";\n\nimport {\n  StyledLoadingIconWithGradient,\n  StyledLoadingSpinnerPath,\n  StyledLinearGradient0Stop,\n  StyledLinearGradient100Stop,\n} from \"./StyledLoadingIconWithGradient\";\n\nconst gradientSuffix = \"-gradient\";\n\nexport const LoadingIconWithGradient = ({\n  intent,\n  size,\n  variant,\n}: LoadingIconWithGradientProps): React.ReactElement => {\n  const rootId = useId(\"bcl-loading-icon-with-gradient-\");\n\n  return (\n    <FlexBox\n      inline\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      boxMargin={{ right: \"sm\" }}\n    >\n      <StyledLoadingIconWithGradient\n        className=\"bcl-loading-spinner\"\n        viewBox=\"0 0 50 50\"\n        size={size}\n      >\n        <StyledLoadingSpinnerPath\n          id={`${rootId}-circle`}\n          gradientId={`${rootId}${gradientSuffix}`}\n          cx=\"25\"\n          cy=\"25\"\n          r=\"20\"\n          fill=\"none\"\n          strokeWidth=\"8\"\n        />\n        <linearGradient id={`${rootId}${gradientSuffix}`}>\n          <StyledLinearGradient0Stop\n            offset=\"0%\"\n            intent={intent}\n            size={size}\n            variant={variant}\n          />\n          <StyledLinearGradient100Stop\n            offset=\"100%\"\n            intent={intent}\n            size={size}\n            variant={variant}\n          />\n        </linearGradient>\n      </StyledLoadingIconWithGradient>\n    </FlexBox>\n  );\n};\n","import styled, { css, keyframes } from \"styled-components\";\nimport { colorSelector, intentColorSelector } from \"@braze/beacon-styling\";\n\nimport { StyledStopProps, StyledLoadingIconWithGradientProps } from \"../types\";\n\nconst rotate = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst dash = keyframes`\n  0% {\n    stroke-dasharray: 1, 150;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 90, 150;\n    stroke-dashoffset: -35;\n  }\n  100% {\n    stroke-dasharray: 90, 150;\n    stroke-dashoffset: -124;\n  }\n`;\n\nconst getGradientId = ({ gradientId }): string => gradientId;\n\nexport const StyledLoadingSpinnerPath = styled.circle`\n  stroke: url(#${getGradientId});\n  stroke-linecap: round;\n  animation: ${dash} 1.5s ease-in-out infinite;\n`;\n\nconst getIconSize = ({ size }: StyledLoadingIconWithGradientProps) => {\n  switch (size) {\n    case \"sm\":\n      return css`\n        width: 12px;\n        height: 12px;\n      `;\n    case \"lg\":\n    case \"full\":\n    default:\n      return css`\n        width: 16px;\n        height: 16px;\n      `;\n  }\n};\n\nexport const StyledLoadingIconWithGradient = styled.svg<StyledLoadingIconWithGradientProps>`\n  animation: ${rotate} 2s linear infinite;\n  ${getIconSize};\n`;\n\nconst get0StopColors = ({ intent, variant, ...props }: StyledStopProps) => {\n  if (intent === \"muted\") {\n    return colorSelector(props, \"gray\", 100);\n  }\n\n  switch (variant) {\n    case \"primary\":\n      return colorSelector(props, \"gray\", 0);\n    case \"secondary\":\n    case \"tertiary\":\n    case \"quaternary\":\n    default:\n      return intentColorSelector(props, intent, 100);\n  }\n};\n\nconst get100StopColors = ({ intent, variant, ...props }: StyledStopProps) => {\n  if (intent === \"muted\") {\n    return colorSelector(props, \"gray\", 800);\n  }\n\n  switch (variant) {\n    case \"primary\":\n      return colorSelector(props, \"gray\", 0);\n    case \"secondary\":\n    case \"tertiary\":\n    case \"quaternary\":\n    default:\n      return intentColorSelector(props, intent, 600);\n  }\n};\n\nexport const StyledLinearGradient0Stop = styled.stop<StyledStopProps>`\n  stop-color: ${get0StopColors};\n`;\n\nexport const StyledLinearGradient100Stop = styled.stop<StyledStopProps>`\n  stop-color: ${get100StopColors};\n`;\n","export { LoadingIconWithGradient } from \"./LoadingIconWithGradient\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getBorderRadius,\n  getBorderWidth,\n  getFontFamily,\n  getFontSize,\n  getSpacing,\n  colorSelector,\n  getColor,\n  getIntentColor,\n  intentColorSelector,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledIcon } from \"../Icon\";\n\nimport { StyledButtonProps } from \"./types\";\n\nconst getButtonSize = ({ size }: StyledButtonProps) => {\n  switch (size) {\n    case \"sm\":\n      return css`\n        font-size: ${getFontSize(\"body\", \"sm\")};\n        padding: 0 ${getSpacing(\"sm\")};\n        height: 32px;\n\n        ${StyledIcon} {\n          font-size: getFontSize(\"body\", \"xs\");\n        }\n\n        & > *:not(:last-of-type) {\n          margin-right: ${getSpacing(\"xs\")};\n        }\n      `;\n    case \"lg\":\n      return css`\n        padding: 0 ${getSpacing(\"xl\")};\n        height: 40px;\n      `;\n    case \"full\":\n      return css`\n        display: flex;\n        height: 40px;\n        width: 100%;\n      `;\n  }\n};\n\nconst getButtonColors = ({ intent, variant, ...props }: StyledButtonProps) => {\n  switch (variant) {\n    case \"primary\":\n      if (intent === \"muted\") {\n        return css`\n          border: none;\n          color: ${colorSelector(props, \"gray\", 800)};\n\n          &:hover:not(:disabled) {\n            background: ${colorSelector(props, \"gray\", 100)};\n          }\n\n          &:active:not(:disabled) {\n            background: ${colorSelector(props, \"gray\", 200)};\n          }\n\n          &[data-loading-state=\"idle\"]:disabled {\n            color: ${colorSelector(props, \"gray\", 300)};\n          }\n        `;\n      }\n\n      return css`\n        background: ${intentColorSelector(props, intent, 500)};\n        border-color: ${intentColorSelector(props, intent, 500)};\n        color: ${colorSelector(props, \"gray\", 0)};\n\n        &:hover:not(:disabled) {\n          background: ${intentColorSelector(props, intent, 400)};\n          border-color: ${intentColorSelector(props, intent, 400)};\n        }\n\n        &:active:not(:disabled) {\n          background: ${intentColorSelector(props, intent, 600)};\n          border-color: ${intentColorSelector(props, intent, 600)};\n        }\n\n        &[data-loading-state=\"idle\"]:disabled {\n          background: ${colorSelector(props, \"gray\", 200)};\n          border-color: ${colorSelector(props, \"gray\", 200)};\n        }\n      `;\n    case \"secondary\":\n      if (intent === \"muted\") {\n        return css`\n          border-color: ${colorSelector(props, \"gray\", 200)};\n          color: ${colorSelector(props, \"gray\", 800)};\n\n          &:hover:not(:disabled) {\n            background: ${colorSelector(props, \"gray\", 100)};\n          }\n\n          &:active:not(:disabled) {\n            background: ${colorSelector(props, \"gray\", 200)};\n          }\n\n          &[data-loading-state=\"idle\"]:disabled {\n            color: ${colorSelector(props, \"gray\", 300)};\n          }\n        `;\n      }\n\n      return css`\n        border-color: ${intentColorSelector(props, intent, 500)};\n        color: ${intentColorSelector(props, intent, 500)};\n\n        &:hover:not(:disabled) {\n          background: ${intentColorSelector(props, intent, 50)};\n        }\n\n        &:active:not(:disabled) {\n          background: ${intentColorSelector(props, intent, 100)};\n        }\n\n        &[data-loading-state=\"idle\"]:disabled {\n          border-color: ${colorSelector(props, \"gray\", 300)};\n          color: ${colorSelector(props, \"gray\", 300)};\n        }\n      `;\n    case \"tertiary\":\n      return css`\n        border: none;\n        color: ${intent === \"muted\"\n          ? colorSelector(props, \"gray\", 600)\n          : intentColorSelector(props, intent, 500)};\n\n        &:hover:not(:disabled) {\n          background: ${intent === \"muted\"\n            ? colorSelector(props, \"gray\", 100)\n            : intentColorSelector(props, intent, 50)};\n        }\n\n        &:active:not(:disabled) {\n          background: ${intent === \"muted\"\n            ? colorSelector(props, \"gray\", 200)\n            : intentColorSelector(props, intent, 100)};\n        }\n\n        &[data-loading-state=\"idle\"]:disabled {\n          color: ${colorSelector(props, \"gray\", 300)};\n        }\n      `;\n    case \"quaternary\":\n      return css`\n        border: none;\n        background: none;\n        color: ${intent === \"muted\"\n          ? colorSelector(props, \"gray\", 600)\n          : intentColorSelector(props, intent, 500)};\n        padding: 2px;\n        height: unset;\n\n        &:hover:not(:disabled) {\n          text-decoration: underline;\n        }\n\n        &:active:not(:disabled) {\n          text-decoration: underline;\n          color: ${intent === \"muted\"\n            ? colorSelector(props, \"gray\", 400)\n            : intentColorSelector(props, intent, 400)};\n        }\n\n        &:focus:not(:disabled) {\n          text-decoration: underline;\n          color: ${intent === \"muted\" && colorSelector(props, \"gray\", 400)};\n        }\n\n        &[data-loading-state=\"idle\"]:disabled {\n          color: ${colorSelector(props, \"gray\", 300)};\n        }\n      `;\n  }\n};\n\nexport const StyledButton = styled.button<StyledButtonProps>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  cursor: ${(props) => (props.disabled ? \"no-drop\" : \"pointer\")};\n  border-width: ${getBorderWidth(\"thin\")};\n  border-style: solid;\n  border-radius: ${getBorderRadius(\"sm\")};\n  font-size: ${getFontSize(\"body\", \"md\")};\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  background: ${getColor(\"gray\", 0)};\n  position: relative;\n  min-width: ${(props) => props.minWidth}px;\n\n  ${StyledIcon} {\n    font-size: 12px;\n  }\n\n  ${getButtonSize};\n  ${getButtonColors};\n\n  &:focus-visible:not(:disabled),\n  &:active:not(:disabled) {\n    outline: ${getBorderWidth(\"thick\")} solid ${getIntentColor(\"primary\", 200)};\n    outline-offset: 2px;\n\n    /* prevents the outline from getting covered by adjacent elements */\n    position: relative;\n  }\n`;\n","export { Button } from \"./Button\";\n\nexport { StyledButton } from \"./StyledButton\";\n\nexport { StyledButtonContent } from \"./ButtonContent\";\n\nexport type { ButtonProps, StyledButtonProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean, select, text } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Annotation } from \"../Annotation\";\nimport { Button } from \"../Button\";\nimport { ButtonGroup } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Primitives/ButtonGroup\" component={ButtonGroup} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"buttongroup\"\n    }}>{`ButtonGroup`}</h1>\n    <p><inlineCode parentName=\"p\">{`ButtonGroup`}</inlineCode>{` is used to display similar or related actions. It will automatically lay out buttons in the order that is\nbest for user experience. The use cases are defined below.`}</p>\n    <p>{`Button groups are 2-3 buttons, and should be a primary and secondary button at the minimum. The third button should be\na quaternary button.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`When using multiple buttons, there are a couple of placement or alignment guidelines that ButtonGroup enforces:`}</p>\n    <h3 {...{\n      \"id\": \"horizontally-aligned-groups\"\n    }}>{`Horizontally aligned groups`}</h3>\n    <h4 {...{\n      \"id\": \"left-aligned\"\n    }}>{`Left-aligned`}</h4>\n    <p>{`Left-aligned buttons are always aligned with primary followed by secondary, and then quaternary.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-buttongroup--left-aligned-2-buttons\" mdxType=\"Story\" />\n    </Canvas>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-buttongroup--left-aligned-3-buttons\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"right-aligned\"\n    }}>{`Right-aligned`}</h4>\n    <p>{`Primary button will be right-aligned and appear to the right of the secondary or quaternary button.\nThis use case is for example within wizards, banner with accordion and dialog windows like modal and popover.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-buttongroup--right-aligned-3-buttons\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"vertically-aligned-groups\"\n    }}>{`Vertically aligned groups`}</h3>\n    <p>{`When vertically aligned, buttons are ordered primary, secondary, then quaternary independent of source ordering.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-buttongroup--vertical-aligned-2-buttons\" mdxType=\"Story\" />\n    </Canvas>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-buttongroup--vertical-aligned-3-buttons\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-annotation\"\n    }}>{`With annotation`}</h3>\n    <p>{`It's also possible to to use buttons wrapped with the `}<inlineCode parentName=\"p\">{`Annotation`}</inlineCode>{`\ncomponent in case you want to call out info related to a button.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-buttongroup--with-annotation\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { ButtonGroup } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`aligner`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the component is being used as an aligner; required if using 'side' prop`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`alignItems`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`stretch`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`baseline`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`stretch`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defines the behavior for how items are laid out along the cross axis (perpendicular to the main axis)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`direction`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`row`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`column`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`row-reverse`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`column-reverse`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`row`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specified the direction of the items inside the flex element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`inline`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the flex element should be inline`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`justifyContent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`flex-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-between`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-around`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-evenly`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`flex-start`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defines the behavior for how items are laid out along the main axis`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`side`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates side of the parent footer to align items to; requires 'aligner' to be true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`styledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`textAlign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`justify`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`left`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`horizontally aligns text within a DOM element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`wrap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`wrap`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`nowrap`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`wrap-reverse`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`nowrap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies whether the flexed items should wrap`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport { Annotation } from \\\"../Annotation\\\";\\nimport { Button } from \\\"../Button\\\";\\n\\nimport page from \\\"./ButtonGroup.docs.mdx\\\";\\n\\nimport { ButtonGroup } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Primitives/ButtonGroup\\\",\\n  component: ButtonGroup,\\n  parameters: {\\n    docs: { page },\\n    controls: { include: [\\\"primaryContent\\\", \\\"secondaryContent\\\"] },\\n  },\\n} as ComponentMeta<typeof ButtonGroup>;\\n\\ninterface Args {\\n  primaryContent: string;\\n  secondaryContent: string;\\n}\\n\\nconst defaultArgs: Args = {\\n  primaryContent: \\\"Primary\\\",\\n  secondaryContent: \\\"Secondary\\\",\\n};\\n\\nexport const LeftAligned2Buttons = ({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup>\\n      <Button\\n        variant=\\\"primary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"primary click\\\")}\\n      >\\n        {primaryContent}\\n      </Button>\\n      <Button\\n        variant=\\\"secondary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"secondary click\\\")}\\n      >\\n        {secondaryContent}\\n      </Button>\\n    </ButtonGroup>\\n  );\\n};\\n\\nLeftAligned2Buttons.storyName = \\\"Left aligned (2 buttons)\\\";\\n\\nLeftAligned2Buttons.args = defaultArgs;\\n\\nexport const LeftAligned3Buttons = (): React.ReactElement => {\\n  return (\\n    <ButtonGroup>\\n      <Button\\n        variant=\\\"primary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"primary click\\\")}\\n      >\\n        Create Segment\\n      </Button>\\n      <Button\\n        variant=\\\"secondary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"secondary click\\\")}\\n      >\\n        Create Campaign\\n      </Button>\\n      <Button\\n        variant=\\\"quaternary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"quaternary click\\\")}\\n      >\\n        More...\\n      </Button>\\n    </ButtonGroup>\\n  );\\n};\\n\\nLeftAligned3Buttons.storyName = \\\"Left aligned (3 buttons)\\\";\\n\\nexport const RightAligned3Buttons = ({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup>\\n      <ButtonGroup aligner side=\\\"left\\\">\\n        <Button\\n          variant=\\\"quaternary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"quaternary click\\\")}\\n        >\\n          Don&apos;t Save\\n        </Button>\\n      </ButtonGroup>\\n      <ButtonGroup aligner side=\\\"right\\\">\\n        <Button\\n          variant=\\\"secondary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"secondary click\\\")}\\n        >\\n          {secondaryContent}\\n        </Button>\\n        <Button\\n          variant=\\\"primary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"primary click\\\")}\\n        >\\n          {primaryContent}\\n        </Button>\\n      </ButtonGroup>\\n    </ButtonGroup>\\n  );\\n};\\n\\nRightAligned3Buttons.storyName = \\\"Right aligned (3 buttons)\\\";\\n\\nRightAligned3Buttons.args = {\\n  primaryContent: \\\"Confirm\\\",\\n  secondaryContent: \\\"Keep Editing\\\",\\n};\\n\\nexport const VerticalAligned2Buttons = ({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup direction=\\\"column\\\">\\n      <Button\\n        variant=\\\"secondary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"secondary click\\\")}\\n      >\\n        {secondaryContent}\\n      </Button>\\n      <Button\\n        variant=\\\"primary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"primary click\\\")}\\n      >\\n        {primaryContent}\\n      </Button>\\n    </ButtonGroup>\\n  );\\n};\\n\\nVerticalAligned2Buttons.storyName = \\\"Vertical aligned (2 buttons)\\\";\\n\\nVerticalAligned2Buttons.args = defaultArgs;\\n\\nexport const VerticalAligned3Buttons = ({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup direction=\\\"column\\\">\\n      <Button\\n        variant=\\\"quaternary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"quaternary click\\\")}\\n      >\\n        Don&apos;t Save\\n      </Button>\\n      <Button\\n        variant=\\\"secondary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"secondary click\\\")}\\n      >\\n        {secondaryContent}\\n      </Button>\\n      <Button\\n        variant=\\\"primary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"primary click\\\")}\\n      >\\n        {primaryContent}\\n      </Button>\\n    </ButtonGroup>\\n  );\\n};\\n\\nVerticalAligned3Buttons.storyName = \\\"Vertical aligned (3 buttons)\\\";\\n\\nVerticalAligned3Buttons.args = defaultArgs;\\n\\nexport const WithAnnotation = ({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup>\\n      <ButtonGroup aligner side=\\\"left\\\">\\n        <Button\\n          variant=\\\"quaternary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"quaternary click\\\")}\\n        >\\n          Don&apos;t Save\\n        </Button>\\n      </ButtonGroup>\\n      <ButtonGroup aligner side=\\\"right\\\">\\n        <Button\\n          variant=\\\"secondary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"secondary click\\\")}\\n        >\\n          {secondaryContent}\\n        </Button>\\n        <Annotation label=\\\"some annotation\\\" placement=\\\"bottom\\\" variant=\\\"error\\\">\\n          <Button\\n            variant=\\\"primary\\\"\\n            intent=\\\"info\\\"\\n            size=\\\"lg\\\"\\n            onClick={action(\\\"primary click\\\")}\\n          >\\n            {primaryContent}\\n          </Button>\\n        </Annotation>\\n      </ButtonGroup>\\n    </ButtonGroup>\\n  );\\n};\\n\\nWithAnnotation.storyName = \\\"With annotation\\\";\\n\\nWithAnnotation.args = {\\n  primaryContent: \\\"Confirm\\\",\\n  secondaryContent: \\\"Keep Editing\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"LeftAligned2Buttons\":{\"startLoc\":{\"col\":35,\"line\":32},\"endLoc\":{\"col\":1,\"line\":56},\"startBody\":{\"col\":35,\"line\":32},\"endBody\":{\"col\":1,\"line\":56}},\"LeftAligned3Buttons\":{\"startLoc\":{\"col\":35,\"line\":62},\"endLoc\":{\"col\":1,\"line\":91},\"startBody\":{\"col\":35,\"line\":62},\"endBody\":{\"col\":1,\"line\":91}},\"RightAligned3Buttons\":{\"startLoc\":{\"col\":36,\"line\":95},\"endLoc\":{\"col\":1,\"line\":131},\"startBody\":{\"col\":36,\"line\":95},\"endBody\":{\"col\":1,\"line\":131}},\"VerticalAligned2Buttons\":{\"startLoc\":{\"col\":39,\"line\":140},\"endLoc\":{\"col\":1,\"line\":164},\"startBody\":{\"col\":39,\"line\":140},\"endBody\":{\"col\":1,\"line\":164}},\"VerticalAligned3Buttons\":{\"startLoc\":{\"col\":39,\"line\":170},\"endLoc\":{\"col\":1,\"line\":202},\"startBody\":{\"col\":39,\"line\":170},\"endBody\":{\"col\":1,\"line\":202}},\"WithAnnotation\":{\"startLoc\":{\"col\":30,\"line\":208},\"endLoc\":{\"col\":1,\"line\":246},\"startBody\":{\"col\":30,\"line\":208},\"endBody\":{\"col\":1,\"line\":246}}};\n    \nimport React from \"react\";\nimport { ComponentMeta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport { Annotation } from \"../Annotation\";\nimport { Button } from \"../Button\";\n\nimport page from \"./ButtonGroup.docs.mdx\";\n\nimport { ButtonGroup } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Primitives/ButtonGroup\",\n  component: ButtonGroup,\n  parameters: {\n    docs: { page },\n    controls: { include: [\"primaryContent\", \"secondaryContent\"] },\n  },\n} as ComponentMeta<typeof ButtonGroup>;\n\ninterface Args {\n  primaryContent: string;\n  secondaryContent: string;\n}\n\nconst defaultArgs: Args = {\n  primaryContent: \"Primary\",\n  secondaryContent: \"Secondary\",\n};\n\nexport const LeftAligned2Buttons = ({\n  primaryContent,\n  secondaryContent,\n}: Args): React.ReactElement => {\n  return (\n    <ButtonGroup>\n      <Button\n        variant=\"primary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"primary click\")}\n      >\n        {primaryContent}\n      </Button>\n      <Button\n        variant=\"secondary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"secondary click\")}\n      >\n        {secondaryContent}\n      </Button>\n    </ButtonGroup>\n  );\n};;\n\nLeftAligned2Buttons.storyName = \"Left aligned (2 buttons)\";\n\nLeftAligned2Buttons.args = defaultArgs;\n\nexport const LeftAligned3Buttons = (): React.ReactElement => {\n  return (\n    <ButtonGroup>\n      <Button\n        variant=\"primary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"primary click\")}\n      >\n        Create Segment\n      </Button>\n      <Button\n        variant=\"secondary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"secondary click\")}\n      >\n        Create Campaign\n      </Button>\n      <Button\n        variant=\"quaternary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"quaternary click\")}\n      >\n        More...\n      </Button>\n    </ButtonGroup>\n  );\n};;\n\nLeftAligned3Buttons.storyName = \"Left aligned (3 buttons)\";\n\nexport const RightAligned3Buttons = ({\n  primaryContent,\n  secondaryContent,\n}: Args): React.ReactElement => {\n  return (\n    <ButtonGroup>\n      <ButtonGroup aligner side=\"left\">\n        <Button\n          variant=\"quaternary\"\n          intent=\"info\"\n          size=\"lg\"\n          onClick={action(\"quaternary click\")}\n        >\n          Don&apos;t Save\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup aligner side=\"right\">\n        <Button\n          variant=\"secondary\"\n          intent=\"info\"\n          size=\"lg\"\n          onClick={action(\"secondary click\")}\n        >\n          {secondaryContent}\n        </Button>\n        <Button\n          variant=\"primary\"\n          intent=\"info\"\n          size=\"lg\"\n          onClick={action(\"primary click\")}\n        >\n          {primaryContent}\n        </Button>\n      </ButtonGroup>\n    </ButtonGroup>\n  );\n};;\n\nRightAligned3Buttons.storyName = \"Right aligned (3 buttons)\";\n\nRightAligned3Buttons.args = {\n  primaryContent: \"Confirm\",\n  secondaryContent: \"Keep Editing\",\n};\n\nexport const VerticalAligned2Buttons = ({\n  primaryContent,\n  secondaryContent,\n}: Args): React.ReactElement => {\n  return (\n    <ButtonGroup direction=\"column\">\n      <Button\n        variant=\"secondary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"secondary click\")}\n      >\n        {secondaryContent}\n      </Button>\n      <Button\n        variant=\"primary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"primary click\")}\n      >\n        {primaryContent}\n      </Button>\n    </ButtonGroup>\n  );\n};;\n\nVerticalAligned2Buttons.storyName = \"Vertical aligned (2 buttons)\";\n\nVerticalAligned2Buttons.args = defaultArgs;\n\nexport const VerticalAligned3Buttons = ({\n  primaryContent,\n  secondaryContent,\n}: Args): React.ReactElement => {\n  return (\n    <ButtonGroup direction=\"column\">\n      <Button\n        variant=\"quaternary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"quaternary click\")}\n      >\n        Don&apos;t Save\n      </Button>\n      <Button\n        variant=\"secondary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"secondary click\")}\n      >\n        {secondaryContent}\n      </Button>\n      <Button\n        variant=\"primary\"\n        intent=\"info\"\n        size=\"lg\"\n        onClick={action(\"primary click\")}\n      >\n        {primaryContent}\n      </Button>\n    </ButtonGroup>\n  );\n};;\n\nVerticalAligned3Buttons.storyName = \"Vertical aligned (3 buttons)\";\n\nVerticalAligned3Buttons.args = defaultArgs;\n\nexport const WithAnnotation = ({\n  primaryContent,\n  secondaryContent,\n}: Args): React.ReactElement => {\n  return (\n    <ButtonGroup>\n      <ButtonGroup aligner side=\"left\">\n        <Button\n          variant=\"quaternary\"\n          intent=\"info\"\n          size=\"lg\"\n          onClick={action(\"quaternary click\")}\n        >\n          Don&apos;t Save\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup aligner side=\"right\">\n        <Button\n          variant=\"secondary\"\n          intent=\"info\"\n          size=\"lg\"\n          onClick={action(\"secondary click\")}\n        >\n          {secondaryContent}\n        </Button>\n        <Annotation label=\"some annotation\" placement=\"bottom\" variant=\"error\">\n          <Button\n            variant=\"primary\"\n            intent=\"info\"\n            size=\"lg\"\n            onClick={action(\"primary click\")}\n          >\n            {primaryContent}\n          </Button>\n        </Annotation>\n      </ButtonGroup>\n    </ButtonGroup>\n  );\n};\n\nWithAnnotation.storyName = \"With annotation\";\n\nWithAnnotation.args = {\n  primaryContent: \"Confirm\",\n  secondaryContent: \"Keep Editing\",\n};\n\n\n\nLeftAligned2Buttons.parameters = { storySource: { source: \"({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup>\\n      <Button\\n        variant=\\\"primary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"primary click\\\")}\\n      >\\n        {primaryContent}\\n      </Button>\\n      <Button\\n        variant=\\\"secondary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"secondary click\\\")}\\n      >\\n        {secondaryContent}\\n      </Button>\\n    </ButtonGroup>\\n  );\\n}\" }, ...LeftAligned2Buttons.parameters };\nLeftAligned3Buttons.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <ButtonGroup>\\n      <Button\\n        variant=\\\"primary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"primary click\\\")}\\n      >\\n        Create Segment\\n      </Button>\\n      <Button\\n        variant=\\\"secondary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"secondary click\\\")}\\n      >\\n        Create Campaign\\n      </Button>\\n      <Button\\n        variant=\\\"quaternary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"quaternary click\\\")}\\n      >\\n        More...\\n      </Button>\\n    </ButtonGroup>\\n  );\\n}\" }, ...LeftAligned3Buttons.parameters };\nRightAligned3Buttons.parameters = { storySource: { source: \"({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup>\\n      <ButtonGroup aligner side=\\\"left\\\">\\n        <Button\\n          variant=\\\"quaternary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"quaternary click\\\")}\\n        >\\n          Don&apos;t Save\\n        </Button>\\n      </ButtonGroup>\\n      <ButtonGroup aligner side=\\\"right\\\">\\n        <Button\\n          variant=\\\"secondary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"secondary click\\\")}\\n        >\\n          {secondaryContent}\\n        </Button>\\n        <Button\\n          variant=\\\"primary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"primary click\\\")}\\n        >\\n          {primaryContent}\\n        </Button>\\n      </ButtonGroup>\\n    </ButtonGroup>\\n  );\\n}\" }, ...RightAligned3Buttons.parameters };\nVerticalAligned2Buttons.parameters = { storySource: { source: \"({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup direction=\\\"column\\\">\\n      <Button\\n        variant=\\\"secondary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"secondary click\\\")}\\n      >\\n        {secondaryContent}\\n      </Button>\\n      <Button\\n        variant=\\\"primary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"primary click\\\")}\\n      >\\n        {primaryContent}\\n      </Button>\\n    </ButtonGroup>\\n  );\\n}\" }, ...VerticalAligned2Buttons.parameters };\nVerticalAligned3Buttons.parameters = { storySource: { source: \"({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup direction=\\\"column\\\">\\n      <Button\\n        variant=\\\"quaternary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"quaternary click\\\")}\\n      >\\n        Don&apos;t Save\\n      </Button>\\n      <Button\\n        variant=\\\"secondary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"secondary click\\\")}\\n      >\\n        {secondaryContent}\\n      </Button>\\n      <Button\\n        variant=\\\"primary\\\"\\n        intent=\\\"info\\\"\\n        size=\\\"lg\\\"\\n        onClick={action(\\\"primary click\\\")}\\n      >\\n        {primaryContent}\\n      </Button>\\n    </ButtonGroup>\\n  );\\n}\" }, ...VerticalAligned3Buttons.parameters };\nWithAnnotation.parameters = { storySource: { source: \"({\\n  primaryContent,\\n  secondaryContent,\\n}: Args): React.ReactElement => {\\n  return (\\n    <ButtonGroup>\\n      <ButtonGroup aligner side=\\\"left\\\">\\n        <Button\\n          variant=\\\"quaternary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"quaternary click\\\")}\\n        >\\n          Don&apos;t Save\\n        </Button>\\n      </ButtonGroup>\\n      <ButtonGroup aligner side=\\\"right\\\">\\n        <Button\\n          variant=\\\"secondary\\\"\\n          intent=\\\"info\\\"\\n          size=\\\"lg\\\"\\n          onClick={action(\\\"secondary click\\\")}\\n        >\\n          {secondaryContent}\\n        </Button>\\n        <Annotation label=\\\"some annotation\\\" placement=\\\"bottom\\\" variant=\\\"error\\\">\\n          <Button\\n            variant=\\\"primary\\\"\\n            intent=\\\"info\\\"\\n            size=\\\"lg\\\"\\n            onClick={action(\\\"primary click\\\")}\\n          >\\n            {primaryContent}\\n          </Button>\\n        </Annotation>\\n      </ButtonGroup>\\n    </ButtonGroup>\\n  );\\n}\" }, ...WithAnnotation.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { StyledButtonGroup } from \"./StyledButtonGroup\";\nimport { ButtonGroupProps } from \"./types\";\n\nexport const ButtonGroup = ({\n  className,\n  ...props\n}: ButtonGroupProps): React.ReactElement => {\n  return (\n    <StyledButtonGroup\n      {...props}\n      className={classNames([\"bcl-button-group\", className])}\n    />\n  );\n};\n\nButtonGroup.displayName = \"ButtonGroup\";\n","import classNames from \"classnames\";\nimport styled, { css } from \"styled-components\";\nimport { getBreakpoint, getSpacing } from \"@braze/beacon-styling\";\n\nimport { Flex, FlexProps } from \"../Flex\";\n\nimport { StyledButtonGroupProps } from \"./types\";\n\nconst mapSideToMargin = ({ aligner, side }: StyledButtonGroupProps) => {\n  if (!aligner) {\n    return;\n  }\n\n  if (side === \"left\") {\n    return css`\n      margin-right: auto;\n    `;\n  }\n\n  if (side === \"right\") {\n    return css`\n      margin-left: auto;\n    `;\n  }\n\n  return;\n};\n\nconst getAttrs = ({\n  aligner,\n  className,\n}: StyledButtonGroupProps): FlexProps => ({\n  className: classNames(className, { aligner }),\n});\n\nconst getColumnStyle = ({ direction }: StyledButtonGroupProps) => {\n  if (direction === \"column\") {\n    return css<StyledButtonGroupProps>`\n      flex-direction: column-reverse;\n\n      & > :not(:first-child) {\n        margin-bottom: ${getSpacing(\"sm\")};\n      }\n    `;\n  }\n\n  return css<StyledButtonGroupProps>`\n    @media (max-width: ${getBreakpoint(\"sm\")}px) {\n      flex-direction: column-reverse;\n\n      & > :not(:first-child) {\n        margin-bottom: ${getSpacing(\"sm\")};\n      }\n    }\n\n    @media (min-width: calc(${getBreakpoint(\"sm\")}px + 1px)) {\n      flex-direction: row;\n\n      & > :not(:first-child) {\n        margin-left: ${getSpacing(\"md\")};\n      }\n\n      ${mapSideToMargin};\n    }\n  `;\n};\n\nexport const StyledButtonGroup = styled(Flex).attrs(\n  getAttrs\n)<StyledButtonGroupProps>`\n  ${getColumnStyle};\n`;\n","export { ButtonGroup } from \"./ButtonGroup\";\n\nexport type {\n  ButtonGroupProps,\n  StyledButtonGroupProps,\n  StyledButtonGroupPropsAlign,\n  StyledButtonGroupPropsNoAlign,\n} from \"./types\";\n\nexport { StyledButtonGroup } from \"./StyledButtonGroup\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean, withKnobs } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { BodyText } from \"../BodyText\";\nimport { Checkbox } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <Meta title=\"Core/Forms/Checkbox\" component={Checkbox} mdxType=\"Meta\" />\n    <p>{`A `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{` you can interact with.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: In order for the checkbox to toggle when clicking on its label, it\n`}<em parentName=\"p\">{`MUST`}</em>{` have an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` prop defined.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`See below for some sample use cases on how the `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{` component can be used\nin different ways.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Try checking and unchecking! Note that, as shown in the example, you should use the\n`}<inlineCode parentName=\"p\">{`event.target.checked`}</inlineCode>{` value to determine whether your new checkbox state is checked\nor not, as opposed to the typical `}<inlineCode parentName=\"p\">{`event.target.value`}</inlineCode>{`, since the latter is static\nfor the `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{` component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: To toggle `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` on/off, switch to the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab and find the `}<inlineCode parentName=\"p\">{`Knobs`}</inlineCode>{`\nsection.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-checkbox--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"indeterminate-use\"\n    }}>{`Indeterminate use`}</h3>\n    <p>{`When using the `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` prop, note that it will override `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` styling.\nTo display the checkbox as `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{`, make sure to set `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To toggle `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` on/off, switch to the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab and find the `}<inlineCode parentName=\"p\">{`Knobs`}</inlineCode>{`\nsection.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-checkbox--indeterminate-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`When disabled, clicking on either the checkbox or its label\nwill not change the state of the checkbox.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-checkbox--disabled-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"focus-styling\"\n    }}>{`Focus styling`}</h3>\n    <p>{`Try tabbing through the checkboxes here:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-checkbox--focus-styling\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid-state\"\n    }}>{`Invalid state`}</h3>\n    <p>{`Checkboxes can represent invalid state as well`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-checkbox--invalid-state\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid-state-with-no-message\"\n    }}>{`Invalid state with no message`}</h3>\n    <p>{`Invalid state error messages are optionally rendered`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-checkbox--invalid-state-no-message\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-help-text\"\n    }}>{`With help text`}</h3>\n    <p>{`Checkboxes can also be used with a help text underneath,\ninforming the user about the consequences of their selection.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-checkbox--with-help-text\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"no-id\"\n    }}>{`No `}<inlineCode parentName=\"h3\">{`id`}</inlineCode></h3>\n    <p>{`If you don't provide an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`, a random one will be provided for you to properly attach the label.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-checkbox--no-id\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Checkbox } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`checked`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that checkbox should be checked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be rendered next to the checkbox`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the checkbox should be visually disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`errorText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text to be shown to the user if 'invalid' prop is true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`helpText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text to be shown if the invalid prop is false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`helpTextClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed into the help text; use as escape hatch`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`indeterminate`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates whether input has indeterminate state; overrides `}<inlineCode parentName=\"td\">{`checked`}</inlineCode>{` prop`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid `}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates whether input has invalid state`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalidCheckboxOnly`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`only set the checkbox to invalid state, don't display the error text`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.ChangeEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function for checkbox check/uncheck`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLInputElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be represented in the checkbox`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport page from \\\"./Checkbox.docs.mdx\\\";\\nimport { CheckboxProps } from \\\"./types\\\";\\n\\nimport { Checkbox } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Forms/Checkbox\\\",\\n  component: Checkbox,\\n  parameters: {\\n    docs: { page },\\n    controls: { exclude: [\\\"checked\\\", \\\"onChange\\\"] },\\n  },\\n} as ComponentMeta<typeof Checkbox>;\\n\\nexport const BasicUse = (args: CheckboxProps): React.ReactElement => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const handleChange = (event) => {\\n    setChecked(event.target.checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <>\\n      <Checkbox {...args} checked={checked} onChange={handleChange}>\\n        My checkbox\\n      </Checkbox>\\n      <pre>\\n        <code>checked: </code>\\n        <code className=\\\"checked-value\\\">{JSON.stringify(checked)}</code>\\n      </pre>\\n    </>\\n  );\\n};\\n\\nBasicUse.args = { id: \\\"some-id\\\" };\\n\\nexport const IndeterminateUse = (args: CheckboxProps): React.ReactElement => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const handleChange = (event) => {\\n    setChecked(event.target.checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <Checkbox {...args} checked={checked} onChange={handleChange}>\\n      My other checkbox\\n    </Checkbox>\\n  );\\n};\\n\\nIndeterminateUse.args = { id: \\\"indeterminate-use\\\", indeterminate: true };\\n\\nexport const DisabledUse = (args: CheckboxProps): React.ReactElement => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const handleChange = (event) => {\\n    setChecked(event.target.checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <>\\n      <Checkbox {...args} checked={checked} onChange={handleChange}>\\n        My checkbox\\n      </Checkbox>\\n      <pre>\\n        <code>checked: </code>\\n        <code className=\\\"checked-value\\\">{JSON.stringify(checked)}</code>\\n      </pre>\\n    </>\\n  );\\n};\\n\\nDisabledUse.args = { id: \\\"disabled-id\\\", disabled: true };\\n\\nexport const FocusStyling = (): React.ReactElement => {\\n  return (\\n    <div>\\n      <div style={{ marginBottom: \\\"0.5rem\\\" }}>\\n        <Checkbox id=\\\"tab-check-1\\\" onChange={action(\\\"change\\\")}>\\n          Tab through...\\n        </Checkbox>\\n      </div>\\n      <div style={{ marginBottom: \\\"0.5rem\\\" }}>\\n        <Checkbox id=\\\"tab-check-2\\\" onChange={action(\\\"change\\\")}>\\n          these checkboxes...\\n        </Checkbox>\\n      </div>\\n      <div>\\n        <Checkbox id=\\\"tab-check-3\\\" onChange={action(\\\"change\\\")}>\\n          to see styling.\\n        </Checkbox>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport const InvalidState = (args: CheckboxProps): React.ReactElement => {\\n  return (\\n    <Checkbox {...args} onChange={action(\\\"change\\\")}>\\n      An invalid checkbox\\n    </Checkbox>\\n  );\\n};\\n\\nInvalidState.args = {\\n  id: \\\"invalid-id\\\",\\n  invalid: true,\\n  errorText: \\\"This checkbox is invalid.\\\",\\n};\\n\\nexport const InvalidStateNoMessage = (\\n  args: CheckboxProps\\n): React.ReactElement => {\\n  return (\\n    <Checkbox {...args} onChange={action(\\\"change\\\")}>\\n      An invalid checkbox\\n    </Checkbox>\\n  );\\n};\\n\\nInvalidStateNoMessage.args = {\\n  id: \\\"invalid-id\\\",\\n  invalid: true,\\n  invalidCheckboxOnly: true,\\n};\\n\\nexport const WithHelpText = (args: CheckboxProps): React.ReactElement => {\\n  return (\\n    <Checkbox {...args} onChange={action(\\\"change\\\")}>\\n      checkbox with help text.\\n    </Checkbox>\\n  );\\n};\\n\\nWithHelpText.args = { id: \\\"helptext-id\\\", helpText: \\\"this is some helper text\\\" };\\n\\nexport const NoId = (): React.ReactElement => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const handleChange = (event) => {\\n    setChecked(!checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <Checkbox checked={checked} onChange={handleChange}>\\n      This checkbox has no <code>id</code> passed in. Click me to toggle the\\n      checkbox.\\n    </Checkbox>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":20},\"endLoc\":{\"col\":1,\"line\":40},\"startBody\":{\"col\":24,\"line\":20},\"endBody\":{\"col\":1,\"line\":40}},\"IndeterminateUse\":{\"startLoc\":{\"col\":32,\"line\":44},\"endLoc\":{\"col\":1,\"line\":58},\"startBody\":{\"col\":32,\"line\":44},\"endBody\":{\"col\":1,\"line\":58}},\"DisabledUse\":{\"startLoc\":{\"col\":27,\"line\":62},\"endLoc\":{\"col\":1,\"line\":82},\"startBody\":{\"col\":27,\"line\":62},\"endBody\":{\"col\":1,\"line\":82}},\"FocusStyling\":{\"startLoc\":{\"col\":28,\"line\":86},\"endLoc\":{\"col\":1,\"line\":106},\"startBody\":{\"col\":28,\"line\":86},\"endBody\":{\"col\":1,\"line\":106}},\"InvalidState\":{\"startLoc\":{\"col\":28,\"line\":108},\"endLoc\":{\"col\":1,\"line\":114},\"startBody\":{\"col\":28,\"line\":108},\"endBody\":{\"col\":1,\"line\":114}},\"InvalidStateNoMessage\":{\"startLoc\":{\"col\":37,\"line\":122},\"endLoc\":{\"col\":1,\"line\":130},\"startBody\":{\"col\":37,\"line\":122},\"endBody\":{\"col\":1,\"line\":130}},\"WithHelpText\":{\"startLoc\":{\"col\":28,\"line\":138},\"endLoc\":{\"col\":1,\"line\":144},\"startBody\":{\"col\":28,\"line\":138},\"endBody\":{\"col\":1,\"line\":144}},\"NoId\":{\"startLoc\":{\"col\":20,\"line\":148},\"endLoc\":{\"col\":1,\"line\":163},\"startBody\":{\"col\":20,\"line\":148},\"endBody\":{\"col\":1,\"line\":163}}};\n    \nimport React, { useState } from \"react\";\nimport { ComponentMeta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport page from \"./Checkbox.docs.mdx\";\nimport { CheckboxProps } from \"./types\";\n\nimport { Checkbox } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Forms/Checkbox\",\n  component: Checkbox,\n  parameters: {\n    docs: { page },\n    controls: { exclude: [\"checked\", \"onChange\"] },\n  },\n} as ComponentMeta<typeof Checkbox>;\n\nexport const BasicUse = (args: CheckboxProps): React.ReactElement => {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n\n    action(\"change\")(event);\n  };\n\n  return (\n    <>\n      <Checkbox {...args} checked={checked} onChange={handleChange}>\n        My checkbox\n      </Checkbox>\n      <pre>\n        <code>checked: </code>\n        <code className=\"checked-value\">{JSON.stringify(checked)}</code>\n      </pre>\n    </>\n  );\n};;\n\nBasicUse.args = { id: \"some-id\" };\n\nexport const IndeterminateUse = (args: CheckboxProps): React.ReactElement => {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n\n    action(\"change\")(event);\n  };\n\n  return (\n    <Checkbox {...args} checked={checked} onChange={handleChange}>\n      My other checkbox\n    </Checkbox>\n  );\n};;\n\nIndeterminateUse.args = { id: \"indeterminate-use\", indeterminate: true };\n\nexport const DisabledUse = (args: CheckboxProps): React.ReactElement => {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n\n    action(\"change\")(event);\n  };\n\n  return (\n    <>\n      <Checkbox {...args} checked={checked} onChange={handleChange}>\n        My checkbox\n      </Checkbox>\n      <pre>\n        <code>checked: </code>\n        <code className=\"checked-value\">{JSON.stringify(checked)}</code>\n      </pre>\n    </>\n  );\n};;\n\nDisabledUse.args = { id: \"disabled-id\", disabled: true };\n\nexport const FocusStyling = (): React.ReactElement => {\n  return (\n    <div>\n      <div style={{ marginBottom: \"0.5rem\" }}>\n        <Checkbox id=\"tab-check-1\" onChange={action(\"change\")}>\n          Tab through...\n        </Checkbox>\n      </div>\n      <div style={{ marginBottom: \"0.5rem\" }}>\n        <Checkbox id=\"tab-check-2\" onChange={action(\"change\")}>\n          these checkboxes...\n        </Checkbox>\n      </div>\n      <div>\n        <Checkbox id=\"tab-check-3\" onChange={action(\"change\")}>\n          to see styling.\n        </Checkbox>\n      </div>\n    </div>\n  );\n};;\n\nexport const InvalidState = (args: CheckboxProps): React.ReactElement => {\n  return (\n    <Checkbox {...args} onChange={action(\"change\")}>\n      An invalid checkbox\n    </Checkbox>\n  );\n};;\n\nInvalidState.args = {\n  id: \"invalid-id\",\n  invalid: true,\n  errorText: \"This checkbox is invalid.\",\n};\n\nexport const InvalidStateNoMessage = (\n  args: CheckboxProps\n): React.ReactElement => {\n  return (\n    <Checkbox {...args} onChange={action(\"change\")}>\n      An invalid checkbox\n    </Checkbox>\n  );\n};;\n\nInvalidStateNoMessage.args = {\n  id: \"invalid-id\",\n  invalid: true,\n  invalidCheckboxOnly: true,\n};\n\nexport const WithHelpText = (args: CheckboxProps): React.ReactElement => {\n  return (\n    <Checkbox {...args} onChange={action(\"change\")}>\n      checkbox with help text.\n    </Checkbox>\n  );\n};;\n\nWithHelpText.args = { id: \"helptext-id\", helpText: \"this is some helper text\" };\n\nexport const NoId = (): React.ReactElement => {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = (event) => {\n    setChecked(!checked);\n\n    action(\"change\")(event);\n  };\n\n  return (\n    <Checkbox checked={checked} onChange={handleChange}>\n      This checkbox has no <code>id</code> passed in. Click me to toggle the\n      checkbox.\n    </Checkbox>\n  );\n};\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: CheckboxProps): React.ReactElement => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const handleChange = (event) => {\\n    setChecked(event.target.checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <>\\n      <Checkbox {...args} checked={checked} onChange={handleChange}>\\n        My checkbox\\n      </Checkbox>\\n      <pre>\\n        <code>checked: </code>\\n        <code className=\\\"checked-value\\\">{JSON.stringify(checked)}</code>\\n      </pre>\\n    </>\\n  );\\n}\" }, ...BasicUse.parameters };\nIndeterminateUse.parameters = { storySource: { source: \"(args: CheckboxProps): React.ReactElement => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const handleChange = (event) => {\\n    setChecked(event.target.checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <Checkbox {...args} checked={checked} onChange={handleChange}>\\n      My other checkbox\\n    </Checkbox>\\n  );\\n}\" }, ...IndeterminateUse.parameters };\nDisabledUse.parameters = { storySource: { source: \"(args: CheckboxProps): React.ReactElement => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const handleChange = (event) => {\\n    setChecked(event.target.checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <>\\n      <Checkbox {...args} checked={checked} onChange={handleChange}>\\n        My checkbox\\n      </Checkbox>\\n      <pre>\\n        <code>checked: </code>\\n        <code className=\\\"checked-value\\\">{JSON.stringify(checked)}</code>\\n      </pre>\\n    </>\\n  );\\n}\" }, ...DisabledUse.parameters };\nFocusStyling.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <div>\\n      <div style={{ marginBottom: \\\"0.5rem\\\" }}>\\n        <Checkbox id=\\\"tab-check-1\\\" onChange={action(\\\"change\\\")}>\\n          Tab through...\\n        </Checkbox>\\n      </div>\\n      <div style={{ marginBottom: \\\"0.5rem\\\" }}>\\n        <Checkbox id=\\\"tab-check-2\\\" onChange={action(\\\"change\\\")}>\\n          these checkboxes...\\n        </Checkbox>\\n      </div>\\n      <div>\\n        <Checkbox id=\\\"tab-check-3\\\" onChange={action(\\\"change\\\")}>\\n          to see styling.\\n        </Checkbox>\\n      </div>\\n    </div>\\n  );\\n}\" }, ...FocusStyling.parameters };\nInvalidState.parameters = { storySource: { source: \"(args: CheckboxProps): React.ReactElement => {\\n  return (\\n    <Checkbox {...args} onChange={action(\\\"change\\\")}>\\n      An invalid checkbox\\n    </Checkbox>\\n  );\\n}\" }, ...InvalidState.parameters };\nInvalidStateNoMessage.parameters = { storySource: { source: \"(\\n  args: CheckboxProps\\n): React.ReactElement => {\\n  return (\\n    <Checkbox {...args} onChange={action(\\\"change\\\")}>\\n      An invalid checkbox\\n    </Checkbox>\\n  );\\n}\" }, ...InvalidStateNoMessage.parameters };\nWithHelpText.parameters = { storySource: { source: \"(args: CheckboxProps): React.ReactElement => {\\n  return (\\n    <Checkbox {...args} onChange={action(\\\"change\\\")}>\\n      checkbox with help text.\\n    </Checkbox>\\n  );\\n}\" }, ...WithHelpText.parameters };\nNoId.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const handleChange = (event) => {\\n    setChecked(!checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <Checkbox checked={checked} onChange={handleChange}>\\n      This checkbox has no <code>id</code> passed in. Click me to toggle the\\n      checkbox.\\n    </Checkbox>\\n  );\\n}\" }, ...NoId.parameters };","import React, { forwardRef, useRef } from \"react\";\nimport { useId } from \"@braze/beacon-hooks\";\n\nimport { Flex } from \"../Flex\";\nimport { HelpText } from \"../HelpText\";\nimport { StatusText } from \"../StatusText\";\n\nimport { StyledCheckbox } from \"./StyledCheckbox\";\nimport { CheckboxContainer } from \"./CheckboxContainer\";\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { CheckboxLabel } from \"./CheckboxLabel\";\nimport { CheckedPolyline } from \"./CheckedPolyline\";\nimport { HiddenCheckbox } from \"./HiddenCheckbox\";\nimport { IndeterminatePolyline } from \"./IndeterminatePolyline\";\nimport { CheckboxProps } from \"./types\";\n\nexport const Checkbox = forwardRef(\n  (\n    {\n      id,\n      children,\n      className,\n      name,\n      checked,\n      disabled,\n      indeterminate,\n      value,\n      onChange,\n      \"aria-label\": ariaLabel,\n      \"data-testid\": testId,\n      helpText,\n      invalid,\n      invalidCheckboxOnly,\n      helpTextClassName,\n      errorText,\n      ...props\n    }: CheckboxProps,\n    ref: React.RefObject<HTMLInputElement>\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const activeRef = ref || inputRef;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (!disabled) {\n        onChange?.(event);\n      }\n    };\n\n    const handleClick = () => {\n      // if activeRef.current not defined, bail\n      if (!activeRef.current) {\n        return;\n      }\n\n      // grab the setter function for the `checked` value\n      const { set: nativeCheckboxCheckedSetter } =\n        Object.getOwnPropertyDescriptor(\n          window.HTMLInputElement.prototype,\n          \"checked\"\n        ) as PropertyDescriptor;\n\n      // set the checkbox `checked` to the reverse of the current\n      nativeCheckboxCheckedSetter?.call(\n        activeRef.current,\n        !activeRef.current.checked\n      );\n\n      // create an event that bubbles up\n      const e2 = new InputEvent(\"input\", { bubbles: true });\n\n      // dispatch the event\n      activeRef.current.dispatchEvent(e2);\n\n      // call the change handler\n      handleChange(e2 as unknown as React.ChangeEvent<HTMLInputElement>);\n    };\n\n    const handleKeyPress = (\n      event: React.KeyboardEvent<HTMLInputElement>\n    ): void => {\n      if (event.key === \" \" && !disabled) {\n        event.preventDefault();\n\n        handleClick();\n      }\n    };\n\n    const defaultId = useId(\"bc-checkbox\");\n    const guaranteedId = id || defaultId;\n\n    return (\n      <CheckboxContainer\n        className={className}\n        disabled={disabled}\n        data-testid={testId}\n      >\n        <Flex>\n          <HiddenCheckbox\n            aria-label={ariaLabel}\n            ref={activeRef}\n            id={guaranteedId}\n            checked={checked}\n            disabled={disabled}\n            name={name}\n            value={value}\n            onChange={handleChange}\n            onKeyPress={handleKeyPress}\n            tabIndex={-1}\n            className=\"bcl-hidden-checkbox\"\n          />\n          <StyledCheckbox\n            {...props}\n            className=\"bcl-styled-checkbox\"\n            tabIndex={0}\n            indeterminate={indeterminate}\n            checked={checked}\n            disabled={disabled}\n            onClick={handleClick}\n            onKeyPress={handleKeyPress}\n            invalid={invalid}\n          >\n            <CheckboxIcon aria-hidden>\n              {indeterminate ? (\n                <IndeterminatePolyline indeterminate={indeterminate} />\n              ) : (\n                <CheckedPolyline checked={checked} aria-hidden />\n              )}\n            </CheckboxIcon>\n          </StyledCheckbox>\n          {children && (\n            <CheckboxLabel htmlFor={guaranteedId} disabled={disabled}>\n              {children}\n            </CheckboxLabel>\n          )}\n        </Flex>\n\n        {helpText && (\n          <HelpText className={helpTextClassName} disabled={disabled}>\n            {helpText}\n          </HelpText>\n        )}\n        {invalid && errorText && !invalidCheckboxOnly && (\n          <StatusText>{errorText}</StatusText>\n        )}\n      </CheckboxContainer>\n    );\n  }\n);\n\nCheckbox.displayName = \"Checkbox\";\n","import classNames from \"classnames\";\nimport styled, { css } from \"styled-components\";\nimport { getColor } from \"@braze/beacon-styling\";\n\nimport { StyledCheckbox } from \"../StyledCheckbox\";\n\nexport interface CheckboxContainerProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /** indicates whether the radio button should be disabled */\n  disabled?: boolean;\n}\n\nconst getAttrs = ({ className }: CheckboxContainerProps) => ({\n  className: classNames(className, \"bcl-checkbox-container\"),\n});\n\nexport const CheckboxContainer = styled.div.attrs(\n  getAttrs\n)<CheckboxContainerProps>`\n  display: inline-block;\n  vertical-align: middle;\n\n  &:hover,\n  &:focus {\n    ${StyledCheckbox} {\n      ${({ disabled }) =>\n        !disabled &&\n        css`\n          box-shadow: 0 0 0 5px ${getColor(\"gray\", 100)};\n        `};\n    }\n  }\n`;\n\nCheckboxContainer.displayName = \"CheckboxContainer\";\n","export { CheckboxContainer } from \"./CheckboxContainer\";\n\nexport type { CheckboxContainerProps } from \"./CheckboxContainer\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\n\nexport interface CheckboxIconProps extends React.SVGAttributes<SVGElement> {}\n\nconst getAttrs = ({ className }: CheckboxIconProps) => ({\n  className: classNames(className, \"bcl-checkbox-icon\"),\n  viewBox: \"0 0 24 24\",\n});\n\nexport const CheckboxIcon = styled.svg.attrs(getAttrs)<CheckboxIconProps>`\n  fill: none;\n  stroke: white;\n  stroke-width: 3px;\n`;\n\nCheckboxIcon.displayName = \"CheckboxIcon\";\n","export { CheckboxIcon } from \"./CheckboxIcon\";\n\nexport type { CheckboxIconProps } from \"./CheckboxIcon\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\nimport {\n  getSpacing,\n  getFontFamily,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { Label, LabelProps } from \"../../Label\";\nimport { CheckboxLabelProps } from \"../types\";\n\nconst getAttrs = ({ className }: CheckboxLabelProps): LabelProps => ({\n  className: classNames(className, \"bcl-checkbox-label\"),\n});\n\nexport const CheckboxLabel = styled(Label).attrs(getAttrs)<CheckboxLabelProps>`\n  margin-left: ${getSpacing(\"sm\")};\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  cursor: ${(props) => (props.disabled ? \"no-drop\" : \"pointer\")};\n`;\n\nCheckboxLabel.displayName = \"CheckboxLabel\";\n","export { CheckboxLabel } from \"./CheckboxLabel\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\n\nexport interface CheckedPolylineProps\n  extends React.SVGAttributes<SVGPolylineElement> {\n  /** indicates whether the radio button should be marked as checked */\n  checked?: boolean;\n  /** indicates that the checkbox is in an indeterminate state, see: https://css-tricks.com/indeterminate-checkboxes/ */\n  indeterminate?: boolean;\n}\n\nconst getAttrs = ({ className }: CheckedPolylineProps) => ({\n  className: classNames(className, \"bcl-checked-polyline\"),\n  points: \"20 6 9 17 4 12\",\n});\n\nexport const CheckedPolyline = styled.polyline.attrs(\n  getAttrs\n)<CheckedPolylineProps>`\n  display: ${(props) =>\n    props.checked && !props.indeterminate ? \"visible\" : \"none\"};\n`;\n\nCheckedPolyline.displayName = \"CheckedPolyline\";\n","export { CheckedPolyline } from \"./CheckedPolyline\";\n\nexport type { CheckedPolylineProps } from \"./CheckedPolyline\";\n","import styled from \"styled-components\";\n\nexport interface HiddenCheckboxProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst getAttrs = () => ({\n  type: \"checkbox\",\n});\n\nexport const HiddenCheckbox = styled.input.attrs(getAttrs)<HiddenCheckboxProps>`\n  opacity: 0;\n  margin: 0;\n  width: 0;\n`;\n\nHiddenCheckbox.displayName = \"HiddenCheckbox\";\n","export { HiddenCheckbox } from \"./HiddenCheckbox\";\n\nexport type { HiddenCheckboxProps } from \"./HiddenCheckbox\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\n\nimport type { IndeterminatePolylineProps } from \"./types\";\n\nconst getAttrs = ({ className }: IndeterminatePolylineProps) => ({\n  className: classNames(className, \"bcl-indeterminate-polyline\"),\n  points: \"4 12 20 12\",\n  \"aria-hidden\": true,\n});\n\nexport const IndeterminatePolyline = styled.polyline.attrs(\n  getAttrs\n)<IndeterminatePolylineProps>`\n  display: ${(props) => (props.indeterminate ? \"visible\" : \"none\")};\n`;\n\nIndeterminatePolyline.displayName = \"IndeterminatePolyline\";\n","export * from \"./IndeterminatePolyline\";\n\nexport * from \"./types\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getBorderWidth,\n  getColor,\n  colorSelector,\n  getIntentColor,\n  intentColorSelector,\n} from \"@braze/beacon-styling\";\n\nimport { StyledCheckboxProps } from \"../types\";\n\nconst getCheckboxStyles = ({\n  checked,\n  disabled,\n  indeterminate,\n  invalid,\n  ...props\n}: StyledCheckboxProps) => {\n  if (disabled) {\n    return css`\n      background: ${checked\n        ? intentColorSelector(props, \"primary\", 500)\n        : colorSelector(props, \"gray\", 100)};\n      opacity: ${checked && \"0.4\"};\n      border-color: ${checked && \"transparent\"};\n    `;\n  }\n\n  if (invalid) {\n    return css`\n      border: ${getBorderWidth(\"thick\")} solid ${getIntentColor(\"danger\", 500)};\n\n      &:focus {\n        box-shadow: 0 0 0 5px ${getColor(\"gray\", 100)};\n      }\n    `;\n  }\n\n  return css`\n    background: ${checked || indeterminate\n      ? intentColorSelector(props, \"primary\", 500)\n      : \"white\"};\n\n    border-color: ${checked\n      ? intentColorSelector(props, \"primary\", 500)\n      : colorSelector(props, \"gray\", 300)};\n\n    &:focus {\n      box-shadow: 0 0 0 5px ${getColor(\"gray\", 100)};\n    }\n  `;\n};\n\nexport const StyledCheckbox = styled.div<StyledCheckboxProps>`\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  cursor: ${(props) => (props.disabled ? \"not-allowed\" : \"cursor\")};\n  border-radius: 2px;\n  border: ${getBorderWidth(\"thin\")} solid ${getColor(\"gray\", 300)};\n  transition: all 150ms;\n  line-height: normal;\n\n  &:hover,\n  &:focus {\n    outline: none;\n  }\n\n  ${getCheckboxStyles};\n`;\n","export { StyledCheckbox } from \"./StyledCheckbox\";\n","export { Checkbox } from \"./Checkbox\";\n\nexport type { CheckboxProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { select } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { CloseButton } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Primitives/CloseButton\" component={CloseButton} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"closebutton\"\n    }}>{`CloseButton`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`CloseButton`}</inlineCode>{` component is a simple `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` component styled\nto render an `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` within.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`CloseButton`}</inlineCode>{` is usually used within the context of a larger\ncomponent like the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`, to give the user the\nability to quickly close the dialog they're viewing.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-closebutton--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { CloseButton } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`func`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to be invoked on button click`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLButtonElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`\"sm\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`\"lg\"`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"sm\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`sets the size of the button and its 'X'`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport page from \\\"./CloseButton.docs.mdx\\\";\\n\\nimport { CloseButton, CloseButtonProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Primitives/CloseButton\\\",\\n  component: CloseButton,\\n  parameters: {\\n    docs: { page },\\n  },\\n} as ComponentMeta<typeof CloseButton>;\\n\\nexport const BasicUse = (args: CloseButtonProps): React.ReactElement => {\\n  return <CloseButton {...args} onClick={action(\\\"click!\\\")} />;\\n};\\n\\nBasicUse.args = { size: \\\"sm\\\" };\\n\\nexport const LargeUse = (args: CloseButtonProps): React.ReactElement => {\\n  return <CloseButton {...args} onClick={action(\\\"click!\\\")} />;\\n};\\n\\nLargeUse.args = { size: \\\"lg\\\" };\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":18},\"endLoc\":{\"col\":1,\"line\":20},\"startBody\":{\"col\":24,\"line\":18},\"endBody\":{\"col\":1,\"line\":20}},\"LargeUse\":{\"startLoc\":{\"col\":24,\"line\":24},\"endLoc\":{\"col\":1,\"line\":26},\"startBody\":{\"col\":24,\"line\":24},\"endBody\":{\"col\":1,\"line\":26}}};\n    \nimport React from \"react\";\nimport { ComponentMeta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport page from \"./CloseButton.docs.mdx\";\n\nimport { CloseButton, CloseButtonProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Primitives/CloseButton\",\n  component: CloseButton,\n  parameters: {\n    docs: { page },\n  },\n} as ComponentMeta<typeof CloseButton>;\n\nexport const BasicUse = (args: CloseButtonProps): React.ReactElement => {\n  return <CloseButton {...args} onClick={action(\"click!\")} />;\n};;\n\nBasicUse.args = { size: \"sm\" };\n\nexport const LargeUse = (args: CloseButtonProps): React.ReactElement => {\n  return <CloseButton {...args} onClick={action(\"click!\")} />;\n};\n\nLargeUse.args = { size: \"lg\" };\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: CloseButtonProps): React.ReactElement => {\\n  return <CloseButton {...args} onClick={action(\\\"click!\\\")} />;\\n}\" }, ...BasicUse.parameters };\nLargeUse.parameters = { storySource: { source: \"(args: CloseButtonProps): React.ReactElement => {\\n  return <CloseButton {...args} onClick={action(\\\"click!\\\")} />;\\n}\" }, ...LargeUse.parameters };","import React, { forwardRef } from \"react\";\nimport classNames from \"classnames\";\n\nimport { Icon } from \"../Icon\";\n\nimport { StyledCloseButton, StyledCloseButtonProps } from \"./StyledCloseButton\";\n\nexport interface CloseButtonProps extends StyledCloseButtonProps {}\n\nexport const CloseButton = forwardRef(\n  (\n    { className, size = \"sm\", ...props }: CloseButtonProps,\n    ref: React.RefObject<HTMLButtonElement>\n  ): React.ReactElement => (\n    <StyledCloseButton\n      {...props}\n      ref={ref}\n      type=\"button\"\n      className={classNames([\"bcl-close-button\", className])}\n      aria-label=\"close\"\n      size={size}\n    >\n      <Icon name=\"times\" />\n    </StyledCloseButton>\n  )\n);\n\nCloseButton.displayName = \"CloseButton\";\n","import styled from \"styled-components\";\nimport { getColor, getSpacing, spacingSelector } from \"@braze/beacon-styling\";\n\nexport interface StyledCloseButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /** sets the size of the button and its 'X' */\n  size?: \"sm\" | \"lg\";\n}\n\nexport const StyledCloseButton = styled.button<StyledCloseButtonProps>`\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n  text-transform: inherit;\n  overflow: visible;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n\n  &:focus {\n    outline: 0;\n  }\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: ${(props) => (props.size === \"sm\" ? \"11px\" : \"1.25rem\")};\n  top: ${getSpacing(\"sm\")};\n  right: ${getSpacing(\"sm\")};\n  background-color: transparent;\n  cursor: pointer;\n  border: none;\n  outline: none;\n  border-radius: 50%;\n  height: ${({ size, ...props }) =>\n    size === \"sm\"\n      ? spacingSelector(props, \"xl\")\n      : spacingSelector(props, \"xxl\")};\n  width: ${({ size, ...props }) =>\n    size === \"sm\"\n      ? spacingSelector(props, \"xl\")\n      : spacingSelector(props, \"xxl\")};\n  padding: 0;\n  color: ${getColor(\"gray\", 400)};\n\n  &:hover:enabled {\n    background-color: ${getColor(\"gray\", 100)};\n  }\n\n  &:active:enabled,\n  &:focus-visible:enabled {\n    background-color: rgba(0, 0, 0, 20%);\n  }\n`;\n","export { StyledCloseButton } from \"./StyledCloseButton\";\n\nexport type { StyledCloseButtonProps } from \"./StyledCloseButton\";\n","export { CloseButton } from \"./CloseButton\";\n\nexport type { CloseButtonProps } from \"./CloseButton\";\n\nexport { StyledCloseButton } from \"./StyledCloseButton\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { select } from \"@storybook/addon-knobs\";\nimport { CollapsibleBody } from \"../CollapsibleBody\";\nimport { CollapsibleButton } from \"../CollapsibleButton\";\nimport { CollapsibleHeader } from \"../CollapsibleHeader\";\nimport { CollapsibleHeaderText } from \"../CollapsibleHeaderText\";\nimport { CollapsibleIconButton } from \"../CollapsibleIconButton\";\nimport { CollapsibleList } from \"../CollapsibleList\";\nimport { CollapsibleListItem } from \"../CollapsibleListItem\";\nimport { Collapsible } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Content Display/Collapsible\" component={Collapsible} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"collapsible\"\n    }}>{`Collapsible`}</h1>\n    <p><inlineCode parentName=\"p\">{`Collapsible`}</inlineCode>{` is a set of components that allow the user to show/hide\ninformation that may be pertinent to their workflow.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Collapsible`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`CollapsibleButton`}</inlineCode>{`, you can easily hook into the context\nthat contains the `}<inlineCode parentName=\"p\">{`isOpen`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`toggle`}</inlineCode>{` states.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [isOpen, setState] = React.useState(false);\n\n          const toggle = () => setState(!isOpen);\n\n          return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")} mdxType=\"Collapsible\">\n          <CollapsibleButton mdxType=\"CollapsibleButton\">\n            {`${isOpen ? \"Hide\" : \"Show\"} Advancement Details`}\n          </CollapsibleButton>\n          <CollapsibleBody mdxType=\"CollapsibleBody\">\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">The email is sent</CollapsibleListItem>\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-multiple-lists\"\n    }}>{`With multiple lists`}</h3>\n    <p>{`When using multiple `}<inlineCode parentName=\"p\">{`CollapsibleList`}</inlineCode>{`s, they will self-organize\ntheir UI in a way that clearly distinguishes each list (i.e. an `}<inlineCode parentName=\"p\">{`hr`}</inlineCode>{`).`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with multiple lists\" mdxType=\"Story\">\n    {() => {\n          const [isOpen, setState] = React.useState(false);\n\n          const toggle = () => setState(!isOpen);\n\n          return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")} mdxType=\"Collapsible\">\n          <CollapsibleButton mdxType=\"CollapsibleButton\">{`${isOpen ? \"Hide\" : \"Show\"} Details`}</CollapsibleButton>\n          <CollapsibleBody mdxType=\"CollapsibleBody\">\n            <CollapsibleList heading=\"1. Segments associated with Droidboy Firephone and News Feed cards, Campaigns, and Canvases using the following Segments will also be archived.\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">\n                All users (Droidboy Firephone - Kindle)\n              </CollapsibleListItem>\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">Wilf Tester</CollapsibleListItem>\n            </CollapsibleList>\n            <CollapsibleList heading=\"2. Segments including 'Droidboy FirePhone' and other apps will delete the App Filter referencing this app:\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">Test 1</CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-inline-header\"\n    }}>{`With inline header`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`CollapsibleHeader`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CollapsibleHeaderText`}</inlineCode>{`,\nyou can render a summary description that is always shown.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with inline header\" mdxType=\"Story\">\n    {() => {\n          const [isOpen, setState] = React.useState(false);\n\n          const toggle = () => setState(!isOpen);\n\n          return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")} mdxType=\"Collapsible\">\n          <CollapsibleHeader mdxType=\"CollapsibleHeader\">\n            <CollapsibleHeaderText mdxType=\"CollapsibleHeaderText\">\n              I want to advance users when message is sent.\n            </CollapsibleHeaderText>\n            <CollapsibleButton mdxType=\"CollapsibleButton\">\n              {`${isOpen ? \"Hide\" : \"Show\"} Advancement Details`}\n            </CollapsibleButton>\n          </CollapsibleHeader>\n          <CollapsibleBody mdxType=\"CollapsibleBody\">\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">The email is sent</CollapsibleListItem>\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-icon-button\"\n    }}>{`With icon button`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`CollapsibleIconButton`}</inlineCode>{`, you can easily hook into the context\nthat contains the `}<inlineCode parentName=\"p\">{`isOpen`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`toggle`}</inlineCode>{` states with a smaller button\nfootprint.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with icon button\" mdxType=\"Story\">\n    {() => {\n          const [isOpen, setState] = React.useState(false);\n\n          const toggle = () => setState(!isOpen);\n\n          return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")} mdxType=\"Collapsible\">\n          <CollapsibleIconButton size={select(\"Size\", [\"lg\", \"sm\"], \"lg\")} mdxType=\"CollapsibleIconButton\">\n            {`${isOpen ? \"Hide\" : \"See\"} Details`}\n          </CollapsibleIconButton>\n          <CollapsibleBody mdxType=\"CollapsibleBody\">\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">The email is sent</CollapsibleListItem>\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-a-small-icon-button\"\n    }}>{`With a small icon button`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` prop can be set to `}<inlineCode parentName=\"p\">{`\"sm\"`}</inlineCode>{` when `}<inlineCode parentName=\"p\">{`CollapsibleIconButton`}</inlineCode>{` is located in a dense area of the interface or should be less prominent for other reasons.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with small icon button\" mdxType=\"Story\">\n    {() => {\n          const [isOpen, setState] = React.useState(false);\n\n          const toggle = () => setState(!isOpen);\n\n          return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")} mdxType=\"Collapsible\">\n          <CollapsibleIconButton size=\"sm\" mdxType=\"CollapsibleIconButton\">\n            {`${isOpen ? \"Hide\" : \"See\"} Details`}\n          </CollapsibleIconButton>\n          <CollapsibleBody mdxType=\"CollapsibleBody\">\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">The email is sent</CollapsibleListItem>\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-primary-button\"\n    }}>{`With primary button`}</h3>\n    <p>{`You can pass \"primary\" as a `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`CollapsibleButton`}</inlineCode>{`\nto display a larger and more prominent button.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with primary button\" mdxType=\"Story\">\n    {() => {\n          const [isOpen, setState] = React.useState(false);\n\n          const toggle = () => setState(!isOpen);\n\n          return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")} mdxType=\"Collapsible\">\n          <CollapsibleButton variant=\"primary\" mdxType=\"CollapsibleButton\">\n            {`Show ${isOpen ? \"Less\" : \"More\"}`}\n          </CollapsibleButton>\n          <CollapsibleBody mdxType=\"CollapsibleBody\">\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">The email is sent</CollapsibleListItem>\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-secondary-button\"\n    }}>{`With secondary button`}</h3>\n    <p>{`You can also pass \"secondary\" as a `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`CollapsibleButton`}</inlineCode>{`\nto display a larger and slightly less prominent button.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with secondary button\" mdxType=\"Story\">\n    {() => {\n          const [isOpen, setState] = React.useState(false);\n\n          const toggle = () => setState(!isOpen);\n\n          return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")} mdxType=\"Collapsible\">\n          <CollapsibleButton variant=\"secondary\" mdxType=\"CollapsibleButton\">\n            {`Show ${isOpen ? \"Less\" : \"More\"}`}\n          </CollapsibleButton>\n          <CollapsibleBody mdxType=\"CollapsibleBody\">\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">The email is sent</CollapsibleListItem>\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-tertiary-button\"\n    }}>{`With tertiary button`}</h3>\n    <p>{`You can also pass \"tertiary\" as a `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`CollapsibleButton`}</inlineCode>{`\nto display a more link-like and slightly less prominent button.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with tertiary button\" mdxType=\"Story\">\n    {() => {\n          const [isOpen, setState] = React.useState(false);\n\n          const toggle = () => setState(!isOpen);\n\n          return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")} mdxType=\"Collapsible\">\n          <CollapsibleButton variant=\"tertiary\" mdxType=\"CollapsibleButton\">\n            {`Show ${isOpen ? \"Less\" : \"More\"}`}\n          </CollapsibleButton>\n          <CollapsibleBody mdxType=\"CollapsibleBody\">\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\" mdxType=\"CollapsibleList\">\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">The email is sent</CollapsibleListItem>\n              <CollapsibleListItem mdxType=\"CollapsibleListItem\">\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n        }}\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  CollapsibleBody,\n  CollapsibleButton,\n  CollapsibleHeader,\n  CollapsibleHeaderText,\n  CollapsibleIconButton,\n  CollapsibleList,\n  CollapsibleListItem,\n} from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"collapsible-1\"\n    }}><inlineCode parentName=\"h3\">{`Collapsible`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`alignment`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`left`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`alignment of elements within the collapsible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the collapsible is currently open`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`toggle`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`() => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`toggles isOpen state back and forth`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"collapsiblebody\"\n    }}><inlineCode parentName=\"h3\">{`CollapsibleBody`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"collapsiblelist\"\n    }}><inlineCode parentName=\"h3\">{`CollapsibleList`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"collapsiblelistitem\"\n    }}><inlineCode parentName=\"h3\">{`CollapsibleListItem`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"collapsiblebutton\"\n    }}><inlineCode parentName=\"h3\">{`CollapsibleButton`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the button should be visually and functionally disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`full`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"lg\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size of the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`primary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`secondary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`tertiary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`quaternary`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"primary\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`visually indicate to the user the relative importance/impact of the button`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"collapsibleiconbutton\"\n    }}><inlineCode parentName=\"h3\">{`CollapsibleIconButton`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the name key of the icon to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the button should be visually and functionally disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`muted`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`apply muted styles to the component, making it grab less of the user's attention`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [isOpen, setState] = React.useState(false);\n\n  const toggle = () => setState(!isOpen);\n\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")}>\n          <CollapsibleButton>\n            {`${isOpen ? \"Hide\" : \"Show\"} Advancement Details`}\n          </CollapsibleButton>\n          <CollapsibleBody>\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\">\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\n              <CollapsibleListItem>\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [isOpen, setState] = React.useState(false);\\n\\n  const toggle = () => setState(!isOpen);\\n\\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\\\"Alignment\\\", [\\\"left\\\", \\\"center\\\", \\\"right\\\"], \\\"left\\\")}>\\n          <CollapsibleButton>\\n            {`${isOpen ? \\\"Hide\\\" : \\\"Show\\\"} Advancement Details`}\\n          </CollapsibleButton>\\n          <CollapsibleBody>\\n            <CollapsibleList heading=\\\"Users will advance to the next steps when any one of the following conditions are met:\\\">\\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\\n              <CollapsibleListItem>\\n                The content card is sent\\n              </CollapsibleListItem>\\n            </CollapsibleList>\\n          </CollapsibleBody>\\n        </Collapsible>;\\n}' } };\n\nexport const withMultipleLists = (() => {\n  const [isOpen, setState] = React.useState(false);\n\n  const toggle = () => setState(!isOpen);\n\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")}>\n          <CollapsibleButton>{`${isOpen ? \"Hide\" : \"Show\"} Details`}</CollapsibleButton>\n          <CollapsibleBody>\n            <CollapsibleList heading=\"1. Segments associated with Droidboy Firephone and News Feed cards, Campaigns, and Canvases using the following Segments will also be archived.\">\n              <CollapsibleListItem>\n                All users (Droidboy Firephone - Kindle)\n              </CollapsibleListItem>\n              <CollapsibleListItem>Wilf Tester</CollapsibleListItem>\n            </CollapsibleList>\n            <CollapsibleList heading=\"2. Segments including 'Droidboy FirePhone' and other apps will delete the App Filter referencing this app:\">\n              <CollapsibleListItem>Test 1</CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n});\nwithMultipleLists.storyName = 'with multiple lists';\nwithMultipleLists.parameters = { storySource: { source: '() => {\\n  const [isOpen, setState] = React.useState(false);\\n\\n  const toggle = () => setState(!isOpen);\\n\\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\\\"Alignment\\\", [\\\"left\\\", \\\"center\\\", \\\"right\\\"], \\\"left\\\")}>\\n          <CollapsibleButton>{`${isOpen ? \\\"Hide\\\" : \\\"Show\\\"} Details`}</CollapsibleButton>\\n          <CollapsibleBody>\\n            <CollapsibleList heading=\\\"1. Segments associated with Droidboy Firephone and News Feed cards, Campaigns, and Canvases using the following Segments will also be archived.\\\">\\n              <CollapsibleListItem>\\n                All users (Droidboy Firephone - Kindle)\\n              </CollapsibleListItem>\\n              <CollapsibleListItem>Wilf Tester</CollapsibleListItem>\\n            </CollapsibleList>\\n            <CollapsibleList heading=\\\"2. Segments including \\'Droidboy FirePhone\\' and other apps will delete the App Filter referencing this app:\\\">\\n              <CollapsibleListItem>Test 1</CollapsibleListItem>\\n            </CollapsibleList>\\n          </CollapsibleBody>\\n        </Collapsible>;\\n}' } };\n\nexport const withInlineHeader = (() => {\n  const [isOpen, setState] = React.useState(false);\n\n  const toggle = () => setState(!isOpen);\n\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")}>\n          <CollapsibleHeader>\n            <CollapsibleHeaderText>\n              I want to advance users when message is sent.\n            </CollapsibleHeaderText>\n            <CollapsibleButton>\n              {`${isOpen ? \"Hide\" : \"Show\"} Advancement Details`}\n            </CollapsibleButton>\n          </CollapsibleHeader>\n          <CollapsibleBody>\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\">\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\n              <CollapsibleListItem>\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n});\nwithInlineHeader.storyName = 'with inline header';\nwithInlineHeader.parameters = { storySource: { source: '() => {\\n  const [isOpen, setState] = React.useState(false);\\n\\n  const toggle = () => setState(!isOpen);\\n\\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\\\"Alignment\\\", [\\\"left\\\", \\\"center\\\", \\\"right\\\"], \\\"left\\\")}>\\n          <CollapsibleHeader>\\n            <CollapsibleHeaderText>\\n              I want to advance users when message is sent.\\n            </CollapsibleHeaderText>\\n            <CollapsibleButton>\\n              {`${isOpen ? \\\"Hide\\\" : \\\"Show\\\"} Advancement Details`}\\n            </CollapsibleButton>\\n          </CollapsibleHeader>\\n          <CollapsibleBody>\\n            <CollapsibleList heading=\\\"Users will advance to the next steps when any one of the following conditions are met:\\\">\\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\\n              <CollapsibleListItem>\\n                The content card is sent\\n              </CollapsibleListItem>\\n            </CollapsibleList>\\n          </CollapsibleBody>\\n        </Collapsible>;\\n}' } };\n\nexport const withIconButton = (() => {\n  const [isOpen, setState] = React.useState(false);\n\n  const toggle = () => setState(!isOpen);\n\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")}>\n          <CollapsibleIconButton size={select(\"Size\", [\"lg\", \"sm\"], \"lg\")}>\n            {`${isOpen ? \"Hide\" : \"See\"} Details`}\n          </CollapsibleIconButton>\n          <CollapsibleBody>\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\">\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\n              <CollapsibleListItem>\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n});\nwithIconButton.storyName = 'with icon button';\nwithIconButton.parameters = { storySource: { source: '() => {\\n  const [isOpen, setState] = React.useState(false);\\n\\n  const toggle = () => setState(!isOpen);\\n\\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\\\"Alignment\\\", [\\\"left\\\", \\\"center\\\", \\\"right\\\"], \\\"left\\\")}>\\n          <CollapsibleIconButton size={select(\\\"Size\\\", [\\\"lg\\\", \\\"sm\\\"], \\\"lg\\\")}>\\n            {`${isOpen ? \\\"Hide\\\" : \\\"See\\\"} Details`}\\n          </CollapsibleIconButton>\\n          <CollapsibleBody>\\n            <CollapsibleList heading=\\\"Users will advance to the next steps when any one of the following conditions are met:\\\">\\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\\n              <CollapsibleListItem>\\n                The content card is sent\\n              </CollapsibleListItem>\\n            </CollapsibleList>\\n          </CollapsibleBody>\\n        </Collapsible>;\\n}' } };\n\nexport const withSmallIconButton = (() => {\n  const [isOpen, setState] = React.useState(false);\n\n  const toggle = () => setState(!isOpen);\n\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")}>\n          <CollapsibleIconButton size=\"sm\">\n            {`${isOpen ? \"Hide\" : \"See\"} Details`}\n          </CollapsibleIconButton>\n          <CollapsibleBody>\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\">\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\n              <CollapsibleListItem>\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n});\nwithSmallIconButton.storyName = 'with small icon button';\nwithSmallIconButton.parameters = { storySource: { source: '() => {\\n  const [isOpen, setState] = React.useState(false);\\n\\n  const toggle = () => setState(!isOpen);\\n\\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\\\"Alignment\\\", [\\\"left\\\", \\\"center\\\", \\\"right\\\"], \\\"left\\\")}>\\n          <CollapsibleIconButton size=\\\"sm\\\">\\n            {`${isOpen ? \\\"Hide\\\" : \\\"See\\\"} Details`}\\n          </CollapsibleIconButton>\\n          <CollapsibleBody>\\n            <CollapsibleList heading=\\\"Users will advance to the next steps when any one of the following conditions are met:\\\">\\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\\n              <CollapsibleListItem>\\n                The content card is sent\\n              </CollapsibleListItem>\\n            </CollapsibleList>\\n          </CollapsibleBody>\\n        </Collapsible>;\\n}' } };\n\nexport const withPrimaryButton = (() => {\n  const [isOpen, setState] = React.useState(false);\n\n  const toggle = () => setState(!isOpen);\n\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")}>\n          <CollapsibleButton variant=\"primary\">\n            {`Show ${isOpen ? \"Less\" : \"More\"}`}\n          </CollapsibleButton>\n          <CollapsibleBody>\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\">\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\n              <CollapsibleListItem>\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n});\nwithPrimaryButton.storyName = 'with primary button';\nwithPrimaryButton.parameters = { storySource: { source: '() => {\\n  const [isOpen, setState] = React.useState(false);\\n\\n  const toggle = () => setState(!isOpen);\\n\\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\\\"Alignment\\\", [\\\"left\\\", \\\"center\\\", \\\"right\\\"], \\\"left\\\")}>\\n          <CollapsibleButton variant=\\\"primary\\\">\\n            {`Show ${isOpen ? \\\"Less\\\" : \\\"More\\\"}`}\\n          </CollapsibleButton>\\n          <CollapsibleBody>\\n            <CollapsibleList heading=\\\"Users will advance to the next steps when any one of the following conditions are met:\\\">\\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\\n              <CollapsibleListItem>\\n                The content card is sent\\n              </CollapsibleListItem>\\n            </CollapsibleList>\\n          </CollapsibleBody>\\n        </Collapsible>;\\n}' } };\n\nexport const withSecondaryButton = (() => {\n  const [isOpen, setState] = React.useState(false);\n\n  const toggle = () => setState(!isOpen);\n\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")}>\n          <CollapsibleButton variant=\"secondary\">\n            {`Show ${isOpen ? \"Less\" : \"More\"}`}\n          </CollapsibleButton>\n          <CollapsibleBody>\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\">\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\n              <CollapsibleListItem>\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n});\nwithSecondaryButton.storyName = 'with secondary button';\nwithSecondaryButton.parameters = { storySource: { source: '() => {\\n  const [isOpen, setState] = React.useState(false);\\n\\n  const toggle = () => setState(!isOpen);\\n\\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\\\"Alignment\\\", [\\\"left\\\", \\\"center\\\", \\\"right\\\"], \\\"left\\\")}>\\n          <CollapsibleButton variant=\\\"secondary\\\">\\n            {`Show ${isOpen ? \\\"Less\\\" : \\\"More\\\"}`}\\n          </CollapsibleButton>\\n          <CollapsibleBody>\\n            <CollapsibleList heading=\\\"Users will advance to the next steps when any one of the following conditions are met:\\\">\\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\\n              <CollapsibleListItem>\\n                The content card is sent\\n              </CollapsibleListItem>\\n            </CollapsibleList>\\n          </CollapsibleBody>\\n        </Collapsible>;\\n}' } };\n\nexport const withTertiaryButton = (() => {\n  const [isOpen, setState] = React.useState(false);\n\n  const toggle = () => setState(!isOpen);\n\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\"Alignment\", [\"left\", \"center\", \"right\"], \"left\")}>\n          <CollapsibleButton variant=\"tertiary\">\n            {`Show ${isOpen ? \"Less\" : \"More\"}`}\n          </CollapsibleButton>\n          <CollapsibleBody>\n            <CollapsibleList heading=\"Users will advance to the next steps when any one of the following conditions are met:\">\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\n              <CollapsibleListItem>\n                The content card is sent\n              </CollapsibleListItem>\n            </CollapsibleList>\n          </CollapsibleBody>\n        </Collapsible>;\n});\nwithTertiaryButton.storyName = 'with tertiary button';\nwithTertiaryButton.parameters = { storySource: { source: '() => {\\n  const [isOpen, setState] = React.useState(false);\\n\\n  const toggle = () => setState(!isOpen);\\n\\n  return <Collapsible isOpen={isOpen} toggle={toggle} alignment={select(\\\"Alignment\\\", [\\\"left\\\", \\\"center\\\", \\\"right\\\"], \\\"left\\\")}>\\n          <CollapsibleButton variant=\\\"tertiary\\\">\\n            {`Show ${isOpen ? \\\"Less\\\" : \\\"More\\\"}`}\\n          </CollapsibleButton>\\n          <CollapsibleBody>\\n            <CollapsibleList heading=\\\"Users will advance to the next steps when any one of the following conditions are met:\\\">\\n              <CollapsibleListItem>The email is sent</CollapsibleListItem>\\n              <CollapsibleListItem>\\n                The content card is sent\\n              </CollapsibleListItem>\\n            </CollapsibleList>\\n          </CollapsibleBody>\\n        </Collapsible>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Content Display/Collapsible', component: Collapsible, includeStories: [\"basicUse\",\"withMultipleLists\",\"withInlineHeader\",\"withIconButton\",\"withSmallIconButton\",\"withPrimaryButton\",\"withSecondaryButton\",\"withTertiaryButton\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"with multiple lists\":\"withMultipleLists\",\"with inline header\":\"withInlineHeader\",\"with icon button\":\"withIconButton\",\"with small icon button\":\"withSmallIconButton\",\"with primary button\":\"withPrimaryButton\",\"with secondary button\":\"withSecondaryButton\",\"with tertiary button\":\"withTertiaryButton\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { CollapsibleContextProvider } from \"../CollapsibleContext\";\n\nimport { CollapsibleProps } from \"./types\";\nimport { StyledCollapsible } from \"./StyledCollapsible\";\n\nexport const Collapsible = ({\n  className,\n  isOpen,\n  toggle,\n  alignment = \"left\",\n  ...props\n}: CollapsibleProps): React.ReactElement => (\n  <CollapsibleContextProvider isOpen={isOpen} toggle={toggle}>\n    <StyledCollapsible\n      {...props}\n      className={classNames([\"bcl-collapsible\", className])}\n      alignment={alignment}\n    />\n  </CollapsibleContextProvider>\n);\n\nCollapsible.displayName = \"Collapsible\";\n","import styled, { css } from \"styled-components\";\n\nimport { StyledCollapsibleProps } from \"./types\";\n\nconst getAlignItems = ({ alignment }: StyledCollapsibleProps) => {\n  switch (alignment) {\n    case \"center\":\n      return css`\n        align-items: center;\n      `;\n    case \"right\":\n      return css`\n        align-items: flex-end;\n      `;\n    case \"left\":\n    default:\n      return css`\n        align-items: flex-start;\n      `;\n  }\n};\n\nexport const StyledCollapsible = styled.div<StyledCollapsibleProps>`\n  display: flex;\n  flex-direction: column;\n  ${getAlignItems};\n`;\n","export { Collapsible } from \"./Collapsible\";\n\nexport type { CollapsibleProps } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { CollapsibleContext } from \"../CollapsibleContext\";\n\nimport { CollapsibleBodyProps } from \"./types\";\nimport { StyledCollapsibleBody } from \"./StyledCollapsibleBody\";\n\nexport const CollapsibleBody = ({\n  className,\n  ...props\n}: CollapsibleBodyProps): React.ReactElement | null => {\n  const { isOpen } = useContext(CollapsibleContext);\n\n  return (\n    <StyledCollapsibleBody\n      {...props}\n      className={classNames(\"bcl-collapsible-body\", className)}\n      isOpen={isOpen}\n    />\n  );\n};\n\nCollapsibleBody.displayName = \"CollapsibleBody\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getBorderRadius,\n  getBorderWidth,\n  getColor,\n  getSpacing,\n} from \"@braze/beacon-styling\";\n\nimport { StyledCollapsibleList } from \"../CollapsibleList\";\n\nimport { StyledCollapsibleBodyProps } from \"./types\";\n\nconst getStyles = ({ isOpen }: StyledCollapsibleBodyProps) => {\n  if (isOpen) {\n    return css`\n      padding: ${getSpacing(\"xl\")};\n      margin-top: ${getSpacing(\"sm\")};\n      height: auto;\n      opacity: 1;\n    `;\n  }\n\n  return css`\n    height: 0;\n    overflow: hidden;\n    opacity: 0;\n  `;\n};\n\nexport const StyledCollapsibleBody = styled.div<StyledCollapsibleBodyProps>`\n  box-sizing: border-box;\n  width: 100%;\n  background-color: ${getColor(\"gray\", 50)};\n  border-radius: ${getBorderRadius(\"md\")};\n  transition: opacity 0.3s linear;\n  ${getStyles};\n\n  ${StyledCollapsibleList}:not(:last-of-type) {\n    padding-bottom: ${getSpacing(\"xl\")};\n    border-bottom: ${getBorderWidth(\"thin\")} solid ${getColor(\"gray\", 200)};\n    margin-bottom: ${getSpacing(\"xl\")};\n  }\n`;\n","export { CollapsibleBody } from \"./CollapsibleBody\";\n\nexport type { CollapsibleBodyProps } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { Icon } from \"../Icon\";\nimport { CollapsibleContext } from \"../CollapsibleContext\";\n\nimport { CollapsibleButtonProps } from \"./types\";\nimport { StyledCollapsibleButton } from \"./StyledCollapsibleButton\";\n\nexport const CollapsibleButton = ({\n  children,\n  className,\n  variant = \"quaternary\",\n  ...props\n}: CollapsibleButtonProps): React.ReactElement => {\n  const { isOpen, toggle } = useContext(CollapsibleContext);\n\n  return (\n    <StyledCollapsibleButton\n      {...props}\n      className={classNames([\"bcl-collapsible-button\", className])}\n      type=\"button\"\n      intent=\"info\"\n      variant={variant}\n      onClick={toggle}\n    >\n      {children}\n      <Icon name={isOpen ? \"angle-up\" : \"angle-down\"} />\n    </StyledCollapsibleButton>\n  );\n};\n\nCollapsibleButton.displayName = \"CollapsibleButton\";\n","import styled from \"styled-components\";\nimport { fontSizeSelector } from \"@braze/beacon-styling\";\n\nimport { Button } from \"../Button\";\n\nimport { StyledCollapsibleButtonProps } from \"./types\";\n\nexport const StyledCollapsibleButton = styled(\n  Button\n)<StyledCollapsibleButtonProps>`\n  font-size: ${(props) =>\n    props.variant === \"quaternary\" && fontSizeSelector(props, \"body\", \"sm\")};\n  padding-right: ${(props) => props.variant === \"quaternary\" && 0};\n  padding-left: ${(props) => props.variant === \"quaternary\" && 0};\n`;\n","export { CollapsibleButton } from \"./CollapsibleButton\";\n\nexport type { CollapsibleButtonProps } from \"./types\";\n","import React, { createContext, useMemo } from \"react\";\nimport noop from \"lodash/noop\";\n\nimport {\n  CollapsibleContextInterface,\n  CollapsibleContextProviderProps,\n} from \"./types\";\n\nexport const CollapsibleContext = createContext<CollapsibleContextInterface>({\n  isOpen: false,\n  toggle: noop,\n});\n\nexport const CollapsibleContextProvider = ({\n  children,\n  isOpen = false,\n  toggle = noop,\n}: CollapsibleContextProviderProps): React.ReactElement => {\n  const value = useMemo(() => ({ isOpen, toggle }), [isOpen, toggle]);\n\n  return (\n    <CollapsibleContext.Provider value={value}>\n      {children}\n    </CollapsibleContext.Provider>\n  );\n};\n","export {\n  CollapsibleContext,\n  CollapsibleContextProvider,\n} from \"./CollapsibleContext\";\n\nexport type {\n  CollapsibleContextInterface,\n  CollapsibleContextProviderProps,\n} from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { CollapsibleHeaderProps } from \"./types\";\n\nexport const CollapsibleHeader = ({\n  className,\n  ...props\n}: CollapsibleHeaderProps): React.ReactElement => (\n  <div\n    {...props}\n    className={classNames([\"bcl-collapsible-header\", className])}\n  />\n);\n\nCollapsibleHeader.displayName = \"CollapsibleHeader\";\n","export { CollapsibleHeader } from \"./CollapsibleHeader\";\n\nexport type { CollapsibleHeaderProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { CollapsibleHeaderTextProps } from \"./types\";\nimport { StyledCollapsibleHeaderText } from \"./StyledCollapsibleHeaderText\";\n\nexport const CollapsibleHeaderText = ({\n  className,\n  ...props\n}: CollapsibleHeaderTextProps): React.ReactElement => (\n  <StyledCollapsibleHeaderText\n    {...props}\n    className={classNames([\"bcl-collapsible-header-text\", className])}\n  />\n);\n\nCollapsibleHeaderText.displayName = \"CollapsibleHeaderText\";\n","import styled from \"styled-components\";\nimport {\n  getFontFamily,\n  getFontSize,\n  getFontWeight,\n  getSpacing,\n} from \"@braze/beacon-styling\";\n\nimport { StyledCollapsibleHeaderTextProps } from \"./types\";\n\nexport const StyledCollapsibleHeaderText = styled.span<StyledCollapsibleHeaderTextProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  font-size: ${getFontSize(\"body\", \"sm\")};\n  margin-right: ${getSpacing(\"xs\")};\n`;\n","export { CollapsibleHeaderText } from \"./CollapsibleHeaderText\";\n\nexport type { CollapsibleHeaderTextProps } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { IconButton } from \"../IconButton\";\nimport { CollapsibleContext } from \"../CollapsibleContext\";\n\nimport { CollapsibleIconButtonProps } from \"./types\";\n\nexport const CollapsibleIconButton = ({\n  className,\n  ...props\n}: CollapsibleIconButtonProps): React.ReactElement => {\n  const { isOpen, toggle } = useContext(CollapsibleContext);\n\n  return (\n    <IconButton\n      {...props}\n      className={classNames([\"bcl-collapsible-icon-button\", className])}\n      name={isOpen ? \"angle-up\" : \"angle-down\"}\n      onClick={toggle}\n    />\n  );\n};\n\nCollapsibleIconButton.displayName = \"CollapsibleIconButton\";\n","export { CollapsibleIconButton } from \"./CollapsibleIconButton\";\n\nexport type { CollapsibleIconButtonProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { Heading } from \"../Heading\";\n\nimport { CollapsibleListProps } from \"./types\";\nimport { StyledCollapsibleList } from \"./StyledCollapsibleList\";\n\nexport const CollapsibleList = ({\n  children,\n  className,\n  heading,\n  ...props\n}: CollapsibleListProps): React.ReactElement => (\n  <StyledCollapsibleList\n    {...props}\n    className={classNames([\"bcl-collapsible-list\", className])}\n  >\n    {heading && (\n      <Heading level={5} variant=\"light\">\n        {heading}\n      </Heading>\n    )}\n    <ul>{children}</ul>\n  </StyledCollapsibleList>\n);\n\nCollapsibleList.displayName = \"CollapsibleList\";\n","import styled from \"styled-components\";\n\nimport { StyledCollapsibleListProps } from \"./types\";\n\nexport const StyledCollapsibleList = styled.div<StyledCollapsibleListProps>`\n  & > ul {\n    margin-bottom: 0;\n  }\n`;\n","export { CollapsibleList } from \"./CollapsibleList\";\n\nexport { StyledCollapsibleList } from \"./StyledCollapsibleList\";\n\nexport type { CollapsibleListProps, StyledCollapsibleListProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { CollapsibleListItemProps } from \"./types\";\nimport { StyledCollapsibleListItem } from \"./StyledCollapsibleListItem\";\n\nexport const CollapsibleListItem = ({\n  className,\n  ...props\n}: CollapsibleListItemProps): React.ReactElement => (\n  <StyledCollapsibleListItem\n    {...props}\n    className={classNames([\"bcl-collapsible-list-item\", className])}\n  />\n);\n\nCollapsibleListItem.displayName = \"CollapsibleListItem\";\n","import styled from \"styled-components\";\nimport {\n  getFontFamily,\n  getFontSize,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledCollapsibleListItemProps } from \"./types\";\n\nexport const StyledCollapsibleListItem = styled.li<StyledCollapsibleListItemProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  font-size: ${getFontSize(\"body\", \"md\")};\n`;\n","export { CollapsibleListItem } from \"./CollapsibleListItem\";\n\nexport type { CollapsibleListItemProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"copyfield\"\n    }}>{`CopyField`}</h1>\n    <p><inlineCode parentName=\"p\">{`CopyField`}</inlineCode>{` is an input element containing blocks of reusable\ncode that can be inserted in a code file. They are always\naccompanied by a copy button.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`CopyField`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`CopyField`}</inlineCode>{` component enables users to select and easily\ncopy a snippet of code or text to their keyboard, as shown\nbelow. Test it out by clicking \"Copy\" and then paste your\nclipboard in the input field immediately below.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`TIP: Check out the canvas tab to see a few knobs that allow\nyou to customize the experience.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-copyfield--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-no-text-in-button\"\n    }}>{`With no text in button`}</h3>\n    <p>{`To make your `}<inlineCode parentName=\"p\">{`CopyField`}</inlineCode>{` more compact, you can flip the\n`}<inlineCode parentName=\"p\">{`showTextInButton`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-copyfield--with-no-text-in-button\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-different-sizes\"\n    }}>{`With different sizes`}</h3>\n    <p><inlineCode parentName=\"p\">{`CopyField`}</inlineCode>{` supports the same sizes as the regular `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`\ncomponent it's based on!`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-copyfield--with-different-sizes\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-different-copy-text\"\n    }}>{`With different copy text`}</h3>\n    <p>{`To provide more specific information to your user, you can\noverride the tooltip text to render different text via the\n`}<inlineCode parentName=\"p\">{`copyTooltipText`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-copyfield--with-different-copy-text\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-copytoclipboard-options\"\n    }}>{`with copyToClipboard options`}</h3>\n    <p>{`To provide copyToClipboard options though the props,\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sudodoki/copy-to-clipboard#api\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`https://github.com/sudodoki/copy-to-clipboard#api`}</a>{` all available options`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-copyfield--with-copy-to-clipboard-options\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { CopyField } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`containerClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name for the container component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`copyOptions`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`{debug: boolean, format: MIME type, onCopy: (clipboardData: object)=> void }`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`undefined`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`undefined`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`copyTooltipText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text to be rendered in the tooltip before the copy button has been clicked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onCopyClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to be invoked when a user clicks on the copy button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onInputClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLInputElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to be invoked when a user clicks on input`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`showTextInButton`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the copy text should be shown in the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( string, number, string[] )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be rendered in the input field`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`vSize`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`\"sm\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`\"md\"`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"md\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`vertical size for input box`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index to use for the copy button (the tooltip will use `}<inlineCode parentName=\"td\">{`zIndex + 1`}</inlineCode>{`)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef } from \\\"react\\\";\\n\\nimport { FieldLabel, FieldLabelProps } from \\\"../FieldLabel\\\";\\nimport { Input } from \\\"../Input\\\";\\nimport { FlexBox } from \\\"../FlexBox\\\";\\n\\nimport page from \\\"./CopyField.docs.mdx\\\";\\n\\nimport { CopyField, CopyFieldProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Forms/CopyField\\\",\\n  component: CopyField,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\ninterface Args\\n  extends CopyFieldProps,\\n    Pick<FieldLabelProps, \\\"helpText\\\" | \\\"label\\\"> {}\\n\\nexport const BasicUse = (args: Args): React.ReactElement => {\\n  const { label, helpText, ...props } = args;\\n\\n  return (\\n    <React.Fragment>\\n      <FieldLabel label={label} helpText={helpText}>\\n        <CopyField {...props} />\\n      </FieldLabel>\\n      <FieldLabel label=\\\"Paste your copied snippet below!\\\">\\n        <Input className=\\\"paste-field\\\" />\\n      </FieldLabel>\\n    </React.Fragment>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nBasicUse.args = {\\n  label: \\\"Label\\\",\\n  helpText: \\\"Some help text\\\",\\n  showTextInButton: true,\\n  vSize: \\\"md\\\",\\n  zIndex: 1051,\\n  value: \\\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\\\",\\n};\\n\\nexport const WithNoTextInButton = (\\n  args: CopyFieldProps\\n): React.ReactElement => {\\n  return (\\n    <FieldLabel label=\\\"Label\\\">\\n      <CopyField {...args} />\\n    </FieldLabel>\\n  );\\n};\\n\\nWithNoTextInButton.args = {\\n  showTextInButton: false,\\n  vSize: \\\"md\\\",\\n  zIndex: 1051,\\n  value: \\\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\\\",\\n};\\n\\nWithNoTextInButton.storyName = \\\"with no text in button\\\";\\n\\nexport const WithDifferentSizes = (): React.ReactElement => {\\n  return (\\n    <React.Fragment>\\n      <FieldLabel label=\\\"Medium\\\">\\n        <CopyField\\n          value=\\\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\\\"\\n          showTextInButton={false}\\n          vSize=\\\"md\\\"\\n        />\\n      </FieldLabel>\\n      <FieldLabel label=\\\"Small\\\">\\n        <CopyField\\n          value=\\\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\\\"\\n          showTextInButton={false}\\n          vSize=\\\"sm\\\"\\n          zIndex={1051}\\n        />\\n      </FieldLabel>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithDifferentSizes.storyName = \\\"with different sizes\\\";\\n\\nexport const WithDifferentCopyText = (): React.ReactElement => {\\n  return (\\n    <FieldLabel label=\\\"Medium\\\">\\n      <CopyField\\n        value=\\\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\\\"\\n        showTextInButton={false}\\n        copyTooltipText=\\\"Copy API identifier\\\"\\n        zIndex={1051}\\n      />\\n    </FieldLabel>\\n  );\\n};\\n\\nWithDifferentCopyText.storyName = \\\"with different copy text\\\";\\n\\nexport const WithCopyToClipboardOptions = (): React.ReactElement => {\\n  const ref = useRef<HTMLDivElement>(null);\\n  const HTML_MIME_TYPE = \\\"text/html\\\";\\n\\n  return (\\n    <FieldLabel label=\\\"Medium\\\">\\n      <FieldLabel label={`Copy ${HTML_MIME_TYPE}`}>\\n        <CopyField\\n          value=\\\"4ba9f231-d578-4663-ae43-4cffa08deeee\\\"\\n          showTextInButton={false}\\n          copyTooltipText=\\\"Copy API identifier\\\"\\n          copyOptions={{\\n            debug: true,\\n            format: HTML_MIME_TYPE,\\n            onCopy: (e: DataTransfer) => {\\n              if (ref.current) {\\n                ref.current.innerText = e.items[0].type;\\n              }\\n            },\\n          }}\\n          zIndex={1051}\\n        />\\n      </FieldLabel>\\n\\n      <FieldLabel label=\\\"Content Mime Type\\\">\\n        <FlexBox\\n          ref={ref}\\n          className=\\\"bcl-copy-field-stories--copied-mime-type\\\"\\n          style={{ minHeight: \\\"50px\\\", minWidth: \\\"50px\\\", border: \\\"solid 1px\\\" }}\\n        />\\n      </FieldLabel>\\n    </FieldLabel>\\n  );\\n};\\n\\nWithCopyToClipboardOptions.storyName = \\\"with copy to clipboard options\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":24},\"endLoc\":{\"col\":1,\"line\":37},\"startBody\":{\"col\":24,\"line\":24},\"endBody\":{\"col\":1,\"line\":37}},\"WithNoTextInButton\":{\"startLoc\":{\"col\":34,\"line\":50},\"endLoc\":{\"col\":1,\"line\":58},\"startBody\":{\"col\":34,\"line\":50},\"endBody\":{\"col\":1,\"line\":58}},\"WithDifferentSizes\":{\"startLoc\":{\"col\":34,\"line\":69},\"endLoc\":{\"col\":1,\"line\":89},\"startBody\":{\"col\":34,\"line\":69},\"endBody\":{\"col\":1,\"line\":89}},\"WithDifferentCopyText\":{\"startLoc\":{\"col\":37,\"line\":93},\"endLoc\":{\"col\":1,\"line\":104},\"startBody\":{\"col\":37,\"line\":93},\"endBody\":{\"col\":1,\"line\":104}},\"WithCopyToClipboardOptions\":{\"startLoc\":{\"col\":42,\"line\":108},\"endLoc\":{\"col\":1,\"line\":141},\"startBody\":{\"col\":42,\"line\":108},\"endBody\":{\"col\":1,\"line\":141}}};\n    \nimport React, { useRef } from \"react\";\n\nimport { FieldLabel, FieldLabelProps } from \"../FieldLabel\";\nimport { Input } from \"../Input\";\nimport { FlexBox } from \"../FlexBox\";\n\nimport page from \"./CopyField.docs.mdx\";\n\nimport { CopyField, CopyFieldProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Forms/CopyField\",\n  component: CopyField,\n  parameters: {\n    docs: { page },\n  },\n};\n\ninterface Args\n  extends CopyFieldProps,\n    Pick<FieldLabelProps, \"helpText\" | \"label\"> {}\n\nexport const BasicUse = (args: Args): React.ReactElement => {\n  const { label, helpText, ...props } = args;\n\n  return (\n    <React.Fragment>\n      <FieldLabel label={label} helpText={helpText}>\n        <CopyField {...props} />\n      </FieldLabel>\n      <FieldLabel label=\"Paste your copied snippet below!\">\n        <Input className=\"paste-field\" />\n      </FieldLabel>\n    </React.Fragment>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nBasicUse.args = {\n  label: \"Label\",\n  helpText: \"Some help text\",\n  showTextInButton: true,\n  vSize: \"md\",\n  zIndex: 1051,\n  value: \"4ba9f231-d578-4663-ae43-4cffa08d9a9d\",\n};\n\nexport const WithNoTextInButton = (\n  args: CopyFieldProps\n): React.ReactElement => {\n  return (\n    <FieldLabel label=\"Label\">\n      <CopyField {...args} />\n    </FieldLabel>\n  );\n};;\n\nWithNoTextInButton.args = {\n  showTextInButton: false,\n  vSize: \"md\",\n  zIndex: 1051,\n  value: \"4ba9f231-d578-4663-ae43-4cffa08d9a9d\",\n};\n\nWithNoTextInButton.storyName = \"with no text in button\";\n\nexport const WithDifferentSizes = (): React.ReactElement => {\n  return (\n    <React.Fragment>\n      <FieldLabel label=\"Medium\">\n        <CopyField\n          value=\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\"\n          showTextInButton={false}\n          vSize=\"md\"\n        />\n      </FieldLabel>\n      <FieldLabel label=\"Small\">\n        <CopyField\n          value=\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\"\n          showTextInButton={false}\n          vSize=\"sm\"\n          zIndex={1051}\n        />\n      </FieldLabel>\n    </React.Fragment>\n  );\n};;\n\nWithDifferentSizes.storyName = \"with different sizes\";\n\nexport const WithDifferentCopyText = (): React.ReactElement => {\n  return (\n    <FieldLabel label=\"Medium\">\n      <CopyField\n        value=\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\"\n        showTextInButton={false}\n        copyTooltipText=\"Copy API identifier\"\n        zIndex={1051}\n      />\n    </FieldLabel>\n  );\n};;\n\nWithDifferentCopyText.storyName = \"with different copy text\";\n\nexport const WithCopyToClipboardOptions = (): React.ReactElement => {\n  const ref = useRef<HTMLDivElement>(null);\n  const HTML_MIME_TYPE = \"text/html\";\n\n  return (\n    <FieldLabel label=\"Medium\">\n      <FieldLabel label={`Copy ${HTML_MIME_TYPE}`}>\n        <CopyField\n          value=\"4ba9f231-d578-4663-ae43-4cffa08deeee\"\n          showTextInButton={false}\n          copyTooltipText=\"Copy API identifier\"\n          copyOptions={{\n            debug: true,\n            format: HTML_MIME_TYPE,\n            onCopy: (e: DataTransfer) => {\n              if (ref.current) {\n                ref.current.innerText = e.items[0].type;\n              }\n            },\n          }}\n          zIndex={1051}\n        />\n      </FieldLabel>\n\n      <FieldLabel label=\"Content Mime Type\">\n        <FlexBox\n          ref={ref}\n          className=\"bcl-copy-field-stories--copied-mime-type\"\n          style={{ minHeight: \"50px\", minWidth: \"50px\", border: \"solid 1px\" }}\n        />\n      </FieldLabel>\n    </FieldLabel>\n  );\n};\n\nWithCopyToClipboardOptions.storyName = \"with copy to clipboard options\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: Args): React.ReactElement => {\\n  const { label, helpText, ...props } = args;\\n\\n  return (\\n    <React.Fragment>\\n      <FieldLabel label={label} helpText={helpText}>\\n        <CopyField {...props} />\\n      </FieldLabel>\\n      <FieldLabel label=\\\"Paste your copied snippet below!\\\">\\n        <Input className=\\\"paste-field\\\" />\\n      </FieldLabel>\\n    </React.Fragment>\\n  );\\n}\" }, ...BasicUse.parameters };\nWithNoTextInButton.parameters = { storySource: { source: \"(\\n  args: CopyFieldProps\\n): React.ReactElement => {\\n  return (\\n    <FieldLabel label=\\\"Label\\\">\\n      <CopyField {...args} />\\n    </FieldLabel>\\n  );\\n}\" }, ...WithNoTextInButton.parameters };\nWithDifferentSizes.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <React.Fragment>\\n      <FieldLabel label=\\\"Medium\\\">\\n        <CopyField\\n          value=\\\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\\\"\\n          showTextInButton={false}\\n          vSize=\\\"md\\\"\\n        />\\n      </FieldLabel>\\n      <FieldLabel label=\\\"Small\\\">\\n        <CopyField\\n          value=\\\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\\\"\\n          showTextInButton={false}\\n          vSize=\\\"sm\\\"\\n          zIndex={1051}\\n        />\\n      </FieldLabel>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithDifferentSizes.parameters };\nWithDifferentCopyText.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <FieldLabel label=\\\"Medium\\\">\\n      <CopyField\\n        value=\\\"4ba9f231-d578-4663-ae43-4cffa08d9a9d\\\"\\n        showTextInButton={false}\\n        copyTooltipText=\\\"Copy API identifier\\\"\\n        zIndex={1051}\\n      />\\n    </FieldLabel>\\n  );\\n}\" }, ...WithDifferentCopyText.parameters };\nWithCopyToClipboardOptions.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const ref = useRef<HTMLDivElement>(null);\\n  const HTML_MIME_TYPE = \\\"text/html\\\";\\n\\n  return (\\n    <FieldLabel label=\\\"Medium\\\">\\n      <FieldLabel label={`Copy ${HTML_MIME_TYPE}`}>\\n        <CopyField\\n          value=\\\"4ba9f231-d578-4663-ae43-4cffa08deeee\\\"\\n          showTextInButton={false}\\n          copyTooltipText=\\\"Copy API identifier\\\"\\n          copyOptions={{\\n            debug: true,\\n            format: HTML_MIME_TYPE,\\n            onCopy: (e: DataTransfer) => {\\n              if (ref.current) {\\n                ref.current.innerText = e.items[0].type;\\n              }\\n            },\\n          }}\\n          zIndex={1051}\\n        />\\n      </FieldLabel>\\n\\n      <FieldLabel label=\\\"Content Mime Type\\\">\\n        <FlexBox\\n          ref={ref}\\n          className=\\\"bcl-copy-field-stories--copied-mime-type\\\"\\n          style={{ minHeight: \\\"50px\\\", minWidth: \\\"50px\\\", border: \\\"solid 1px\\\" }}\\n        />\\n      </FieldLabel>\\n    </FieldLabel>\\n  );\\n}\" }, ...WithCopyToClipboardOptions.parameters };","import React, { useCallback, useRef, useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport { css } from \"styled-components\";\nimport copyToClipboard from \"copy-to-clipboard\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\n\nimport { Button, ButtonProps } from \"../Button\";\nimport { Icon } from \"../Icon\";\nimport { Input } from \"../Input\";\nimport { VerticalInputSize } from \"../InputGroupContext\";\nimport { Tooltip, useTooltip } from \"../Tooltip\";\n\nimport { CopyFieldProps } from \"./types\";\nimport { StyledCopyField } from \"./StyledCopyField\";\n\n/**\n * Map vertical size of input to button size\n * @param vSize vertical size prop for input field\n * @returns `size` prop to be passed to `Button`\n */\nconst mapVSizeToButtonSize = (\n  vSize: VerticalInputSize | undefined\n): ButtonProps[\"size\"] | undefined => {\n  switch (vSize) {\n    case \"sm\":\n      return \"sm\";\n    case \"md\":\n    default:\n      return \"lg\";\n  }\n};\n\nconst mapVSizeToIconSize = (\n  vSize: VerticalInputSize | undefined\n): string | undefined => {\n  switch (vSize) {\n    case \"sm\":\n      return \"14px\";\n    case \"md\":\n    default:\n      return \"16px\";\n  }\n};\n\nconst pulseCss = css`\n  animation: pulse 600ms ease-in-out;\n`;\n\nexport const CopyField = ({\n  containerClassName,\n  copyTooltipText: userSuppliedTooltipText,\n  onCopyClick,\n  onInputClick,\n  showTextInButton = true,\n  zIndex,\n  value,\n  vSize,\n  copyOptions,\n  ...props\n}: CopyFieldProps): React.ReactElement | null => {\n  const { t } = useI18nNamespace(\"beacon-copy-field\");\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [tooltipState, buttonRef] = useTooltip<HTMLButtonElement>();\n  const [copied, setCopied] = useState(false);\n  const copyTooltipText = userSuppliedTooltipText || t(\"copy-tooltip\", \"Copy\");\n\n  /**\n   * Helper function to make text selection reusable\n   */\n  const handleSelect = useCallback(() => {\n    // select contents of the input field\n    inputRef.current?.select();\n\n    // For mobile devices\n    inputRef.current?.setSelectionRange(0, 99999);\n  }, []);\n\n  /**\n   * Function to handle click on the input element\n   * by selecting all the text when user clicks in it\n   * @param event mouse event on the input element\n   */\n  const handleInputClick = useCallback(\n    (event: React.MouseEvent<HTMLInputElement>) => {\n      // first, select contents of the input field\n      handleSelect();\n\n      // fire input click event, if defined\n      onInputClick?.(event);\n    },\n    [handleSelect, onInputClick]\n  );\n\n  /**\n   * Function to handle click on the copy button by\n   * copying the text in the input (i.e. 'value' prop)\n   * to clipboard\n   * @param event mouse event on the button element\n   */\n  const handleCopyClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      // first, select contents of the input field\n      handleSelect();\n\n      // now copy the selection\n      copyToClipboard(inputRef.current?.value as string, copyOptions);\n\n      // next, focus back on the button rather than selecting text\n      event.currentTarget.focus();\n\n      // finally, set copied state to true\n      setCopied(true);\n\n      // fire button click event, if defined\n      onCopyClick?.(event);\n    },\n    [handleSelect, onCopyClick, copyOptions]\n  );\n\n  /**\n   * automatically reset copied state to false\n   * after timeout\n   */\n  useEffect(() => {\n    if (!copied) {\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      setCopied(false);\n    }, 1500);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [copied, setCopied]);\n\n  return (\n    <StyledCopyField\n      className={classNames([\"bcl-copy-field\", containerClassName])}\n      showTextInButton={showTextInButton}\n      zIndex={zIndex}\n    >\n      <Input\n        {...props}\n        ref={inputRef}\n        onClick={handleInputClick}\n        value={value}\n        vSize={vSize}\n      />\n      <Button\n        onClick={handleCopyClick}\n        ref={buttonRef}\n        size={mapVSizeToButtonSize(vSize)}\n      >\n        {copied ? (\n          <Icon name=\"check\" />\n        ) : (\n          <>\n            <Icon\n              style={{ fontSize: mapVSizeToIconSize(vSize) }}\n              name={[\"far\", \"clone\"]}\n            />\n            {showTextInButton && <span>Copy</span>}\n          </>\n        )}\n      </Button>\n      <Tooltip\n        {...tooltipState}\n        popperStyledCss={css`\n          z-index: ${zIndex ? zIndex + 1 : \"auto\"};\n          ${copied ? pulseCss : undefined}\n        `}\n        targetRef={buttonRef}\n        placement=\"bottom\"\n        closeOnClickOutside={false}\n      >\n        {copied\n          ? t(\"copied-to-clipboard\", \"Copied to Clipboard\")\n          : copyTooltipText}\n      </Tooltip>\n    </StyledCopyField>\n  );\n};\n\nCopyField.displayName = \"CopyField\";\n","import styled from \"styled-components\";\nimport {\n  getIntentColor,\n  getSpacing,\n  getFontFamily,\n} from \"@braze/beacon-styling\";\n\nimport { StyledButton } from \"../Button\";\nimport { StyledInput } from \"../Input\";\n\nimport { StyledCopyFieldProps } from \"./types\";\n\nexport const StyledCopyField = styled.div<StyledCopyFieldProps>`\n  display: flex;\n  align-items: center;\n\n  z-index: ${(props) => props.zIndex || \"auto\"};\n\n  ${StyledInput} {\n    font-family: ${getFontFamily(\"code\")};\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    border-right: none;\n    caret-color: transparent !important;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    ::selection {\n      background: ${getIntentColor(\"primary\", 50)};\n    }\n  }\n\n  ${StyledButton} {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    padding: ${getSpacing(\"md\")};\n    min-width: ${(props) => props.showTextInButton && \"100px\"};\n  }\n\n  @keyframes pulse {\n    from {\n      transform: scale(1);\n    }\n\n    33% {\n      transform: scale(1.1);\n    }\n\n    67% {\n      transform: scale(0.95);\n    }\n\n    to {\n      transform: scale(1);\n    }\n  }\n`;\n","export { CopyField } from \"./CopyField\";\n\nexport type { CopyFieldProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { text } from \"@storybook/addon-knobs\";\nimport LinkTo from \"@storybook/addon-links/react\";\nimport {\n  Button,\n  Icon,\n  Link,\n  Panel,\n  PanelHeader,\n  PanelBody,\n  Table,\n  TableHeader,\n  TableHeaderCell,\n} from \"@braze/beacon-core\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateHeading,\n  EmptyStateText,\n  EmptyStateButtonGroup,\n} from \"../..\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Content Display/EmptyState\" component={EmptyState} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"emptystate\"\n    }}>{`EmptyState`}</h1>\n    <p>{`Empty states occur when there is no content/data to show users. In general, we want to make empty states informative and actionable.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`EmptyState`}</inlineCode>{` component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tables:`}</strong>{` to use `}<inlineCode parentName=\"p\">{`EmptyState`}</inlineCode>{` inside of a table, use the `}<LinkTo kind=\"lab-content-display-tableemptybody--basic-use#tableemptybody\" mdxType=\"LinkTo\"><inlineCode parentName=\"p\">{`TableEmptyBody`}</inlineCode></LinkTo>{`\ncomponent instead. It wraps an `}<inlineCode parentName=\"p\">{`EmptyState`}</inlineCode>{` in components that allow it to be the body of a table.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Pass a mix of images, text, and action buttons as children that tell the user why there is no content, and what actions they can take.\nIt is recommended that you model your `}<inlineCode parentName=\"p\">{`EmptyState`}</inlineCode>{` after this example; however, other arrangements of child components will work.`}</p>\n    <p>{`Currently, `}<inlineCode parentName=\"p\">{`EmptyStateIcon`}</inlineCode>{` choices are limited to those available in `}<LinkTo kind=\"lab-icons-brazeicon--basic-use#icons\" mdxType=\"LinkTo\"><inlineCode parentName=\"p\">{`BrazeIcon`}</inlineCode></LinkTo>{`,\nso if you want to use an icon that is not there, please have the new icon added to `}<inlineCode parentName=\"p\">{`BrazeIcon`}</inlineCode>{` first.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    <Panel mdxType=\"Panel\">\n      <PanelHeader mdxType=\"PanelHeader\">Settings For Braze</PanelHeader>\n      <PanelBody mdxType=\"PanelBody\">\n        <EmptyState mdxType=\"EmptyState\">\n          <EmptyStateIcon name=\"add-image-or-document\" mdxType=\"EmptyStateIcon\" />\n          <EmptyStateHeading mdxType=\"EmptyStateHeading\">\n            {text(\"Heading Content\", \"No apps yet\")}\n          </EmptyStateHeading>\n          <EmptyStateText mdxType=\"EmptyStateText\">\n            {text(\"Text Content\", \"Add multiple apps to your App Group acress different platforms and price points.\")}\n          </EmptyStateText>\n          <EmptyStateButtonGroup mdxType=\"EmptyStateButtonGroup\">\n            <Button variant=\"primary\" size=\"lg\" mdxType=\"Button\">\n              <Icon name=\"plus-circle\" mdxType=\"Icon\" /> Add New App\n            </Button>\n          </EmptyStateButtonGroup>\n        </EmptyState>\n      </PanelBody>\n    </Panel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"inline-link-for-call-to-action\"\n    }}>{`Inline link for call to action`}</h3>\n    <p>{`If your call to action is navigation to a different page, make it a link embedded in the `}<inlineCode parentName=\"p\">{`EmptyStateText`}</inlineCode></p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"no buttons\" mdxType=\"Story\">\n    <Panel mdxType=\"Panel\">\n      <PanelHeader mdxType=\"PanelHeader\">Global Control Group Report</PanelHeader>\n      <PanelBody mdxType=\"PanelBody\">\n        <EmptyState mdxType=\"EmptyState\">\n          <EmptyStateIcon name=\"add-image-or-document\" mdxType=\"EmptyStateIcon\" />\n          <EmptyStateHeading mdxType=\"EmptyStateHeading\">No Global Control Group set up</EmptyStateHeading>\n          <EmptyStateText mdxType=\"EmptyStateText\">\n            You'll need to first set up a Global Control Group in Global Message\n            Settings in order to view this report.{\" \"}\n            <Link target=\"_blank\" rel=\"noopener\" href=\"https://www.google.com\" mdxType=\"Link\">\n              Learn More\n            </Link>\n          </EmptyStateText>\n        </EmptyState>\n      </PanelBody>\n    </Panel>\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { EmptyState, EmptyState } from \"@braze/beacon-labs-table\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"emptystate-1\"\n    }}><inlineCode parentName=\"h3\">{`EmptyState`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`columnCount`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the number of columns that are in this table`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"emptystateicon\"\n    }}><inlineCode parentName=\"h3\">{`EmptyStateIcon`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"lab-icons-brazeicon--basic-use#icons\" mdxType=\"LinkTo\"><inlineCode parentName=\"td\">{`BrazeIcon`}</inlineCode>{` name`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the icon to use for this space`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"emptystateheading\"\n    }}><inlineCode parentName=\"h3\">{`EmptyStateHeading`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"emptystatetext\"\n    }}><inlineCode parentName=\"h3\">{`EmptyStateText`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"emptystatebuttongroup\"\n    }}><inlineCode parentName=\"h3\">{`EmptyStateButtonGroup`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = () => (\n          <Panel>\n      <PanelHeader>Settings For Braze</PanelHeader>\n      <PanelBody>\n        <EmptyState>\n          <EmptyStateIcon name=\"add-image-or-document\" />\n          <EmptyStateHeading>\n            {text(\"Heading Content\", \"No apps yet\")}\n          </EmptyStateHeading>\n          <EmptyStateText>\n            {text(\"Text Content\", \"Add multiple apps to your App Group acress different platforms and price points.\")}\n          </EmptyStateText>\n          <EmptyStateButtonGroup>\n            <Button variant=\"primary\" size=\"lg\">\n              <Icon name=\"plus-circle\" /> Add New App\n            </Button>\n          </EmptyStateButtonGroup>\n        </EmptyState>\n      </PanelBody>\n    </Panel>\n        );\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '<Panel>\\n      <PanelHeader>Settings For Braze</PanelHeader>\\n      <PanelBody>\\n        <EmptyState>\\n          <EmptyStateIcon name=\\\"add-image-or-document\\\" />\\n          <EmptyStateHeading>\\n            {text(\\\"Heading Content\\\", \\\"No apps yet\\\")}\\n          </EmptyStateHeading>\\n          <EmptyStateText>\\n            {text(\\\"Text Content\\\", \\\"Add multiple apps to your App Group acress different platforms and price points.\\\")}\\n          </EmptyStateText>\\n          <EmptyStateButtonGroup>\\n            <Button variant=\\\"primary\\\" size=\\\"lg\\\">\\n              <Icon name=\\\"plus-circle\\\" /> Add New App\\n            </Button>\\n          </EmptyStateButtonGroup>\\n        </EmptyState>\\n      </PanelBody>\\n    </Panel>' } };\n\nexport const noButtons = () => (\n          <Panel>\n      <PanelHeader>Global Control Group Report</PanelHeader>\n      <PanelBody>\n        <EmptyState>\n          <EmptyStateIcon name=\"add-image-or-document\" />\n          <EmptyStateHeading>No Global Control Group set up</EmptyStateHeading>\n          <EmptyStateText>\n            You'll need to first set up a Global Control Group in Global Message\n            Settings in order to view this report.{\" \"}\n            <Link target=\"_blank\" rel=\"noopener\" href=\"https://www.google.com\">\n              Learn More\n            </Link>\n          </EmptyStateText>\n        </EmptyState>\n      </PanelBody>\n    </Panel>\n        );\nnoButtons.storyName = 'no buttons';\nnoButtons.parameters = { storySource: { source: '<Panel>\\n      <PanelHeader>Global Control Group Report</PanelHeader>\\n      <PanelBody>\\n        <EmptyState>\\n          <EmptyStateIcon name=\\\"add-image-or-document\\\" />\\n          <EmptyStateHeading>No Global Control Group set up</EmptyStateHeading>\\n          <EmptyStateText>\\n            You\\'ll need to first set up a Global Control Group in Global Message\\n            Settings in order to view this report.{\\\" \\\"}\\n            <Link target=\\\"_blank\\\" rel=\\\"noopener\\\" href=\\\"https://www.google.com\\\">\\n              Learn More\\n            </Link>\\n          </EmptyStateText>\\n        </EmptyState>\\n      </PanelBody>\\n    </Panel>' } };\n\nconst componentMeta = { title: 'Core/Content Display/EmptyState', component: EmptyState, includeStories: [\"basicUse\",\"noButtons\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"no buttons\":\"noButtons\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import styled from \"styled-components\";\nimport classNames from \"classnames\";\n\nimport { FlexBox, FlexBoxProps } from \"../FlexBox\";\n\nimport { EmptyStateProps } from \"./types\";\n\nconst getAttrs = ({ className, ...props }: EmptyStateProps): FlexBoxProps => ({\n  ...props,\n  direction: \"column\",\n  justifyContent: \"flex-start\",\n  alignItems: \"center\",\n  boxPadding: { top: \"xxl\", bottom: \"xxxl\" },\n  className: classNames([\"bcl-empty-state\", className]),\n});\n\nexport const EmptyState = styled(FlexBox).attrs(getAttrs)<FlexBoxProps>``;\n\nEmptyState.displayName = \"EmptyState\";\n","export { EmptyState } from \"./EmptyState\";\n\nexport type { EmptyStateProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\nimport { getSpacing } from \"@braze/beacon-styling\";\n\nimport { ButtonGroup, ButtonGroupProps } from \"../ButtonGroup\";\n\nimport { EmptyStateButtonGroupProps } from \"./types\";\n\nconst getAttrs = ({\n  className,\n}: EmptyStateButtonGroupProps): ButtonGroupProps => ({\n  className: classNames([\"bcl-empty-state-buttons\", className]),\n  direction: \"row\",\n});\n\nexport const EmptyStateButtonGroup = styled(ButtonGroup).attrs(\n  getAttrs\n)<ButtonGroupProps>`\n  padding-top: ${getSpacing(\"lg\")};\n`;\n\nEmptyStateButtonGroup.displayName = \"EmptyStateButtonGroup\";\n","export { EmptyStateButtonGroup } from \"./EmptyStateButtonGroup\";\n\nexport type { EmptyStateButtonGroupProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\nimport {\n  getColor,\n  getFontFamily,\n  getFontSize,\n  getFontWeight,\n  getSpacing,\n} from \"@braze/beacon-styling\";\n\nimport { Box, BoxProps } from \"../Box\";\n\nimport { EmptyStateHeadingProps } from \"./types\";\n\nconst getAttrs = ({\n  className,\n  ...props\n}: EmptyStateHeadingProps): BoxProps => ({\n  ...props,\n  className: classNames([\"bcl-empty-state-heading\", className]),\n});\n\nexport const EmptyStateHeading = styled(Box).attrs(getAttrs)<BoxProps>`\n  padding-top: ${getSpacing(\"lg\")};\n  font-family: ${getFontFamily(\"base\")};\n  font-size: ${getFontSize(\"heading\", 4)};\n  font-weight: ${getFontWeight(\"bold\")};\n  color: ${getColor(\"gray\", 900)};\n  max-width: 400px;\n  text-align: center;\n`;\n\nEmptyStateHeading.displayName = \"EmptyStateHeading\";\n","export { EmptyStateHeading } from \"./EmptyStateHeading\";\n\nexport type { EmptyStateHeadingProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\nimport { getSpacing } from \"@braze/beacon-styling\";\n\nimport { BrazeIcon, BrazeIconProps } from \"../BrazeIcon\";\n\nimport { EmptyStateIconProps } from \"./types\";\n\nconst getAttrs = ({\n  className,\n  ...props\n}: EmptyStateIconProps): BrazeIconProps => ({\n  ...props,\n  className: classNames([\"bcl-empty-state-icon\", className]),\n});\n\nexport const EmptyStateIcon = styled(BrazeIcon).attrs(getAttrs)<BrazeIconProps>`\n  padding-top: ${getSpacing(\"md\")};\n`;\n\nEmptyStateIcon.displayName = \"EmptyStateIcon\";\n","export { EmptyStateIcon } from \"./EmptyStateIcon\";\n\nexport type { EmptyStateIconProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\nimport {\n  getFontFamily,\n  getFontSize,\n  getFontWeight,\n  getColor,\n} from \"@braze/beacon-styling\";\n\nimport { Box, BoxProps } from \"../Box\";\n\nimport { EmptyStateTextProps } from \"./types\";\n\nconst getAttrs = ({ className, ...props }: EmptyStateTextProps): BoxProps => ({\n  ...props,\n  className: classNames([\"bcl-empty-state-text\", className]),\n  boxPadding: {\n    top: \"sm\",\n  },\n});\n\nexport const EmptyStateText = styled(Box).attrs(getAttrs)<BoxProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  font-size: ${getFontSize(\"body\", \"md\")};\n  color: ${getColor(\"gray\", 800)};\n  max-width: 400px;\n  text-align: center;\n`;\n\nEmptyStateText.displayName = \"EmptyStateText\";\n","export { EmptyStateText } from \"./EmptyStateText\";\n\nexport type { EmptyStateTextProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"fieldlabel\"\n    }}>{`FieldLabel`}</h1>\n    <p>{`A `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` decorates an element (typically a form element)\nwith an associated label as well as optional helper and\nvalidation text.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Wrap your form element with `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` and make sure to\ngive `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` an `}<inlineCode parentName=\"p\">{`htmlFor`}</inlineCode>{` attribute that matches the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`\nof the target input element, as shown below:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h3>\n    <p><inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` should typically take a single input element as its child.\nThe child passed into the `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` should have a unique id defined.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--accessibility\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"helper-text\"\n    }}>{`Helper text`}</h3>\n    <p>{`Specify prop `}<inlineCode parentName=\"p\">{`helpText`}</inlineCode>{` to show helper text below the control:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--helper-text\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"success-text\"\n    }}>{`Success text`}</h3>\n    <p>{`Specify prop `}<inlineCode parentName=\"p\">{`status=\"success\"`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`statusText`}</inlineCode>{` to whatever you want\nto render text that signifies success around the form control's\nvalue. Setting `}<inlineCode parentName=\"p\">{`status`}</inlineCode>{` will replace any helper text you have specified.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--success-text\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"error-text\"\n    }}>{`Error text`}</h3>\n    <p>{`Specify prop `}<inlineCode parentName=\"p\">{`status=\"danger\"`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`statusText`}</inlineCode>{` to whatever you want\nto render text that signifies error around the form control's\nvalue. Setting `}<inlineCode parentName=\"p\">{`status`}</inlineCode>{` will replace any helper text you have specified.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--error-text\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"optional-fields\"\n    }}>{`Optional fields`}</h3>\n    <p>{`Adding prop `}<inlineCode parentName=\"p\">{`enforce=\"optional\"`}</inlineCode>{` will add \"(optional)\" text styling to the label.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--optional\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"required-fields\"\n    }}>{`Required fields`}</h3>\n    <p>{`Adding prop `}<inlineCode parentName=\"p\">{`enforce=\"required\"`}</inlineCode>{` will add \"(required)\" text styling to the label.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--required\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"stacked-fields\"\n    }}>{`Stacked fields`}</h3>\n    <p>{`Adjacent `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` elements will get stacked with proper spacing:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--stacked-fields\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"custom-label-formatting\"\n    }}>{`Custom label formatting`}</h3>\n    <p>{`Adding the `}<inlineCode parentName=\"p\">{`formatLabel`}</inlineCode>{` callback prop allows styling the internal label.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--formatlabel\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { FieldLabel } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"info-icon-and-popover\"\n    }}>{`Info Icon and Popover`}</h3>\n    <p>{`In some scenarios, more extensive explanatory text is needed that can fit into a single sentence. In this case, `}<inlineCode parentName=\"p\">{`helpText`}</inlineCode>{` is insufficient.\nInstead, use the `}<inlineCode parentName=\"p\">{`infoIconPopoverContent`}</inlineCode>{` property to specify longer content. This will prompt the `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` to render an info icon\nthat displays a popover when triggered.`}</p>\n    <p>{`If the content is simple text, a tooltip will be rendered. If, on the other hand, the content contains links or other rich text, a Popover\nwill be rendered.`}</p>\n    <p>{`By default, the info text will be triggered by hovering over the icon, or by focusing the icon. To change the behavior\nto only trigger on clicking or focusing, use the `}<inlineCode parentName=\"p\">{`infoIconTriggerVariant`}</inlineCode>{` property.`}</p>\n    <p>{`In some cases, there is one primary `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` in the set. To indicate this, use the `}<inlineCode parentName=\"p\">{`\"muted\"`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`infoIconVariant`}</inlineCode>{` property for the other\n`}<inlineCode parentName=\"p\">{`FieldLabels`}</inlineCode>{` in the form.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--info-icon-popover\" mdxType=\"Story\" />\n    </Canvas>\n    <p>{`In order to be keyboard-accessible, the underlying code relies upon being able to find the control associated with the label. There are 2 ways\nthat `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` can detect the underlying element:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`through the `}<inlineCode parentName=\"li\">{`htmlFor`}</inlineCode>{` prop, which references the underlying element's `}<inlineCode parentName=\"li\">{`id`}</inlineCode></li>\n      <li parentName=\"ol\">{`through an explicit `}<inlineCode parentName=\"li\">{`React.RefObject`}</inlineCode>{` created with `}<inlineCode parentName=\"li\">{`React.createRef`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`useRef`}</inlineCode>{` passed in the `}<inlineCode parentName=\"li\">{`controlRef`}</inlineCode>{` prop`}</li>\n    </ol>\n    <p>{`The first is preferable for all single elements, the second should be used for RadioButtons or groups of checkboxes. Note that without an `}<inlineCode parentName=\"p\">{`htmlFor`}</inlineCode>{`\nprop or `}<inlineCode parentName=\"p\">{`controlRef`}</inlineCode>{` prop, keyboard accessibility will break, as demonstrated by the third example below. Try using the `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` key to navigate forward\nthrough the form, and the combination of `}<inlineCode parentName=\"p\">{`Shift`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` to navigate backwards through the form in Canvas view.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-fieldlabel--info-icon-popover-with-ambiguous-children\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boxProps`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Box properties`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`properties to pass to the containing box element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`child to be passed into the component; must be a single node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`controlRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`For React-based help icon popover content, pass to the first control that is referenced by this `}<inlineCode parentName=\"td\">{`FieldLabel`}</inlineCode>{`. Prefer `}<inlineCode parentName=\"td\">{`htmlFor`}</inlineCode>{` over this prop.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`enforce`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`optional`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`required`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates whether the form is optional or required, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`formatLabel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(props?: FormatLabelProps) => React.ReactNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function that takes props and can be used to format the label`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`infoIconPopoverContent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`string`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`React.ReactNode`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`For a large amount of explanatory or help text, this option should be used`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`infoIconTriggerVariant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`\"hover\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`\"click\"`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"hover\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`how the popover should be triggered, by clicking or hovering`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`infoIconVariant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`\"muted\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`\"primary\"`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"primary\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The color of the info icon.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`helpText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`succinct help text to be displayed below the field when no error/success present`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`htmlFor`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM id of the `}<strong parentName=\"td\">{`target`}</strong>{` input element; is used to focus on the input when the label is clicked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM for the label element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`label to be displayed on top of the field`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`status`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`success`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the current status of the form, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`statusText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates what message should be displayed as part of the status, if any`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef } from \\\"react\\\";\\n\\nimport { Input } from \\\"../Input\\\";\\nimport { BodyText } from \\\"../BodyText\\\";\\nimport { RadioButton } from \\\"../RadioButton\\\";\\n\\nimport page from \\\"./FieldLabel.docs.mdx\\\";\\nimport {\\n  infoIconPopoverTextContent,\\n  infoIconPopoverReactContent,\\n} from \\\"./storybookHelpers\\\";\\n\\nimport { FieldLabel, FieldLabelProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Forms/FieldLabel\\\",\\n  component: FieldLabel,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nconst InvisibleButton = () => (\\n  <button style={{ color: \\\"transparent\\\" }}>invisible button</button>\\n);\\n\\nexport const BasicUse = ({\\n  tooltipDisplay,\\n  ...args\\n}: FieldLabelProps & {\\n  tooltipDisplay: \\\"text\\\" | \\\"react\\\" | undefined;\\n}): React.ReactElement => {\\n  const infoIconText =\\n    tooltipDisplay === \\\"text\\\" ? (\\n      \\\"Can be used across push, email, and in-app messages to send a rendered copy of the message.\\\"\\n    ) : tooltipDisplay === \\\"react\\\" ? (\\n      <BodyText size=\\\"sm\\\">\\n        <p>\\n          Create Content Test Groups{\\\" \\\"}\\n          <a\\n            href=\\\"http://example.com\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noreferrer noopener\\\"\\n          >\\n            here\\n          </a>\\n          . Groups must have Content Test property enabled in order to send test\\n          messages.\\n        </p>\\n\\n        <p>\\n          <a\\n            href=\\\"http://example.com\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noreferrer noopener\\\"\\n          >\\n            Learn more about Content Test Groups\\n          </a>\\n        </p>\\n      </BodyText>\\n    ) : null;\\n\\n  return (\\n    <div style={{ display: \\\"flex\\\", placeContent: \\\"center\\\", padding: 300 }}>\\n      <FieldLabel\\n        htmlFor=\\\"basic-use-text-field\\\"\\n        {...args}\\n        infoIconPopoverContent={infoIconText}\\n      >\\n        <Input id=\\\"basic-use-text-field\\\" />\\n      </FieldLabel>\\n    </div>\\n  );\\n};\\n\\nBasicUse.args = {\\n  label: \\\"Name\\\",\\n};\\n\\nBasicUse.parameters = {\\n  controls: { exclude: [\\\"infoIconText\\\"] },\\n};\\n\\nBasicUse.argTypes = {\\n  enforce: {\\n    options: [\\\"none\\\", \\\"optional\\\", \\\"required\\\"],\\n    mapping: {\\n      optional: \\\"optional\\\",\\n      required: \\\"required\\\",\\n      none: undefined,\\n    },\\n    control: {\\n      type: \\\"select\\\",\\n      labels: {\\n        optional: \\\"optional\\\",\\n        required: \\\"required\\\",\\n        none: \\\"none\\\",\\n      },\\n    },\\n  },\\n  status: {\\n    options: [\\\"none\\\", \\\"success\\\", \\\"danger\\\"],\\n    mapping: {\\n      success: \\\"success\\\",\\n      danger: \\\"danger\\\",\\n      none: undefined,\\n    },\\n    control: {\\n      type: \\\"select\\\",\\n      labels: {\\n        success: \\\"success\\\",\\n        danger: \\\"danger\\\",\\n        none: \\\"none\\\",\\n      },\\n    },\\n  },\\n  tooltipDisplay: {\\n    options: [\\\"text\\\", \\\"react\\\"],\\n    mapping: {\\n      text: \\\"text\\\",\\n      react: \\\"react\\\",\\n    },\\n    control: {\\n      type: \\\"select\\\",\\n      labels: {\\n        text: \\\"text content\\\",\\n        react: \\\"React content\\\",\\n      },\\n    },\\n  },\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const Accessibility = (): React.ReactElement => {\\n  return (\\n    <FieldLabel htmlFor=\\\"body-text-example\\\" label=\\\"Form Control\\\">\\n      <BodyText id=\\\"body-text-example\\\">\\n        {\\\"<\\\"}Your-component-here using id: &quot;hello world&quot; {\\\"/>\\\"}\\n      </BodyText>\\n    </FieldLabel>\\n  );\\n};\\n\\nAccessibility.storyName = \\\"accessibility\\\";\\n\\nexport const HelperText = (args: FieldLabelProps): React.ReactElement => {\\n  const [value, setValue] = React.useState(\\\"000000000000-0000-0000-00000000\\\");\\n\\n  const handleChange = (e) => {\\n    setValue(e.target.value);\\n  };\\n\\n  return (\\n    <FieldLabel {...args} htmlFor=\\\"help-text-example-text-field\\\">\\n      <Input\\n        id=\\\"help-text-example-text-field\\\"\\n        value={value}\\n        onChange={handleChange}\\n      />\\n    </FieldLabel>\\n  );\\n};\\n\\nHelperText.args = {\\n  label: \\\"GUID\\\",\\n  helpText: \\\"Remember, `GUID` does not rhyme with `squid`\\\",\\n};\\n\\nHelperText.storyName = \\\"helper text\\\";\\n\\nexport const SuccessText = (args: FieldLabelProps): React.ReactElement => {\\n  return (\\n    <FieldLabel\\n      {...args}\\n      helpText=\\\"this should not appear\\\"\\n      htmlFor=\\\"success-text-field-example\\\"\\n      status=\\\"success\\\"\\n    >\\n      <Input id=\\\"success-text-field-example\\\" value=\\\"yes, I am!\\\" />\\n    </FieldLabel>\\n  );\\n};\\n\\nSuccessText.args = {\\n  label: \\\"Are you doing a great job?\\\",\\n  statusText: \\\"You did it, great job!\\\",\\n};\\n\\nSuccessText.storyName = \\\"success text\\\";\\n\\nexport const ErrorText = (args: FieldLabelProps): React.ReactElement => {\\n  return (\\n    <FieldLabel {...args} helpText=\\\"this should not appear\\\" status=\\\"danger\\\">\\n      <Input\\n        id=\\\"error-text-field-example\\\"\\n        value=\\\"email address [at] domain dot com\\\"\\n        invalid\\n      />\\n    </FieldLabel>\\n  );\\n};\\n\\nErrorText.args = {\\n  label: \\\"Email\\\",\\n  statusText: \\\"Valid email addresses include the @ sign\\\",\\n};\\n\\nErrorText.storyName = \\\"error text\\\";\\n\\nexport const Optional = (): React.ReactElement => {\\n  return (\\n    <FieldLabel htmlFor=\\\"basic-use-text-field\\\" label=\\\"Name\\\" enforce=\\\"optional\\\">\\n      <Input id=\\\"basic-use-text-field\\\" />\\n    </FieldLabel>\\n  );\\n};\\n\\nOptional.storyName = \\\"optional\\\";\\n\\nexport const Required = (): React.ReactElement => {\\n  return (\\n    <FieldLabel htmlFor=\\\"basic-use-text-field\\\" label=\\\"Name\\\" enforce=\\\"required\\\">\\n      <Input id=\\\"basic-use-text-field\\\" />\\n    </FieldLabel>\\n  );\\n};\\n\\nRequired.storyName = \\\"required\\\";\\n\\nexport const StackedFields = (args: FieldLabelProps): React.ReactElement => {\\n  return (\\n    <div>\\n      <FieldLabel {...args} htmlFor=\\\"stacked-text-field-1\\\" label=\\\"Name\\\">\\n        <Input id=\\\"stacked-text-field-1\\\" invalid />\\n      </FieldLabel>\\n      <FieldLabel htmlFor=\\\"stacked-text-field-2\\\" label=\\\"Hat size\\\">\\n        <Input id=\\\"stacked-text-field-2\\\" value=\\\"59 1/2\\\" />\\n      </FieldLabel>\\n      <FieldLabel\\n        label=\\\"Coordinates\\\"\\n        helpText=\\\"Degrees, minutes, seconds (DMS)\\\"\\n        htmlFor=\\\"stacked-text-field-3\\\"\\n      >\\n        <Input id=\\\"stacked-text-field-3\\\" value={`40°45'10.5\\\"N 73°59'43.0\\\"W`} />\\n      </FieldLabel>\\n    </div>\\n  );\\n};\\n\\nStackedFields.args = {\\n  status: \\\"danger\\\",\\n  statusText: \\\"You must include your name\\\",\\n};\\n\\nStackedFields.storyName = \\\"stacked fields\\\";\\n\\nexport const Formatlabel = (): React.ReactElement => {\\n  return (\\n    <FieldLabel\\n      htmlFor=\\\"basic-use-text-field\\\"\\n      formatLabel={({ label }) => {\\n        return (\\n          <>\\n            <i>{label}</i>{\\\" \\\"}\\n            <span style={{ color: \\\"red\\\" }}>specially formatted!</span>\\n          </>\\n        );\\n      }}\\n      label=\\\"Name\\\"\\n    >\\n      <Input id=\\\"basic-use-text-field\\\" />\\n    </FieldLabel>\\n  );\\n};\\n\\nFormatlabel.storyName = \\\"formatLabel\\\";\\n\\nexport const InfoIconPopover = (): React.ReactElement => {\\n  return (\\n    <div\\n      style={{\\n        display: \\\"flex\\\",\\n        placeContent: \\\"center\\\",\\n        padding: 300,\\n        flexDirection: \\\"column\\\",\\n      }}\\n    >\\n      <FieldLabel\\n        label=\\\"text-based info popover\\\"\\n        htmlFor=\\\"info-icon-text-text-field\\\"\\n        infoIconPopoverContent={infoIconPopoverTextContent}\\n      >\\n        <Input id=\\\"info-icon-text-text-field\\\" placeholder=\\\"simple help text\\\" />\\n      </FieldLabel>\\n      <FieldLabel\\n        infoIconVariant=\\\"muted\\\"\\n        label=\\\"react-based info popover (click to trigger)\\\"\\n        htmlFor=\\\"info-icon-react-text-field\\\"\\n        infoIconPopoverContent={infoIconPopoverReactContent}\\n        infoIconTriggerVariant=\\\"click\\\"\\n      >\\n        <Input\\n          id=\\\"info-icon-react-text-field\\\"\\n          placeholder=\\\"react field label help text\\\"\\n        />\\n      </FieldLabel>\\n    </div>\\n  );\\n};\\n\\nInfoIconPopover.storyName = \\\"info icon popover\\\";\\n\\nexport const InfoIconPopoverWithAmbiguousChildren = (): React.ReactElement => {\\n  const ref = useRef<HTMLInputElement>(null);\\n\\n  return (\\n    <div\\n      style={{\\n        display: \\\"flex\\\",\\n        placeContent: \\\"center\\\",\\n        padding: 200,\\n        flexDirection: \\\"column\\\",\\n      }}\\n    >\\n      <InvisibleButton />\\n      <FieldLabel\\n        label=\\\"using ref\\\"\\n        infoIconPopoverContent={infoIconPopoverReactContent}\\n        controlRef={ref}\\n      >\\n        <span>\\n          This has ambiguous children and must have a ref to the control passed\\n          in\\n        </span>\\n        <RadioButton name=\\\"first\\\" value=\\\"1\\\" ref={ref}>\\n          Item 1\\n        </RadioButton>\\n        <RadioButton name=\\\"first\\\" value=\\\"2\\\">\\n          Item 2\\n        </RadioButton>\\n        <RadioButton name=\\\"first\\\" value=\\\"3\\\">\\n          Item 2\\n        </RadioButton>\\n      </FieldLabel>\\n      <FieldLabel\\n        label=\\\"using htmlFor\\\"\\n        htmlFor=\\\"info-icon-react-text-field-2\\\"\\n        infoIconPopoverContent={infoIconPopoverReactContent}\\n      >\\n        <span>This has ambiguous children and no ref but can use htmlFor</span>\\n        <Input id=\\\"info-icon-react-text-field-2\\\" placeholder=\\\"using htmlFor\\\" />\\n      </FieldLabel>\\n      <FieldLabel\\n        label=\\\"broken example\\\"\\n        infoIconPopoverContent={infoIconPopoverReactContent}\\n      >\\n        <span>\\n          This has ambiguous children and no ref and no htmlFor - keyboard\\n          accessibility is broken!\\n        </span>\\n        <Input placeholder=\\\"broken!\\\" />\\n      </FieldLabel>\\n    </div>\\n  );\\n};\\n\\nInfoIconPopoverWithAmbiguousChildren.storyName =\\n  \\\"info icon popover with ambiguous children\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":28},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":24,\"line\":28},\"endBody\":{\"col\":1,\"line\":75}},\"Accessibility\":{\"startLoc\":{\"col\":29,\"line\":136},\"endLoc\":{\"col\":1,\"line\":144},\"startBody\":{\"col\":29,\"line\":136},\"endBody\":{\"col\":1,\"line\":144}},\"HelperText\":{\"startLoc\":{\"col\":26,\"line\":148},\"endLoc\":{\"col\":1,\"line\":164},\"startBody\":{\"col\":26,\"line\":148},\"endBody\":{\"col\":1,\"line\":164}},\"SuccessText\":{\"startLoc\":{\"col\":27,\"line\":173},\"endLoc\":{\"col\":1,\"line\":184},\"startBody\":{\"col\":27,\"line\":173},\"endBody\":{\"col\":1,\"line\":184}},\"ErrorText\":{\"startLoc\":{\"col\":25,\"line\":193},\"endLoc\":{\"col\":1,\"line\":203},\"startBody\":{\"col\":25,\"line\":193},\"endBody\":{\"col\":1,\"line\":203}},\"Optional\":{\"startLoc\":{\"col\":24,\"line\":212},\"endLoc\":{\"col\":1,\"line\":218},\"startBody\":{\"col\":24,\"line\":212},\"endBody\":{\"col\":1,\"line\":218}},\"Required\":{\"startLoc\":{\"col\":24,\"line\":222},\"endLoc\":{\"col\":1,\"line\":228},\"startBody\":{\"col\":24,\"line\":222},\"endBody\":{\"col\":1,\"line\":228}},\"StackedFields\":{\"startLoc\":{\"col\":29,\"line\":232},\"endLoc\":{\"col\":1,\"line\":250},\"startBody\":{\"col\":29,\"line\":232},\"endBody\":{\"col\":1,\"line\":250}},\"Formatlabel\":{\"startLoc\":{\"col\":27,\"line\":259},\"endLoc\":{\"col\":1,\"line\":276},\"startBody\":{\"col\":27,\"line\":259},\"endBody\":{\"col\":1,\"line\":276}},\"InfoIconPopover\":{\"startLoc\":{\"col\":31,\"line\":280},\"endLoc\":{\"col\":1,\"line\":311},\"startBody\":{\"col\":31,\"line\":280},\"endBody\":{\"col\":1,\"line\":311}},\"InfoIconPopoverWithAmbiguousChildren\":{\"startLoc\":{\"col\":52,\"line\":315},\"endLoc\":{\"col\":1,\"line\":367},\"startBody\":{\"col\":52,\"line\":315},\"endBody\":{\"col\":1,\"line\":367}}};\n    \nimport React, { useRef } from \"react\";\n\nimport { Input } from \"../Input\";\nimport { BodyText } from \"../BodyText\";\nimport { RadioButton } from \"../RadioButton\";\n\nimport page from \"./FieldLabel.docs.mdx\";\nimport {\n  infoIconPopoverTextContent,\n  infoIconPopoverReactContent,\n} from \"./storybookHelpers\";\n\nimport { FieldLabel, FieldLabelProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Forms/FieldLabel\",\n  component: FieldLabel,\n  parameters: {\n    docs: { page },\n  },\n};\n\nconst InvisibleButton = () => (\n  <button style={{ color: \"transparent\" }}>invisible button</button>\n);\n\nexport const BasicUse = ({\n  tooltipDisplay,\n  ...args\n}: FieldLabelProps & {\n  tooltipDisplay: \"text\" | \"react\" | undefined;\n}): React.ReactElement => {\n  const infoIconText =\n    tooltipDisplay === \"text\" ? (\n      \"Can be used across push, email, and in-app messages to send a rendered copy of the message.\"\n    ) : tooltipDisplay === \"react\" ? (\n      <BodyText size=\"sm\">\n        <p>\n          Create Content Test Groups{\" \"}\n          <a\n            href=\"http://example.com\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            here\n          </a>\n          . Groups must have Content Test property enabled in order to send test\n          messages.\n        </p>\n\n        <p>\n          <a\n            href=\"http://example.com\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            Learn more about Content Test Groups\n          </a>\n        </p>\n      </BodyText>\n    ) : null;\n\n  return (\n    <div style={{ display: \"flex\", placeContent: \"center\", padding: 300 }}>\n      <FieldLabel\n        htmlFor=\"basic-use-text-field\"\n        {...args}\n        infoIconPopoverContent={infoIconText}\n      >\n        <Input id=\"basic-use-text-field\" />\n      </FieldLabel>\n    </div>\n  );\n};;\n\nBasicUse.args = {\n  label: \"Name\",\n};\n\nBasicUse.parameters = {\n  controls: { exclude: [\"infoIconText\"] },\n};\n\nBasicUse.argTypes = {\n  enforce: {\n    options: [\"none\", \"optional\", \"required\"],\n    mapping: {\n      optional: \"optional\",\n      required: \"required\",\n      none: undefined,\n    },\n    control: {\n      type: \"select\",\n      labels: {\n        optional: \"optional\",\n        required: \"required\",\n        none: \"none\",\n      },\n    },\n  },\n  status: {\n    options: [\"none\", \"success\", \"danger\"],\n    mapping: {\n      success: \"success\",\n      danger: \"danger\",\n      none: undefined,\n    },\n    control: {\n      type: \"select\",\n      labels: {\n        success: \"success\",\n        danger: \"danger\",\n        none: \"none\",\n      },\n    },\n  },\n  tooltipDisplay: {\n    options: [\"text\", \"react\"],\n    mapping: {\n      text: \"text\",\n      react: \"react\",\n    },\n    control: {\n      type: \"select\",\n      labels: {\n        text: \"text content\",\n        react: \"React content\",\n      },\n    },\n  },\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const Accessibility = (): React.ReactElement => {\n  return (\n    <FieldLabel htmlFor=\"body-text-example\" label=\"Form Control\">\n      <BodyText id=\"body-text-example\">\n        {\"<\"}Your-component-here using id: &quot;hello world&quot; {\"/>\"}\n      </BodyText>\n    </FieldLabel>\n  );\n};;\n\nAccessibility.storyName = \"accessibility\";\n\nexport const HelperText = (args: FieldLabelProps): React.ReactElement => {\n  const [value, setValue] = React.useState(\"000000000000-0000-0000-00000000\");\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <FieldLabel {...args} htmlFor=\"help-text-example-text-field\">\n      <Input\n        id=\"help-text-example-text-field\"\n        value={value}\n        onChange={handleChange}\n      />\n    </FieldLabel>\n  );\n};;\n\nHelperText.args = {\n  label: \"GUID\",\n  helpText: \"Remember, `GUID` does not rhyme with `squid`\",\n};\n\nHelperText.storyName = \"helper text\";\n\nexport const SuccessText = (args: FieldLabelProps): React.ReactElement => {\n  return (\n    <FieldLabel\n      {...args}\n      helpText=\"this should not appear\"\n      htmlFor=\"success-text-field-example\"\n      status=\"success\"\n    >\n      <Input id=\"success-text-field-example\" value=\"yes, I am!\" />\n    </FieldLabel>\n  );\n};;\n\nSuccessText.args = {\n  label: \"Are you doing a great job?\",\n  statusText: \"You did it, great job!\",\n};\n\nSuccessText.storyName = \"success text\";\n\nexport const ErrorText = (args: FieldLabelProps): React.ReactElement => {\n  return (\n    <FieldLabel {...args} helpText=\"this should not appear\" status=\"danger\">\n      <Input\n        id=\"error-text-field-example\"\n        value=\"email address [at] domain dot com\"\n        invalid\n      />\n    </FieldLabel>\n  );\n};;\n\nErrorText.args = {\n  label: \"Email\",\n  statusText: \"Valid email addresses include the @ sign\",\n};\n\nErrorText.storyName = \"error text\";\n\nexport const Optional = (): React.ReactElement => {\n  return (\n    <FieldLabel htmlFor=\"basic-use-text-field\" label=\"Name\" enforce=\"optional\">\n      <Input id=\"basic-use-text-field\" />\n    </FieldLabel>\n  );\n};;\n\nOptional.storyName = \"optional\";\n\nexport const Required = (): React.ReactElement => {\n  return (\n    <FieldLabel htmlFor=\"basic-use-text-field\" label=\"Name\" enforce=\"required\">\n      <Input id=\"basic-use-text-field\" />\n    </FieldLabel>\n  );\n};;\n\nRequired.storyName = \"required\";\n\nexport const StackedFields = (args: FieldLabelProps): React.ReactElement => {\n  return (\n    <div>\n      <FieldLabel {...args} htmlFor=\"stacked-text-field-1\" label=\"Name\">\n        <Input id=\"stacked-text-field-1\" invalid />\n      </FieldLabel>\n      <FieldLabel htmlFor=\"stacked-text-field-2\" label=\"Hat size\">\n        <Input id=\"stacked-text-field-2\" value=\"59 1/2\" />\n      </FieldLabel>\n      <FieldLabel\n        label=\"Coordinates\"\n        helpText=\"Degrees, minutes, seconds (DMS)\"\n        htmlFor=\"stacked-text-field-3\"\n      >\n        <Input id=\"stacked-text-field-3\" value={`40°45'10.5\"N 73°59'43.0\"W`} />\n      </FieldLabel>\n    </div>\n  );\n};;\n\nStackedFields.args = {\n  status: \"danger\",\n  statusText: \"You must include your name\",\n};\n\nStackedFields.storyName = \"stacked fields\";\n\nexport const Formatlabel = (): React.ReactElement => {\n  return (\n    <FieldLabel\n      htmlFor=\"basic-use-text-field\"\n      formatLabel={({ label }) => {\n        return (\n          <>\n            <i>{label}</i>{\" \"}\n            <span style={{ color: \"red\" }}>specially formatted!</span>\n          </>\n        );\n      }}\n      label=\"Name\"\n    >\n      <Input id=\"basic-use-text-field\" />\n    </FieldLabel>\n  );\n};;\n\nFormatlabel.storyName = \"formatLabel\";\n\nexport const InfoIconPopover = (): React.ReactElement => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        placeContent: \"center\",\n        padding: 300,\n        flexDirection: \"column\",\n      }}\n    >\n      <FieldLabel\n        label=\"text-based info popover\"\n        htmlFor=\"info-icon-text-text-field\"\n        infoIconPopoverContent={infoIconPopoverTextContent}\n      >\n        <Input id=\"info-icon-text-text-field\" placeholder=\"simple help text\" />\n      </FieldLabel>\n      <FieldLabel\n        infoIconVariant=\"muted\"\n        label=\"react-based info popover (click to trigger)\"\n        htmlFor=\"info-icon-react-text-field\"\n        infoIconPopoverContent={infoIconPopoverReactContent}\n        infoIconTriggerVariant=\"click\"\n      >\n        <Input\n          id=\"info-icon-react-text-field\"\n          placeholder=\"react field label help text\"\n        />\n      </FieldLabel>\n    </div>\n  );\n};;\n\nInfoIconPopover.storyName = \"info icon popover\";\n\nexport const InfoIconPopoverWithAmbiguousChildren = (): React.ReactElement => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        placeContent: \"center\",\n        padding: 200,\n        flexDirection: \"column\",\n      }}\n    >\n      <InvisibleButton />\n      <FieldLabel\n        label=\"using ref\"\n        infoIconPopoverContent={infoIconPopoverReactContent}\n        controlRef={ref}\n      >\n        <span>\n          This has ambiguous children and must have a ref to the control passed\n          in\n        </span>\n        <RadioButton name=\"first\" value=\"1\" ref={ref}>\n          Item 1\n        </RadioButton>\n        <RadioButton name=\"first\" value=\"2\">\n          Item 2\n        </RadioButton>\n        <RadioButton name=\"first\" value=\"3\">\n          Item 2\n        </RadioButton>\n      </FieldLabel>\n      <FieldLabel\n        label=\"using htmlFor\"\n        htmlFor=\"info-icon-react-text-field-2\"\n        infoIconPopoverContent={infoIconPopoverReactContent}\n      >\n        <span>This has ambiguous children and no ref but can use htmlFor</span>\n        <Input id=\"info-icon-react-text-field-2\" placeholder=\"using htmlFor\" />\n      </FieldLabel>\n      <FieldLabel\n        label=\"broken example\"\n        infoIconPopoverContent={infoIconPopoverReactContent}\n      >\n        <span>\n          This has ambiguous children and no ref and no htmlFor - keyboard\n          accessibility is broken!\n        </span>\n        <Input placeholder=\"broken!\" />\n      </FieldLabel>\n    </div>\n  );\n};\n\nInfoIconPopoverWithAmbiguousChildren.storyName =\n  \"info icon popover with ambiguous children\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"({\\n  tooltipDisplay,\\n  ...args\\n}: FieldLabelProps & {\\n  tooltipDisplay: \\\"text\\\" | \\\"react\\\" | undefined;\\n}): React.ReactElement => {\\n  const infoIconText =\\n    tooltipDisplay === \\\"text\\\" ? (\\n      \\\"Can be used across push, email, and in-app messages to send a rendered copy of the message.\\\"\\n    ) : tooltipDisplay === \\\"react\\\" ? (\\n      <BodyText size=\\\"sm\\\">\\n        <p>\\n          Create Content Test Groups{\\\" \\\"}\\n          <a\\n            href=\\\"http://example.com\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noreferrer noopener\\\"\\n          >\\n            here\\n          </a>\\n          . Groups must have Content Test property enabled in order to send test\\n          messages.\\n        </p>\\n\\n        <p>\\n          <a\\n            href=\\\"http://example.com\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noreferrer noopener\\\"\\n          >\\n            Learn more about Content Test Groups\\n          </a>\\n        </p>\\n      </BodyText>\\n    ) : null;\\n\\n  return (\\n    <div style={{ display: \\\"flex\\\", placeContent: \\\"center\\\", padding: 300 }}>\\n      <FieldLabel\\n        htmlFor=\\\"basic-use-text-field\\\"\\n        {...args}\\n        infoIconPopoverContent={infoIconText}\\n      >\\n        <Input id=\\\"basic-use-text-field\\\" />\\n      </FieldLabel>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nAccessibility.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <FieldLabel htmlFor=\\\"body-text-example\\\" label=\\\"Form Control\\\">\\n      <BodyText id=\\\"body-text-example\\\">\\n        {\\\"<\\\"}Your-component-here using id: &quot;hello world&quot; {\\\"/>\\\"}\\n      </BodyText>\\n    </FieldLabel>\\n  );\\n}\" }, ...Accessibility.parameters };\nHelperText.parameters = { storySource: { source: \"(args: FieldLabelProps): React.ReactElement => {\\n  const [value, setValue] = React.useState(\\\"000000000000-0000-0000-00000000\\\");\\n\\n  const handleChange = (e) => {\\n    setValue(e.target.value);\\n  };\\n\\n  return (\\n    <FieldLabel {...args} htmlFor=\\\"help-text-example-text-field\\\">\\n      <Input\\n        id=\\\"help-text-example-text-field\\\"\\n        value={value}\\n        onChange={handleChange}\\n      />\\n    </FieldLabel>\\n  );\\n}\" }, ...HelperText.parameters };\nSuccessText.parameters = { storySource: { source: \"(args: FieldLabelProps): React.ReactElement => {\\n  return (\\n    <FieldLabel\\n      {...args}\\n      helpText=\\\"this should not appear\\\"\\n      htmlFor=\\\"success-text-field-example\\\"\\n      status=\\\"success\\\"\\n    >\\n      <Input id=\\\"success-text-field-example\\\" value=\\\"yes, I am!\\\" />\\n    </FieldLabel>\\n  );\\n}\" }, ...SuccessText.parameters };\nErrorText.parameters = { storySource: { source: \"(args: FieldLabelProps): React.ReactElement => {\\n  return (\\n    <FieldLabel {...args} helpText=\\\"this should not appear\\\" status=\\\"danger\\\">\\n      <Input\\n        id=\\\"error-text-field-example\\\"\\n        value=\\\"email address [at] domain dot com\\\"\\n        invalid\\n      />\\n    </FieldLabel>\\n  );\\n}\" }, ...ErrorText.parameters };\nOptional.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <FieldLabel htmlFor=\\\"basic-use-text-field\\\" label=\\\"Name\\\" enforce=\\\"optional\\\">\\n      <Input id=\\\"basic-use-text-field\\\" />\\n    </FieldLabel>\\n  );\\n}\" }, ...Optional.parameters };\nRequired.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <FieldLabel htmlFor=\\\"basic-use-text-field\\\" label=\\\"Name\\\" enforce=\\\"required\\\">\\n      <Input id=\\\"basic-use-text-field\\\" />\\n    </FieldLabel>\\n  );\\n}\" }, ...Required.parameters };\nStackedFields.parameters = { storySource: { source: \"(args: FieldLabelProps): React.ReactElement => {\\n  return (\\n    <div>\\n      <FieldLabel {...args} htmlFor=\\\"stacked-text-field-1\\\" label=\\\"Name\\\">\\n        <Input id=\\\"stacked-text-field-1\\\" invalid />\\n      </FieldLabel>\\n      <FieldLabel htmlFor=\\\"stacked-text-field-2\\\" label=\\\"Hat size\\\">\\n        <Input id=\\\"stacked-text-field-2\\\" value=\\\"59 1/2\\\" />\\n      </FieldLabel>\\n      <FieldLabel\\n        label=\\\"Coordinates\\\"\\n        helpText=\\\"Degrees, minutes, seconds (DMS)\\\"\\n        htmlFor=\\\"stacked-text-field-3\\\"\\n      >\\n        <Input id=\\\"stacked-text-field-3\\\" value={`40°45'10.5\\\"N 73°59'43.0\\\"W`} />\\n      </FieldLabel>\\n    </div>\\n  );\\n}\" }, ...StackedFields.parameters };\nFormatlabel.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <FieldLabel\\n      htmlFor=\\\"basic-use-text-field\\\"\\n      formatLabel={({ label }) => {\\n        return (\\n          <>\\n            <i>{label}</i>{\\\" \\\"}\\n            <span style={{ color: \\\"red\\\" }}>specially formatted!</span>\\n          </>\\n        );\\n      }}\\n      label=\\\"Name\\\"\\n    >\\n      <Input id=\\\"basic-use-text-field\\\" />\\n    </FieldLabel>\\n  );\\n}\" }, ...Formatlabel.parameters };\nInfoIconPopover.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <div\\n      style={{\\n        display: \\\"flex\\\",\\n        placeContent: \\\"center\\\",\\n        padding: 300,\\n        flexDirection: \\\"column\\\",\\n      }}\\n    >\\n      <FieldLabel\\n        label=\\\"text-based info popover\\\"\\n        htmlFor=\\\"info-icon-text-text-field\\\"\\n        infoIconPopoverContent={infoIconPopoverTextContent}\\n      >\\n        <Input id=\\\"info-icon-text-text-field\\\" placeholder=\\\"simple help text\\\" />\\n      </FieldLabel>\\n      <FieldLabel\\n        infoIconVariant=\\\"muted\\\"\\n        label=\\\"react-based info popover (click to trigger)\\\"\\n        htmlFor=\\\"info-icon-react-text-field\\\"\\n        infoIconPopoverContent={infoIconPopoverReactContent}\\n        infoIconTriggerVariant=\\\"click\\\"\\n      >\\n        <Input\\n          id=\\\"info-icon-react-text-field\\\"\\n          placeholder=\\\"react field label help text\\\"\\n        />\\n      </FieldLabel>\\n    </div>\\n  );\\n}\" }, ...InfoIconPopover.parameters };\nInfoIconPopoverWithAmbiguousChildren.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const ref = useRef<HTMLInputElement>(null);\\n\\n  return (\\n    <div\\n      style={{\\n        display: \\\"flex\\\",\\n        placeContent: \\\"center\\\",\\n        padding: 200,\\n        flexDirection: \\\"column\\\",\\n      }}\\n    >\\n      <InvisibleButton />\\n      <FieldLabel\\n        label=\\\"using ref\\\"\\n        infoIconPopoverContent={infoIconPopoverReactContent}\\n        controlRef={ref}\\n      >\\n        <span>\\n          This has ambiguous children and must have a ref to the control passed\\n          in\\n        </span>\\n        <RadioButton name=\\\"first\\\" value=\\\"1\\\" ref={ref}>\\n          Item 1\\n        </RadioButton>\\n        <RadioButton name=\\\"first\\\" value=\\\"2\\\">\\n          Item 2\\n        </RadioButton>\\n        <RadioButton name=\\\"first\\\" value=\\\"3\\\">\\n          Item 2\\n        </RadioButton>\\n      </FieldLabel>\\n      <FieldLabel\\n        label=\\\"using htmlFor\\\"\\n        htmlFor=\\\"info-icon-react-text-field-2\\\"\\n        infoIconPopoverContent={infoIconPopoverReactContent}\\n      >\\n        <span>This has ambiguous children and no ref but can use htmlFor</span>\\n        <Input id=\\\"info-icon-react-text-field-2\\\" placeholder=\\\"using htmlFor\\\" />\\n      </FieldLabel>\\n      <FieldLabel\\n        label=\\\"broken example\\\"\\n        infoIconPopoverContent={infoIconPopoverReactContent}\\n      >\\n        <span>\\n          This has ambiguous children and no ref and no htmlFor - keyboard\\n          accessibility is broken!\\n        </span>\\n        <Input placeholder=\\\"broken!\\\" />\\n      </FieldLabel>\\n    </div>\\n  );\\n}\" }, ...InfoIconPopoverWithAmbiguousChildren.parameters };","import React, { useRef, useEffect } from \"react\";\nimport classNames from \"classnames\";\n\nimport { Flex } from \"../Flex\";\nimport { HelpText } from \"../HelpText\";\nimport { StatusText } from \"../StatusText\";\n\nimport { FieldLabelInfoIconAndPopover } from \"./FieldLabelInfoIconAndPopover\";\nimport { StyledFieldLabel, CustomBox } from \"./StyledFieldLabel\";\nimport { FieldLabelProps } from \"./types\";\nimport { FieldLabelEnforceText } from \"./FieldLabelEnforceText\";\n\nexport const FieldLabel = ({\n  children,\n  className,\n  enforce,\n  formatLabel,\n  helpText,\n  label,\n  status,\n  statusText,\n  boxProps,\n  infoIconVariant = \"primary\",\n  infoIconPopoverContent,\n  infoIconTriggerVariant = \"hover\",\n  controlRef,\n  ...props\n}: FieldLabelProps): React.ReactElement => {\n  const controlRefIfNoRef: React.MutableRefObject<HTMLElement | null> =\n    useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const el = document.getElementById(props.htmlFor || \"\");\n\n    if (el) {\n      controlRefIfNoRef.current = el;\n    }\n  }, [props.htmlFor]);\n\n  return (\n    <CustomBox\n      boxMargin={{ bottom: \"lg\" }}\n      {...boxProps}\n      className={classNames([\"bcl-field-label-container\", boxProps?.className])}\n    >\n      {label && (\n        <StyledFieldLabel\n          {...props}\n          className={classNames([\n            \"bcl-FieldLabel\",\n            \"bcl-field-label\",\n            className,\n          ])}\n        >\n          {formatLabel ? formatLabel({ label }) : label}\n          <FieldLabelEnforceText enforce={enforce} />\n          <FieldLabelInfoIconAndPopover\n            helpIconPopoverContent={infoIconPopoverContent}\n            infoIconVariant={infoIconVariant}\n            infoIconTriggerVariant={infoIconTriggerVariant}\n            controlRef={controlRef || controlRefIfNoRef}\n          />\n        </StyledFieldLabel>\n      )}\n      <Flex direction=\"column\">\n        {children}\n        {!status && helpText && <HelpText>{helpText}</HelpText>}\n        {status && statusText && (\n          <StatusText status={status}>{statusText}</StatusText>\n        )}\n      </Flex>\n    </CustomBox>\n  );\n};\n","import React from \"react\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\n\nimport { EnforceOptionalOrRequired } from \"./StyledFieldLabel\";\nimport { FieldLabelProps } from \"./types\";\n\nexport const FieldLabelEnforceText = ({\n  enforce,\n}: Pick<FieldLabelProps, \"enforce\">): React.ReactElement | null => {\n  const { t } = useI18nNamespace(\"beacon-field-label\");\n\n  if (enforce === \"optional\") {\n    return (\n      <EnforceOptionalOrRequired data-testid=\"optional-field\">\n        {\" \"}\n        {t(\"optional-field-notice\", \"(Optional)\")}\n      </EnforceOptionalOrRequired>\n    );\n  }\n\n  if (enforce === \"required\") {\n    return (\n      <EnforceOptionalOrRequired data-testid=\"required-field\">\n        {\" \"}\n        {t(\"required-field-notice\", \"(Required)\")}\n      </EnforceOptionalOrRequired>\n    );\n  }\n\n  return null;\n};\n","import React, { useRef } from \"react\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\n\nimport { Popover, usePopover } from \"../Popover\";\nimport { AllowedTriggers, AllowedUnTriggers } from \"../Popper\";\n\nimport { FieldLabelInfoIconAndPopoverProps as FieldLabelInfoIconAndPopoverProps } from \"./types\";\nimport { FieldLabelInfoIconButton } from \"./FieldLabelInfoIconButton\";\nimport { useFieldLabelPopoverKeyboardAccessibilityEvents } from \"./hooks/useFieldLabelPopoverKeyboardAccessibilityEvents\";\n\nconst hoverTriggers: AllowedTriggers[] = [\"mouseenter\", \"focus\"];\nconst hoverUntriggers: AllowedUnTriggers[] = [\"mouseleave\", \"blur\"];\nconst clickTriggers: AllowedTriggers[] = [\"click\", \"focus\"];\nconst clickUntriggers: AllowedUnTriggers[] = [\"click\", \"blur\"];\n\nexport const FieldLabelInfoIconAndPopover = ({\n  helpIconPopoverContent,\n  infoIconTriggerVariant: helpIconTriggerVariant,\n  infoIconVariant: helpIconVariant,\n  controlRef,\n}: FieldLabelInfoIconAndPopoverProps): React.ReactElement | null => {\n  const { t } = useI18nNamespace(\"beacon-field-label\");\n  const popperRef = useRef<HTMLDivElement>(null);\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n  const { isOpen } = popoverState;\n\n  // handle tabbing in and out of the popover so the natural tab flow works as desired\n  // this is only relevant to popover-based help icon with interactive content inside the popover.\n  useFieldLabelPopoverKeyboardAccessibilityEvents(\n    isOpen,\n    controlRef,\n    popperRef,\n    targetRef\n  );\n\n  if (!helpIconPopoverContent) {\n    return null;\n  }\n\n  return (\n    <>\n      <FieldLabelInfoIconButton\n        variant={helpIconVariant}\n        ref={targetRef}\n        aria-haspopup=\"dialog\"\n        aria-expanded={popoverState.isOpen}\n        aria-label={\n          popoverState.isOpen\n            ? t(\n                \"tab-to-enter-popover-close\",\n                \"Help text available. Tab to view help text, click to close popover\"\n              )\n            : t(\n                \"tab-to-enter-popover-open\",\n                \"Help text available. Tab to view help text, click to open popover\"\n              )\n        }\n      />\n      <Popover\n        {...popoverState}\n        isCloseEnabled={helpIconTriggerVariant === \"click\"}\n        targetRef={targetRef}\n        ref={popperRef}\n        interactive={typeof helpIconPopoverContent !== \"string\"}\n        defaultPlacement=\"top\"\n        placement=\"auto\"\n        triggers={\n          helpIconTriggerVariant === \"hover\" ? hoverTriggers : clickTriggers\n        }\n        untriggers={\n          helpIconTriggerVariant === \"hover\" ? hoverUntriggers : clickUntriggers\n        }\n      >\n        {helpIconPopoverContent}\n      </Popover>\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { Icon } from \"../Icon\";\n\nimport { StyledFieldLabelInfoIconButton } from \"./StyledFieldLabelInfoIconButton\";\nimport { StyledFieldLabelInfoIconButtonProps } from \"./types\";\n\nexport const FieldLabelInfoIconButton = React.forwardRef(\n  (\n    props: StyledFieldLabelInfoIconButtonProps,\n    ref: React.RefObject<HTMLButtonElement>\n  ): React.ReactElement => {\n    return (\n      <StyledFieldLabelInfoIconButton\n        {...props}\n        type=\"button\"\n        ref={ref}\n        style={{ zIndex: 1 }}\n        className=\"bcl-field-label-info-icon-button\"\n      >\n        <Icon name=\"info-circle\" />\n      </StyledFieldLabelInfoIconButton>\n    );\n  }\n);\n\nFieldLabelInfoIconButton.displayName = \"FieldLabelInfoIconButton\";\n","import styled from \"styled-components\";\nimport { getColor, getSpacing, getFontSize } from \"@braze/beacon-styling\";\n\nimport { Box, BoxProps } from \"../Box\";\nimport { StyledFlex } from \"../Flex\";\nimport { Label } from \"../Label\";\nimport { StyledHelpText } from \"../HelpText\";\n\nimport { StyledFieldLabelProps } from \"./types\";\n\nexport const CustomBox = styled(Box)<BoxProps>`\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\nexport const EnforceOptionalOrRequired = styled.span`\n  height: ${getFontSize(\"body\", \"sm\")};\n  color: ${getColor(\"gray\", 600)};\n  font-weight: normal;\n`;\n\nexport const StyledFieldLabel = styled(Label)<StyledFieldLabelProps>`\n  display: block;\n  margin-top: ${getSpacing(\"sm\")};\n  margin-bottom: 10px;\n  height: ${getFontSize(\"body\", \"sm\")};\n  white-space: nowrap;\n\n  & + ${StyledFlex} > ${StyledHelpText} {\n    margin-top: 0.25rem;\n  }\n`;\n","import { getIntentColor, getColor, getSpacing } from \"@braze/beacon-styling\";\nimport styled from \"styled-components\";\n\nimport { StyledFieldLabelInfoIconButtonProps } from \"./types\";\n\nexport const StyledFieldLabelInfoIconButton = styled.button<StyledFieldLabelInfoIconButtonProps>`\n  margin-left: ${getSpacing(\"xs\")};\n  font-size: 0.8em;\n  cursor: pointer;\n  color: ${({ variant }: StyledFieldLabelInfoIconButtonProps) =>\n    variant === \"muted\"\n      ? getColor(\"gray\", 600)\n      : getIntentColor(\"primary\", 500)};\n`;\n","import { useEffect, useRef } from \"react\";\n\nimport { extractInteractiveChildren } from \"../../Popper\";\n\n/**\n *\n * @param isOpen\n * @param controlRef\n * @param popperRef\n * @param targetRef\n */\nexport const useFieldLabelPopoverKeyboardAccessibilityEvents = (\n  isOpen: boolean,\n  controlRef: React.RefObject<HTMLElement>,\n  popperRef: React.RefObject<HTMLDivElement>,\n  targetRef: React.RefObject<HTMLElement>\n): void => {\n  // interactive elements inside the popper\n  const interactiveElements = useRef<HTMLElement[]>([]);\n\n  useEffect(() => {\n    // find the first interactive child and focus it\n    interactiveElements.current = extractInteractiveChildren(popperRef.current);\n\n    // extract the form control this label wraps, so that we can focus it when shift-tab is pressed in the popover\n    const input = controlRef.current;\n\n    let focusTimeout: NodeJS.Timeout;\n\n    if (isOpen) {\n      // when the popover is opened, put focus on the first interactive element inside the popover so keyboard navigation will work\n      // this is in a setTimeout because the element hasn't been placed yet, so focusing now would set the scrolltop to 0\n      focusTimeout = setTimeout(() => {\n        interactiveElements.current[0]?.focus();\n      }, 0);\n    }\n\n    /**\n     * When the user is focused on the last interactive element in the popover and they hit \"Tab\"\n     *\n     * This will focus the input that the field label references, allowing tabbing forward through the form\n     */\n    const focusControlOnPopoverExit = (e: KeyboardEvent) => {\n      if (e.shiftKey) {\n        // shift-tab does not need to be intercepted\n        return;\n      } else if (e.code === \"Tab\") {\n        e.preventDefault();\n\n        e.stopPropagation();\n\n        // user hit \"tab\" or \"escape\" to exit the popover, so focus the control this field label references\n        input?.focus();\n      }\n    };\n\n    /**\n     * When the user is focused on the first interactive element in the popover and they hit \"Shift-Tab\"\n     *\n     * This will focus the icon that triggers the popover, allowing shift-tabbing backwards in the form\n     */\n    const focusIconOnPopoverExit = (e: KeyboardEvent) => {\n      if (!e.shiftKey) {\n        // tab does not need to be intercepted\n        return;\n      } else if (e.code === \"Tab\") {\n        e.preventDefault();\n\n        e.stopPropagation();\n\n        // user hit \"shift-tab\" to exit the popover, so focus the icon\n        targetRef.current?.focus();\n      }\n    };\n\n    /**\n     * The user hit \"Esc\", so we will close the popover and focus the control this field label references\n     */\n    const escapeHit = (e: KeyboardEvent) => {\n      if (e.shiftKey) {\n        // shift-escape does not need to be intercepted\n        return;\n      } else if (e.code === \"Escape\") {\n        e.preventDefault();\n\n        e.stopPropagation();\n\n        // user hit \"escape\" to exit the popover, so focus the control this field label references\n        input?.focus();\n      }\n    };\n\n    // we listen for keydown - blur/focus is too late to intercept these events\n    // listen for \"Esc\" on all of the interactive elements in the popover\n    interactiveElements.current.forEach((element) =>\n      element.addEventListener(\"keydown\", escapeHit)\n    );\n\n    // on the last interactive element, listen for \"Tab\"\n    interactiveElements.current[\n      interactiveElements.current.length - 1\n    ]?.addEventListener(\"keydown\", focusControlOnPopoverExit);\n\n    // on the first interactive element, listen for \"Shift-Tab\"\n    interactiveElements.current[0]?.addEventListener(\n      \"keydown\",\n      focusIconOnPopoverExit\n    );\n\n    const elements = interactiveElements.current;\n\n    return () => {\n      focusTimeout && clearTimeout(focusTimeout);\n\n      elements.forEach((element) =>\n        element.removeEventListener(\"keydown\", escapeHit)\n      );\n\n      elements[elements.length - 1]?.removeEventListener(\n        \"keydown\",\n        focusControlOnPopoverExit\n      );\n\n      elements[0]?.removeEventListener(\"keydown\", focusIconOnPopoverExit);\n    };\n  }, [controlRef, isOpen, popperRef, targetRef]);\n};\n","export { FieldLabel } from \"./FieldLabel\";\n\nexport { StyledFieldLabel } from \"./StyledFieldLabel\";\n\nexport * from \"./StyledFieldLabelInfoIconButton\";\n\nexport * from \"./FieldLabelInfoIconButton\";\n\nexport type {\n  FieldLabelProps,\n  StyledFieldLabelProps,\n  StyledFieldLabelInfoIconButtonProps as StyledInfoIconButtonProps,\n} from \"./types\";\n","import React from \"react\";\n\nimport { PopoverHeading } from \"../PopoverHeading\";\nimport { PopoverBody } from \"../PopoverBody\";\nimport { BodyText } from \"../BodyText\";\nimport { Link } from \"../Link\";\n\nexport const infoIconPopoverTextContent =\n  \"Can be used across push, email, and in-app messages to send a rendered copy of the message.\";\n\nexport const infoIconPopoverReactContent = (\n  <>\n    <PopoverHeading>Content test groups</PopoverHeading>\n    <PopoverBody>\n      <BodyText size=\"sm\">\n        Create Content Test Groups{\" \"}\n        <Link\n          href=\"http://example.com\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          variant=\"inline\"\n        >\n          here\n        </Link>\n        . Groups must have Content Test property enabled in order to send test\n        messages.\n        <br />\n        <br />\n        <Link\n          href=\"http://example.com\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          variant=\"inline\"\n        >\n          Learn more about Content Test Groups\n        </Link>\n      </BodyText>\n    </PopoverBody>\n  </>\n);\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"flex\"\n    }}>{`Flex`}</h1>\n    <p><inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component renders a one-dimensional layout component with\n`}<inlineCode parentName=\"p\">{`display: flex`}</inlineCode>{` and related attributes for convenient access and\nvendor prefixing out of the box.`}</p>\n    <p>{`Note that if the children of the `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component need to specify\ntheir own flex attributes, such as `}<inlineCode parentName=\"p\">{`flex: 1`}</inlineCode>{`, it is up to those\ncomponents to do so-- `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` will not manage these attributes.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component provides an easy way to provide powerful layout\noptions to your pages via the `}<inlineCode parentName=\"p\">{`display: flex`}</inlineCode>{` CSS attribute. Used\nwith no props, it simply defines a flexbox.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"justify-content\"\n    }}>{`Justify content`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component supports adjusting content distribution along the\nmain axis via the `}<inlineCode parentName=\"p\">{`justifyContent`}</inlineCode>{` prop, which is mapped to the\n`}<inlineCode parentName=\"p\">{`justify-content`}</inlineCode>{` CSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to\nsee the effect of the various values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--justify-content\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"align-items\"\n    }}>{`Align items`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component supports adjusting content distribution along the\ncross axis via the `}<inlineCode parentName=\"p\">{`alignItems`}</inlineCode>{` prop, which is mapped to the\n`}<inlineCode parentName=\"p\">{`align-items`}</inlineCode>{` CSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to\nsee the effect of the various values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--align-items\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"direction\"\n    }}>{`Direction`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component supports adjusting the direction of the main axis\nvia the `}<inlineCode parentName=\"p\">{`direction`}</inlineCode>{` prop, which is mapped to the `}<inlineCode parentName=\"p\">{`flex-direction`}</inlineCode>{`\nCSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see the effect of the\nvarious values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--direction\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"inline-flex\"\n    }}>{`Inline flex`}</h3>\n    <p>{`By default, the `}<inlineCode parentName=\"p\">{`display: flex`}</inlineCode>{` attribute behaves like as a `}<inlineCode parentName=\"p\">{`block`}</inlineCode>{` scoped\nelement. You can override this behavior and make it inline by setting the\n`}<inlineCode parentName=\"p\">{`inline`}</inlineCode>{` prop to true, which will set the CSS attribute to `}<inlineCode parentName=\"p\">{`display: inline-flex`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--inline\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"text-alignment\"\n    }}>{`Text alignment`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component supports adjusting the alignment of the text content\nvia the `}<inlineCode parentName=\"p\">{`textAlign`}</inlineCode>{` prop, which is mapped to the `}<inlineCode parentName=\"p\">{`text-align`}</inlineCode>{`\nCSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see the effect of the\nvarious values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--text-alignment\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"wrap\"\n    }}>{`Wrap`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` component supports adjusting the wrapping behavior of its\ncontent via the `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` prop, which is mapped to the `}<inlineCode parentName=\"p\">{`flex-wrap`}</inlineCode>{`\nCSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see the effect of the\nvarious values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--wrap\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"all-together\"\n    }}>{`All together`}</h3>\n    <p>{`Of course, multiple props can be combined together to create complex layouts.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--combined-props\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid-custom-styles\"\n    }}>{`invalid custom styles`}</h3>\n    <p>{`Flex supports the `}<inlineCode parentName=\"p\">{`stlye`}</inlineCode>{` attribute that common to all html componets, and this style gets applied to the flex container.\nHowever, if you need to apply a margin or padding please use the `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component instead.\nIf you attempt to set margin or padding of a `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{`, there will be a warning in the browser console (on your local environment only).`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flex--invalid-custom-styles\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Flex } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`alignItems`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`stretch`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`baseline`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`stretch`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defines the behavior for how items are laid out along the cross axis (perpendicular to the main axis)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`div`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`element / component to render as flex`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`direction`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`row`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`column`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`row-reverse`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`column-reverse`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`row`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specified the direction of the items inside the flex element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`inline`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the flex element should be inline`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`justifyContent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`flex-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-between`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-around`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-evenly`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`flex-start`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defines the behavior for how items are laid out along the main axis`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`styledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`textAlign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`justify`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`left`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`horizontally aligns text within a DOM element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`wrap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`wrap`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`nowrap`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`wrap-reverse`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`nowrap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies whether the flexed items should wrap`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Box } from \\\"../Box\\\";\\nimport { LoremIpsum } from \\\"../LoremIpsum\\\";\\n\\nimport page from \\\"./Flex.docs.mdx\\\";\\nimport type { FlexProps } from \\\"./types\\\";\\n\\nimport { Flex } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Layout/Flex\\\",\\n  component: Flex,\\n  parameters: {\\n    docs: { page },\\n  },\\n  argTypes: {\\n    justifyContent: {\\n      options: [\\n        \\\"center\\\",\\n        \\\"flexStart\\\",\\n        \\\"flexEnd\\\",\\n        \\\"spaceBetween\\\",\\n        \\\"spaceEvenly\\\",\\n        \\\"spaceAround\\\",\\n      ],\\n      mapping: {\\n        flexStart: \\\"flex-start\\\",\\n        flexEnd: \\\"flex-end\\\",\\n        spaceBetween: \\\"space-between\\\",\\n        spaceEvenly: \\\"space-evenly\\\",\\n        spaceAround: \\\"space-around\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          flexStart: \\\"flex-start\\\",\\n          flexEnd: \\\"flex-end\\\",\\n          spaceBetween: \\\"space-between\\\",\\n          spaceEvenly: \\\"space-evenly\\\",\\n          spaceAround: \\\"space-around\\\",\\n        },\\n      },\\n    },\\n    alignItems: {\\n      options: [\\\"stretch\\\", \\\"flexStart\\\", \\\"flexEnd\\\", \\\"center\\\", \\\"baseline\\\"],\\n      mapping: {\\n        stretch: \\\"stretch\\\",\\n        flexStart: \\\"flex-start\\\",\\n        flexEnd: \\\"flex-end\\\",\\n        center: \\\"center\\\",\\n        baseline: \\\"baseline\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          stretch: \\\"stretch\\\",\\n          flexStart: \\\"flex-start\\\",\\n          flexEnd: \\\"flex-end\\\",\\n          center: \\\"center\\\",\\n          baseline: \\\"baseline\\\",\\n        },\\n      },\\n    },\\n    direction: {\\n      options: [\\\"column\\\", \\\"columnReverse\\\", \\\"row\\\", \\\"rowReverse\\\"],\\n      mapping: {\\n        column: \\\"column\\\",\\n        columnReverse: \\\"column-reverse\\\",\\n        row: \\\"row\\\",\\n        rowReverse: \\\"row-reverse\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          column: \\\"column\\\",\\n          columnReverse: \\\"column-reverse\\\",\\n          row: \\\"row\\\",\\n          rowReverse: \\\"row-reverse\\\",\\n        },\\n      },\\n    },\\n    textAlign: {\\n      options: [\\\"center\\\", \\\"left\\\", \\\"right\\\", \\\"justify\\\"],\\n      mapping: {\\n        center: \\\"center\\\",\\n        left: \\\"left\\\",\\n        right: \\\"right\\\",\\n        justify: \\\"justify\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          center: \\\"center\\\",\\n          left: \\\"left\\\",\\n          right: \\\"right\\\",\\n          justify: \\\"justify\\\",\\n        },\\n      },\\n    },\\n    wrap: {\\n      options: [\\\"wrap\\\", \\\"nowrap\\\", \\\"wrapReverse\\\"],\\n      mapping: {\\n        wrap: \\\"wrap\\\",\\n        nowrap: \\\"nowrap\\\",\\n        wrapReverse: \\\"wrap-reverse\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          wrap: \\\"wrap\\\",\\n          nowrap: \\\"nowrap\\\",\\n          wrapReverse: \\\"wrap-reverse\\\",\\n        },\\n      },\\n    },\\n  },\\n};\\n\\nexport const BasicUse = (args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nBasicUse.args = {};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const JustifyContent = (args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex {...args} style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nJustifyContent.args = {\\n  justifyContent: \\\"center\\\",\\n};\\n\\nJustifyContent.storyName = \\\"justify content\\\";\\n\\nexport const AlignItems = (args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nAlignItems.args = {\\n  alignItems: \\\"center\\\",\\n};\\n\\nAlignItems.storyName = \\\"align items\\\";\\n\\nexport const Direction = (args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nDirection.args = {\\n  direction: \\\"column\\\",\\n};\\n\\nDirection.storyName = \\\"direction\\\";\\n\\nexport const Inline = (args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex inline style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nInline.storyName = \\\"inline\\\";\\n\\nexport const TextAlignment = ({\\n  textAlign = \\\"center\\\",\\n}: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex\\n      textAlign={textAlign}\\n      style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      direction=\\\"column\\\"\\n    >\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nTextAlignment.storyName = \\\"text alignment\\\";\\n\\nexport const Wrap = ({ wrap = \\\"wrap\\\" }: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex wrap={wrap} style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        <LoremIpsum />\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nWrap.storyName = \\\"wrap\\\";\\n\\nexport const CombinedProps = (args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        <LoremIpsum />\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nCombinedProps.args = {\\n  justifyContent: \\\"center\\\",\\n  alignItems: \\\"center\\\",\\n  direction: \\\"column\\\",\\n  wrap: \\\"wrap\\\",\\n  inline: false,\\n  textAlign: \\\"right\\\",\\n};\\n\\nCombinedProps.storyName = \\\"combined props\\\";\\n\\nexport const InvalidCustomStyles = ({\\n  invalidStyle,\\n}: {\\n  invalidStyle: string;\\n}): React.ReactElement => {\\n  const outerStyle =\\n    invalidStyle === \\\"none\\\"\\n      ? {\\n          background: \\\"pink\\\",\\n          minHeight: \\\"200px\\\",\\n        }\\n      : {\\n          background: \\\"pink\\\",\\n          minHeight: \\\"200px\\\",\\n          [invalidStyle]: \\\"25px\\\",\\n        };\\n\\n  return (\\n    <Flex inline style={outerStyle}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n};\\n\\nInvalidCustomStyles.argTypes = {\\n  invalidStyle: {\\n    options: [\\n      \\\"none\\\",\\n      \\\"margin\\\",\\n      \\\"padding\\\",\\n      \\\"marginTop\\\",\\n      \\\"marginRight\\\",\\n      \\\"marginBottom\\\",\\n      \\\"marginLeft\\\",\\n      \\\"paddingTop\\\",\\n      \\\"paddingRight\\\",\\n      \\\"paddingBottom\\\",\\n      \\\"paddingLeft\\\",\\n    ],\\n    type: \\\"select\\\",\\n  },\\n};\\n\\nInvalidCustomStyles.args = {\\n  invalidStyle: \\\"padding\\\",\\n};\\n\\nInvalidCustomStyles.storyName = \\\"invalid custom styles\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":121},\"endLoc\":{\"col\":1,\"line\":135},\"startBody\":{\"col\":24,\"line\":121},\"endBody\":{\"col\":1,\"line\":135}},\"JustifyContent\":{\"startLoc\":{\"col\":30,\"line\":141},\"endLoc\":{\"col\":1,\"line\":155},\"startBody\":{\"col\":30,\"line\":141},\"endBody\":{\"col\":1,\"line\":155}},\"AlignItems\":{\"startLoc\":{\"col\":26,\"line\":163},\"endLoc\":{\"col\":1,\"line\":177},\"startBody\":{\"col\":26,\"line\":163},\"endBody\":{\"col\":1,\"line\":177}},\"Direction\":{\"startLoc\":{\"col\":25,\"line\":185},\"endLoc\":{\"col\":1,\"line\":199},\"startBody\":{\"col\":25,\"line\":185},\"endBody\":{\"col\":1,\"line\":199}},\"Inline\":{\"startLoc\":{\"col\":22,\"line\":207},\"endLoc\":{\"col\":1,\"line\":221},\"startBody\":{\"col\":22,\"line\":207},\"endBody\":{\"col\":1,\"line\":221}},\"TextAlignment\":{\"startLoc\":{\"col\":29,\"line\":225},\"endLoc\":{\"col\":1,\"line\":245},\"startBody\":{\"col\":29,\"line\":225},\"endBody\":{\"col\":1,\"line\":245}},\"Wrap\":{\"startLoc\":{\"col\":20,\"line\":249},\"endLoc\":{\"col\":1,\"line\":266},\"startBody\":{\"col\":20,\"line\":249},\"endBody\":{\"col\":1,\"line\":266}},\"CombinedProps\":{\"startLoc\":{\"col\":29,\"line\":270},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":29,\"line\":270},\"endBody\":{\"col\":1,\"line\":287}},\"InvalidCustomStyles\":{\"startLoc\":{\"col\":35,\"line\":300},\"endLoc\":{\"col\":1,\"line\":330},\"startBody\":{\"col\":35,\"line\":300},\"endBody\":{\"col\":1,\"line\":330}}};\n    \nimport React from \"react\";\n\nimport { Box } from \"../Box\";\nimport { LoremIpsum } from \"../LoremIpsum\";\n\nimport page from \"./Flex.docs.mdx\";\nimport type { FlexProps } from \"./types\";\n\nimport { Flex } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Layout/Flex\",\n  component: Flex,\n  parameters: {\n    docs: { page },\n  },\n  argTypes: {\n    justifyContent: {\n      options: [\n        \"center\",\n        \"flexStart\",\n        \"flexEnd\",\n        \"spaceBetween\",\n        \"spaceEvenly\",\n        \"spaceAround\",\n      ],\n      mapping: {\n        flexStart: \"flex-start\",\n        flexEnd: \"flex-end\",\n        spaceBetween: \"space-between\",\n        spaceEvenly: \"space-evenly\",\n        spaceAround: \"space-around\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          flexStart: \"flex-start\",\n          flexEnd: \"flex-end\",\n          spaceBetween: \"space-between\",\n          spaceEvenly: \"space-evenly\",\n          spaceAround: \"space-around\",\n        },\n      },\n    },\n    alignItems: {\n      options: [\"stretch\", \"flexStart\", \"flexEnd\", \"center\", \"baseline\"],\n      mapping: {\n        stretch: \"stretch\",\n        flexStart: \"flex-start\",\n        flexEnd: \"flex-end\",\n        center: \"center\",\n        baseline: \"baseline\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          stretch: \"stretch\",\n          flexStart: \"flex-start\",\n          flexEnd: \"flex-end\",\n          center: \"center\",\n          baseline: \"baseline\",\n        },\n      },\n    },\n    direction: {\n      options: [\"column\", \"columnReverse\", \"row\", \"rowReverse\"],\n      mapping: {\n        column: \"column\",\n        columnReverse: \"column-reverse\",\n        row: \"row\",\n        rowReverse: \"row-reverse\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          column: \"column\",\n          columnReverse: \"column-reverse\",\n          row: \"row\",\n          rowReverse: \"row-reverse\",\n        },\n      },\n    },\n    textAlign: {\n      options: [\"center\", \"left\", \"right\", \"justify\"],\n      mapping: {\n        center: \"center\",\n        left: \"left\",\n        right: \"right\",\n        justify: \"justify\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          center: \"center\",\n          left: \"left\",\n          right: \"right\",\n          justify: \"justify\",\n        },\n      },\n    },\n    wrap: {\n      options: [\"wrap\", \"nowrap\", \"wrapReverse\"],\n      mapping: {\n        wrap: \"wrap\",\n        nowrap: \"nowrap\",\n        wrapReverse: \"wrap-reverse\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          wrap: \"wrap\",\n          nowrap: \"nowrap\",\n          wrapReverse: \"wrap-reverse\",\n        },\n      },\n    },\n  },\n};\n\nexport const BasicUse = (args: FlexProps): React.ReactElement => {\n  return (\n    <Flex style={{ background: \"pink\", minHeight: \"200px\" }} {...args}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </Flex>\n  );\n};;\n\nBasicUse.args = {};\n\nBasicUse.storyName = \"basic use\";\n\nexport const JustifyContent = (args: FlexProps): React.ReactElement => {\n  return (\n    <Flex {...args} style={{ background: \"pink\", minHeight: \"200px\" }}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </Flex>\n  );\n};;\n\nJustifyContent.args = {\n  justifyContent: \"center\",\n};\n\nJustifyContent.storyName = \"justify content\";\n\nexport const AlignItems = (args: FlexProps): React.ReactElement => {\n  return (\n    <Flex style={{ background: \"pink\", minHeight: \"200px\" }} {...args}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </Flex>\n  );\n};;\n\nAlignItems.args = {\n  alignItems: \"center\",\n};\n\nAlignItems.storyName = \"align items\";\n\nexport const Direction = (args: FlexProps): React.ReactElement => {\n  return (\n    <Flex style={{ background: \"pink\", minHeight: \"200px\" }} {...args}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </Flex>\n  );\n};;\n\nDirection.args = {\n  direction: \"column\",\n};\n\nDirection.storyName = \"direction\";\n\nexport const Inline = (args: FlexProps): React.ReactElement => {\n  return (\n    <Flex inline style={{ background: \"pink\", minHeight: \"200px\" }} {...args}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </Flex>\n  );\n};;\n\nInline.storyName = \"inline\";\n\nexport const TextAlignment = ({\n  textAlign = \"center\",\n}: FlexProps): React.ReactElement => {\n  return (\n    <Flex\n      textAlign={textAlign}\n      style={{ background: \"pink\", minHeight: \"200px\" }}\n      direction=\"column\"\n    >\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </Flex>\n  );\n};;\n\nTextAlignment.storyName = \"text alignment\";\n\nexport const Wrap = ({ wrap = \"wrap\" }: FlexProps): React.ReactElement => {\n  return (\n    <Flex wrap={wrap} style={{ background: \"pink\", minHeight: \"200px\" }}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        <LoremIpsum />\n      </Box>\n    </Flex>\n  );\n};;\n\nWrap.storyName = \"wrap\";\n\nexport const CombinedProps = (args: FlexProps): React.ReactElement => {\n  return (\n    <Flex style={{ background: \"pink\", minHeight: \"200px\" }} {...args}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        <LoremIpsum />\n      </Box>\n    </Flex>\n  );\n};;\n\nCombinedProps.args = {\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  direction: \"column\",\n  wrap: \"wrap\",\n  inline: false,\n  textAlign: \"right\",\n};\n\nCombinedProps.storyName = \"combined props\";\n\nexport const InvalidCustomStyles = ({\n  invalidStyle,\n}: {\n  invalidStyle: string;\n}): React.ReactElement => {\n  const outerStyle =\n    invalidStyle === \"none\"\n      ? {\n          background: \"pink\",\n          minHeight: \"200px\",\n        }\n      : {\n          background: \"pink\",\n          minHeight: \"200px\",\n          [invalidStyle]: \"25px\",\n        };\n\n  return (\n    <Flex inline style={outerStyle}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </Flex>\n  );\n};\n\nInvalidCustomStyles.argTypes = {\n  invalidStyle: {\n    options: [\n      \"none\",\n      \"margin\",\n      \"padding\",\n      \"marginTop\",\n      \"marginRight\",\n      \"marginBottom\",\n      \"marginLeft\",\n      \"paddingTop\",\n      \"paddingRight\",\n      \"paddingBottom\",\n      \"paddingLeft\",\n    ],\n    type: \"select\",\n  },\n};\n\nInvalidCustomStyles.args = {\n  invalidStyle: \"padding\",\n};\n\nInvalidCustomStyles.storyName = \"invalid custom styles\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...BasicUse.parameters };\nJustifyContent.parameters = { storySource: { source: \"(args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex {...args} style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...JustifyContent.parameters };\nAlignItems.parameters = { storySource: { source: \"(args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...AlignItems.parameters };\nDirection.parameters = { storySource: { source: \"(args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...Direction.parameters };\nInline.parameters = { storySource: { source: \"(args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex inline style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...Inline.parameters };\nTextAlignment.parameters = { storySource: { source: \"({\\n  textAlign = \\\"center\\\",\\n}: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex\\n      textAlign={textAlign}\\n      style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      direction=\\\"column\\\"\\n    >\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...TextAlignment.parameters };\nWrap.parameters = { storySource: { source: \"({ wrap = \\\"wrap\\\" }: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex wrap={wrap} style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        <LoremIpsum />\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...Wrap.parameters };\nCombinedProps.parameters = { storySource: { source: \"(args: FlexProps): React.ReactElement => {\\n  return (\\n    <Flex style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        <LoremIpsum />\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...CombinedProps.parameters };\nInvalidCustomStyles.parameters = { storySource: { source: \"({\\n  invalidStyle,\\n}: {\\n  invalidStyle: string;\\n}): React.ReactElement => {\\n  const outerStyle =\\n    invalidStyle === \\\"none\\\"\\n      ? {\\n          background: \\\"pink\\\",\\n          minHeight: \\\"200px\\\",\\n        }\\n      : {\\n          background: \\\"pink\\\",\\n          minHeight: \\\"200px\\\",\\n          [invalidStyle]: \\\"25px\\\",\\n        };\\n\\n  return (\\n    <Flex inline style={outerStyle}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </Flex>\\n  );\\n}\" }, ...InvalidCustomStyles.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { FlexProps } from \"./types\";\nimport { StyledFlex } from \"./StyledFlex\";\n\nexport const Flex = React.forwardRef(\n  (\n    { className, style, ...props }: FlexProps,\n    ref: React.RefObject<HTMLDivElement>\n  ) => {\n    React.useEffect(() => {\n      if (!style) {\n        return;\n      }\n\n      const isSpacingPresent = Object.keys(style).some((key) => {\n        return key.includes(\"margin\") || key.includes(\"padding\");\n      });\n\n      if (isSpacingPresent && process.env.NODE_ENV !== \"production\") {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"WARNING: It looks like you supplied a 'margin' and/or 'padding' attribute to the 'Flex' component. To ensure that margins and padding are applied according to design guidelines, please use the 'FlexBox' component instead.\"\n        );\n      }\n    }, [style]);\n\n    return (\n      <StyledFlex\n        {...props}\n        className={classNames([\"bcl-flex\", className])}\n        ref={ref}\n        style={style}\n      />\n    );\n  }\n);\n\nFlex.displayName = \"Flex\";\n","import styled from \"styled-components\";\n\nimport { StyledFlexProps } from \"./types\";\nimport { getFlexCss } from \"./getFlexCss\";\n\nexport const StyledFlex = styled.div<StyledFlexProps>`\n  ${getFlexCss};\n\n  ${(props) => props.styledCss}\n`;\n","import { CSSObject } from \"styled-components\";\n\nimport {\n  AlignItems,\n  FlexDirection,\n  FlexWrap,\n  JustifyContent,\n  TextAlign,\n  FlexSpecs,\n} from \"../types\";\n\nexport function getAlignItemsCss(alignItems?: AlignItems): CSSObject {\n  return {\n    alignItems,\n  };\n}\n\nexport function getFlexDirectionCss(flexDirection?: FlexDirection): CSSObject {\n  return {\n    flexDirection,\n  };\n}\n\nexport function getFlexWrapCss(flexWrap?: FlexWrap): {\n  flexWrap: FlexWrap | undefined;\n} {\n  return {\n    flexWrap,\n  };\n}\n\nexport function getJustifyContentCss(\n  justifyContent?: JustifyContent\n): CSSObject {\n  return {\n    justifyContent,\n  };\n}\n\nexport function getTextAlignCss(textAlign?: TextAlign): CSSObject {\n  return {\n    textAlign,\n  };\n}\n\nexport function getFlexDisplayCss(inline = false): CSSObject {\n  return {\n    display: inline ? \"inline-flex\" : \"flex\",\n  };\n}\n\nexport const getFlexCss = ({\n  alignItems,\n  direction,\n  justifyContent,\n  inline,\n  textAlign,\n  wrap,\n}: FlexSpecs): CSSObject => {\n  const displayStyle = getFlexDisplayCss(inline);\n  const alignItemsStyle = getAlignItemsCss(alignItems);\n  const directionStyle = getFlexDirectionCss(direction);\n  const justifyContentStyle = getJustifyContentCss(justifyContent);\n  const textAlignStyle = getTextAlignCss(textAlign);\n  const wrapStyle = getFlexWrapCss(wrap);\n\n  return {\n    ...displayStyle,\n    ...alignItemsStyle,\n    ...directionStyle,\n    ...justifyContentStyle,\n    ...textAlignStyle,\n    ...wrapStyle,\n  };\n};\n","export { getFlexCss } from \"./getFlexCss\";\n\nexport {\n  getAlignItemsCss,\n  getFlexDirectionCss,\n  getFlexDisplayCss,\n  getFlexWrapCss,\n  getJustifyContentCss,\n  getTextAlignCss,\n} from \"./getFlexCss\";\n\nexport type {\n  AlignItems,\n  TextAlign,\n  FlexDirection,\n  FlexSpecs,\n  FlexWrap,\n} from \"../types\";\n","export { Flex } from \"./Flex\";\n\nexport { StyledFlex } from \"./StyledFlex\";\n\nexport {\n  getFlexCss,\n  getAlignItemsCss,\n  getFlexDirectionCss,\n  getFlexDisplayCss,\n  getFlexWrapCss,\n  getJustifyContentCss,\n  getTextAlignCss,\n} from \"./getFlexCss\";\n\nexport type {\n  FlexProps,\n  StyledFlexProps,\n  AlignItems,\n  TextAlign,\n  FlexDirection,\n  FlexSpecs,\n  FlexWrap,\n} from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"flexbox\"\n    }}>{`FlexBox`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component is a base-level component you to create visual\nsections with helpful styling tools attached. It can do things like\ncalculate spacing and setting styling, as well as render a `}<inlineCode parentName=\"p\">{`display: flex`}</inlineCode>{`\nelement. You can think of `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` as the combination of the `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{`\nand `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` components.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`A `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component provides an easy way to provide powerful layout\noptions to your pages via the `}<inlineCode parentName=\"p\">{`display: flex`}</inlineCode>{` CSS attribute. Used\nwith no props, it simply defines a flexbox.`}</p>\n    <p>{`Often, a section of the DOM has margin and padding applied to it. The\n`}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component can set these css properties for all 4 dimensions\nwhen passed a spacing option.`}</p>\n    <p>{`The teal border shows the margin. The rose border shows the padding.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"justify-content\"\n    }}>{`Justify content`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component supports adjusting content distribution along the\nmain axis via the `}<inlineCode parentName=\"p\">{`justifyContent`}</inlineCode>{` prop, which is mapped to the\n`}<inlineCode parentName=\"p\">{`justify-content`}</inlineCode>{` CSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to\nsee the effect of the various values.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component can also set each of the 4 dimensions seperately.`}</p>\n    <p>{`The teal border shows the margin. The rose border shows the padding.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--justify-content\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"align-items\"\n    }}>{`Align items`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component supports adjusting content distribution along the\ncross axis via the `}<inlineCode parentName=\"p\">{`alignItems`}</inlineCode>{` prop, which is mapped to the\n`}<inlineCode parentName=\"p\">{`align-items`}</inlineCode>{` CSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to\nsee the effect of the various values.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component provides `}<inlineCode parentName=\"p\">{`horizontal`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`vertical`}</inlineCode>{` sizing props.\n`}<inlineCode parentName=\"p\">{`horizontal`}</inlineCode>{` will set the left and right dimensions. `}<inlineCode parentName=\"p\">{`vertical`}</inlineCode>{` will set the top\nand bottom dimensions.`}</p>\n    <p>{`The teal border shows the margin. The rose border shows the padding.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--align-items\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"direction\"\n    }}>{`Direction`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component supports adjusting the direction of the main axis\nvia the `}<inlineCode parentName=\"p\">{`direction`}</inlineCode>{` prop, which is mapped to the `}<inlineCode parentName=\"p\">{`flex-direction`}</inlineCode>{`\nCSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see the effect of the\nvarious values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--direction\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"inline-flex\"\n    }}>{`Inline flex`}</h3>\n    <p>{`By default, the `}<inlineCode parentName=\"p\">{`display: flex`}</inlineCode>{` attribute behaves like as a `}<inlineCode parentName=\"p\">{`block`}</inlineCode>{` scoped\nelement. You can override this behavior and make it inline by setting the\n`}<inlineCode parentName=\"p\">{`inline`}</inlineCode>{` prop to true, which will set the CSS attribute to `}<inlineCode parentName=\"p\">{`display: inline-flex`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--inline\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"text-alignment\"\n    }}>{`Text alignment`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component supports adjusting the alignment of the text content\nvia the `}<inlineCode parentName=\"p\">{`textAlign`}</inlineCode>{` prop, which is mapped to the `}<inlineCode parentName=\"p\">{`text-align`}</inlineCode>{`\nCSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see the effect of the\nvarious values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--text-alignment\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"wrap\"\n    }}>{`Wrap`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component supports adjusting the wrapping behavior of its\ncontent via the `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` prop, which is mapped to the `}<inlineCode parentName=\"p\">{`flex-wrap`}</inlineCode>{`\nCSS attribute. See `}<inlineCode parentName=\"p\">{`knobs`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see the effect of the\nvarious values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--wrap\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"all-together\"\n    }}>{`All together`}</h3>\n    <p>{`Of course, multiple props can be combined together to create complex layouts.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--combined-props\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"as-another-element-type\"\n    }}>{`As another element type`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` component can be configured to render any other valid React\ncomponent or HTML element via the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop. This is especially useful\nwhen you want a semantically correct container.`}</p>\n    <p>{`Note below that the box is being rendered as a `}<inlineCode parentName=\"p\">{`section`}</inlineCode>{` instead of the\ndefault `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--as-another-element\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"passing-in-custom-styling-via-styled-components\"\n    }}>{`Passing in custom styling via styled-components`}</h3>\n    <p><inlineCode parentName=\"p\">{`FlexBox`}</inlineCode>{` can accept custom styling via a styled component `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` declaration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { css } from \"styled-components\";\n\nconst myFancyCss = css\\`\n  border: 1px solid;\n  border-color: #d32f4c;\n  background-color: palegoldenrod;\n\\`;\n`}</code></pre>\n    <p>{`Pass in `}<inlineCode parentName=\"p\">{`myFancyCss`}</inlineCode>{` as the `}<inlineCode parentName=\"p\">{`styledCss`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-layout-flexbox--custom-styling\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { FlexBox } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <p>{`These type definitions are needed to understand the property types.`}</p>\n    <h4 {...{\n      \"id\": \"spacingoptions\"\n    }}>{`SpacingOptions`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type SpacingOptions =\n  | \"none\"\n  | \"xs\"\n  | \"sm\"\n  | \"md\"\n  | \"lg\"\n  | \"xl\"\n  | \"xxl\"\n  | \"xxxl\";\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"boxspecs\"\n    }}>{`BoxSpecs`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface BoxSpecs {\n  left?: SpacingOptions;\n  right?: SpacingOptions;\n  top?: SpacingOptions;\n  bottom?: SpacingOptions;\n  vertical?: SpacingOptions;\n  horizontal?: SpacingOptions;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`alignItems`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`stretch`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`baseline`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`stretch`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defines the behavior for how items are laid out along the cross axis (perpendicular to the main axis)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`div`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates what tag what the component should be rendered as`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boxMargin`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(SpacingOptions, BoxSpecs)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`margin options to calculate spacing from`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boxPadding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(SpacingOptions, BoxSpecs)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`padding options to calculate spacing from`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`direction`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`row`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`column`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`row-reverse`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`column-reverse`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`row`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specified the direction of the items inside the flex element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`inline`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the flex element should be inline`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`justifyContent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`flex-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`flex-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-between`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-around`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`space-evenly`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`flex-start`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defines the behavior for how items are laid out along the main axis`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`styledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`textAlign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`justify`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`left`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`horizontally aligns text within a DOM element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`wrap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`wrap`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`nowrap`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`wrap-reverse`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`nowrap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies whether the flexed items should wrap`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { css } from \\\"styled-components\\\";\\n\\nimport { BodyText } from \\\"../BodyText\\\";\\nimport { Box } from \\\"../Box\\\";\\nimport { LoremIpsum } from \\\"../LoremIpsum\\\";\\n\\nimport page from \\\"./FlexBox.docs.mdx\\\";\\nimport type { FlexBoxProps } from \\\"./types\\\";\\n\\nimport { FlexBox } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Layout/FlexBox\\\",\\n  component: FlexBox,\\n  parameters: {\\n    docs: { page },\\n  },\\n  argTypes: {\\n    justifyContent: {\\n      options: [\\n        \\\"center\\\",\\n        \\\"flexStart\\\",\\n        \\\"flexEnd\\\",\\n        \\\"spaceBetween\\\",\\n        \\\"spaceEvenly\\\",\\n        \\\"spaceAround\\\",\\n      ],\\n      mapping: {\\n        flexStart: \\\"flex-start\\\",\\n        flexEnd: \\\"flex-end\\\",\\n        spaceBetween: \\\"space-between\\\",\\n        spaceEvenly: \\\"space-evenly\\\",\\n        spaceAround: \\\"space-around\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          flexStart: \\\"flex-start\\\",\\n          flexEnd: \\\"flex-end\\\",\\n          spaceBetween: \\\"space-between\\\",\\n          spaceEvenly: \\\"space-evenly\\\",\\n          spaceAround: \\\"space-around\\\",\\n        },\\n      },\\n    },\\n    alignItems: {\\n      options: [\\\"stretch\\\", \\\"flexStart\\\", \\\"flexEnd\\\", \\\"center\\\", \\\"baseline\\\"],\\n      mapping: {\\n        stretch: \\\"stretch\\\",\\n        flexStart: \\\"flex-start\\\",\\n        flexEnd: \\\"flex-end\\\",\\n        center: \\\"center\\\",\\n        baseline: \\\"baseline\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          stretch: \\\"stretch\\\",\\n          flexStart: \\\"flex-start\\\",\\n          flexEnd: \\\"flex-end\\\",\\n          center: \\\"center\\\",\\n          baseline: \\\"baseline\\\",\\n        },\\n      },\\n    },\\n    direction: {\\n      options: [\\\"column\\\", \\\"columnReverse\\\", \\\"row\\\", \\\"rowReverse\\\"],\\n      mapping: {\\n        column: \\\"column\\\",\\n        columnReverse: \\\"column-reverse\\\",\\n        row: \\\"row\\\",\\n        rowReverse: \\\"row-reverse\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          column: \\\"column\\\",\\n          columnReverse: \\\"column-reverse\\\",\\n          row: \\\"row\\\",\\n          rowReverse: \\\"row-reverse\\\",\\n        },\\n      },\\n    },\\n    textAlign: {\\n      options: [\\\"center\\\", \\\"left\\\", \\\"right\\\", \\\"justify\\\"],\\n      mapping: {\\n        center: \\\"center\\\",\\n        left: \\\"left\\\",\\n        right: \\\"right\\\",\\n        justify: \\\"justify\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          center: \\\"center\\\",\\n          left: \\\"left\\\",\\n          right: \\\"right\\\",\\n          justify: \\\"justify\\\",\\n        },\\n      },\\n    },\\n    wrap: {\\n      options: [\\\"wrap\\\", \\\"nowrap\\\", \\\"wrapReverse\\\"],\\n      mapping: {\\n        wrap: \\\"wrap\\\",\\n        nowrap: \\\"nowrap\\\",\\n        wrapReverse: \\\"wrap-reverse\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        labels: {\\n          wrap: \\\"wrap\\\",\\n          nowrap: \\\"nowrap\\\",\\n          wrapReverse: \\\"wrap-reverse\\\",\\n        },\\n      },\\n    },\\n    as: {\\n      type: \\\"text\\\",\\n    },\\n  },\\n};\\n\\nexport const BasicUse = (args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n      }}\\n      {...args}\\n    >\\n      <FlexBox\\n        boxMargin=\\\"md\\\"\\n        style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      >\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hi\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hello\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Test\\n        </Box>\\n      </FlexBox>\\n    </div>\\n  );\\n};\\n\\nBasicUse.args = {};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const JustifyContent = (args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n        width: \\\"100%\\\",\\n      }}\\n    >\\n      <FlexBox\\n        boxMargin={{ left: \\\"sm\\\", right: \\\"lg\\\", top: \\\"xxl\\\", bottom: \\\"xs\\\" }}\\n        {...args}\\n        style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      >\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hi\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hello\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Test\\n        </Box>\\n      </FlexBox>\\n    </div>\\n  );\\n};\\n\\nJustifyContent.args = {\\n  justifyContent: \\\"center\\\",\\n};\\n\\nJustifyContent.storyName = \\\"justify content\\\";\\n\\nexport const AlignItems = (args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n      }}\\n    >\\n      <FlexBox\\n        boxMargin={{ horizontal: \\\"md\\\", top: \\\"xxl\\\", bottom: \\\"xs\\\" }}\\n        boxPadding={{ vertical: \\\"sm\\\", left: \\\"xxxl\\\", right: \\\"lg\\\" }}\\n        style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n        {...args}\\n      >\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hi\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hello\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Test\\n        </Box>\\n      </FlexBox>\\n    </div>\\n  );\\n};\\n\\nAlignItems.args = {\\n  alignItems: \\\"center\\\",\\n};\\n\\nAlignItems.storyName = \\\"align items\\\";\\n\\nexport const Direction = (args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </FlexBox>\\n  );\\n};\\n\\nDirection.args = {\\n  direction: \\\"column\\\",\\n};\\n\\nDirection.storyName = \\\"direction\\\";\\n\\nexport const Inline = (args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox\\n      inline\\n      style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      {...args}\\n    >\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </FlexBox>\\n  );\\n};\\n\\nInline.storyName = \\\"inline\\\";\\n\\nexport const TextAlignment = ({\\n  textAlign = \\\"center\\\",\\n}: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox\\n      textAlign={textAlign}\\n      style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      direction=\\\"column\\\"\\n    >\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </FlexBox>\\n  );\\n};\\n\\nTextAlignment.storyName = \\\"text alignment\\\";\\n\\nexport const Wrap = ({ wrap = \\\"wrap\\\" }: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox wrap={wrap} style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        <LoremIpsum />\\n      </Box>\\n    </FlexBox>\\n  );\\n};\\n\\nWrap.storyName = \\\"wrap\\\";\\n\\nexport const CombinedProps = (args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        <LoremIpsum />\\n      </Box>\\n    </FlexBox>\\n  );\\n};\\n\\nCombinedProps.args = {\\n  justifyContent: \\\"center\\\",\\n  alignItems: \\\"center\\\",\\n  direction: \\\"column\\\",\\n  wrap: \\\"wrap\\\",\\n  inline: false,\\n  textAlign: \\\"right\\\",\\n};\\n\\nCombinedProps.storyName = \\\"combined props\\\";\\n\\nexport const AsAnotherElement = (args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n      }}\\n    >\\n      <FlexBox\\n        boxMargin=\\\"md\\\"\\n        boxPadding=\\\"xl\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: \\\"#D32F4C\\\",\\n        }}\\n        as=\\\"section\\\"\\n        {...args}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </FlexBox>\\n    </div>\\n  );\\n};\\n\\nAsAnotherElement.storyName = \\\"as another element\\\";\\n\\nexport const CustomStyling = (args: FlexBoxProps): React.ReactElement => {\\n  const styledCss = css`\\n    border: 1px solid;\\n    border-color: #d32f4c;\\n    background-color: palegoldenrod;\\n  `;\\n\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n      }}\\n    >\\n      <FlexBox boxMargin=\\\"md\\\" boxPadding=\\\"xl\\\" styledCss={styledCss} {...args}>\\n        <BodyText>This has custom styling via styled components</BodyText>\\n      </FlexBox>\\n    </div>\\n  );\\n};\\n\\nCustomStyling.storyName = \\\"custom styling\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":126},\"endLoc\":{\"col\":1,\"line\":165},\"startBody\":{\"col\":24,\"line\":126},\"endBody\":{\"col\":1,\"line\":165}},\"JustifyContent\":{\"startLoc\":{\"col\":30,\"line\":171},\"endLoc\":{\"col\":1,\"line\":211},\"startBody\":{\"col\":30,\"line\":171},\"endBody\":{\"col\":1,\"line\":211}},\"AlignItems\":{\"startLoc\":{\"col\":26,\"line\":219},\"endLoc\":{\"col\":1,\"line\":259},\"startBody\":{\"col\":26,\"line\":219},\"endBody\":{\"col\":1,\"line\":259}},\"Direction\":{\"startLoc\":{\"col\":25,\"line\":267},\"endLoc\":{\"col\":1,\"line\":281},\"startBody\":{\"col\":25,\"line\":267},\"endBody\":{\"col\":1,\"line\":281}},\"Inline\":{\"startLoc\":{\"col\":22,\"line\":289},\"endLoc\":{\"col\":1,\"line\":307},\"startBody\":{\"col\":22,\"line\":289},\"endBody\":{\"col\":1,\"line\":307}},\"TextAlignment\":{\"startLoc\":{\"col\":29,\"line\":311},\"endLoc\":{\"col\":1,\"line\":331},\"startBody\":{\"col\":29,\"line\":311},\"endBody\":{\"col\":1,\"line\":331}},\"Wrap\":{\"startLoc\":{\"col\":20,\"line\":335},\"endLoc\":{\"col\":1,\"line\":352},\"startBody\":{\"col\":20,\"line\":335},\"endBody\":{\"col\":1,\"line\":352}},\"CombinedProps\":{\"startLoc\":{\"col\":29,\"line\":356},\"endLoc\":{\"col\":1,\"line\":373},\"startBody\":{\"col\":29,\"line\":356},\"endBody\":{\"col\":1,\"line\":373}},\"AsAnotherElement\":{\"startLoc\":{\"col\":32,\"line\":386},\"endLoc\":{\"col\":1,\"line\":410},\"startBody\":{\"col\":32,\"line\":386},\"endBody\":{\"col\":1,\"line\":410}},\"CustomStyling\":{\"startLoc\":{\"col\":29,\"line\":414},\"endLoc\":{\"col\":1,\"line\":435},\"startBody\":{\"col\":29,\"line\":414},\"endBody\":{\"col\":1,\"line\":435}}};\n    \nimport React from \"react\";\nimport { css } from \"styled-components\";\n\nimport { BodyText } from \"../BodyText\";\nimport { Box } from \"../Box\";\nimport { LoremIpsum } from \"../LoremIpsum\";\n\nimport page from \"./FlexBox.docs.mdx\";\nimport type { FlexBoxProps } from \"./types\";\n\nimport { FlexBox } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Layout/FlexBox\",\n  component: FlexBox,\n  parameters: {\n    docs: { page },\n  },\n  argTypes: {\n    justifyContent: {\n      options: [\n        \"center\",\n        \"flexStart\",\n        \"flexEnd\",\n        \"spaceBetween\",\n        \"spaceEvenly\",\n        \"spaceAround\",\n      ],\n      mapping: {\n        flexStart: \"flex-start\",\n        flexEnd: \"flex-end\",\n        spaceBetween: \"space-between\",\n        spaceEvenly: \"space-evenly\",\n        spaceAround: \"space-around\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          flexStart: \"flex-start\",\n          flexEnd: \"flex-end\",\n          spaceBetween: \"space-between\",\n          spaceEvenly: \"space-evenly\",\n          spaceAround: \"space-around\",\n        },\n      },\n    },\n    alignItems: {\n      options: [\"stretch\", \"flexStart\", \"flexEnd\", \"center\", \"baseline\"],\n      mapping: {\n        stretch: \"stretch\",\n        flexStart: \"flex-start\",\n        flexEnd: \"flex-end\",\n        center: \"center\",\n        baseline: \"baseline\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          stretch: \"stretch\",\n          flexStart: \"flex-start\",\n          flexEnd: \"flex-end\",\n          center: \"center\",\n          baseline: \"baseline\",\n        },\n      },\n    },\n    direction: {\n      options: [\"column\", \"columnReverse\", \"row\", \"rowReverse\"],\n      mapping: {\n        column: \"column\",\n        columnReverse: \"column-reverse\",\n        row: \"row\",\n        rowReverse: \"row-reverse\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          column: \"column\",\n          columnReverse: \"column-reverse\",\n          row: \"row\",\n          rowReverse: \"row-reverse\",\n        },\n      },\n    },\n    textAlign: {\n      options: [\"center\", \"left\", \"right\", \"justify\"],\n      mapping: {\n        center: \"center\",\n        left: \"left\",\n        right: \"right\",\n        justify: \"justify\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          center: \"center\",\n          left: \"left\",\n          right: \"right\",\n          justify: \"justify\",\n        },\n      },\n    },\n    wrap: {\n      options: [\"wrap\", \"nowrap\", \"wrapReverse\"],\n      mapping: {\n        wrap: \"wrap\",\n        nowrap: \"nowrap\",\n        wrapReverse: \"wrap-reverse\",\n      },\n      control: {\n        type: \"select\",\n        labels: {\n          wrap: \"wrap\",\n          nowrap: \"nowrap\",\n          wrapReverse: \"wrap-reverse\",\n        },\n      },\n    },\n    as: {\n      type: \"text\",\n    },\n  },\n};\n\nexport const BasicUse = (args: FlexBoxProps): React.ReactElement => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: \"#008294\",\n      }}\n      {...args}\n    >\n      <FlexBox\n        boxMargin=\"md\"\n        style={{ background: \"pink\", minHeight: \"200px\" }}\n      >\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Hi\n        </Box>\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Hello\n        </Box>\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Test\n        </Box>\n      </FlexBox>\n    </div>\n  );\n};;\n\nBasicUse.args = {};\n\nBasicUse.storyName = \"basic use\";\n\nexport const JustifyContent = (args: FlexBoxProps): React.ReactElement => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: \"#008294\",\n        width: \"100%\",\n      }}\n    >\n      <FlexBox\n        boxMargin={{ left: \"sm\", right: \"lg\", top: \"xxl\", bottom: \"xs\" }}\n        {...args}\n        style={{ background: \"pink\", minHeight: \"200px\" }}\n      >\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Hi\n        </Box>\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Hello\n        </Box>\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Test\n        </Box>\n      </FlexBox>\n    </div>\n  );\n};;\n\nJustifyContent.args = {\n  justifyContent: \"center\",\n};\n\nJustifyContent.storyName = \"justify content\";\n\nexport const AlignItems = (args: FlexBoxProps): React.ReactElement => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: \"#008294\",\n      }}\n    >\n      <FlexBox\n        boxMargin={{ horizontal: \"md\", top: \"xxl\", bottom: \"xs\" }}\n        boxPadding={{ vertical: \"sm\", left: \"xxxl\", right: \"lg\" }}\n        style={{ background: \"pink\", minHeight: \"200px\" }}\n        {...args}\n      >\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Hi\n        </Box>\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Hello\n        </Box>\n        <Box\n          boxPadding=\"sm\"\n          boxMargin=\"sm\"\n          style={{ border: \"1px solid black\" }}\n        >\n          Test\n        </Box>\n      </FlexBox>\n    </div>\n  );\n};;\n\nAlignItems.args = {\n  alignItems: \"center\",\n};\n\nAlignItems.storyName = \"align items\";\n\nexport const Direction = (args: FlexBoxProps): React.ReactElement => {\n  return (\n    <FlexBox style={{ background: \"pink\", minHeight: \"200px\" }} {...args}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </FlexBox>\n  );\n};;\n\nDirection.args = {\n  direction: \"column\",\n};\n\nDirection.storyName = \"direction\";\n\nexport const Inline = (args: FlexBoxProps): React.ReactElement => {\n  return (\n    <FlexBox\n      inline\n      style={{ background: \"pink\", minHeight: \"200px\" }}\n      {...args}\n    >\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </FlexBox>\n  );\n};;\n\nInline.storyName = \"inline\";\n\nexport const TextAlignment = ({\n  textAlign = \"center\",\n}: FlexBoxProps): React.ReactElement => {\n  return (\n    <FlexBox\n      textAlign={textAlign}\n      style={{ background: \"pink\", minHeight: \"200px\" }}\n      direction=\"column\"\n    >\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n    </FlexBox>\n  );\n};;\n\nTextAlignment.storyName = \"text alignment\";\n\nexport const Wrap = ({ wrap = \"wrap\" }: FlexBoxProps): React.ReactElement => {\n  return (\n    <FlexBox wrap={wrap} style={{ background: \"pink\", minHeight: \"200px\" }}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        <LoremIpsum />\n      </Box>\n    </FlexBox>\n  );\n};;\n\nWrap.storyName = \"wrap\";\n\nexport const CombinedProps = (args: FlexBoxProps): React.ReactElement => {\n  return (\n    <FlexBox style={{ background: \"pink\", minHeight: \"200px\" }} {...args}>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hi\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Hello\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        Test\n      </Box>\n      <Box boxPadding=\"sm\" boxMargin=\"sm\" style={{ border: \"1px solid black\" }}>\n        <LoremIpsum />\n      </Box>\n    </FlexBox>\n  );\n};;\n\nCombinedProps.args = {\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  direction: \"column\",\n  wrap: \"wrap\",\n  inline: false,\n  textAlign: \"right\",\n};\n\nCombinedProps.storyName = \"combined props\";\n\nexport const AsAnotherElement = (args: FlexBoxProps): React.ReactElement => {\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: \"#008294\",\n      }}\n    >\n      <FlexBox\n        boxMargin=\"md\"\n        boxPadding=\"xl\"\n        style={{\n          border: \"1px solid\",\n          borderColor: \"#D32F4C\",\n        }}\n        as=\"section\"\n        {...args}\n      >\n        <BodyText>I need spacing!</BodyText>\n      </FlexBox>\n    </div>\n  );\n};;\n\nAsAnotherElement.storyName = \"as another element\";\n\nexport const CustomStyling = (args: FlexBoxProps): React.ReactElement => {\n  const styledCss = css`\n    border: 1px solid;\n    border-color: #d32f4c;\n    background-color: palegoldenrod;\n  `;\n\n  return (\n    <div\n      className=\"wrapper-display\"\n      style={{\n        display: \"inline-block\",\n        border: \"1px solid\",\n        borderColor: \"#008294\",\n      }}\n    >\n      <FlexBox boxMargin=\"md\" boxPadding=\"xl\" styledCss={styledCss} {...args}>\n        <BodyText>This has custom styling via styled components</BodyText>\n      </FlexBox>\n    </div>\n  );\n};\n\nCustomStyling.storyName = \"custom styling\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n      }}\\n      {...args}\\n    >\\n      <FlexBox\\n        boxMargin=\\\"md\\\"\\n        style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      >\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hi\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hello\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Test\\n        </Box>\\n      </FlexBox>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nJustifyContent.parameters = { storySource: { source: \"(args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n        width: \\\"100%\\\",\\n      }}\\n    >\\n      <FlexBox\\n        boxMargin={{ left: \\\"sm\\\", right: \\\"lg\\\", top: \\\"xxl\\\", bottom: \\\"xs\\\" }}\\n        {...args}\\n        style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      >\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hi\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hello\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Test\\n        </Box>\\n      </FlexBox>\\n    </div>\\n  );\\n}\" }, ...JustifyContent.parameters };\nAlignItems.parameters = { storySource: { source: \"(args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n      }}\\n    >\\n      <FlexBox\\n        boxMargin={{ horizontal: \\\"md\\\", top: \\\"xxl\\\", bottom: \\\"xs\\\" }}\\n        boxPadding={{ vertical: \\\"sm\\\", left: \\\"xxxl\\\", right: \\\"lg\\\" }}\\n        style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n        {...args}\\n      >\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hi\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Hello\\n        </Box>\\n        <Box\\n          boxPadding=\\\"sm\\\"\\n          boxMargin=\\\"sm\\\"\\n          style={{ border: \\\"1px solid black\\\" }}\\n        >\\n          Test\\n        </Box>\\n      </FlexBox>\\n    </div>\\n  );\\n}\" }, ...AlignItems.parameters };\nDirection.parameters = { storySource: { source: \"(args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </FlexBox>\\n  );\\n}\" }, ...Direction.parameters };\nInline.parameters = { storySource: { source: \"(args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox\\n      inline\\n      style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      {...args}\\n    >\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </FlexBox>\\n  );\\n}\" }, ...Inline.parameters };\nTextAlignment.parameters = { storySource: { source: \"({\\n  textAlign = \\\"center\\\",\\n}: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox\\n      textAlign={textAlign}\\n      style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}\\n      direction=\\\"column\\\"\\n    >\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n    </FlexBox>\\n  );\\n}\" }, ...TextAlignment.parameters };\nWrap.parameters = { storySource: { source: \"({ wrap = \\\"wrap\\\" }: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox wrap={wrap} style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        <LoremIpsum />\\n      </Box>\\n    </FlexBox>\\n  );\\n}\" }, ...Wrap.parameters };\nCombinedProps.parameters = { storySource: { source: \"(args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <FlexBox style={{ background: \\\"pink\\\", minHeight: \\\"200px\\\" }} {...args}>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hi\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Hello\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        Test\\n      </Box>\\n      <Box boxPadding=\\\"sm\\\" boxMargin=\\\"sm\\\" style={{ border: \\\"1px solid black\\\" }}>\\n        <LoremIpsum />\\n      </Box>\\n    </FlexBox>\\n  );\\n}\" }, ...CombinedProps.parameters };\nAsAnotherElement.parameters = { storySource: { source: \"(args: FlexBoxProps): React.ReactElement => {\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n      }}\\n    >\\n      <FlexBox\\n        boxMargin=\\\"md\\\"\\n        boxPadding=\\\"xl\\\"\\n        style={{\\n          border: \\\"1px solid\\\",\\n          borderColor: \\\"#D32F4C\\\",\\n        }}\\n        as=\\\"section\\\"\\n        {...args}\\n      >\\n        <BodyText>I need spacing!</BodyText>\\n      </FlexBox>\\n    </div>\\n  );\\n}\" }, ...AsAnotherElement.parameters };\nCustomStyling.parameters = { storySource: { source: \"(args: FlexBoxProps): React.ReactElement => {\\n  const styledCss = css`\\n    border: 1px solid;\\n    border-color: #d32f4c;\\n    background-color: palegoldenrod;\\n  `;\\n\\n  return (\\n    <div\\n      className=\\\"wrapper-display\\\"\\n      style={{\\n        display: \\\"inline-block\\\",\\n        border: \\\"1px solid\\\",\\n        borderColor: \\\"#008294\\\",\\n      }}\\n    >\\n      <FlexBox boxMargin=\\\"md\\\" boxPadding=\\\"xl\\\" styledCss={styledCss} {...args}>\\n        <BodyText>This has custom styling via styled components</BodyText>\\n      </FlexBox>\\n    </div>\\n  );\\n}\" }, ...CustomStyling.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { FlexBoxProps } from \"./types\";\nimport { StyledFlexBox } from \"./StyledFlexBox\";\n\nexport const FlexBox = React.forwardRef(\n  (\n    { className, ...props }: FlexBoxProps,\n    ref: React.RefObject<HTMLDivElement>\n  ) => (\n    <StyledFlexBox\n      {...props}\n      className={classNames([\"bcl-flex-box\", className])}\n      ref={ref}\n    />\n  )\n);\n\nFlexBox.displayName = \"FlexBox\";\n","import styled from \"styled-components\";\n\nimport { getBoxCss } from \"../Box\";\nimport { getFlexCss } from \"../Flex\";\n\nimport { StyledFlexBoxProps } from \"./types\";\n\nexport const StyledFlexBox = styled.div<StyledFlexBoxProps>`\n  ${getFlexCss};\n  ${({ boxMargin, boxPadding, ...props }) =>\n    getBoxCss(boxMargin, boxPadding, props)};\n\n  ${(props) => props.styledCss};\n`;\n","export { FlexBox } from \"./FlexBox\";\n\nexport type { FlexBoxProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { number, text } from \"@storybook/addon-knobs\";\nimport { FieldLabel } from \"../FieldLabel\";\nimport { FormGroupLegend } from \"../FormGroupLegend\";\nimport { Input } from \"../Input\";\nimport { FormGroup } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Forms/FormGroup\" component={FormGroup} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"formgroup\"\n    }}>{`FormGroup`}</h1>\n    <p><inlineCode parentName=\"p\">{`FormGroup`}</inlineCode>{` organizes form elements together with an optional\nlegend.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`FormGroup`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p><inlineCode parentName=\"p\">{`FormGroup`}</inlineCode>{` is used to wrap input components to group them together.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    <FormGroup mdxType=\"FormGroup\">\n      <FormGroupLegend mdxType=\"FormGroupLegend\">\n        This is a legend: a group of related fields!\n      </FormGroupLegend>\n      <FieldLabel htmlFor=\"input-1\" label=\"A form element!\" mdxType=\"FieldLabel\">\n        <Input id=\"input-1\" mdxType=\"Input\" />\n      </FieldLabel>\n      <FieldLabel htmlFor=\"input-2\" label=\"Another form element!\" mdxType=\"FieldLabel\">\n        <Input id=\"input-2\" mdxType=\"Input\" />\n      </FieldLabel>\n    </FormGroup>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"no-legend\"\n    }}>{`No legend`}</h3>\n    <p><inlineCode parentName=\"p\">{`FormGroup`}</inlineCode>{` can also be used without a legend by omitting the prop,\nas seen here.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"no legend\" mdxType=\"Story\">\n    <FormGroup mdxType=\"FormGroup\">\n      <FieldLabel htmlFor=\"input-3\" label=\"A form element!\" mdxType=\"FieldLabel\">\n        <Input id=\"input-3\" mdxType=\"Input\" />\n      </FieldLabel>\n      <FieldLabel htmlFor=\"input-4\" label=\"Another form element!\" mdxType=\"FieldLabel\">\n        <Input id=\"input-4\" mdxType=\"Input\" />\n      </FieldLabel>\n    </FormGroup>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"stacking\"\n    }}>{`Stacking`}</h3>\n    <p>{`Adjacent `}<inlineCode parentName=\"p\">{`FormGroup`}</inlineCode>{`s will be stacked with proper spacing and\na horizontal border between them`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"stacking\" mdxType=\"Story\">\n    <React.Fragment>\n      <FormGroup mdxType=\"FormGroup\">\n        <FormGroupLegend mdxType=\"FormGroupLegend\">\n          This is a legend: A group of related fields!\n        </FormGroupLegend>\n        <FieldLabel htmlFor=\"input-5\" label=\"A form element!\" mdxType=\"FieldLabel\">\n          <Input id=\"input-5\" mdxType=\"Input\" />\n        </FieldLabel>\n        <FieldLabel htmlFor=\"input-6\" label=\"Another form element!\" mdxType=\"FieldLabel\">\n          <Input id=\"input-6\" mdxType=\"Input\" />\n        </FieldLabel>\n      </FormGroup>\n      <FormGroup mdxType=\"FormGroup\">\n        <FormGroupLegend mdxType=\"FormGroupLegend\">\n          This is a legend: another second group of related fields!\n        </FormGroupLegend>\n        <FieldLabel htmlFor=\"input-7\" label=\"A form element!\" mdxType=\"FieldLabel\">\n          <Input id=\"input-7\" mdxType=\"Input\" />\n        </FieldLabel>\n        <FieldLabel htmlFor=\"input-8\" label=\"Another form element!\" mdxType=\"FieldLabel\">\n          <Input id=\"input-8\" mdxType=\"Input\" />\n        </FieldLabel>\n      </FormGroup>\n    </React.Fragment>\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { FormGroup } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"formgroup-1\"\n    }}><inlineCode parentName=\"h3\">{`FormGroup`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"formgrouplegend\"\n    }}><inlineCode parentName=\"h3\">{`FormGroupLegend`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = () => (\n          <FormGroup>\n      <FormGroupLegend>\n        This is a legend: a group of related fields!\n      </FormGroupLegend>\n      <FieldLabel htmlFor=\"input-1\" label=\"A form element!\">\n        <Input id=\"input-1\" />\n      </FieldLabel>\n      <FieldLabel htmlFor=\"input-2\" label=\"Another form element!\">\n        <Input id=\"input-2\" />\n      </FieldLabel>\n    </FormGroup>\n        );\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '<FormGroup>\\n      <FormGroupLegend>\\n        This is a legend: a group of related fields!\\n      </FormGroupLegend>\\n      <FieldLabel htmlFor=\\\"input-1\\\" label=\\\"A form element!\\\">\\n        <Input id=\\\"input-1\\\" />\\n      </FieldLabel>\\n      <FieldLabel htmlFor=\\\"input-2\\\" label=\\\"Another form element!\\\">\\n        <Input id=\\\"input-2\\\" />\\n      </FieldLabel>\\n    </FormGroup>' } };\n\nexport const noLegend = () => (\n          <FormGroup>\n      <FieldLabel htmlFor=\"input-3\" label=\"A form element!\">\n        <Input id=\"input-3\" />\n      </FieldLabel>\n      <FieldLabel htmlFor=\"input-4\" label=\"Another form element!\">\n        <Input id=\"input-4\" />\n      </FieldLabel>\n    </FormGroup>\n        );\nnoLegend.storyName = 'no legend';\nnoLegend.parameters = { storySource: { source: '<FormGroup>\\n      <FieldLabel htmlFor=\\\"input-3\\\" label=\\\"A form element!\\\">\\n        <Input id=\\\"input-3\\\" />\\n      </FieldLabel>\\n      <FieldLabel htmlFor=\\\"input-4\\\" label=\\\"Another form element!\\\">\\n        <Input id=\\\"input-4\\\" />\\n      </FieldLabel>\\n    </FormGroup>' } };\n\nexport const stacking = () => (\n          <React.Fragment>\n      <FormGroup>\n        <FormGroupLegend>\n          This is a legend: A group of related fields!\n        </FormGroupLegend>\n        <FieldLabel htmlFor=\"input-5\" label=\"A form element!\">\n          <Input id=\"input-5\" />\n        </FieldLabel>\n        <FieldLabel htmlFor=\"input-6\" label=\"Another form element!\">\n          <Input id=\"input-6\" />\n        </FieldLabel>\n      </FormGroup>\n      <FormGroup>\n        <FormGroupLegend>\n          This is a legend: another second group of related fields!\n        </FormGroupLegend>\n        <FieldLabel htmlFor=\"input-7\" label=\"A form element!\">\n          <Input id=\"input-7\" />\n        </FieldLabel>\n        <FieldLabel htmlFor=\"input-8\" label=\"Another form element!\">\n          <Input id=\"input-8\" />\n        </FieldLabel>\n      </FormGroup>\n    </React.Fragment>\n        );\nstacking.storyName = 'stacking';\nstacking.parameters = { storySource: { source: '<React.Fragment>\\n      <FormGroup>\\n        <FormGroupLegend>\\n          This is a legend: A group of related fields!\\n        </FormGroupLegend>\\n        <FieldLabel htmlFor=\\\"input-5\\\" label=\\\"A form element!\\\">\\n          <Input id=\\\"input-5\\\" />\\n        </FieldLabel>\\n        <FieldLabel htmlFor=\\\"input-6\\\" label=\\\"Another form element!\\\">\\n          <Input id=\\\"input-6\\\" />\\n        </FieldLabel>\\n      </FormGroup>\\n      <FormGroup>\\n        <FormGroupLegend>\\n          This is a legend: another second group of related fields!\\n        </FormGroupLegend>\\n        <FieldLabel htmlFor=\\\"input-7\\\" label=\\\"A form element!\\\">\\n          <Input id=\\\"input-7\\\" />\\n        </FieldLabel>\\n        <FieldLabel htmlFor=\\\"input-8\\\" label=\\\"Another form element!\\\">\\n          <Input id=\\\"input-8\\\" />\\n        </FieldLabel>\\n      </FormGroup>\\n    </React.Fragment>' } };\n\nconst componentMeta = { title: 'Core/Forms/FormGroup', component: FormGroup, includeStories: [\"basicUse\",\"noLegend\",\"stacking\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"no legend\":\"noLegend\",\"stacking\":\"stacking\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { FormGroupProps } from \"./types\";\nimport { StyledFormGroup } from \"./StyledFormGroup\";\n\nexport const FormGroup = ({\n  className,\n  ...props\n}: FormGroupProps): React.ReactElement => {\n  return (\n    <StyledFormGroup\n      {...props}\n      className={classNames([\"bcl-FormGroup\", \"bcl-form-group\", className])}\n    />\n  );\n};\n","import styled from \"styled-components\";\nimport { getSpacing, getBorderWidth, getColor } from \"@braze/beacon-styling\";\n\nimport { StyledFormGroupProps } from \"./types\";\n\nexport const StyledFormGroup = styled.fieldset<StyledFormGroupProps>`\n  padding: 0;\n  padding-bottom: ${getSpacing(\"xl\")};\n  border: none;\n  border-bottom: ${getBorderWidth(\"thin\")} solid ${getColor(\"gray\", 300)};\n  margin: 0;\n  margin-bottom: ${getSpacing(\"xl\")};\n\n  &:last-of-type {\n    border: 0;\n    margin: 0;\n    padding: 0;\n  }\n`;\n","export { FormGroup } from \"./FormGroup\";\n\nexport type { FormGroupProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { FormGroupLegendProps } from \"./types\";\nimport { StyledFormGroupLegend } from \"./StyledFormGroupLegend\";\n\nexport const FormGroupLegend = ({\n  className,\n  ...props\n}: FormGroupLegendProps): React.ReactElement => (\n  <StyledFormGroupLegend\n    {...props}\n    className={classNames([\"bcl-form-group-legend\", className])}\n  />\n);\n","import styled from \"styled-components\";\nimport {\n  getFontFamily,\n  getSpacing,\n  getFontSize,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledFormGroupLegendProps } from \"./types\";\n\nexport const StyledFormGroupLegend = styled.legend<StyledFormGroupLegendProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  font-size: ${getFontSize(\"body\", \"md\")};\n  padding: 0;\n  margin: 0;\n  margin-bottom: ${getSpacing(\"lg\")};\n`;\n","export { FormGroupLegend } from \"./FormGroupLegend\";\n\nexport { StyledFormGroupLegend } from \"./StyledFormGroupLegend\";\n\nexport type { FormGroupLegendProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { Heading } from \"./Heading\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"heading\"\n    }}>{`Heading`}</h1>\n    <Meta title=\"Core/Text/Heading\" component={Heading} mdxType=\"Meta\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` component is built using the typography tokens.\nPrefer using this component when incorporating undecorated text elements into\ncomponents or your application rather than referencing typography\ntokens in your styles.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`See below for some sample use cases on how the `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` component can be used\nin different ways.`}</p>\n    <h3 {...{\n      \"id\": \"headings\"\n    }}>{`Headings`}</h3>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` component that represents some sort of header.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Go to the canvas tab to interact with the levels and variants`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-heading--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"header-level-1\"\n    }}>{`Header Level 1`}</h4>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-heading--level-one\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"header-level-2\"\n    }}>{`Header Level 2`}</h4>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-heading--level-two\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"header-level-3\"\n    }}>{`Header Level 3`}</h4>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-heading--level-three\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"header-level-4\"\n    }}>{`Header Level 4`}</h4>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-heading--level-four\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"header-level-5\"\n    }}>{`Header Level 5`}</h4>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-heading--level-five\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"header-level-6\"\n    }}>{`Header Level 6`}</h4>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-heading--level-six\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is a class name to apply to the styled component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`level`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(1, 2, 3, 4, 5, 6)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`which header level the component should use`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"default\", \"light\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"default\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`which variant the component should be`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport docs from \\\"./Heading.docs.mdx\\\";\\nimport { Heading } from \\\"./Heading\\\";\\nimport { HeadingProps } from \\\"./types\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Text/Heading\\\",\\n  parameters: {\\n    docs: {\\n      page: docs,\\n    },\\n  },\\n};\\n\\nexport const BasicUse = ({ level, variant }: HeadingProps) => {\\n  return (\\n    <div style={{ background: \\\"pink\\\", padding: \\\"10px\\\", borderRadius: \\\"5px\\\" }}>\\n      <Heading level={level} variant={variant}>\\n        The Quick Brown Fox Jumps Over The Lazy Dog\\n      </Heading>\\n    </div>\\n  );\\n};\\n\\nBasicUse.argTypes = {\\n  level: {\\n    options: [1, 2, 3, 4, 5, 6],\\n    control: { type: \\\"select\\\" },\\n  },\\n  variant: {\\n    options: [\\\"default\\\", \\\"light\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n};\\n\\nBasicUse.args = {\\n  level: 1,\\n  variant: \\\"default\\\",\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const LevelOne = ({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={1} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n};\\n\\nLevelOne.argTypes = {\\n  variant: {\\n    options: [\\\"default\\\", \\\"light\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n};\\n\\nLevelOne.args = {\\n  variant: \\\"default\\\",\\n};\\n\\nLevelOne.storyName = \\\"level one\\\";\\n\\nexport const LevelTwo = ({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={2} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n};\\n\\nLevelTwo.argTypes = {\\n  variant: {\\n    options: [\\\"default\\\", \\\"light\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n};\\n\\nLevelTwo.args = {\\n  variant: \\\"default\\\",\\n};\\n\\nLevelTwo.storyName = \\\"level two\\\";\\n\\nexport const LevelThree = ({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={3} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n};\\n\\nLevelThree.argTypes = {\\n  variant: {\\n    options: [\\\"default\\\", \\\"light\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n};\\n\\nLevelThree.args = {\\n  variant: \\\"default\\\",\\n};\\n\\nLevelThree.storyName = \\\"level three\\\";\\n\\nexport const LevelFour = ({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={4} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n};\\n\\nLevelFour.argTypes = {\\n  variant: {\\n    options: [\\\"default\\\", \\\"light\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n};\\n\\nLevelFour.args = {\\n  variant: \\\"default\\\",\\n};\\n\\nLevelFour.storyName = \\\"level four\\\";\\n\\nexport const LevelFive = ({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={5} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n};\\n\\nLevelFive.argTypes = {\\n  variant: {\\n    options: [\\\"default\\\", \\\"light\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n};\\n\\nLevelFive.args = {\\n  variant: \\\"default\\\",\\n};\\n\\nLevelFive.storyName = \\\"level five\\\";\\n\\nexport const LevelSix = ({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={6} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n};\\n\\nLevelSix.argTypes = {\\n  variant: {\\n    options: [\\\"default\\\", \\\"light\\\"],\\n    control: { type: \\\"select\\\" },\\n  },\\n};\\n\\nLevelSix.args = {\\n  variant: \\\"default\\\",\\n};\\n\\nLevelSix.storyName = \\\"level six\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":17},\"endLoc\":{\"col\":1,\"line\":25},\"startBody\":{\"col\":24,\"line\":17},\"endBody\":{\"col\":1,\"line\":25}},\"LevelOne\":{\"startLoc\":{\"col\":24,\"line\":45},\"endLoc\":{\"col\":1,\"line\":51},\"startBody\":{\"col\":24,\"line\":45},\"endBody\":{\"col\":1,\"line\":51}},\"LevelTwo\":{\"startLoc\":{\"col\":24,\"line\":66},\"endLoc\":{\"col\":1,\"line\":72},\"startBody\":{\"col\":24,\"line\":66},\"endBody\":{\"col\":1,\"line\":72}},\"LevelThree\":{\"startLoc\":{\"col\":26,\"line\":87},\"endLoc\":{\"col\":1,\"line\":93},\"startBody\":{\"col\":26,\"line\":87},\"endBody\":{\"col\":1,\"line\":93}},\"LevelFour\":{\"startLoc\":{\"col\":25,\"line\":108},\"endLoc\":{\"col\":1,\"line\":114},\"startBody\":{\"col\":25,\"line\":108},\"endBody\":{\"col\":1,\"line\":114}},\"LevelFive\":{\"startLoc\":{\"col\":25,\"line\":129},\"endLoc\":{\"col\":1,\"line\":135},\"startBody\":{\"col\":25,\"line\":129},\"endBody\":{\"col\":1,\"line\":135}},\"LevelSix\":{\"startLoc\":{\"col\":24,\"line\":150},\"endLoc\":{\"col\":1,\"line\":156},\"startBody\":{\"col\":24,\"line\":150},\"endBody\":{\"col\":1,\"line\":156}}};\n    \nimport React from \"react\";\n\nimport docs from \"./Heading.docs.mdx\";\nimport { Heading } from \"./Heading\";\nimport { HeadingProps } from \"./types\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Text/Heading\",\n  parameters: {\n    docs: {\n      page: docs,\n    },\n  },\n};\n\nexport const BasicUse = ({ level, variant }: HeadingProps) => {\n  return (\n    <div style={{ background: \"pink\", padding: \"10px\", borderRadius: \"5px\" }}>\n      <Heading level={level} variant={variant}>\n        The Quick Brown Fox Jumps Over The Lazy Dog\n      </Heading>\n    </div>\n  );\n};;\n\nBasicUse.argTypes = {\n  level: {\n    options: [1, 2, 3, 4, 5, 6],\n    control: { type: \"select\" },\n  },\n  variant: {\n    options: [\"default\", \"light\"],\n    control: { type: \"select\" },\n  },\n};\n\nBasicUse.args = {\n  level: 1,\n  variant: \"default\",\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const LevelOne = ({ variant }: HeadingProps) => {\n  return (\n    <Heading level={1} variant={variant}>\n      The Quick Brown Fox Jumps Over The Lazy Dog\n    </Heading>\n  );\n};;\n\nLevelOne.argTypes = {\n  variant: {\n    options: [\"default\", \"light\"],\n    control: { type: \"select\" },\n  },\n};\n\nLevelOne.args = {\n  variant: \"default\",\n};\n\nLevelOne.storyName = \"level one\";\n\nexport const LevelTwo = ({ variant }: HeadingProps) => {\n  return (\n    <Heading level={2} variant={variant}>\n      The Quick Brown Fox Jumps Over The Lazy Dog\n    </Heading>\n  );\n};;\n\nLevelTwo.argTypes = {\n  variant: {\n    options: [\"default\", \"light\"],\n    control: { type: \"select\" },\n  },\n};\n\nLevelTwo.args = {\n  variant: \"default\",\n};\n\nLevelTwo.storyName = \"level two\";\n\nexport const LevelThree = ({ variant }: HeadingProps) => {\n  return (\n    <Heading level={3} variant={variant}>\n      The Quick Brown Fox Jumps Over The Lazy Dog\n    </Heading>\n  );\n};;\n\nLevelThree.argTypes = {\n  variant: {\n    options: [\"default\", \"light\"],\n    control: { type: \"select\" },\n  },\n};\n\nLevelThree.args = {\n  variant: \"default\",\n};\n\nLevelThree.storyName = \"level three\";\n\nexport const LevelFour = ({ variant }: HeadingProps) => {\n  return (\n    <Heading level={4} variant={variant}>\n      The Quick Brown Fox Jumps Over The Lazy Dog\n    </Heading>\n  );\n};;\n\nLevelFour.argTypes = {\n  variant: {\n    options: [\"default\", \"light\"],\n    control: { type: \"select\" },\n  },\n};\n\nLevelFour.args = {\n  variant: \"default\",\n};\n\nLevelFour.storyName = \"level four\";\n\nexport const LevelFive = ({ variant }: HeadingProps) => {\n  return (\n    <Heading level={5} variant={variant}>\n      The Quick Brown Fox Jumps Over The Lazy Dog\n    </Heading>\n  );\n};;\n\nLevelFive.argTypes = {\n  variant: {\n    options: [\"default\", \"light\"],\n    control: { type: \"select\" },\n  },\n};\n\nLevelFive.args = {\n  variant: \"default\",\n};\n\nLevelFive.storyName = \"level five\";\n\nexport const LevelSix = ({ variant }: HeadingProps) => {\n  return (\n    <Heading level={6} variant={variant}>\n      The Quick Brown Fox Jumps Over The Lazy Dog\n    </Heading>\n  );\n};\n\nLevelSix.argTypes = {\n  variant: {\n    options: [\"default\", \"light\"],\n    control: { type: \"select\" },\n  },\n};\n\nLevelSix.args = {\n  variant: \"default\",\n};\n\nLevelSix.storyName = \"level six\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"({ level, variant }: HeadingProps) => {\\n  return (\\n    <div style={{ background: \\\"pink\\\", padding: \\\"10px\\\", borderRadius: \\\"5px\\\" }}>\\n      <Heading level={level} variant={variant}>\\n        The Quick Brown Fox Jumps Over The Lazy Dog\\n      </Heading>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nLevelOne.parameters = { storySource: { source: \"({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={1} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n}\" }, ...LevelOne.parameters };\nLevelTwo.parameters = { storySource: { source: \"({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={2} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n}\" }, ...LevelTwo.parameters };\nLevelThree.parameters = { storySource: { source: \"({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={3} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n}\" }, ...LevelThree.parameters };\nLevelFour.parameters = { storySource: { source: \"({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={4} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n}\" }, ...LevelFour.parameters };\nLevelFive.parameters = { storySource: { source: \"({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={5} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n}\" }, ...LevelFive.parameters };\nLevelSix.parameters = { storySource: { source: \"({ variant }: HeadingProps) => {\\n  return (\\n    <Heading level={6} variant={variant}>\\n      The Quick Brown Fox Jumps Over The Lazy Dog\\n    </Heading>\\n  );\\n}\" }, ...LevelSix.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { StyledHeading } from \"./StyledHeading\";\nimport { HeadingProps } from \"./types\";\n\nexport const Heading = ({\n  level = 1,\n  variant = \"default\",\n  children,\n  className,\n  ...props\n}: HeadingProps): React.ReactElement => (\n  <StyledHeading\n    {...props}\n    className={classNames([\"bcl-Heading\", \"bcl-heading\", className])}\n    as={`h${level}` as React.ElementType}\n    level={level}\n    variant={variant}\n  >\n    {children}\n  </StyledHeading>\n);\n","import styled from \"styled-components\";\nimport {\n  colorSelector,\n  getFontFamily,\n  fontSizeSelector,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledHeadingProps } from \"./types\";\n\nconst getVariantColor = ({ variant, ...props }: StyledHeadingProps) => {\n  switch (variant) {\n    case \"light\":\n      return colorSelector(props, \"gray\", 800);\n    case \"default\":\n    default:\n      return colorSelector(props, \"gray\", 900);\n  }\n};\n\nconst getLineHeight = ({ level }: StyledHeadingProps) => {\n  switch (level) {\n    case 1:\n      return \"40px\";\n    case 2:\n      return \"30px\";\n    case 3:\n      return \"24px\";\n    case 4:\n      return \"22px\";\n    case 5:\n      return \"20px\";\n    case 6:\n      return \"18px\";\n    default:\n      return;\n  }\n};\n\nexport const StyledHeading = styled.span<StyledHeadingProps>`\n  margin: 0;\n  padding: 0;\n  color: ${getVariantColor};\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  font-size: ${(props) => fontSizeSelector(props, \"heading\", props.level)};\n  line-height: ${getLineHeight};\n`;\n","export { Heading } from \"./Heading\";\n\nexport { StyledHeading } from \"./StyledHeading\";\n\nexport type { HeadingProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { HelpTextProps } from \"./types\";\nimport { StyledHelpText } from \"./StyledHelpText\";\n\nexport const HelpText = ({\n  className,\n  ...props\n}: HelpTextProps): React.ReactElement => (\n  <StyledHelpText\n    {...props}\n    forwardedAs=\"small\"\n    className={classNames([\"bcl-help-text\", className])}\n  />\n);\n","import styled from \"styled-components\";\nimport { colorSelector, getFontSize } from \"@braze/beacon-styling\";\n\nimport { BodyText } from \"../BodyText\";\n\nimport { StyledHelpTextProps } from \"./types\";\n\nexport const StyledHelpText = styled(BodyText)<StyledHelpTextProps>`\n  font-size: ${getFontSize(\"body\", \"xs\")};\n  color: ${(props) =>\n    props.disabled\n      ? colorSelector(props, \"gray\", 400)\n      : colorSelector(props, \"gray\", 600)};\n`;\n","export { HelpText } from \"./HelpText\";\n\nexport { StyledHelpText } from \"./StyledHelpText\";\n\nexport type { HelpTextProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean, text } from \"@storybook/addon-knobs\";\nimport { getIntentColor } from \"@braze/beacon-styling\";\nimport { Button } from \"../Button\";\nimport { UncontrolledTooltip } from \"../UncontrolledTooltip\";\nimport { Icon } from \"./Icon\";\nimport { brazeIcons } from \"./braze-icons\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"icon\"\n    }}>{`Icon`}</h1>\n    <Meta title=\"Core/Primitives/Icon\" component={Icon} mdxType=\"Meta\" />\n    <p>{`A `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` you can interact with.`}</p>\n    <p>{`Icons use the free `}<a parentName=\"p\" {...{\n        \"href\": \"https://fontawesome.com/icons?d=gallery&m=free\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Fontawesome`}</a>{`\nicon set or our own custom svg icons. You can specify the icon using the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`\nprop.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`See below for some sample use cases on how the `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` component can be used\nin different ways.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic Use`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-icon--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-color\"\n    }}>{`With color`}</h3>\n    <p>{`Icons can also be given Braze theme colors using the `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-icon--with-color\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"icon-buttons\"\n    }}>{`Icon Buttons`}</h3>\n    <p>{`Buttons can have an `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` displayed alongside text. To use an icon like this,\nsimply pass in an `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` component as a child of `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`. Note that in order for\nthe spacing to work well, you should wrap your button text in an element, like\n`}<inlineCode parentName=\"p\">{`span`}</inlineCode>{`, as shown below. To see this in more detail, refer to examples in `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-icon--button-with-icons\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"font-awesome-icon-pack-icons\"\n    }}>{`Font Awesome icon pack icons`}</h2>\n    <p>{`Font Awesome provides different icon styles and packs. As documented in\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://fontawesome.com/v5/docs/web/use-with/react#adding-additional-styles\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Adding Additional Styles`}</a>{`\non the font awesome site, you can use these icons by passing in the icon as an array `}<inlineCode parentName=\"p\">{`[\"fab\", \"github\"]`}</inlineCode>{`,\nor as an object `}<inlineCode parentName=\"p\">{`{ prefix: \"fab\", iconName: \"github\" }`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-icon--using-icon-packs\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"braze-defined-icons\"\n    }}>{`Braze Defined Icons`}</h2>\n    <p>{`We use the Fontawesome JS API to define custom svg icons by adding a file to the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/braze-inc/beacon/tree/prod/src/components/Icon/braze-icons\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`braze-icons`}</a>{`\nfolder and importing it using the existing pattern.`}</p>\n    <p>{`For the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` property, make sure you choose a name that`}{`'`}{`s not already\nused by a Fontawesome icon. Do the same for the `}<inlineCode parentName=\"p\">{`unicode`}</inlineCode>{` property, while also\nmaking sure that the unicode character you pick is invalid (so that it\ndoesn`}{`'`}{`t conflict with an actual unicode entity).`}</p>\n    <p>{`If the `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{` you`}{`'`}{`re using for your new icon doesn`}{`'`}{`t approximate a\nsquare, just center it using `}<a parentName=\"p\" {...{\n        \"href\": \"https://aydos.com/svgedit/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`this tool`}</a>{` and add the\ntool`}{`'`}{`s output `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` instead.`}</p>\n    <p>{`Here is a list of all the custom Braze icons we`}{`'`}{`ve added:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-icon--braze-icon-list\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Icon } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(string, `}<inlineCode parentName=\"td\">{`[string, string]`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`{ prefix: string, iconName: string }`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the name key of the icon to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(`}<inlineCode parentName=\"td\">{`xs`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`1x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`2x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`3x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`4x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`5x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`6x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`7x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`8x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`9x`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`10x`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`lg`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`visual size of the icon`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(valueOf(colors), getColor TokenGetter)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`color of the icon; should be the return of the getColor token getter`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\nimport { getIntentColor } from \\\"@braze/beacon-styling\\\";\\n\\nimport { Button } from \\\"../Button\\\";\\nimport { UncontrolledTooltip } from \\\"../UncontrolledTooltip\\\";\\n\\nimport page from \\\"./Icon.docs.mdx\\\";\\nimport { brazeIcons } from \\\"./braze-icons\\\";\\n\\nimport { Icon, IconProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Primitives/Icon\\\",\\n  component: Icon,\\n  parameters: {\\n    docs: { page },\\n    controls: { exclude: [\\\"color\\\", \\\"getColor\\\"] },\\n  },\\n} as ComponentMeta<typeof Icon>;\\n\\nexport const BasicUse = (args: IconProps): React.ReactElement => {\\n  return <Icon {...args} />;\\n};\\n\\nBasicUse.args = { name: \\\"cog\\\" };\\n\\nexport const WithColor = (): React.ReactElement => {\\n  return (\\n    <div>\\n      <Icon name=\\\"home\\\" size=\\\"sm\\\" />\\n      <span> is where the </span>\\n      <Icon name=\\\"heart\\\" color={getIntentColor(\\\"danger\\\", 500)} size=\\\"lg\\\" /> is\\n    </div>\\n  );\\n};\\n\\nexport const ButtonWithIcons = (): React.ReactElement => {\\n  return (\\n    <UncontrolledTooltip label=\\\"previous\\\">\\n      <Button>\\n        <Icon name=\\\"arrow-circle-left\\\" />\\n        <span>Click Me!</span>\\n      </Button>\\n    </UncontrolledTooltip>\\n  );\\n};\\n\\nexport const UsingIconPacks = (): React.ReactElement => {\\n  return (\\n    <ul>\\n      <li>\\n        Icon with object declaration:{\\\" \\\"}\\n        <Icon name={{ prefix: \\\"fas\\\", iconName: \\\"braille\\\" }} />\\n      </li>\\n      <li>\\n        Icon that is a brand icon: <Icon name={[\\\"fab\\\", \\\"github\\\"]} />\\n      </li>\\n    </ul>\\n  );\\n};\\n\\ninterface BrazeIconArgs extends IconProps {\\n  filter: string;\\n}\\n\\nexport const BrazeIconList = (args: BrazeIconArgs): React.ReactElement => {\\n  return (\\n    <div>\\n      {Object.keys(brazeIcons)\\n        .filter((key) => key.indexOf(args.filter) > -1)\\n        .map((key) => (\\n          <li key={key}>\\n            <code>{brazeIcons[key].iconName}</code>:{\\\" \\\"}\\n            <Icon name={brazeIcons[key].iconName} />\\n          </li>\\n        ))}\\n    </div>\\n  );\\n};\\n\\nBrazeIconList.args = { filter: \\\"\\\" };\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":23},\"endLoc\":{\"col\":1,\"line\":25},\"startBody\":{\"col\":24,\"line\":23},\"endBody\":{\"col\":1,\"line\":25}},\"WithColor\":{\"startLoc\":{\"col\":25,\"line\":29},\"endLoc\":{\"col\":1,\"line\":37},\"startBody\":{\"col\":25,\"line\":29},\"endBody\":{\"col\":1,\"line\":37}},\"ButtonWithIcons\":{\"startLoc\":{\"col\":31,\"line\":39},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":31,\"line\":39},\"endBody\":{\"col\":1,\"line\":48}},\"UsingIconPacks\":{\"startLoc\":{\"col\":30,\"line\":50},\"endLoc\":{\"col\":1,\"line\":62},\"startBody\":{\"col\":30,\"line\":50},\"endBody\":{\"col\":1,\"line\":62}},\"BrazeIconList\":{\"startLoc\":{\"col\":29,\"line\":68},\"endLoc\":{\"col\":1,\"line\":81},\"startBody\":{\"col\":29,\"line\":68},\"endBody\":{\"col\":1,\"line\":81}}};\n    \nimport React from \"react\";\nimport { ComponentMeta } from \"@storybook/react\";\nimport { getIntentColor } from \"@braze/beacon-styling\";\n\nimport { Button } from \"../Button\";\nimport { UncontrolledTooltip } from \"../UncontrolledTooltip\";\n\nimport page from \"./Icon.docs.mdx\";\nimport { brazeIcons } from \"./braze-icons\";\n\nimport { Icon, IconProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Primitives/Icon\",\n  component: Icon,\n  parameters: {\n    docs: { page },\n    controls: { exclude: [\"color\", \"getColor\"] },\n  },\n} as ComponentMeta<typeof Icon>;\n\nexport const BasicUse = (args: IconProps): React.ReactElement => {\n  return <Icon {...args} />;\n};;\n\nBasicUse.args = { name: \"cog\" };\n\nexport const WithColor = (): React.ReactElement => {\n  return (\n    <div>\n      <Icon name=\"home\" size=\"sm\" />\n      <span> is where the </span>\n      <Icon name=\"heart\" color={getIntentColor(\"danger\", 500)} size=\"lg\" /> is\n    </div>\n  );\n};;\n\nexport const ButtonWithIcons = (): React.ReactElement => {\n  return (\n    <UncontrolledTooltip label=\"previous\">\n      <Button>\n        <Icon name=\"arrow-circle-left\" />\n        <span>Click Me!</span>\n      </Button>\n    </UncontrolledTooltip>\n  );\n};;\n\nexport const UsingIconPacks = (): React.ReactElement => {\n  return (\n    <ul>\n      <li>\n        Icon with object declaration:{\" \"}\n        <Icon name={{ prefix: \"fas\", iconName: \"braille\" }} />\n      </li>\n      <li>\n        Icon that is a brand icon: <Icon name={[\"fab\", \"github\"]} />\n      </li>\n    </ul>\n  );\n};;\n\ninterface BrazeIconArgs extends IconProps {\n  filter: string;\n}\n\nexport const BrazeIconList = (args: BrazeIconArgs): React.ReactElement => {\n  return (\n    <div>\n      {Object.keys(brazeIcons)\n        .filter((key) => key.indexOf(args.filter) > -1)\n        .map((key) => (\n          <li key={key}>\n            <code>{brazeIcons[key].iconName}</code>:{\" \"}\n            <Icon name={brazeIcons[key].iconName} />\n          </li>\n        ))}\n    </div>\n  );\n};\n\nBrazeIconList.args = { filter: \"\" };\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: IconProps): React.ReactElement => {\\n  return <Icon {...args} />;\\n}\" }, ...BasicUse.parameters };\nWithColor.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <div>\\n      <Icon name=\\\"home\\\" size=\\\"sm\\\" />\\n      <span> is where the </span>\\n      <Icon name=\\\"heart\\\" color={getIntentColor(\\\"danger\\\", 500)} size=\\\"lg\\\" /> is\\n    </div>\\n  );\\n}\" }, ...WithColor.parameters };\nButtonWithIcons.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <UncontrolledTooltip label=\\\"previous\\\">\\n      <Button>\\n        <Icon name=\\\"arrow-circle-left\\\" />\\n        <span>Click Me!</span>\\n      </Button>\\n    </UncontrolledTooltip>\\n  );\\n}\" }, ...ButtonWithIcons.parameters };\nUsingIconPacks.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <ul>\\n      <li>\\n        Icon with object declaration:{\\\" \\\"}\\n        <Icon name={{ prefix: \\\"fas\\\", iconName: \\\"braille\\\" }} />\\n      </li>\\n      <li>\\n        Icon that is a brand icon: <Icon name={[\\\"fab\\\", \\\"github\\\"]} />\\n      </li>\\n    </ul>\\n  );\\n}\" }, ...UsingIconPacks.parameters };\nBrazeIconList.parameters = { storySource: { source: \"(args: BrazeIconArgs): React.ReactElement => {\\n  return (\\n    <div>\\n      {Object.keys(brazeIcons)\\n        .filter((key) => key.indexOf(args.filter) > -1)\\n        .map((key) => (\\n          <li key={key}>\\n            <code>{brazeIcons[key].iconName}</code>:{\\\" \\\"}\\n            <Icon name={brazeIcons[key].iconName} />\\n          </li>\\n        ))}\\n    </div>\\n  );\\n}\" }, ...BrazeIconList.parameters };","import React, { forwardRef } from \"react\";\nimport classNames from \"classnames\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library, IconProp, IconPack } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\n\nimport { StyledIcon } from \"./StyledIcon\";\nimport { brazeIcons } from \"./braze-icons\";\nimport { IconProps } from \"./types\";\n\n// TODO: parcel out these icons to specific components if the need arises\n// This `as` chain is just so we can force library.add to accept our custom components\nlibrary.add(fas, far, fab, brazeIcons as unknown as IconPack);\n\nexport const Icon = forwardRef(\n  (\n    { className, name, size = \"lg\", color, ...props }: IconProps,\n    ref: React.RefObject<HTMLSpanElement>\n  ) => (\n    <StyledIcon\n      {...props}\n      getColor={color}\n      ref={ref}\n      className={classNames([\"bcl-Icon\", \"bcl-icon\", className])}\n    >\n      <FontAwesomeIcon icon={name as IconProp} size={size} />\n    </StyledIcon>\n  )\n);\n\nIcon.displayName = \"Icon\";\n","import styled from \"styled-components\";\nimport { TokenGetter } from \"@braze/beacon-styling\";\n\nimport { StyledIconProps } from \"./types\";\n\n/**\n * gets the hex value of the color, if possible\n *\n * @param color the color to get the hex value for\n *\n * @returns the hex value string or empty string\n */\nconst getColorHex = <P extends object>( // eslint-disable-line @typescript-eslint/ban-types\n  getColor: TokenGetter<P> | undefined,\n  props: P\n): string => {\n  if (!getColor) {\n    return \"\";\n  }\n\n  return getColor(props) || \"\";\n};\n\nexport const StyledIcon = styled.span<StyledIconProps>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: ${({ getColor, ...props }) => getColorHex(getColor, props)};\n`;\n","import { BrazeIconPack } from \"../types\";\n\nimport { dragAndDrop } from \"./dragAndDrop\";\nimport { html } from \"./html\";\nimport { push } from \"./push\";\n\nexport const brazeIcons: BrazeIconPack = {\n  dragAndDrop,\n  html,\n  push,\n};\n","import { BrazeIconDefinition, BrazeIconProps } from \"../types\";\n\nexport const create = ({\n  name,\n  width,\n  height,\n  unicode,\n  path,\n}: BrazeIconProps): BrazeIconDefinition => ({\n  prefix: \"fas\",\n  iconName: name,\n  icon: [width, height, [], unicode, path],\n});\n","import { BrazeDragAndDropIconName } from \"../types\";\n\nimport { create } from \"./create\";\n\nconst name: BrazeDragAndDropIconName = \"drag-and-drop\";\n\nexport const dragAndDrop = create({\n  name: name,\n  width: 15,\n  height: 14,\n  unicode: \"f5d4\",\n  path: \"M5.389 0C4.83672 0 4.389 0.447717 4.389 1V4.13351H3.47146C3.25055 4.13351 3.07146 4.3126 3.07146 4.53351C3.07146 4.75443 3.25055 4.93351 3.47146 4.93351H4.389V9.20024C4.389 9.75252 4.83672 10.2002 5.389 10.2002H9.65574V11.1178C9.65574 11.3387 9.83483 11.5178 10.0557 11.5178C10.2767 11.5178 10.4557 11.3387 10.4557 11.1178V10.2002H13.5892C14.1415 10.2002 14.5892 9.75252 14.5892 9.20024V1C14.5892 0.447715 14.1415 0 13.5892 0H5.389ZM0.988867 4.13351H0.588867V4.53351V5.07321C0.588867 5.29412 0.767953 5.47321 0.988867 5.47321C1.20978 5.47321 1.38887 5.29412 1.38887 5.07321V4.93351H1.52856C1.74948 4.93351 1.92856 4.75443 1.92856 4.53351C1.92856 4.3126 1.74948 4.13351 1.52856 4.13351H0.988867ZM1.38887 7.01611C1.38887 6.79519 1.20978 6.61611 0.988867 6.61611C0.767953 6.61611 0.588867 6.79519 0.588867 7.01611V8.0955C0.588867 8.31641 0.767953 8.4955 0.988867 8.4955C1.20978 8.4955 1.38887 8.31641 1.38887 8.0955V7.01611ZM1.38887 10.0384C1.38887 9.81749 1.20978 9.6384 0.988867 9.6384C0.767953 9.6384 0.588867 9.81749 0.588867 10.0384V11.1178C0.588867 11.3387 0.767953 11.5178 0.988867 11.5178C1.20978 11.5178 1.38887 11.3387 1.38887 11.1178V10.0384ZM10.4557 13.0607C10.4557 12.8398 10.2767 12.6607 10.0557 12.6607C9.83483 12.6607 9.65574 12.8398 9.65574 13.0607V13.2004H9.51605C9.29514 13.2004 9.11605 13.3795 9.11605 13.6004C9.11605 13.8213 9.29514 14.0004 9.51605 14.0004H10.0557H10.4557V13.6004V13.0607ZM1.38887 13.0607C1.38887 12.8398 1.20978 12.6607 0.988867 12.6607C0.767953 12.6607 0.588867 12.8398 0.588867 13.0607V13.6004V14.0004H0.988867H1.52856C1.74948 14.0004 1.92856 13.8213 1.92856 13.6004C1.92856 13.3795 1.74948 13.2004 1.52856 13.2004H1.38887V13.0607ZM3.47146 13.2004C3.25055 13.2004 3.07146 13.3795 3.07146 13.6004C3.07146 13.8213 3.25055 14.0004 3.47146 14.0004H4.55086C4.77177 14.0004 4.95085 13.8213 4.95085 13.6004C4.95085 13.3795 4.77177 13.2004 4.55086 13.2004H3.47146ZM6.49376 13.2004C6.27284 13.2004 6.09376 13.3795 6.09376 13.6004C6.09376 13.8213 6.27284 14.0004 6.49376 14.0004H7.57315C7.79406 14.0004 7.97315 13.8213 7.97315 13.6004C7.97315 13.3795 7.79406 13.2004 7.57315 13.2004H6.49376Z\",\n});\n","import { BrazeHtmlIconName } from \"../types\";\n\nimport { create } from \"./create\";\n\nconst name: BrazeHtmlIconName = \"html\";\n\nexport const html = create({\n  name: name,\n  width: 15,\n  height: 15,\n  unicode: \"f5d5\",\n  path: \"M6.593 13.085C6.746 13.128 6.877 13.041 6.921 12.91L9.915 2.637C9.959 2.484 9.872 2.331 9.74 2.309L8.407 1.915C8.254 1.872 8.123 1.959 8.079 2.09L5.085 12.363C5.041 12.516 5.128 12.648 5.26 12.691L6.593 13.085ZM4.101 10.637 5.063 9.609C5.172 9.5 5.15 9.347 5.041 9.238L3.074 7.489 5.041 5.762C5.15 5.653 5.172 5.478 5.063 5.391L4.101 4.363C4.014 4.254 3.839 4.254 3.73 4.363L.582 7.314C.473 7.402.473 7.576.582 7.686L3.73 10.637C3.839 10.746 4.014 10.746 4.101 10.637ZM11.271 10.637 14.418 7.686C14.527 7.598 14.527 7.402 14.418 7.314L11.271 4.363C11.161 4.254 10.986 4.254 10.899 4.363L9.937 5.369C9.85 5.478 9.85 5.653 9.959 5.762L11.948 7.489 9.959 9.238C9.85 9.347 9.828 9.5 9.937 9.609L10.899 10.637C10.986 10.746 11.161 10.746 11.271 10.637Z\",\n});\n","export { brazeIcons } from \"./brazeIcons\";\n","import { BrazePushIconName } from \"../types\";\n\nimport { create } from \"./create\";\n\nconst name: BrazePushIconName = \"push\";\n\nexport const push = create({\n  name: name,\n  width: 512,\n  height: 512,\n  unicode: \"f5d3\",\n  path: \"m367.795 151.441c-.494 3.611-.749 7.297-.749 11.044 0 44.621 36.173 80.794 80.794 80.794 3.87 0 7.676-.272 11.4-.798v106.829c0 29.823-24.177 54-54 54h-340.875c-29.823 0-54-24.177-54-54v-143.869c0-29.823 24.177-54 54-54zm-246.055 69.825c-8.388 0-15.187 6.8-15.187 15.188v1.688c0 8.388 6.8 15.188 15.188 15.188h226.125c8.388 0 15.188-6.8 15.188-15.187v-1.687c0-8.388-6.8-15.187-15.187-15.187zm0 80.156c-8.388 0-15.187 6.8-15.187 15.187v1.688c0 8.388 6.8 15.188 15.188 15.188h162c8.388 0 15.188-6.8 15.188-15.187v-1.688c0-8.388-6.8-15.187-15.187-15.187zm326.1-85.144c-29.709 0-53.794-24.084-53.794-53.794 0-29.709 24.084-53.794 53.794-53.794 29.709 0 53.794 24.084 53.794 53.794 0 29.709-24.084 53.794-53.794 53.794z\",\n});\n","export { Icon } from \"./Icon\";\n\nexport type { BrazeIconName, IconProps, IconComponentName } from \"./types\";\n\nexport { StyledIcon } from \"./StyledIcon\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\nimport LinkTo from \"@storybook/addon-links/react\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"iconbutton\"\n    }}>{`IconButton`}</h1>\n    <p><inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{`s don't have visible text labels by default. They are used\nto display actions when space in the interface is limited.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` component natively incorporates the `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` component\nand exposes its API via the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` tag. On top of that, it also provides\nall the button functionality that you would typically expect and renders\na `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` that corresponds to the content passed as `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Go to the canvas tab to interact with the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`muted`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` props!`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-iconbutton--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"muted-use\"\n    }}>{`Muted use`}</h3>\n    <p>{`If you need a specific action to be available but not call too\nmuch attention to itself and/or avoid making the view too\noverwhelming for the user, use the `}<inlineCode parentName=\"p\">{`muted`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-iconbutton--muted-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`If you need to prevent the user from being able to take any\naction (e.g. because they need to fill out all the required fields\nin a form before submitting), you can disable the `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{`\nentirely using the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop.`}</p>\n    <p>{`When disabled, the `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` will NOT call the `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` function\nupon user click nor render the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` upon hover.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-iconbutton--disabled-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-distance\"\n    }}>{`With distance`}</h3>\n    <p>{`To modify the distance of the tooltip from the `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{`,\nuse the `}<inlineCode parentName=\"p\">{`distance`}</inlineCode>{` prop, as shown below.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-iconbutton--with-distance\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"use-aria-label\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`aria-label`}</inlineCode></h3>\n    <p>{`Be sure to add an `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` attribute to your `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{`. For the time being, we will\ncover for you and automaitically use your passed in label as an `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` if it is text,\nbut the next version of Beacon will require an `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-iconbutton--using-aria-label\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { IconButton } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the button should be visually and functionally disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`distance`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`8`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from bottom of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`muted`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`apply muted styles to the component, making it grab less of the user's attention`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the name key of the icon to display`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`lg`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size of the icon button. Use `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{` in a table row context, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode>{` elsewhere`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`placement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bottom`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to define the placement for the tooltip `}<LinkTo to=\"core-overlay-popper--delay-only-open\" mdxType=\"LinkTo\">{`Tooltip options`}</LinkTo></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`submit`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type value to pass to DOM to determine button behavior within a form; `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{` automatically submits enclosing form on click whereas `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` invokes the form's `}<inlineCode parentName=\"td\">{`onReset`}</inlineCode>{` callback`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport { boolean, number, text, select } from \\\"@storybook/addon-knobs\\\";\\n\\nimport { placementTypes } from \\\"../Popper\\\";\\n\\nimport docs from \\\"./IconButton.docs.mdx\\\";\\n\\nimport { IconButton, IconButtonProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Primitives/IconButton\\\",\\n  component: IconButton,\\n  parameters: {\\n    docs: { page: docs },\\n  },\\n};\\n\\nexport const BasicUse = (): React.ReactElement => {\\n  const label = text(\\\"Tooltip label\\\", \\\"Label\\\");\\n  const placement = select(\\\"Tooltip placement\\\", placementTypes, \\\"bottom\\\");\\n  const [clicks, addClick] = React.useReducer(\\n    (clicks) => [...clicks, \\\"click\\\"],\\n    []\\n  );\\n\\n  return (\\n    <div>\\n      <IconButton\\n        name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n        onClick={addClick}\\n        muted={boolean(\\\"Muted\\\", false)}\\n        size={select(\\\"Icon Size\\\", [\\\"lg\\\", \\\"sm\\\"], undefined)}\\n        disabled={boolean(\\\"Disabled\\\", false)}\\n        aria-label={label}\\n        placement={placement}\\n      >\\n        {label}\\n      </IconButton>\\n      <ul id=\\\"clicks\\\">\\n        {clicks.map((click, i) => (\\n          <li key={i}>{click}</li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const MutedUse = (): React.ReactElement => {\\n  const label = text(\\\"Tooltip label\\\", \\\"Label\\\");\\n\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Muted click\\\")}\\n      muted\\n      aria-label={label}\\n    >\\n      {label}\\n    </IconButton>\\n  );\\n};\\n\\nMutedUse.storyName = \\\"muted use\\\";\\n\\nexport const DisabledUse = (): React.ReactElement => {\\n  const label = text(\\\"Tooltip label\\\", \\\"Label\\\");\\n\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"You should not see this\\\")}\\n      disabled\\n      aria-label={label}\\n    >\\n      {label}\\n    </IconButton>\\n  );\\n};\\n\\nDisabledUse.storyName = \\\"disabled use\\\";\\n\\nexport const WithDistance = (): React.ReactElement => {\\n  const label = text(\\\"Tooltip label\\\", \\\"Label\\\");\\n\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Click\\\")}\\n      aria-label={label}\\n      distance={number(\\\"Distance\\\", -5)}\\n    >\\n      {label}\\n    </IconButton>\\n  );\\n};\\n\\nWithDistance.storyName = \\\"with distance\\\";\\n\\nexport const UsingAriaLabel = (): React.ReactElement => {\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Click\\\")}\\n      aria-label=\\\"a helpful aria-label\\\"\\n    >\\n      {text(\\\"Tooltip label\\\", \\\"Label\\\")}\\n    </IconButton>\\n  );\\n};\\n\\nUsingAriaLabel.storyName = \\\"using aria label\\\";\\n\\nexport const NoAriaLabel = (): React.ReactElement => {\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Click\\\")}\\n    >\\n      {text(\\\"Tooltip label\\\", \\\"Label\\\")}\\n    </IconButton>\\n  );\\n};\\n\\nNoAriaLabel.storyName = \\\"no aria label\\\";\\n\\nexport const NoAriaLabelWithCompAsChild = (): React.ReactElement => {\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Click\\\")}\\n    >\\n      <div className=\\\"inner-div\\\">{text(\\\"Tooltip label\\\", \\\"Label\\\")}</div>\\n    </IconButton>\\n  );\\n};\\n\\nNoAriaLabelWithCompAsChild.storyName = \\\"no aria label + component as child\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":20},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":24,\"line\":20},\"endBody\":{\"col\":1,\"line\":48}},\"MutedUse\":{\"startLoc\":{\"col\":24,\"line\":52},\"endLoc\":{\"col\":1,\"line\":65},\"startBody\":{\"col\":24,\"line\":52},\"endBody\":{\"col\":1,\"line\":65}},\"DisabledUse\":{\"startLoc\":{\"col\":27,\"line\":69},\"endLoc\":{\"col\":1,\"line\":82},\"startBody\":{\"col\":27,\"line\":69},\"endBody\":{\"col\":1,\"line\":82}},\"WithDistance\":{\"startLoc\":{\"col\":28,\"line\":86},\"endLoc\":{\"col\":1,\"line\":99},\"startBody\":{\"col\":28,\"line\":86},\"endBody\":{\"col\":1,\"line\":99}},\"UsingAriaLabel\":{\"startLoc\":{\"col\":30,\"line\":103},\"endLoc\":{\"col\":1,\"line\":113},\"startBody\":{\"col\":30,\"line\":103},\"endBody\":{\"col\":1,\"line\":113}},\"NoAriaLabel\":{\"startLoc\":{\"col\":27,\"line\":117},\"endLoc\":{\"col\":1,\"line\":126},\"startBody\":{\"col\":27,\"line\":117},\"endBody\":{\"col\":1,\"line\":126}},\"NoAriaLabelWithCompAsChild\":{\"startLoc\":{\"col\":42,\"line\":130},\"endLoc\":{\"col\":1,\"line\":139},\"startBody\":{\"col\":42,\"line\":130},\"endBody\":{\"col\":1,\"line\":139}}};\n    \nimport React from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { boolean, number, text, select } from \"@storybook/addon-knobs\";\n\nimport { placementTypes } from \"../Popper\";\n\nimport docs from \"./IconButton.docs.mdx\";\n\nimport { IconButton, IconButtonProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Primitives/IconButton\",\n  component: IconButton,\n  parameters: {\n    docs: { page: docs },\n  },\n};\n\nexport const BasicUse = (): React.ReactElement => {\n  const label = text(\"Tooltip label\", \"Label\");\n  const placement = select(\"Tooltip placement\", placementTypes, \"bottom\");\n  const [clicks, addClick] = React.useReducer(\n    (clicks) => [...clicks, \"click\"],\n    []\n  );\n\n  return (\n    <div>\n      <IconButton\n        name={text(\"Icon\", \"cog\") as IconButtonProps[\"name\"]}\n        onClick={addClick}\n        muted={boolean(\"Muted\", false)}\n        size={select(\"Icon Size\", [\"lg\", \"sm\"], undefined)}\n        disabled={boolean(\"Disabled\", false)}\n        aria-label={label}\n        placement={placement}\n      >\n        {label}\n      </IconButton>\n      <ul id=\"clicks\">\n        {clicks.map((click, i) => (\n          <li key={i}>{click}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nexport const MutedUse = (): React.ReactElement => {\n  const label = text(\"Tooltip label\", \"Label\");\n\n  return (\n    <IconButton\n      name={text(\"Icon\", \"cog\") as IconButtonProps[\"name\"]}\n      onClick={action(\"Muted click\")}\n      muted\n      aria-label={label}\n    >\n      {label}\n    </IconButton>\n  );\n};;\n\nMutedUse.storyName = \"muted use\";\n\nexport const DisabledUse = (): React.ReactElement => {\n  const label = text(\"Tooltip label\", \"Label\");\n\n  return (\n    <IconButton\n      name={text(\"Icon\", \"cog\") as IconButtonProps[\"name\"]}\n      onClick={action(\"You should not see this\")}\n      disabled\n      aria-label={label}\n    >\n      {label}\n    </IconButton>\n  );\n};;\n\nDisabledUse.storyName = \"disabled use\";\n\nexport const WithDistance = (): React.ReactElement => {\n  const label = text(\"Tooltip label\", \"Label\");\n\n  return (\n    <IconButton\n      name={text(\"Icon\", \"cog\") as IconButtonProps[\"name\"]}\n      onClick={action(\"Click\")}\n      aria-label={label}\n      distance={number(\"Distance\", -5)}\n    >\n      {label}\n    </IconButton>\n  );\n};;\n\nWithDistance.storyName = \"with distance\";\n\nexport const UsingAriaLabel = (): React.ReactElement => {\n  return (\n    <IconButton\n      name={text(\"Icon\", \"cog\") as IconButtonProps[\"name\"]}\n      onClick={action(\"Click\")}\n      aria-label=\"a helpful aria-label\"\n    >\n      {text(\"Tooltip label\", \"Label\")}\n    </IconButton>\n  );\n};;\n\nUsingAriaLabel.storyName = \"using aria label\";\n\nexport const NoAriaLabel = (): React.ReactElement => {\n  return (\n    <IconButton\n      name={text(\"Icon\", \"cog\") as IconButtonProps[\"name\"]}\n      onClick={action(\"Click\")}\n    >\n      {text(\"Tooltip label\", \"Label\")}\n    </IconButton>\n  );\n};;\n\nNoAriaLabel.storyName = \"no aria label\";\n\nexport const NoAriaLabelWithCompAsChild = (): React.ReactElement => {\n  return (\n    <IconButton\n      name={text(\"Icon\", \"cog\") as IconButtonProps[\"name\"]}\n      onClick={action(\"Click\")}\n    >\n      <div className=\"inner-div\">{text(\"Tooltip label\", \"Label\")}</div>\n    </IconButton>\n  );\n};\n\nNoAriaLabelWithCompAsChild.storyName = \"no aria label + component as child\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const label = text(\\\"Tooltip label\\\", \\\"Label\\\");\\n  const placement = select(\\\"Tooltip placement\\\", placementTypes, \\\"bottom\\\");\\n  const [clicks, addClick] = React.useReducer(\\n    (clicks) => [...clicks, \\\"click\\\"],\\n    []\\n  );\\n\\n  return (\\n    <div>\\n      <IconButton\\n        name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n        onClick={addClick}\\n        muted={boolean(\\\"Muted\\\", false)}\\n        size={select(\\\"Icon Size\\\", [\\\"lg\\\", \\\"sm\\\"], undefined)}\\n        disabled={boolean(\\\"Disabled\\\", false)}\\n        aria-label={label}\\n        placement={placement}\\n      >\\n        {label}\\n      </IconButton>\\n      <ul id=\\\"clicks\\\">\\n        {clicks.map((click, i) => (\\n          <li key={i}>{click}</li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nMutedUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const label = text(\\\"Tooltip label\\\", \\\"Label\\\");\\n\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Muted click\\\")}\\n      muted\\n      aria-label={label}\\n    >\\n      {label}\\n    </IconButton>\\n  );\\n}\" }, ...MutedUse.parameters };\nDisabledUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const label = text(\\\"Tooltip label\\\", \\\"Label\\\");\\n\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"You should not see this\\\")}\\n      disabled\\n      aria-label={label}\\n    >\\n      {label}\\n    </IconButton>\\n  );\\n}\" }, ...DisabledUse.parameters };\nWithDistance.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const label = text(\\\"Tooltip label\\\", \\\"Label\\\");\\n\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Click\\\")}\\n      aria-label={label}\\n      distance={number(\\\"Distance\\\", -5)}\\n    >\\n      {label}\\n    </IconButton>\\n  );\\n}\" }, ...WithDistance.parameters };\nUsingAriaLabel.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Click\\\")}\\n      aria-label=\\\"a helpful aria-label\\\"\\n    >\\n      {text(\\\"Tooltip label\\\", \\\"Label\\\")}\\n    </IconButton>\\n  );\\n}\" }, ...UsingAriaLabel.parameters };\nNoAriaLabel.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Click\\\")}\\n    >\\n      {text(\\\"Tooltip label\\\", \\\"Label\\\")}\\n    </IconButton>\\n  );\\n}\" }, ...NoAriaLabel.parameters };\nNoAriaLabelWithCompAsChild.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <IconButton\\n      name={text(\\\"Icon\\\", \\\"cog\\\") as IconButtonProps[\\\"name\\\"]}\\n      onClick={action(\\\"Click\\\")}\\n    >\\n      <div className=\\\"inner-div\\\">{text(\\\"Tooltip label\\\", \\\"Label\\\")}</div>\\n    </IconButton>\\n  );\\n}\" }, ...NoAriaLabelWithCompAsChild.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { Icon } from \"../Icon\";\nimport { Tooltip, useTooltip } from \"../Tooltip\";\n\nimport { IconButtonProps } from \"./types\";\nimport { StyledIconButton } from \"./StyledIconButton\";\n\nexport const IconButton = React.forwardRef(\n  (\n    {\n      children,\n      className,\n      disabled,\n      distance,\n      name,\n      \"aria-label\": ariaLabel,\n      placement = \"bottom\",\n      type = \"button\",\n      ...props\n    }: IconButtonProps,\n    ref: React.RefObject<HTMLButtonElement>\n  ) => {\n    const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>(\n      ref,\n      false,\n      disabled\n    );\n\n    if (!ariaLabel && process.env.NODE_ENV !== \"production\") {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"WARNING: You have not provided an aria-label for this `IconButton`. In the next version of Beacon, an aria-label will be required for `IconButton`s.\"\n      );\n    }\n\n    const allChildrenAreText =\n      React.Children.map(\n        children,\n        (child) => typeof child === \"string\"\n      )?.reduce((x, y) => x && y) ?? false;\n\n    const childAriaLabel = allChildrenAreText\n      ? React.Children.map(children, (child) =>\n          typeof child === \"string\" ? child : undefined\n        )?.join(\"\")\n      : undefined;\n\n    return (\n      <StyledIconButton\n        {...props}\n        type={type}\n        ref={targetRef}\n        className={classNames([\"bcl-icon-button\", className])}\n        disabled={disabled}\n        aria-label={ariaLabel || childAriaLabel}\n        aria-haspopup={!disabled && React.Children.count(children) > 0}\n      >\n        <Icon name={name} size={props.size === \"sm\" ? \"1x\" : props.size} />\n        {!disabled && children && (\n          <Tooltip\n            {...tooltipState}\n            targetRef={targetRef}\n            placement={placement}\n            distance={distance}\n          >\n            {children}\n          </Tooltip>\n        )}\n      </StyledIconButton>\n    );\n  }\n);\n\nIconButton.displayName = \"IconButton\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getColor,\n  getIntentColor,\n  getBorderWidth,\n  getBorderRadius,\n  colorSelector,\n} from \"@braze/beacon-styling\";\n\nimport { StyledIconButtonProps } from \"./types\";\n\nconst getMutedStyles = ({ muted, ...props }: StyledIconButtonProps) => {\n  if (!muted) {\n    return;\n  }\n\n  return css`\n    color: ${colorSelector(props, \"gray\", 600)};\n\n    &:hover:not(:disabled) {\n      background: ${getColor(\"gray\", 100)};\n      color: ${getColor(\"gray\", 800)};\n    }\n  `;\n};\n\nconst getButtonSize = ({ size }: StyledIconButtonProps) => {\n  if (size === \"sm\") {\n    return css`\n      min-height: 28px;\n      min-width: 28px;\n      max-height: 28px;\n      max-width: 28px;\n    `;\n  }\n\n  return css`\n    min-height: 38px;\n    min-width: 38px;\n    max-height: 38px;\n    max-width: 38px;\n  `;\n};\n\nexport const StyledIconButton = styled.button<StyledIconButtonProps>`\n  position: relative;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  cursor: ${(props) => (props.disabled ? \"no-drop\" : \"pointer\")};\n  ${getButtonSize}\n  background: ${getColor(\"gray\", 0)};\n  color: ${getIntentColor(\"primary\", 500)};\n\n  &:hover:not(:disabled) {\n    background: ${getIntentColor(\"primary\", 50)};\n    color: ${getIntentColor(\"primary\", 400)};\n  }\n\n  ${getMutedStyles};\n\n  &:focus:not(:disabled) {\n    &:after {\n      content: \"\";\n      display: block;\n      position: absolute;\n      top: -4px;\n      bottom: -4px;\n      left: -4px;\n      right: -4px;\n      border-radius: ${getBorderRadius(\"sm\")};\n      border: ${getBorderWidth(\"thick\")} solid ${getIntentColor(\"primary\", 200)};\n    }\n  }\n\n  &:disabled {\n    color: ${getColor(\"gray\", 300)};\n  }\n`;\n","export { IconButton } from \"./IconButton\";\n\nexport type { IconButtonProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { boolean, select } from \"@storybook/addon-knobs\";\nimport { Heading, Checkbox, FieldLabel } from \"@braze/beacon-core\";\nimport { InlineInput } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Forms/InlineInput\" component={InlineInput} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"inlineinput\"\n    }}>{`InlineInput`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` component is one that appears as plaintext until\nthe user hovers over it, at which point a pencil icon appears\nindicating that the text can be updated. Clicking anywhere on the\ncomponent will then enable \"edit mode\", allowing the user to change\nthe value.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`IMPORTANT NOTE ABOUT USAGE:`}</strong>{` `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` will switch to edit mode\nautomatically when it is NOT `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` `}<em parentName=\"p\">{`and`}</em>{` is `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{`. This is\nto ensure that users don't mistakenly see the view mode and think\nthat whatever is currently entered is valid for submission. However,\nthis also creates an edge case that you must resolve yourself. If,\nfor whatever reason, you expect the `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop to be `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` on load\nand then switch back to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`, it's recommended that you set the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{`\nprop of `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` until you expect `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` to become `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.\nThis will allow you to disable the automatic switchover to edit mode until\nit makes sense.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`By default, `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` behaves like an `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component,\na `}<inlineCode parentName=\"p\">{`BodyText`}</inlineCode>{` component, and a `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` component all rolled\ninto one.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`TIP: Head over to the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to play around with some of\nthe knobs for `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [disabled, setDisabled] = React.useState(false);\n          const [invalid, setInvalid] = React.useState(false);\n          const [value, setValue] = React.useState(\"hello\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <>\n          <InlineInput disabled={disabled} invalid={invalid} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />\n          <hr />\n          <pre>\n            <code>field value: </code>\n            <code className=\"field-value\">{value}</code>\n          </pre>\n          <Checkbox className=\"disabled-checkbox\" onChange={() => setDisabled(!disabled)} checked={disabled} mdxType=\"Checkbox\">\n            Disabled\n          </Checkbox>\n          <br />\n          <Checkbox className=\"invalid-checkbox\" onChange={() => setInvalid(!invalid)} checked={invalid} mdxType=\"Checkbox\">\n            Invalid\n          </Checkbox>\n        </>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-small-vertical-size\"\n    }}>{`With small vertical size`}</h3>\n    <p>{`If you want the `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` to fit into a smaller space,\nyou can use the `}<inlineCode parentName=\"p\">{`vSize=\"sm\"`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with size sm\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <InlineInput vSize=\"sm\" value={value} onChange={handleChange} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-overflow\"\n    }}>{`With overflow`}</h3>\n    <p>{`When the content overflows inside an `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component,\nit will be ellipsesed on blur.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with overflow\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello, world! some of this text should get cut off when editing because it's too long\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <InlineInput invalid={boolean(\"Invalid\", false)} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-errors\"\n    }}>{`With errors`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` component can also handle invalid statuses and does\nnot additionally need to be wrapped with `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` to get this\nfunctionality.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with errors\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello, world!\");\n          const [error, setError] = React.useState(undefined);\n\n          const handleChange = event => {\n            // update value state\n            setValue(event.target.value); // update error state based on value\n\n            if (event.target.value !== \"\") {\n              setError(undefined);\n            } else {\n              setError(\"You must enter a value.\");\n            }\n          };\n\n          return <FieldLabel status=\"danger\" statusText={error} mdxType=\"FieldLabel\">\n          <InlineInput vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} invalid={!!error} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />\n        </FieldLabel>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` component can be disabled via the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop\nto prevent the user from editing its contents. When disabled, the\ncomponent will no longer display the pencil on hover or switch to\nthe edit mode.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled use\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello, world!\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <InlineInput disabled vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-custom-view-mode-text\"\n    }}>{`With custom view mode text`}</h3>\n    <p>{`Sometimes you may want to render a specific kind of formatting for\nthe text of your view mode. To accommodate for this, the `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{`\ncomponent accepts a `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` prop that accepts a function which\nreturns React elements. This pattern is commonly referred to as\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/render-props.html\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Render Props`}</a>{`.`}</p>\n    <p>{`The examples below show how the `}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{` component can be used to\nreplace the default `}<inlineCode parentName=\"p\">{`BodyText`}</inlineCode>{` via the render props method.`}</p>\n    <p><strong parentName=\"p\">{`This usage is considered advanced and should be used sparingly due\nto potential issues around edge cases as explained in the note below.`}</strong></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: You should always make sure to render `}<inlineCode parentName=\"p\">{`value || placeholder`}</inlineCode>{`\nor equivalent within the `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` to ensure that some text is\nalways visible in view mode, as `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` only displays the\ncurrent value and a pencil (on hover) when the user is not editing.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with custom view mode text\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello, world!\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          const placeholder = \"Please enter a value\";\n          return <InlineInput invalid={boolean(\"Invalid\", false)} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder={placeholder} textComponent={Heading} mdxType=\"InlineInput\">\n          <Heading id=\"inline-input-heading-example\" mdxType=\"Heading\">\n            {value || placeholder}\n          </Heading>\n        </InlineInput>;\n        }}\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { InlineInput } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.ReactNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`render function that returns children to be displayed in view mode`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the value passed to the component is not editable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fullWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`takes up 100% of the width of the container`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`helpText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`help text to be displayed below the field when no error/success present`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM for the label element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the currently inputted value is invalid`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`inputId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM id to be passed into the input as well as into the label as htmlFor`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`label to be displayed on top of the field`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`max`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`max value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`min`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`min value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.ChangeEvent, action: oneOf( \"change\", \"save\", \"cancel\", \"clear\" ) ) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when user makes a change to values; use second `}<inlineCode parentName=\"td\">{`action`}</inlineCode>{` param to determine additional behavior (e.g. when to communicate with backend, etc.)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onSaveClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when save button is clicked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onCancelClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when cancel button is clicked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClearClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when clear icon is clicked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLInputElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`status`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`success`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the current status of the form, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`statusText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates what message should be displayed as part of the status, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`step`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`step to use when bumping up numbers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`date`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` ,`}<inlineCode parentName=\"td\">{`text`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type of the input field`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`vSize`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`md`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`vertical size of the input field`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [disabled, setDisabled] = React.useState(false);\n  const [invalid, setInvalid] = React.useState(false);\n  const [value, setValue] = React.useState(\"hello\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <>\n          <InlineInput disabled={disabled} invalid={invalid} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" />\n          <hr />\n          <pre>\n            <code>field value: </code>\n            <code className=\"field-value\">{value}</code>\n          </pre>\n          <Checkbox className=\"disabled-checkbox\" onChange={() => setDisabled(!disabled)} checked={disabled}>\n            Disabled\n          </Checkbox>\n          <br />\n          <Checkbox className=\"invalid-checkbox\" onChange={() => setInvalid(!invalid)} checked={invalid}>\n            Invalid\n          </Checkbox>\n        </>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [disabled, setDisabled] = React.useState(false);\\n  const [invalid, setInvalid] = React.useState(false);\\n  const [value, setValue] = React.useState(\\\"hello\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <>\\n          <InlineInput disabled={disabled} invalid={invalid} vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} placeholder=\\\"Please enter a value\\\" />\\n          <hr />\\n          <pre>\\n            <code>field value: </code>\\n            <code className=\\\"field-value\\\">{value}</code>\\n          </pre>\\n          <Checkbox className=\\\"disabled-checkbox\\\" onChange={() => setDisabled(!disabled)} checked={disabled}>\\n            Disabled\\n          </Checkbox>\\n          <br />\\n          <Checkbox className=\\\"invalid-checkbox\\\" onChange={() => setInvalid(!invalid)} checked={invalid}>\\n            Invalid\\n          </Checkbox>\\n        </>;\\n}' } };\n\nexport const withSizeSm = (() => {\n  const [value, setValue] = React.useState(\"hello\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <InlineInput vSize=\"sm\" value={value} onChange={handleChange} placeholder=\"Please enter a value\" />;\n});\nwithSizeSm.storyName = 'with size sm';\nwithSizeSm.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <InlineInput vSize=\\\"sm\\\" value={value} onChange={handleChange} placeholder=\\\"Please enter a value\\\" />;\\n}' } };\n\nexport const withOverflow = (() => {\n  const [value, setValue] = React.useState(\"hello, world! some of this text should get cut off when editing because it's too long\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <InlineInput invalid={boolean(\"Invalid\", false)} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" />;\n});\nwithOverflow.storyName = 'with overflow';\nwithOverflow.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello, world! some of this text should get cut off when editing because it\\'s too long\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <InlineInput invalid={boolean(\\\"Invalid\\\", false)} vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} placeholder=\\\"Please enter a value\\\" />;\\n}' } };\n\nexport const withErrors = (() => {\n  const [value, setValue] = React.useState(\"hello, world!\");\n  const [error, setError] = React.useState(undefined);\n\n  const handleChange = event => {\n    // update value state\n    setValue(event.target.value); // update error state based on value\n\n    if (event.target.value !== \"\") {\n      setError(undefined);\n    } else {\n      setError(\"You must enter a value.\");\n    }\n  };\n\n  return <FieldLabel status=\"danger\" statusText={error}>\n          <InlineInput vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} invalid={!!error} placeholder=\"Please enter a value\" />\n        </FieldLabel>;\n});\nwithErrors.storyName = 'with errors';\nwithErrors.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello, world!\\\");\\n  const [error, setError] = React.useState(undefined);\\n\\n  const handleChange = event => {\\n    // update value state\\n    setValue(event.target.value); // update error state based on value\\n\\n    if (event.target.value !== \\\"\\\") {\\n      setError(undefined);\\n    } else {\\n      setError(\\\"You must enter a value.\\\");\\n    }\\n  };\\n\\n  return <FieldLabel status=\\\"danger\\\" statusText={error}>\\n          <InlineInput vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} invalid={!!error} placeholder=\\\"Please enter a value\\\" />\\n        </FieldLabel>;\\n}' } };\n\nexport const disabledUse = (() => {\n  const [value, setValue] = React.useState(\"hello, world!\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <InlineInput disabled vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" />;\n});\ndisabledUse.storyName = 'disabled use';\ndisabledUse.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello, world!\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <InlineInput disabled vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} placeholder=\\\"Please enter a value\\\" />;\\n}' } };\n\nexport const withCustomViewModeText = (() => {\n  const [value, setValue] = React.useState(\"hello, world!\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  const placeholder = \"Please enter a value\";\n  return <InlineInput invalid={boolean(\"Invalid\", false)} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder={placeholder} textComponent={Heading}>\n          <Heading id=\"inline-input-heading-example\">\n            {value || placeholder}\n          </Heading>\n        </InlineInput>;\n});\nwithCustomViewModeText.storyName = 'with custom view mode text';\nwithCustomViewModeText.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello, world!\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  const placeholder = \\\"Please enter a value\\\";\\n  return <InlineInput invalid={boolean(\\\"Invalid\\\", false)} vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} placeholder={placeholder} textComponent={Heading}>\\n          <Heading id=\\\"inline-input-heading-example\\\">\\n            {value || placeholder}\\n          </Heading>\\n        </InlineInput>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Forms/InlineInput', component: InlineInput, includeStories: [\"basicUse\",\"withSizeSm\",\"withOverflow\",\"withErrors\",\"disabledUse\",\"withCustomViewModeText\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"with size sm\":\"withSizeSm\",\"with overflow\":\"withOverflow\",\"with errors\":\"withErrors\",\"disabled use\":\"disabledUse\",\"with custom view mode text\":\"withCustomViewModeText\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React, { useCallback, useEffect, useReducer, useRef } from \"react\";\n\nimport {\n  InlineInputState,\n  Actions,\n  InlineInputProps,\n  OnChangeAction,\n} from \"./types\";\nimport { InlineInputEditMode } from \"./InlineInputEditMode\";\nimport { InlineInputViewMode } from \"./InlineInputViewMode\";\n\nexport const initialState: InlineInputState = {\n  isEditing: false,\n  prevValue: \"\",\n  transitionState: \"waiting\",\n};\n\nexport const reducer = (\n  state: InlineInputState,\n  action: Actions\n): InlineInputState => {\n  switch (action.type) {\n    case \"SET_EDIT_MODE\":\n      return { ...state, isEditing: action.value };\n    case \"SET_PREV_VALUE\":\n      return { ...state, prevValue: action.value };\n    case \"SAVE_ACTION\":\n      return {\n        ...state,\n        prevValue: action.value,\n        isEditing: false,\n      };\n    case \"CANCEL_ACTION\":\n      return { ...state, transitionState: \"canceling\" };\n    case \"CANCEL_COMPLETE_ACTION\":\n      return { ...state, transitionState: \"waiting\", isEditing: false };\n    case \"CLEAR_ACTION\":\n      return { ...state, transitionState: \"clearing\" };\n    case \"CLEAR_COMPLETE_ACTION\":\n      return { ...state, transitionState: \"waiting\" };\n    default:\n      return state;\n  }\n};\n\nexport const InlineInput = ({\n  children,\n  disabled,\n  invalid,\n  onChange,\n  onSaveClick,\n  onCancelClick,\n  onClearClick,\n  placeholder,\n  vSize = \"md\",\n  value,\n  ...props\n}: InlineInputProps): React.ReactElement => {\n  // create refs for focus and synthetic event generation\n  const inputRef = useRef<HTMLInputElement>(null);\n  const saveButtonRef = useRef<HTMLButtonElement>(null);\n  const cancelButtonRef = useRef<HTMLButtonElement>(null);\n\n  // create internal state\n  const [{ isEditing, prevValue, transitionState }, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n\n  /**\n   * function that synthetically invokes a DOM change event\n   * that can be used by `onChange` handlers using the standard\n   * 'event' pattern\n   *\n   * The core reason this function exists is to avoid having to\n   * create an `onChange` function that is called by just the\n   * current 'value' parameter. This desire is supported by the\n   * following points:\n   * - Calling `onChange` with just the new value is inconsistent\n   *   behavior with all other input fields, similar to how `Select`\n   *   works and potentially a cause of headaches/confusion in practice\n   * - A component that calls `onChange` with just the updated value\n   *   does not integrate as nicely with Formik since the latter relies\n   *   on other information in the event object (e.g. `name` to\n   *   determine which field in state the input maps to) and requires\n   *   workarounds like using setFieldValue, which is suboptimal imo\n   */\n  const makeSyntheticChangeEvent = useCallback(\n    (action: OnChangeAction) => {\n      const { current: input } = inputRef;\n\n      // if input is not defined, then stop\n      if (!input) {\n        return;\n      }\n\n      // create synthetic input event\n      const inputEvent = new Event(\"input\", { bubbles: true });\n\n      // dispatch synthetic event using current controlled value of the input field\n      input.dispatchEvent(inputEvent);\n\n      // fire the onChange prop, if it exists\n      // TODO: not a fan of going through 'unknown',\n      // there might be better way to do this\n      onChange?.(\n        inputEvent as unknown as React.ChangeEvent<HTMLInputElement>,\n        action\n      );\n    },\n    [onChange]\n  );\n\n  /**\n   * function that synthetically invokes a DOM click event\n   * that can be used by `click` handlers using the standard\n   * 'event' pattern\n   *\n   * We want to create these events in the cases where keyboard\n   * shortcuts simulate the actions of clicking buttons\n   */\n  const makeSyntheticClickEvent = useCallback(\n    (button: HTMLButtonElement | null) => {\n      // if input is not defined, then stop\n      if (!button) {\n        return;\n      }\n\n      // create synthetic click event\n      const clickEvent = new Event(\"click\", { bubbles: true });\n\n      // dispatch synthetic event using the given button\n      button.dispatchEvent(clickEvent);\n    },\n    []\n  );\n\n  /**\n   * on clear click, reset tempValue to empty string\n   */\n  const handleClear = useCallback(\n    (event: React.MouseEvent) => {\n      // call 'onClearClick' prop if defined\n      onClearClick?.(event);\n\n      // update state to indicate that the clear action has been invoked\n      dispatch({ type: \"CLEAR_ACTION\" });\n\n      // focus user back into the input field\n      inputRef.current?.focus();\n    },\n    [onClearClick]\n  );\n\n  /**\n   * on enable editing click, set isEditing to true and\n   * set tempValue equal to user supplied value, if appl.\n   */\n  const handleClickToEdit = useCallback(() => {\n    // if component is disabled, then bail\n    if (disabled) {\n      return;\n    }\n\n    // update the state to enable editing\n    dispatch({ type: \"SET_EDIT_MODE\", value: true });\n  }, [disabled]);\n\n  /**\n   * on enable editing key event, set isEditing to true\n   * and set tempValue equal to user supplies value, if appl.\n   * ONLY applies to \"space\" or \"enter\" keys\n   */\n  const handleKeyDownToEdit = useCallback((event: React.KeyboardEvent) => {\n    // if key is not space or enter, then abort\n    if (\n      event.key !== \" \" &&\n      event.key !== \"Enter\" &&\n      event.keyCode !== 32 &&\n      event.keyCode !== 13\n    ) {\n      return;\n    }\n\n    // prevent default so we don't get undesired space in the input field via propagation\n    event.preventDefault();\n\n    // enable edit mode\n    dispatch({ type: \"SET_EDIT_MODE\", value: true });\n  }, []);\n\n  /**\n   * handle cancel click\n   */\n  const handleCancelClick = useCallback(\n    (event: React.MouseEvent) => {\n      // attempt to call 'onCancelClick' with the event\n      onCancelClick?.(event);\n\n      // update state to indicate that the cancel action has been invoked\n      dispatch({ type: \"CANCEL_ACTION\" });\n    },\n    [onCancelClick]\n  );\n\n  /**\n   * Create and fire a synthetic change event when user clicks\n   * on save and call onChange with that event to update state\n   */\n  const handleSaveClick = useCallback(\n    (event: React.MouseEvent) => {\n      // fire a synthetic change event with \"save\" action\n      makeSyntheticChangeEvent(\"save\");\n\n      // attempt to call 'onSaveClick' with the event\n      onSaveClick?.(event);\n\n      // update state with a new 'value' prop as our baseline\n      dispatch({ type: \"SAVE_ACTION\", value });\n    },\n    [makeSyntheticChangeEvent, onSaveClick, value]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      // if invalid, then bail\n      if (invalid) {\n        return;\n      }\n\n      if (event.key === \"Enter\") {\n        // fire a synthetic save click event\n        makeSyntheticClickEvent(saveButtonRef.current);\n      }\n\n      if (event.key === \"Escape\") {\n        // fire a synthetic cancel click event\n        makeSyntheticClickEvent(cancelButtonRef.current);\n      }\n    },\n    [invalid, makeSyntheticClickEvent]\n  );\n\n  /**\n   * when switched into edit mode, focus on input box\n   */\n  useEffect(() => {\n    if (isEditing) {\n      inputRef.current?.focus();\n    }\n  }, [isEditing]);\n\n  /**\n   * when 'disabled' prop is changed to be true,\n   * then automatically switch to view mode\n   */\n  useEffect(() => {\n    if (disabled) {\n      dispatch({ type: \"SET_EDIT_MODE\", value: false });\n    }\n  }, [disabled]);\n\n  /**\n   * when 'invalid' prop is changed to true,\n   * then automatically switch to edit mode UNLESS disabled\n   */\n  useEffect(() => {\n    // if component is disabled, then bail\n    if (disabled) {\n      return;\n    }\n\n    // otherwise, if component is invalid, switch to edit mode\n    // since we should allow user to simply move on\n    if (invalid && !isEditing) {\n      dispatch({ type: \"SET_EDIT_MODE\", value: true });\n    }\n  }, [invalid, disabled, isEditing]);\n\n  /**\n   * when switching into edit mode, set 'prevValue' to equal prop 'value'\n   *\n   * NOTE: do NOT include 'value' since we don't want to update 'prevValue'\n   * every time 'value' changes\n   */\n  useEffect(() => {\n    if (isEditing) {\n      dispatch({ type: \"SET_PREV_VALUE\", value });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isEditing]);\n\n  /**\n   * when 'isCanceling' is true, make synthetic change event using\n   * 'prevValue' as input field value\n   */\n  useEffect(() => {\n    if (transitionState === \"canceling\") {\n      // if component is canceling the input change, then\n      // make a synthetic change event\n      makeSyntheticChangeEvent(\"cancel\");\n\n      // update state to complete cancel action\n      dispatch({ type: \"CANCEL_COMPLETE_ACTION\" });\n    }\n  }, [transitionState, makeSyntheticChangeEvent]);\n\n  /**\n   * when 'isClearing' is true, make synthetic change event using\n   * an empty string as input field value\n   */\n  useEffect(() => {\n    if (transitionState === \"clearing\") {\n      // if component is clearing the input, then\n      // make a synthetic change event\n      makeSyntheticChangeEvent(\"clear\");\n\n      // update state to complete clear action\n      dispatch({ type: \"CLEAR_COMPLETE_ACTION\" });\n    }\n  }, [transitionState, makeSyntheticChangeEvent]);\n\n  if (!isEditing && !invalid) {\n    return (\n      <InlineInputViewMode\n        disabled={disabled}\n        onClick={handleClickToEdit}\n        onKeyDownCapture={handleKeyDownToEdit}\n        placeholder={placeholder}\n        vSize={vSize}\n        value={value}\n      >\n        {children}\n      </InlineInputViewMode>\n    );\n  }\n\n  return (\n    <InlineInputEditMode\n      {...props}\n      disabled={disabled}\n      inputRef={inputRef}\n      saveButtonRef={saveButtonRef}\n      cancelButtonRef={cancelButtonRef}\n      placeholder={placeholder}\n      invalid={invalid}\n      onCancelClick={handleCancelClick}\n      onChange={onChange}\n      onClearClick={handleClear}\n      onSaveClick={handleSaveClick}\n      onKeyDown={handleKeyDown}\n      value={\n        transitionState === \"canceling\"\n          ? prevValue\n          : transitionState === \"clearing\"\n          ? \"\"\n          : value\n      }\n      vSize={vSize}\n    />\n  );\n};\n\nInlineInput.displayName = \"InlineInput\";\n","import React, { useCallback } from \"react\";\nimport classNames from \"classnames\";\n\nimport { InlineInputEditModeProps } from \"../types\";\nimport { Box } from \"../../Box\";\nimport { Button } from \"../../Button\";\nimport { Flex } from \"../../Flex\";\nimport { Icon } from \"../../Icon\";\nimport { Input } from \"../../Input\";\nimport { UncontrolledTooltip } from \"../../UncontrolledTooltip\";\n\nimport { StyledInlineInputEditMode } from \"./StyledInlineInputEditMode\";\n\nexport const InlineInputEditMode = ({\n  cancelButtonRef,\n  className,\n  inputId,\n  inputRef,\n  invalid,\n  onChange,\n  onSaveClick,\n  onCancelClick,\n  onClearClick,\n  saveButtonRef,\n  value,\n  vSize = \"md\",\n  ...props\n}: InlineInputEditModeProps): React.ReactElement | null => {\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onChange?.(event, \"change\");\n    },\n    [onChange]\n  );\n\n  return (\n    <StyledInlineInputEditMode\n      className={classNames([\"bcl-inline-input-edit-mode\", className])}\n      vSize={vSize}\n      isValueDefined={!!value}\n    >\n      <Flex inline>\n        <Box boxMargin={{ right: \"sm\" }} className=\"inline-input-container\">\n          <Input\n            {...props}\n            id={inputId}\n            value={value}\n            vSize={vSize}\n            ref={inputRef}\n            invalid={invalid}\n            onChange={handleChange}\n          />\n          <Icon\n            className=\"inline-input-clear-icon\"\n            name=\"times-circle\"\n            size=\"1x\"\n            onClick={onClearClick}\n          />\n        </Box>\n\n        <Flex className=\"inline-input-button-container\">\n          <Box inline boxMargin={{ right: \"sm\" }}>\n            <UncontrolledTooltip label=\"Save\" targetRef={saveButtonRef}>\n              <Button\n                className=\"inline-input-save-button\"\n                variant=\"primary\"\n                onClick={onSaveClick}\n                disabled={invalid}\n              >\n                <Icon name=\"check\" />\n              </Button>\n            </UncontrolledTooltip>\n          </Box>\n\n          <UncontrolledTooltip label=\"Cancel\" targetRef={cancelButtonRef}>\n            <Button\n              className=\"inline-input-cancel-button\"\n              variant=\"secondary\"\n              onClick={onCancelClick}\n              disabled={invalid}\n            >\n              <Icon name=\"times\" />\n            </Button>\n          </UncontrolledTooltip>\n        </Flex>\n      </Flex>\n    </StyledInlineInputEditMode>\n  );\n};\n\nInlineInputEditMode.displayName = \"InlineInputEditMode\";\n","import styled, { css } from \"styled-components\";\nimport { getSpacing, getColor } from \"@braze/beacon-styling\";\n\nimport { StyledInlineInputEditModeProps } from \"../types\";\nimport { StyledButton } from \"../../Button\";\nimport { StyledIcon } from \"../../Icon\";\nimport { StyledInput } from \"../../Input\";\n\nconst getSize = ({ vSize }: StyledInlineInputEditModeProps) => {\n  switch (vSize) {\n    case \"sm\":\n      return css`\n        .inline-input-container ${StyledIcon} {\n          right: ${getSpacing(\"sm\")};\n          top: 25%;\n        }\n\n        ${StyledButton} {\n          height: 32px;\n          width: 32px;\n        }\n      `;\n    case \"md\":\n    default:\n      return css`\n        .inline-input-container ${StyledIcon} {\n          right: ${getSpacing(\"md\")};\n          top: 33%;\n        }\n\n        ${StyledButton} {\n          height: 40px;\n          width: 40px;\n        }\n      `;\n  }\n};\n\nexport const StyledInlineInputEditMode = styled.div<StyledInlineInputEditModeProps>`\n  @media (max-width: 624px) {\n    .inline-input-button-container {\n      justify-content: flex-end;\n    }\n  }\n\n  .inline-input-container {\n    display: inline-block;\n    position: relative;\n\n    ${StyledIcon} {\n      position: absolute;\n      color: ${getColor(\"gray\", 300)};\n      cursor: pointer;\n      opacity: ${(props) => (props.isValueDefined ? 1 : 0)};\n\n      &:hover {\n        color: ${getColor(\"gray\", 200)};\n      }\n    }\n  }\n\n  ${StyledButton} {\n    padding: ${getSpacing(\"md\")};\n  }\n\n  ${StyledInput} {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n\n    &,\n    &:focus {\n      padding-right: ${getSpacing(\"xxl\")};\n    }\n  }\n\n  ${getSize};\n`;\n","export { InlineInputEditMode } from \"./InlineInputEditMode\";\n\nexport type { InlineInputEditModeProps } from \"../types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { InlineInputViewModeProps } from \"../types\";\nimport { BodyText } from \"../../BodyText\";\nimport { Icon } from \"../../Icon\";\n\nimport { StyledInlineInputViewMode } from \"./StyledInlineInputViewMode\";\n\nexport const InlineInputViewMode = ({\n  children,\n  className,\n  placeholder,\n  value,\n  ...props\n}: InlineInputViewModeProps): React.ReactElement => {\n  return (\n    <StyledInlineInputViewMode\n      {...props}\n      className={classNames([\"bcl-inline-input-view-mode\", className])}\n      tabIndex={0}\n    >\n      {children || (\n        <BodyText\n          className=\"inline-input_view-mode_value\"\n          variant={placeholder && !value ? \"hint\" : undefined}\n        >\n          {value || placeholder}\n        </BodyText>\n      )}\n      <Icon\n        className=\"inline-input_view-mode_icon\"\n        size=\"1x\"\n        name=\"pencil-alt\"\n      />\n    </StyledInlineInputViewMode>\n  );\n};\n\nInlineInputViewMode.displayName = \"InlineInputViewMode\";\n","import styled, { css } from \"styled-components\";\nimport { getSpacing, getIntentColor } from \"@braze/beacon-styling\";\n\nimport { StyledInlineInputViewModeProps } from \"../types\";\nimport { StyledIcon } from \"../../Icon\";\n\nconst getSize = ({ vSize }: StyledInlineInputViewModeProps) => {\n  switch (vSize) {\n    case \"sm\":\n      return css`\n        height: 32px;\n      `;\n    case \"md\":\n    default:\n      return css`\n        height: 40px;\n      `;\n  }\n};\n\nexport const StyledInlineInputViewMode = styled.div<StyledInlineInputViewModeProps>`\n  display: inline-flex;\n  align-items: center;\n  width: fit-content;\n\n  ${(props) =>\n    props.disabled\n      ? css`\n          ${StyledIcon} {\n            display: none;\n          }\n        `\n      : css`\n          ${StyledIcon} {\n            opacity: 0;\n            margin-left: ${getSpacing(\"sm\")};\n            color: ${getIntentColor(\"primary\", 500)};\n            cursor: pointer;\n          }\n\n          &:hover,\n          &:focus {\n            ${StyledIcon} {\n              opacity: 1;\n            }\n          }\n        `};\n\n  ${getSize};\n`;\n","export { InlineInputViewMode } from \"./InlineInputViewMode\";\n\nexport type { InlineInputViewModeProps } from \"../types\";\n","export { InlineInput } from \"./InlineInput\";\n\nexport type { InlineInputProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"input\"\n    }}>{`Input`}</h1>\n    <p><inlineCode parentName=\"p\">{`Input`}</inlineCode>{` lets the user input free alphanumeric strings.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`A basic input field can be used thusly. See code for how you\ncan control the state of the component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-input--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` to disable the use of the underlying\ninput:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-input--disabled\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid\"\n    }}>{`Invalid`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` to denote that the value in the input is\nnot valid:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Add a descriptive error message to the field's label to tell your user what went wrong.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-input--invalid\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"full-width\"\n    }}>{`Full width`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`fullWidth`}</inlineCode>{` to make the input field span the full\nwidth of its parent container:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-input--full-width\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"different-vertical-sizes\"\n    }}>{`Different vertical sizes`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`vSize`}</inlineCode>{` to make the `}<inlineCode parentName=\"p\">{`SearchInput`}</inlineCode>{` vertical size change to fit the container:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-input--vertical-size\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"label\"\n    }}>{`Label`}</h3>\n    <p>{`Use a `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` to add a label to the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-input--label\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"type-is-number\"\n    }}><inlineCode parentName=\"h3\">{`type`}</inlineCode>{` is \"number\"`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`type === \"number\"`}</inlineCode>{` to make the text field accept only\nnumeric values. Use props `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` to set minimum or\nmaximum values. Use prop `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` to set the increment/decrement\nfor the number values.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-input--type-number\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"type-is-date\"\n    }}><inlineCode parentName=\"h2\">{`type`}</inlineCode>{` is \"date\"`}</h2>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`type: date`}</inlineCode>{` to make the text field accept date\nvalues. This is meant to be a placeholder until we have a proper date\npicker.`}</p>\n    <p>{`Use props `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` to set minimum or\nmaximum dates. Use prop `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` to set the increment/decrement\nfor the date values in whole days.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-input--type-date\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Input } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fullWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`takes up 100% of the width of the container`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the currently inputted value is invalid`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`max`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`max value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`min`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`min value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLInputElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`step`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`step to use when bumping up numbers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`date`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` ,`}<inlineCode parentName=\"td\">{`text`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type of the input field`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( string, number, string[] )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be rendered in the input field`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`vSize`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`md`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`vertical size for input box`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\n\\nimport { FieldLabel, FieldLabelProps } from \\\"../FieldLabel\\\";\\n\\nimport docs from \\\"./Input.docs.mdx\\\";\\n\\nimport { Input, InputProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Forms/Input\\\",\\n  component: Input,\\n  parameters: {\\n    docs: {\\n      page: docs,\\n    },\\n  },\\n  argTypes: {\\n    defaultValue: {\\n      control: { type: \\\"text\\\" },\\n    },\\n  },\\n};\\n\\nexport const BasicUse = ({\\n  defaultValue,\\n  placeholder,\\n}: InputProps): React.ReactElement => {\\n  const [value, setState] = React.useState(\\\"\\\");\\n\\n  const handleChange = (event) => {\\n    setState(event.target.value);\\n  };\\n\\n  return (\\n    <div>\\n      <Input\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={handleChange}\\n        defaultValue={defaultValue}\\n      />\\n      <div id=\\\"basic-value\\\">{value}</div>\\n    </div>\\n  );\\n};\\n\\nBasicUse.args = {\\n  defaultValue: \\\"\\\",\\n  placeholder: \\\"Enter text in me!\\\",\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const WithDefaultValue = ({\\n  defaultValue,\\n}: InputProps): React.ReactElement => {\\n  return <Input placeholder=\\\"Enter text in me!\\\" defaultValue={defaultValue} />;\\n};\\n\\nWithDefaultValue.args = {\\n  defaultValue: \\\"\\\",\\n};\\n\\nWithDefaultValue.storyName = \\\"with default value\\\";\\n\\n/**\\n * This story is used to verify that when the user uncontrollably re-renders the component\\n * by passing in a new ref or a new onChange every render, it still preserves the\\n * typing state\\n */\\nexport const UncontrolledRerendering = ({\\n  defaultValue,\\n}: InputProps): React.ReactElement => {\\n  const [value, setValue] = useState(\\\"\\\");\\n\\n  const handleChange = () => {\\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\\n      setValue(e.target.value);\\n    };\\n  };\\n\\n  return (\\n    <div>\\n      <Input\\n        placeholder=\\\"Enter text in me!\\\"\\n        defaultValue={defaultValue}\\n        ref={React.createRef()}\\n        onChange={handleChange()}\\n      />\\n      <div id=\\\"rerender-value\\\">{value}</div>\\n    </div>\\n  );\\n};\\n\\nUncontrolledRerendering.args = {\\n  defaultValue: \\\"\\\",\\n};\\n\\nUncontrolledRerendering.storyName =\\n  \\\"uncontrolled rendering (re-render should preserve typing)\\\";\\n\\nexport const Disabled = (): React.ReactElement => (\\n  <Input placeholder=\\\"Enter text in me!\\\" disabled />\\n);\\n\\nDisabled.storyName = \\\"disabled\\\";\\n\\nexport const Invalid = ({\\n  statusText,\\n  label,\\n}: FieldLabelProps): React.ReactElement => {\\n  return (\\n    <FieldLabel\\n      label={label}\\n      htmlFor=\\\"textInput\\\"\\n      status=\\\"danger\\\"\\n      statusText={statusText}\\n    >\\n      <Input placeholder=\\\"Enter text in me!\\\" invalid />\\n    </FieldLabel>\\n  );\\n};\\n\\nInvalid.storyName = \\\"invalid\\\";\\n\\nInvalid.args = {\\n  label: \\\"Texty Input\\\",\\n  statusText: \\\"Please enter a valid value in this field\\\",\\n};\\n\\nexport const FullWidth = (): React.ReactElement => {\\n  return <Input placeholder=\\\"Enter text in me!\\\" fullWidth />;\\n};\\n\\nFullWidth.storyName = \\\"full width\\\";\\n\\nexport const VerticalSize = (): React.ReactElement => {\\n  return (\\n    <div>\\n      <Input placeholder=\\\"Enter text in me! (md)\\\" vSize=\\\"md\\\" />\\n      <br />\\n      <br />\\n      <Input placeholder=\\\"Enter text in me! (sm)\\\" vSize=\\\"sm\\\" />\\n    </div>\\n  );\\n};\\n\\nVerticalSize.storyName = \\\"vertical size\\\";\\n\\nexport const Label = (): React.ReactElement => {\\n  return (\\n    <FieldLabel label=\\\"Texty Input\\\" htmlFor=\\\"textInput\\\">\\n      <Input id=\\\"textInput\\\" placeholder=\\\"Enter text in me!\\\" />\\n    </FieldLabel>\\n  );\\n};\\n\\nLabel.storyName = \\\"label\\\";\\n\\nexport const TypeNumber = (): React.ReactElement => {\\n  return <div>See &apos;NumberInput&apos; component</div>;\\n};\\n\\nTypeNumber.storyName = \\\"type: number\\\";\\n\\nexport const TypeDate = (args: InputProps): React.ReactElement => {\\n  return <Input {...args} />;\\n};\\n\\nTypeDate.storyName = \\\"type: date\\\";\\n\\nTypeDate.args = {\\n  step: 2,\\n  min: \\\"1999-12-31\\\",\\n  max: \\\"2019-12-18\\\",\\n  type: \\\"date\\\",\\n  placeholder: \\\"Enter a date in me!\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":25},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":24,\"line\":25},\"endBody\":{\"col\":1,\"line\":46}},\"WithDefaultValue\":{\"startLoc\":{\"col\":32,\"line\":55},\"endLoc\":{\"col\":1,\"line\":59},\"startBody\":{\"col\":32,\"line\":55},\"endBody\":{\"col\":1,\"line\":59}},\"UncontrolledRerendering\":{\"startLoc\":{\"col\":39,\"line\":72},\"endLoc\":{\"col\":1,\"line\":94},\"startBody\":{\"col\":39,\"line\":72},\"endBody\":{\"col\":1,\"line\":94}},\"Disabled\":{\"startLoc\":{\"col\":24,\"line\":103},\"endLoc\":{\"col\":1,\"line\":105},\"startBody\":{\"col\":24,\"line\":103},\"endBody\":{\"col\":1,\"line\":105}},\"Invalid\":{\"startLoc\":{\"col\":23,\"line\":109},\"endLoc\":{\"col\":1,\"line\":123},\"startBody\":{\"col\":23,\"line\":109},\"endBody\":{\"col\":1,\"line\":123}},\"FullWidth\":{\"startLoc\":{\"col\":25,\"line\":132},\"endLoc\":{\"col\":1,\"line\":134},\"startBody\":{\"col\":25,\"line\":132},\"endBody\":{\"col\":1,\"line\":134}},\"VerticalSize\":{\"startLoc\":{\"col\":28,\"line\":138},\"endLoc\":{\"col\":1,\"line\":147},\"startBody\":{\"col\":28,\"line\":138},\"endBody\":{\"col\":1,\"line\":147}},\"Label\":{\"startLoc\":{\"col\":21,\"line\":151},\"endLoc\":{\"col\":1,\"line\":157},\"startBody\":{\"col\":21,\"line\":151},\"endBody\":{\"col\":1,\"line\":157}},\"TypeNumber\":{\"startLoc\":{\"col\":26,\"line\":161},\"endLoc\":{\"col\":1,\"line\":163},\"startBody\":{\"col\":26,\"line\":161},\"endBody\":{\"col\":1,\"line\":163}},\"TypeDate\":{\"startLoc\":{\"col\":24,\"line\":167},\"endLoc\":{\"col\":1,\"line\":169},\"startBody\":{\"col\":24,\"line\":167},\"endBody\":{\"col\":1,\"line\":169}}};\n    \nimport React, { useState } from \"react\";\n\nimport { FieldLabel, FieldLabelProps } from \"../FieldLabel\";\n\nimport docs from \"./Input.docs.mdx\";\n\nimport { Input, InputProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Forms/Input\",\n  component: Input,\n  parameters: {\n    docs: {\n      page: docs,\n    },\n  },\n  argTypes: {\n    defaultValue: {\n      control: { type: \"text\" },\n    },\n  },\n};\n\nexport const BasicUse = ({\n  defaultValue,\n  placeholder,\n}: InputProps): React.ReactElement => {\n  const [value, setState] = React.useState(\"\");\n\n  const handleChange = (event) => {\n    setState(event.target.value);\n  };\n\n  return (\n    <div>\n      <Input\n        placeholder={placeholder}\n        value={value}\n        onChange={handleChange}\n        defaultValue={defaultValue}\n      />\n      <div id=\"basic-value\">{value}</div>\n    </div>\n  );\n};;\n\nBasicUse.args = {\n  defaultValue: \"\",\n  placeholder: \"Enter text in me!\",\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const WithDefaultValue = ({\n  defaultValue,\n}: InputProps): React.ReactElement => {\n  return <Input placeholder=\"Enter text in me!\" defaultValue={defaultValue} />;\n};;\n\nWithDefaultValue.args = {\n  defaultValue: \"\",\n};\n\nWithDefaultValue.storyName = \"with default value\";\n\n/**\n * This story is used to verify that when the user uncontrollably re-renders the component\n * by passing in a new ref or a new onChange every render, it still preserves the\n * typing state\n */\nexport const UncontrolledRerendering = ({\n  defaultValue,\n}: InputProps): React.ReactElement => {\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = () => {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n    };\n  };\n\n  return (\n    <div>\n      <Input\n        placeholder=\"Enter text in me!\"\n        defaultValue={defaultValue}\n        ref={React.createRef()}\n        onChange={handleChange()}\n      />\n      <div id=\"rerender-value\">{value}</div>\n    </div>\n  );\n};;\n\nUncontrolledRerendering.args = {\n  defaultValue: \"\",\n};\n\nUncontrolledRerendering.storyName =\n  \"uncontrolled rendering (re-render should preserve typing)\";\n\nexport const Disabled = (): React.ReactElement => (\n  <Input placeholder=\"Enter text in me!\" disabled />\n);;\n\nDisabled.storyName = \"disabled\";\n\nexport const Invalid = ({\n  statusText,\n  label,\n}: FieldLabelProps): React.ReactElement => {\n  return (\n    <FieldLabel\n      label={label}\n      htmlFor=\"textInput\"\n      status=\"danger\"\n      statusText={statusText}\n    >\n      <Input placeholder=\"Enter text in me!\" invalid />\n    </FieldLabel>\n  );\n};;\n\nInvalid.storyName = \"invalid\";\n\nInvalid.args = {\n  label: \"Texty Input\",\n  statusText: \"Please enter a valid value in this field\",\n};\n\nexport const FullWidth = (): React.ReactElement => {\n  return <Input placeholder=\"Enter text in me!\" fullWidth />;\n};;\n\nFullWidth.storyName = \"full width\";\n\nexport const VerticalSize = (): React.ReactElement => {\n  return (\n    <div>\n      <Input placeholder=\"Enter text in me! (md)\" vSize=\"md\" />\n      <br />\n      <br />\n      <Input placeholder=\"Enter text in me! (sm)\" vSize=\"sm\" />\n    </div>\n  );\n};;\n\nVerticalSize.storyName = \"vertical size\";\n\nexport const Label = (): React.ReactElement => {\n  return (\n    <FieldLabel label=\"Texty Input\" htmlFor=\"textInput\">\n      <Input id=\"textInput\" placeholder=\"Enter text in me!\" />\n    </FieldLabel>\n  );\n};;\n\nLabel.storyName = \"label\";\n\nexport const TypeNumber = (): React.ReactElement => {\n  return <div>See &apos;NumberInput&apos; component</div>;\n};;\n\nTypeNumber.storyName = \"type: number\";\n\nexport const TypeDate = (args: InputProps): React.ReactElement => {\n  return <Input {...args} />;\n};\n\nTypeDate.storyName = \"type: date\";\n\nTypeDate.args = {\n  step: 2,\n  min: \"1999-12-31\",\n  max: \"2019-12-18\",\n  type: \"date\",\n  placeholder: \"Enter a date in me!\",\n};\n\n\n\nBasicUse.parameters = { storySource: { source: \"({\\n  defaultValue,\\n  placeholder,\\n}: InputProps): React.ReactElement => {\\n  const [value, setState] = React.useState(\\\"\\\");\\n\\n  const handleChange = (event) => {\\n    setState(event.target.value);\\n  };\\n\\n  return (\\n    <div>\\n      <Input\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={handleChange}\\n        defaultValue={defaultValue}\\n      />\\n      <div id=\\\"basic-value\\\">{value}</div>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nWithDefaultValue.parameters = { storySource: { source: \"({\\n  defaultValue,\\n}: InputProps): React.ReactElement => {\\n  return <Input placeholder=\\\"Enter text in me!\\\" defaultValue={defaultValue} />;\\n}\" }, ...WithDefaultValue.parameters };\nUncontrolledRerendering.parameters = { storySource: { source: \"({\\n  defaultValue,\\n}: InputProps): React.ReactElement => {\\n  const [value, setValue] = useState(\\\"\\\");\\n\\n  const handleChange = () => {\\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\\n      setValue(e.target.value);\\n    };\\n  };\\n\\n  return (\\n    <div>\\n      <Input\\n        placeholder=\\\"Enter text in me!\\\"\\n        defaultValue={defaultValue}\\n        ref={React.createRef()}\\n        onChange={handleChange()}\\n      />\\n      <div id=\\\"rerender-value\\\">{value}</div>\\n    </div>\\n  );\\n}\" }, ...UncontrolledRerendering.parameters };\nDisabled.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Input placeholder=\\\"Enter text in me!\\\" disabled />\\n)\" }, ...Disabled.parameters };\nInvalid.parameters = { storySource: { source: \"({\\n  statusText,\\n  label,\\n}: FieldLabelProps): React.ReactElement => {\\n  return (\\n    <FieldLabel\\n      label={label}\\n      htmlFor=\\\"textInput\\\"\\n      status=\\\"danger\\\"\\n      statusText={statusText}\\n    >\\n      <Input placeholder=\\\"Enter text in me!\\\" invalid />\\n    </FieldLabel>\\n  );\\n}\" }, ...Invalid.parameters };\nFullWidth.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return <Input placeholder=\\\"Enter text in me!\\\" fullWidth />;\\n}\" }, ...FullWidth.parameters };\nVerticalSize.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <div>\\n      <Input placeholder=\\\"Enter text in me! (md)\\\" vSize=\\\"md\\\" />\\n      <br />\\n      <br />\\n      <Input placeholder=\\\"Enter text in me! (sm)\\\" vSize=\\\"sm\\\" />\\n    </div>\\n  );\\n}\" }, ...VerticalSize.parameters };\nLabel.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <FieldLabel label=\\\"Texty Input\\\" htmlFor=\\\"textInput\\\">\\n      <Input id=\\\"textInput\\\" placeholder=\\\"Enter text in me!\\\" />\\n    </FieldLabel>\\n  );\\n}\" }, ...Label.parameters };\nTypeNumber.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return <div>See &apos;NumberInput&apos; component</div>;\\n}\" }, ...TypeNumber.parameters };\nTypeDate.parameters = { storySource: { source: \"(args: InputProps): React.ReactElement => {\\n  return <Input {...args} />;\\n}\" }, ...TypeDate.parameters };","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\nimport { useIME } from \"@braze/beacon-hooks\";\n\nimport { InputGroupContext } from \"../InputGroupContext\";\n\nimport { InputProps } from \"./types\";\nimport { StyledInput } from \"./StyledInput\";\n\nexport const Input = React.forwardRef(\n  (\n    {\n      className,\n      invalid,\n      type = \"text\",\n      min,\n      max,\n      vSize,\n      step,\n      onChange,\n      ...props\n    }: InputProps,\n    ref: React.RefObject<HTMLInputElement>\n  ) => {\n    const {\n      invalid: contextInvalid,\n      disabled,\n      fullWidth,\n      vSize: contextVSize,\n    } = useContext(InputGroupContext);\n\n    const imeProps = useIME<HTMLInputElement>({\n      onChange,\n      value: props.value,\n      defaultValue: props.defaultValue,\n      ref,\n    });\n\n    // combine vSize props from local and context\n    const activeVSize = vSize || contextVSize || \"md\";\n\n    return (\n      <StyledInput\n        disabled={disabled}\n        fullWidth={fullWidth}\n        {...props}\n        {...imeProps}\n        className={classNames([\n          \"bcl-input\",\n          // added because Bootstrap styles kill our styles, for cross compat reasons in platform\n          // delete when bootstrap is removed from the platform stylesheet\n          { \"bcl-input-invalid\": invalid || contextInvalid },\n          { [`bcl-input-${activeVSize}`]: activeVSize },\n          className,\n        ])}\n        invalid={invalid || contextInvalid}\n        vSize={activeVSize}\n        type={type}\n        {...(type === \"number\" || type === \"date\" ? { min, max, step } : {})}\n      />\n    );\n  }\n);\n\nInput.displayName = \"Input\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getFontFamily,\n  getFontSize,\n  getBorderWidth,\n  colorSelector,\n  getBorderRadius,\n  getColor,\n  intentColorSelector,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledInputProps } from \"./types\";\n\nexport const getSize = ({ vSize }: StyledInputProps): string | null => {\n  switch (vSize) {\n    case \"sm\":\n      return \"32px\";\n    case \"md\":\n      return \"40px\";\n    default:\n      return null;\n  }\n};\n\nexport const inputFocusCss = css<StyledInputProps>`\n  padding: 0 11px 2px;\n  border-width: ${getBorderWidth(\"thick\")};\n  border-color: ${({ invalid, ...props }) =>\n    intentColorSelector(props, invalid ? \"danger\" : \"primary\", 500)};\n  background: ${getColor(\"gray\", 0)};\n  caret-color: ${({ invalid, ...props }) =>\n    intentColorSelector(props, invalid ? \"danger\" : \"primary\", 500)};\n`;\n\nexport const StyledInput = styled.input<StyledInputProps>`\n  position: relative;\n  width: ${({ fullWidth }) => (fullWidth ? \"100%\" : \"300px\")};\n  display: inline-block;\n  box-sizing: border-box;\n  font-size: ${getFontSize(\"body\", \"md\")};\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  border: ${getBorderWidth(\"thin\")} solid\n    ${({ invalid, ...props }) =>\n      invalid\n        ? intentColorSelector(props, \"danger\", 500)\n        : colorSelector(props, \"gray\", 300)};\n  border-radius: ${getBorderRadius(\"sm\")};\n  background: ${getColor(\"gray\", 0)};\n  color: ${getColor(\"gray\", 900)};\n  height: ${getSize};\n  padding: 2px 12px 4px;\n\n  &::placeholder {\n    color: ${getColor(\"gray\", 400)};\n    font-style: italic;\n  }\n\n  &:hover,\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    background: ${getColor(\"gray\", 100)};\n    cursor: not-allowed;\n    color: ${getColor(\"gray\", 300)};\n    font-style: italic;\n  }\n\n  &:hover:not(:disabled) {\n    border-color: ${({ invalid, ...props }) =>\n      invalid\n        ? intentColorSelector(props, \"danger\", 500)\n        : colorSelector(props, \"gray\", 800)};\n  }\n\n  &:focus:not(:disabled),\n  &:active:not(:disabled) {\n    ${inputFocusCss};\n  }\n`;\n","export { Input } from \"./Input\";\n\nexport { StyledInput, getSize, inputFocusCss } from \"./StyledInput\";\n\nexport type { InputProps, StyledInputProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean } from \"@storybook/addon-knobs\";\nimport { BodyText, FieldLabel, Icon } from \"@braze/beacon-core\";\nimport { getColor } from \"@braze/beacon-styling\";\nimport { Input } from \"../Input\";\nimport { InputGroupAddon } from \"../InputGroupAddon\";\nimport { NumberInput } from \"../NumberInput\";\nimport { InputGroup } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Forms/InputGroup\" component={InputGroup} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"inputgroup\"\n    }}>{`InputGroup`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{`, along with `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{` allows you to add\nicons, text, and more seamlessly into an `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` field.`}</p>\n    <p>{`To use, import `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{`, wrap\nyour `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` field in an `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and place the `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{`\nwhere you need it to appear relative to the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` field. See\nexamples below for more details on how to use.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: You must use the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` field exported from the\n`}<inlineCode parentName=\"p\">{`@braze/beacon-components-input-group`}</inlineCode>{` library for the styles to work\ncorrectly. The props used for `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` are identical, so it should\nbe a simple switchover of imports to get started.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`STYLING: If you want to put custom styles on an `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{`\nplease use the provided `}<inlineCode parentName=\"p\">{`styledCss`}</inlineCode>{`\nprop, rather that calling `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{`\ndirectly on `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{`, to prevent unintended changes.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`The most common use for `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{` is\nwith an icon.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <>\n          <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n            <InputGroup disabled={boolean(\"Disabled\", false)} mdxType=\"InputGroup\">\n              <Input value={value} onChange={handleChange} mdxType=\"Input\" />\n              <InputGroupAddon mdxType=\"InputGroupAddon\">\n                <Icon size=\"1x\" name=\"key\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n              </InputGroupAddon>\n            </InputGroup>\n          </FieldLabel>\n          <pre>\n            <code>value: </code>\n            <code className=\"input-value\">{value}</code>\n          </pre>\n        </>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"secondary-use\"\n    }}>{`Secondary use`}</h3>\n    <p>{`You can also combine multiple addons to make more complex\nvisual cues.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"secondary use\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n      <InputGroup mdxType=\"InputGroup\">\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"dollar-sign\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n        <Input type=\"number\" mdxType=\"Input\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <BodyText mdxType=\"BodyText\">.00</BodyText>\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid-use\"\n    }}>{`Invalid use`}</h3>\n    <p>{`To properly display an `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{`, you must\npass an `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop to both `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"invalid use\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" status=\"danger\" statusText=\"Oh no, something went wrong\" mdxType=\"FieldLabel\">\n      <InputGroup invalid mdxType=\"InputGroup\">\n        <Input mdxType=\"Input\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"envelope\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`To properly display an `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{`, you must\npass an `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop to both `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled use\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n      <InputGroup disabled mdxType=\"InputGroup\">\n        <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" mdxType=\"Input\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-numberinput\"\n    }}>{`With 'NumberInput'`}</h3>\n    <p><inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` also works with the `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` component to provide similar styling.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with number input\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n      <InputGroup fullWidth mdxType=\"InputGroup\">\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"dollar-sign\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n        <NumberInput mdxType=\"NumberInput\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <BodyText mdxType=\"BodyText\">.00</BodyText>\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"full-width\"\n    }}>{`Full width`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`fullWidth`}</inlineCode>{` to make the `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` span the full width of its parent container:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"full width\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n      <InputGroup fullWidth mdxType=\"InputGroup\">\n        <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" mdxType=\"Input\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"different-vertical-sizes\"\n    }}>{`Different vertical sizes`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`vSize`}</inlineCode>{` to make the `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` vertical size change to fit its parent container:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"vertical size\" mdxType=\"Story\">\n    <React.Fragment>\n      <FieldLabel label=\"Type here (md)\" mdxType=\"FieldLabel\">\n        <InputGroup vSize=\"md\" mdxType=\"InputGroup\">\n          <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" mdxType=\"Input\" />\n          <InputGroupAddon mdxType=\"InputGroupAddon\">\n            <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n          </InputGroupAddon>\n        </InputGroup>\n      </FieldLabel>\n      <FieldLabel label=\"Type here (sm)\" mdxType=\"FieldLabel\">\n        <InputGroup vSize=\"sm\" mdxType=\"InputGroup\">\n          <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" mdxType=\"Input\" />\n          <InputGroupAddon mdxType=\"InputGroupAddon\">\n            <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n          </InputGroupAddon>\n        </InputGroup>\n      </FieldLabel>\n    </React.Fragment>\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { InputGroup, InputGroupAddon, Input } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the input group and the contained input value are disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fullWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`takes up 100% of the width of the container`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the input group and the contained input value are invalid`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [value, setValue] = React.useState(\"\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <>\n          <FieldLabel label=\"Type here\">\n            <InputGroup disabled={boolean(\"Disabled\", false)}>\n              <Input value={value} onChange={handleChange} />\n              <InputGroupAddon>\n                <Icon size=\"1x\" name=\"key\" color={getColor(\"gray\", 300)} />\n              </InputGroupAddon>\n            </InputGroup>\n          </FieldLabel>\n          <pre>\n            <code>value: </code>\n            <code className=\"input-value\">{value}</code>\n          </pre>\n        </>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <>\\n          <FieldLabel label=\\\"Type here\\\">\\n            <InputGroup disabled={boolean(\\\"Disabled\\\", false)}>\\n              <Input value={value} onChange={handleChange} />\\n              <InputGroupAddon>\\n                <Icon size=\\\"1x\\\" name=\\\"key\\\" color={getColor(\\\"gray\\\", 300)} />\\n              </InputGroupAddon>\\n            </InputGroup>\\n          </FieldLabel>\\n          <pre>\\n            <code>value: </code>\\n            <code className=\\\"input-value\\\">{value}</code>\\n          </pre>\\n        </>;\\n}' } };\n\nexport const secondaryUse = () => (\n          <FieldLabel label=\"Type here\">\n      <InputGroup>\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"dollar-sign\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n        <Input type=\"number\" />\n        <InputGroupAddon>\n          <BodyText>.00</BodyText>\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\nsecondaryUse.storyName = 'secondary use';\nsecondaryUse.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\">\\n      <InputGroup>\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"dollar-sign\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n        <Input type=\\\"number\\\" />\\n        <InputGroupAddon>\\n          <BodyText>.00</BodyText>\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const invalidUse = () => (\n          <FieldLabel label=\"Type here\" status=\"danger\" statusText=\"Oh no, something went wrong\">\n      <InputGroup invalid>\n        <Input />\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"envelope\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\ninvalidUse.storyName = 'invalid use';\ninvalidUse.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\" status=\\\"danger\\\" statusText=\\\"Oh no, something went wrong\\\">\\n      <InputGroup invalid>\\n        <Input />\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"envelope\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const disabledUse = () => (\n          <FieldLabel label=\"Type here\">\n      <InputGroup disabled>\n        <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" />\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\ndisabledUse.storyName = 'disabled use';\ndisabledUse.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\">\\n      <InputGroup disabled>\\n        <Input type=\\\"number\\\" placeholder=\\\"e.g. 5/10/2030\\\" />\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"calendar\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const withNumberInput = () => (\n          <FieldLabel label=\"Type here\">\n      <InputGroup fullWidth>\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"dollar-sign\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n        <NumberInput />\n        <InputGroupAddon>\n          <BodyText>.00</BodyText>\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\nwithNumberInput.storyName = 'with number input';\nwithNumberInput.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\">\\n      <InputGroup fullWidth>\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"dollar-sign\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n        <NumberInput />\\n        <InputGroupAddon>\\n          <BodyText>.00</BodyText>\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const fullWidth = () => (\n          <FieldLabel label=\"Type here\">\n      <InputGroup fullWidth>\n        <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" />\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\nfullWidth.storyName = 'full width';\nfullWidth.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\">\\n      <InputGroup fullWidth>\\n        <Input type=\\\"number\\\" placeholder=\\\"e.g. 5/10/2030\\\" />\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"calendar\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const verticalSize = () => (\n          <React.Fragment>\n      <FieldLabel label=\"Type here (md)\">\n        <InputGroup vSize=\"md\">\n          <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" />\n          <InputGroupAddon>\n            <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} />\n          </InputGroupAddon>\n        </InputGroup>\n      </FieldLabel>\n      <FieldLabel label=\"Type here (sm)\">\n        <InputGroup vSize=\"sm\">\n          <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" />\n          <InputGroupAddon>\n            <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} />\n          </InputGroupAddon>\n        </InputGroup>\n      </FieldLabel>\n    </React.Fragment>\n        );\nverticalSize.storyName = 'vertical size';\nverticalSize.parameters = { storySource: { source: '<React.Fragment>\\n      <FieldLabel label=\\\"Type here (md)\\\">\\n        <InputGroup vSize=\\\"md\\\">\\n          <Input type=\\\"number\\\" placeholder=\\\"e.g. 5/10/2030\\\" />\\n          <InputGroupAddon>\\n            <Icon size=\\\"1x\\\" name=\\\"calendar\\\" color={getColor(\\\"gray\\\", 300)} />\\n          </InputGroupAddon>\\n        </InputGroup>\\n      </FieldLabel>\\n      <FieldLabel label=\\\"Type here (sm)\\\">\\n        <InputGroup vSize=\\\"sm\\\">\\n          <Input type=\\\"number\\\" placeholder=\\\"e.g. 5/10/2030\\\" />\\n          <InputGroupAddon>\\n            <Icon size=\\\"1x\\\" name=\\\"calendar\\\" color={getColor(\\\"gray\\\", 300)} />\\n          </InputGroupAddon>\\n        </InputGroup>\\n      </FieldLabel>\\n    </React.Fragment>' } };\n\nconst componentMeta = { title: 'Core/Forms/InputGroup', component: InputGroup, includeStories: [\"basicUse\",\"secondaryUse\",\"invalidUse\",\"disabledUse\",\"withNumberInput\",\"fullWidth\",\"verticalSize\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"secondary use\":\"secondaryUse\",\"invalid use\":\"invalidUse\",\"disabled use\":\"disabledUse\",\"with number input\":\"withNumberInput\",\"full width\":\"fullWidth\",\"vertical size\":\"verticalSize\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React, { forwardRef } from \"react\";\nimport classNames from \"classnames\";\n\nimport { InputGroupContextProvider } from \"../InputGroupContext\";\n\nimport { InputGroupProps } from \"./types\";\nimport { StyledInputGroup } from \"./StyledInputGroup\";\n\nexport const InputGroup = forwardRef(\n  (\n    {\n      className,\n      disabled,\n      fullWidth,\n      invalid,\n      vSize,\n      ...props\n    }: InputGroupProps,\n    ref: React.RefObject<HTMLDivElement>\n  ): React.ReactElement => {\n    return (\n      <InputGroupContextProvider\n        disabled={disabled}\n        fullWidth={fullWidth}\n        invalid={invalid}\n        vSize={vSize}\n      >\n        <StyledInputGroup\n          {...props}\n          ref={ref}\n          className={classNames([\"bcl-input-group\", className, { disabled }])}\n          disabled={disabled}\n          fullWidth={fullWidth}\n          invalid={invalid}\n          vSize={vSize}\n        />\n      </InputGroupContextProvider>\n    );\n  }\n);\n\nInputGroup.displayName = \"InputGroup\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getBorderWidth,\n  colorSelector,\n  intentColorSelector,\n} from \"@braze/beacon-styling\";\n\nimport { StyledInputGroupAddon } from \"../InputGroupAddon\";\nimport { StyledInput, getSize, inputFocusCss } from \"../Input\";\nimport { StyledNumberInput } from \"../NumberInput\";\n\nimport { StyledInputGroupProps } from \"./types\";\n\nconst notFirstChildCss = css`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  border-left: none;\n  padding-left: 11px;\n`;\nconst notLastChildCss = css`\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border-right: none;\n  padding-right: 11px;\n`;\n\nexport const StyledInputGroup = styled.div<StyledInputGroupProps>`\n  display: inline-flex;\n  flex-wrap: nowrap;\n  height: ${getSize};\n  width: ${({ fullWidth }) => (fullWidth ? \"100%\" : \"300px\")};\n\n  & > ${StyledInput} {\n    &:not(:first-child) {\n      ${notFirstChildCss};\n    }\n\n    &:not(:last-child) {\n      ${notLastChildCss};\n    }\n  }\n\n  ${StyledNumberInput} {\n    &:not(:first-child) > ${StyledInput} {\n      ${notFirstChildCss};\n    }\n\n    &:not(:last-child) > ${StyledInput} {\n      ${notLastChildCss};\n    }\n  }\n\n  &:focus-within {\n    ${StyledInput} {\n      ${inputFocusCss};\n    }\n\n    ${StyledInputGroupAddon} {\n      border-width: ${getBorderWidth(\"thick\")};\n      border-color: ${({ invalid, ...props }) =>\n        intentColorSelector(props, invalid ? \"danger\" : \"primary\", 500)};\n\n      &:first-of-type:first-child {\n        margin-left: -1px;\n      }\n\n      &:last-of-type:last-child {\n        margin-right: -1px;\n      }\n    }\n  }\n\n  &:hover:not(:focus-within):not(.disabled) {\n    ${StyledInput}, ${StyledInputGroupAddon} {\n      border-color: ${({ invalid, ...props }) =>\n        invalid\n          ? intentColorSelector(props, \"danger\", 500)\n          : colorSelector(props, \"gray\", 800)};\n    }\n  }\n`;\n","export { InputGroup } from \"./InputGroup\";\n\nexport type { InputGroupProps } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { InputGroupContext } from \"../InputGroupContext\";\n\nimport { InputGroupAddonProps } from \"./types\";\nimport { StyledInputGroupAddon } from \"./StyledInputGroupAddon\";\n\nexport const InputGroupAddon = ({\n  className,\n  ...props\n}: InputGroupAddonProps): React.ReactElement => {\n  const { disabled, invalid } = useContext(InputGroupContext);\n\n  return (\n    <StyledInputGroupAddon\n      disabled={disabled}\n      invalid={invalid}\n      {...props}\n      className={classNames([\"bcl-input-group-addon\", className])}\n    />\n  );\n};\n\nInputGroupAddon.displayName = \"InputGroupAddon\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getSpacing,\n  getColor,\n  getBorderWidth,\n  colorSelector,\n  intentColorSelector,\n  getBorderRadius,\n} from \"@braze/beacon-styling\";\n\nimport { StyledInputGroupAddonProps } from \"./types\";\n\nconst disabledStyles = ({ disabled }: StyledInputGroupAddonProps) => {\n  if (!disabled) {\n    return null;\n  }\n\n  return css`\n    background: ${getColor(\"gray\", 100)};\n    cursor: not-allowed;\n    color: ${getColor(\"gray\", 300)};\n    font-style: italic;\n  `;\n};\n\nexport const StyledInputGroupAddon = styled.div<StyledInputGroupAddonProps>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 ${getSpacing(\"md\")};\n  background: ${getColor(\"gray\", 0)};\n  border-top-width: ${getBorderWidth(\"thin\")};\n  border-bottom-width: ${getBorderWidth(\"thin\")};\n  border-top-style: solid;\n  border-bottom-style: solid;\n  border-color: ${({ invalid, ...props }) =>\n    invalid\n      ? intentColorSelector(props, \"danger\", 500)\n      : colorSelector(props, \"gray\", 300)};\n\n  &:first-child {\n    border-left: ${getBorderWidth(\"thin\")} solid\n      ${({ invalid, ...props }) =>\n        invalid\n          ? intentColorSelector(props, \"danger\", 500)\n          : colorSelector(props, \"gray\", 300)};\n    border-top-left-radius: ${getBorderRadius(\"sm\")};\n    border-bottom-left-radius: ${getBorderRadius(\"sm\")};\n  }\n\n  &:last-child {\n    border-right: ${getBorderWidth(\"thin\")} solid\n      ${({ invalid, ...props }) =>\n        invalid\n          ? intentColorSelector(props, \"danger\", 500)\n          : colorSelector(props, \"gray\", 300)};\n    border-top-right-radius: ${getBorderRadius(\"sm\")};\n    border-bottom-right-radius: ${getBorderRadius(\"sm\")};\n  }\n\n  ${disabledStyles};\n\n  ${(props) => props.styledCss}\n`;\n","export { InputGroupAddon } from \"./InputGroupAddon\";\n\nexport { StyledInputGroupAddon } from \"./StyledInputGroupAddon\";\n\nexport type { InputGroupAddonProps, StyledInputGroupAddonProps } from \"./types\";\n","import React, { createContext } from \"react\";\n\nimport {\n  InputGroupContextInterface,\n  InputGroupContextProviderProps,\n} from \"./types\";\n\nexport const InputGroupContext = createContext<InputGroupContextInterface>({});\n\nexport const InputGroupContextProvider = ({\n  children,\n  disabled,\n  fullWidth,\n  invalid,\n  vSize,\n}: InputGroupContextProviderProps): React.ReactElement => (\n  <InputGroupContext.Provider value={{ disabled, fullWidth, invalid, vSize }}>\n    {children}\n  </InputGroupContext.Provider>\n);\n","export {\n  InputGroupContext,\n  InputGroupContextProvider,\n} from \"./InputGroupContext\";\n\nexport type {\n  InputGroupContextInterface,\n  InputGroupContextProviderProps,\n  VerticalInputSize,\n} from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"label\"\n    }}>{`Label`}</h1>\n    <p>{`A label component is typically used alongside form fields, radio buttons, and\ncheckboxes to denote their purpose. Many components incorporate this component\ndirectly via a `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` prop, so please check the documentation to see if a\ncomponent already supports rendering `}<inlineCode parentName=\"p\">{`Label`}</inlineCode>{` natively.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Label`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-label--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Label } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`htmlFor`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode>{` value of the object the label should be associated to`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`style`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport page from \\\"./Label.docs.mdx\\\";\\n\\nimport { Label } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Text/Label\\\",\\n  component: Label,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = (): React.ReactElement => {\\n  return <Label>This is a basic label</Label>;\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":16},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":24,\"line\":16},\"endBody\":{\"col\":1,\"line\":18}}};\n    \nimport React from \"react\";\n\nimport page from \"./Label.docs.mdx\";\n\nimport { Label } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Text/Label\",\n  component: Label,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = (): React.ReactElement => {\n  return <Label>This is a basic label</Label>;\n};\n\nBasicUse.storyName = \"basic use\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return <Label>This is a basic label</Label>;\\n}\" }, ...BasicUse.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { LabelProps } from \"./types\";\nimport { StyledLabel } from \"./StyledLabel\";\n\nexport const Label = ({\n  className,\n  ...props\n}: LabelProps): React.ReactElement => (\n  <StyledLabel {...props} className={classNames([\"bcl-label\", className])} />\n);\n","import styled from \"styled-components\";\nimport {\n  getColor,\n  getFontFamily,\n  getFontSize,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledLabelProps } from \"./types\";\n\nexport const StyledLabel = styled.label<StyledLabelProps>`\n  display: inline-block;\n  position: relative;\n  margin-bottom: 0.5rem;\n  vertical-align: bottom;\n  color: ${getColor(\"gray\", 800)};\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  font-size: ${getFontSize(\"body\", \"sm\")};\n`;\n","export { Label } from \"./Label\";\n\nexport type { LabelProps } from \"./types\";\n","/**\n * @fileoverview handles providing context for zIndexing\n *\n * the LevelsContextProvider handles calculating and providing the z indices of\n * it's children, NOT the component that renders it\n *\n */\nimport React, { createContext, useContext } from \"react\";\n\nexport interface LevelsContextProviderProps {\n  /** children to render inside the context provider */\n  children?: React.ReactNode | React.ReactNode[];\n  /** the amount to step forward by for the children */\n  step: number;\n  /** the base zIndex if there is no parent level */\n  base: number;\n  /** zIndex override for the level - the calculated child zIndex will be ignored */\n  level?: number;\n}\n\nexport const LevelsContext = createContext<number | undefined>(undefined);\n\n/**\n * calculate the context for children components\n *\n * @param step the amount to \"step\" forward by\n * @param base the \"base\" z index if you are on level 1\n *\n */\nexport const useLevelsContext = (step: number, base: number): number => {\n  const prevLevel = useContext(LevelsContext);\n\n  if (!prevLevel) {\n    return step + base;\n  }\n\n  return prevLevel + step;\n};\n\nexport const LevelsContextProvider = ({\n  step,\n  base,\n  level: levelOverride,\n  children,\n}: LevelsContextProviderProps): React.ReactElement => {\n  const level = useLevelsContext(step, base);\n\n  return (\n    <LevelsContext.Provider value={levelOverride || level}>\n      {children}\n    </LevelsContext.Provider>\n  );\n};\n","export {\n  LevelsContext,\n  LevelsContextProvider,\n  useLevelsContext,\n} from \"./LevelsContext\";\n\nexport type { LevelsContextProviderProps } from \"./LevelsContext\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"link\"\n    }}>{`Link`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` component is a navigational element that renders an anchor\ntag by default. This component should be used primarily for navigation.`}</p>\n    <p>{`Note that the `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` component also supports an `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop to render another\ncomponent to the DOM with the same styles, which is particularly useful for\nalternative navigational libraries like `}<inlineCode parentName=\"p\">{`react-router-dom`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Without any `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` prop defined, the `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` component has basic styles\napplied to it and should be used as a primary link that you want your users\nto notice/find easily.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-link--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"table-variant\"\n    }}>{`Table variant`}</h3>\n    <p>{`The table `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` of the `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` component has a more subdued style to\nminimize visual clutter in an already cluttered space.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-link--table-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"inline-variant\"\n    }}>{`Inline variant`}</h3>\n    <p>{`Another `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` of the `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` component is inline, which is most suitable\nfor use inside a body of text as opposed to when it exists alone. In this case,\nthe font size of `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` will inherit that of its container.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: For call to action links, we can pass `}<inlineCode parentName=\"p\">{`isCTA`}</inlineCode>{` property to Link component.\nIf we add `}<inlineCode parentName=\"p\">{`isCTA`}</inlineCode>{` property, the link will not wrap onto multiple lines.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-link--inline-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`To indicate that a link is currently inacessible, set the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` link\nto true.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-link--disabled-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"external-links\"\n    }}>{`External Links`}</h3>\n    <p>{`Setting the `}<inlineCode parentName=\"p\">{`showExternalLinkIcon`}</inlineCode>{` property to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` on the external link which has `}<inlineCode parentName=\"p\">{`target=\"_blank\"`}</inlineCode>{` will display an external link icon next to the link text.\nUse when the link takes users to a new page outside of the current app.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-link--external-link\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Link } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the button should be visually and functionally disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isCTA`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the link is a call-to-action link`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`table`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`inline`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`visual variant for the link component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`href`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the url to redirect to`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`showExternalLinkIcon`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that external link icon should be displayed for external link`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`target`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`_blank`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`_self`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`_parent`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`_top`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`where the redirection should happen`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { getIntentColor } from \\\"@braze/beacon-styling\\\";\\n\\nimport { Icon } from \\\"../Icon\\\";\\nimport { Popover, usePopover } from \\\"../Popover\\\";\\nimport { PopoverBody } from \\\"../PopoverBody\\\";\\n\\nimport page from \\\"./Link.docs.mdx\\\";\\n\\nimport { Link, LinkProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Primitives/Link\\\",\\n  component: Link,\\n  argTypes: {\\n    variant: {\\n      mapping: {\\n        \\\"No variant\\\": undefined,\\n        table: \\\"table\\\",\\n        inline: \\\"inline\\\",\\n      },\\n      control: {\\n        type: \\\"select\\\",\\n        options: [\\\"No variant\\\", \\\"table\\\", \\\"inline\\\"],\\n      },\\n    },\\n    disabled: {\\n      type: \\\"boolean\\\",\\n    },\\n    target: {\\n      control: { type: \\\"text\\\" },\\n    },\\n    rel: {\\n      control: { type: \\\"text\\\" },\\n    },\\n  },\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = (args: LinkProps): React.ReactElement => {\\n  return (\\n    <Link {...args} href=\\\"https://www.google.com\\\">\\n      Click here\\n    </Link>\\n  );\\n};\\n\\nBasicUse.args = {\\n  disabled: false,\\n  target: \\\"\\\",\\n  rel: \\\"\\\",\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const TableVariant = (args: LinkProps): React.ReactElement => {\\n  return (\\n    <Link variant=\\\"table\\\" {...args}>\\n      Click here\\n    </Link>\\n  );\\n};\\n\\nTableVariant.args = {\\n  variant: \\\"table\\\",\\n  disabled: false,\\n  target: \\\"\\\",\\n  rel: \\\"\\\",\\n};\\n\\nTableVariant.storyName = \\\"table variant\\\";\\n\\nexport const InlineVariant = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover();\\n\\n  return (\\n    <React.Fragment>\\n      <Icon\\n        id=\\\"info-icon\\\"\\n        name=\\\"info-circle\\\"\\n        size=\\\"1x\\\"\\n        color={getIntentColor(\\\"primary\\\", 500)}\\n        ref={targetRef}\\n      />\\n      <Popover\\n        interactive\\n        {...popoverState}\\n        targetRef={targetRef}\\n        triggers={[\\\"click\\\", \\\"mouseenter\\\"]}\\n        untriggers={[\\\"mouseleave\\\"]}\\n      >\\n        <PopoverBody>\\n          Create Content Test Groups <Link variant=\\\"inline\\\">here</Link>. Groups\\n          must have Content Test property enabled in order to send test\\n          messages.{\\\" \\\"}\\n          <Link\\n            variant=\\\"inline\\\"\\n            target=\\\"_blank\\\"\\n            showExternalLinkIcon={true}\\n            isCTA\\n          >\\n            Learn More\\n          </Link>\\n        </PopoverBody>\\n      </Popover>\\n    </React.Fragment>\\n  );\\n};\\n\\nInlineVariant.storyName = \\\"inline variant\\\";\\n\\nexport const DisabledUse = (): React.ReactElement => {\\n  return <Link disabled>Click here</Link>;\\n};\\n\\nDisabledUse.storyName = \\\"disabled use\\\";\\n\\nexport const ExternalLink = (args: LinkProps): React.ReactElement => {\\n  return (\\n    <Link {...args} href=\\\"https://www.google.com\\\">\\n      External link\\n    </Link>\\n  );\\n};\\n\\nExternalLink.args = {\\n  disabled: false,\\n  target: \\\"_blank\\\",\\n  rel: \\\"\\\",\\n  showExternalLinkIcon: true,\\n};\\n\\nExternalLink.storyName = \\\"external link\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":43},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":24,\"line\":43},\"endBody\":{\"col\":1,\"line\":49}},\"TableVariant\":{\"startLoc\":{\"col\":28,\"line\":59},\"endLoc\":{\"col\":1,\"line\":65},\"startBody\":{\"col\":28,\"line\":59},\"endBody\":{\"col\":1,\"line\":65}},\"InlineVariant\":{\"startLoc\":{\"col\":29,\"line\":76},\"endLoc\":{\"col\":1,\"line\":111},\"startBody\":{\"col\":29,\"line\":76},\"endBody\":{\"col\":1,\"line\":111}},\"DisabledUse\":{\"startLoc\":{\"col\":27,\"line\":115},\"endLoc\":{\"col\":1,\"line\":117},\"startBody\":{\"col\":27,\"line\":115},\"endBody\":{\"col\":1,\"line\":117}},\"ExternalLink\":{\"startLoc\":{\"col\":28,\"line\":121},\"endLoc\":{\"col\":1,\"line\":127},\"startBody\":{\"col\":28,\"line\":121},\"endBody\":{\"col\":1,\"line\":127}}};\n    \nimport React from \"react\";\nimport { getIntentColor } from \"@braze/beacon-styling\";\n\nimport { Icon } from \"../Icon\";\nimport { Popover, usePopover } from \"../Popover\";\nimport { PopoverBody } from \"../PopoverBody\";\n\nimport page from \"./Link.docs.mdx\";\n\nimport { Link, LinkProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Primitives/Link\",\n  component: Link,\n  argTypes: {\n    variant: {\n      mapping: {\n        \"No variant\": undefined,\n        table: \"table\",\n        inline: \"inline\",\n      },\n      control: {\n        type: \"select\",\n        options: [\"No variant\", \"table\", \"inline\"],\n      },\n    },\n    disabled: {\n      type: \"boolean\",\n    },\n    target: {\n      control: { type: \"text\" },\n    },\n    rel: {\n      control: { type: \"text\" },\n    },\n  },\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = (args: LinkProps): React.ReactElement => {\n  return (\n    <Link {...args} href=\"https://www.google.com\">\n      Click here\n    </Link>\n  );\n};;\n\nBasicUse.args = {\n  disabled: false,\n  target: \"\",\n  rel: \"\",\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const TableVariant = (args: LinkProps): React.ReactElement => {\n  return (\n    <Link variant=\"table\" {...args}>\n      Click here\n    </Link>\n  );\n};;\n\nTableVariant.args = {\n  variant: \"table\",\n  disabled: false,\n  target: \"\",\n  rel: \"\",\n};\n\nTableVariant.storyName = \"table variant\";\n\nexport const InlineVariant = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover();\n\n  return (\n    <React.Fragment>\n      <Icon\n        id=\"info-icon\"\n        name=\"info-circle\"\n        size=\"1x\"\n        color={getIntentColor(\"primary\", 500)}\n        ref={targetRef}\n      />\n      <Popover\n        interactive\n        {...popoverState}\n        targetRef={targetRef}\n        triggers={[\"click\", \"mouseenter\"]}\n        untriggers={[\"mouseleave\"]}\n      >\n        <PopoverBody>\n          Create Content Test Groups <Link variant=\"inline\">here</Link>. Groups\n          must have Content Test property enabled in order to send test\n          messages.{\" \"}\n          <Link\n            variant=\"inline\"\n            target=\"_blank\"\n            showExternalLinkIcon={true}\n            isCTA\n          >\n            Learn More\n          </Link>\n        </PopoverBody>\n      </Popover>\n    </React.Fragment>\n  );\n};;\n\nInlineVariant.storyName = \"inline variant\";\n\nexport const DisabledUse = (): React.ReactElement => {\n  return <Link disabled>Click here</Link>;\n};;\n\nDisabledUse.storyName = \"disabled use\";\n\nexport const ExternalLink = (args: LinkProps): React.ReactElement => {\n  return (\n    <Link {...args} href=\"https://www.google.com\">\n      External link\n    </Link>\n  );\n};\n\nExternalLink.args = {\n  disabled: false,\n  target: \"_blank\",\n  rel: \"\",\n  showExternalLinkIcon: true,\n};\n\nExternalLink.storyName = \"external link\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: LinkProps): React.ReactElement => {\\n  return (\\n    <Link {...args} href=\\\"https://www.google.com\\\">\\n      Click here\\n    </Link>\\n  );\\n}\" }, ...BasicUse.parameters };\nTableVariant.parameters = { storySource: { source: \"(args: LinkProps): React.ReactElement => {\\n  return (\\n    <Link variant=\\\"table\\\" {...args}>\\n      Click here\\n    </Link>\\n  );\\n}\" }, ...TableVariant.parameters };\nInlineVariant.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover();\\n\\n  return (\\n    <React.Fragment>\\n      <Icon\\n        id=\\\"info-icon\\\"\\n        name=\\\"info-circle\\\"\\n        size=\\\"1x\\\"\\n        color={getIntentColor(\\\"primary\\\", 500)}\\n        ref={targetRef}\\n      />\\n      <Popover\\n        interactive\\n        {...popoverState}\\n        targetRef={targetRef}\\n        triggers={[\\\"click\\\", \\\"mouseenter\\\"]}\\n        untriggers={[\\\"mouseleave\\\"]}\\n      >\\n        <PopoverBody>\\n          Create Content Test Groups <Link variant=\\\"inline\\\">here</Link>. Groups\\n          must have Content Test property enabled in order to send test\\n          messages.{\\\" \\\"}\\n          <Link\\n            variant=\\\"inline\\\"\\n            target=\\\"_blank\\\"\\n            showExternalLinkIcon={true}\\n            isCTA\\n          >\\n            Learn More\\n          </Link>\\n        </PopoverBody>\\n      </Popover>\\n    </React.Fragment>\\n  );\\n}\" }, ...InlineVariant.parameters };\nDisabledUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return <Link disabled>Click here</Link>;\\n}\" }, ...DisabledUse.parameters };\nExternalLink.parameters = { storySource: { source: \"(args: LinkProps): React.ReactElement => {\\n  return (\\n    <Link {...args} href=\\\"https://www.google.com\\\">\\n      External link\\n    </Link>\\n  );\\n}\" }, ...ExternalLink.parameters };","import { useI18nNamespace } from \"@braze/beacon-translations\";\nimport React, { forwardRef } from \"react\";\n\nimport { ScreenReaderText } from \"../ScreenReaderText\";\nimport { Icon } from \"../Icon\";\n\nimport { StyledLink } from \"./StyledLink\";\nimport { LinkProps } from \"./types\";\n\nexport const Link = forwardRef(\n  (\n    props: LinkProps,\n    ref: React.RefObject<HTMLAnchorElement>\n  ): React.ReactElement => {\n    const { t } = useI18nNamespace(\"beacon-field-label\");\n\n    if (props?.target === \"_blank\") {\n      return (\n        <>\n          <ScreenReaderText id=\"open-in-new-tab\">\n            {t(\"open-in-new-tab\", \"Opening in a new tab\")}\n          </ScreenReaderText>\n          <StyledLink\n            ref={ref}\n            {...props}\n            rel={props?.rel || \"nofollow noreferrer\"}\n            aria-labelledby=\"open-in-new-tab\"\n          >\n            {props.children}\n            {props.showExternalLinkIcon && (\n              <Icon\n                name={\"external-link-alt\"}\n                size=\"1x\"\n                className=\"external-link-icon\"\n              />\n            )}\n          </StyledLink>\n        </>\n      );\n    }\n\n    return <StyledLink ref={ref} {...props} />;\n  }\n);\n\nLink.displayName = \"Link\";\n","import classNames from \"classnames\";\nimport styled, { css } from \"styled-components\";\nimport {\n  getFontFamily,\n  getFontSize,\n  getColor,\n  getFontWeight,\n  getSpacing,\n} from \"@braze/beacon-styling\";\n\nimport { LinkProps } from \"./types\";\n\nconst getLinkStyles = ({ disabled }: LinkProps) => {\n  if (disabled) {\n    return css`\n      cursor: no-drop;\n      color: ${getColor(\"gray\", 400)};\n    `;\n  }\n\n  return css`\n    &:focus,\n    &:hover {\n      color: ${getColor(\"blue\", 600)};\n      text-decoration: underline;\n    }\n  `;\n};\n\nconst getAttrs = ({ className }: LinkProps) => ({\n  className: classNames(className, \"bcl-link\"),\n});\n\nexport const StyledLink = styled.a.attrs(getAttrs)<LinkProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  font-size: ${(props) =>\n    props.variant === \"inline\" ? \"inherit\" : getFontSize(\"body\", \"md\")};\n  text-decoration: ${(props) =>\n    props.variant === \"table\" ? \"none\" : \"underline\"};\n  color: ${getColor(\"blue\", 400)};\n  cursor: pointer;\n  vertical-align: baseline;\n  ${(props) =>\n    props.isCTA &&\n    css`\n      white-space: nowrap;\n    `}\n\n  .external-link-icon {\n    margin-left: ${getSpacing(\"xs\")};\n  }\n\n  ${getLinkStyles};\n`;\n","export { Link } from \"./Link\";\n\nexport { StyledLink } from \"./StyledLink\";\n\nexport type { LinkProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"loremipsum\"\n    }}>{`LoremIpsum`}</h1>\n    <p><inlineCode parentName=\"p\">{`LoremIpsum`}</inlineCode>{` generates one or more lorem ipsum paragraphs, up to\n10 paragraphs.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`LoremIpsum`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Without any props, `}<inlineCode parentName=\"p\">{`LoremIpsum`}</inlineCode>{` generates a single paragraph.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-loremipsum--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"multiple-paragraphs\"\n    }}>{`Multiple paragraphs`}</h3>\n    <p>{`By passing a number for the `}<inlineCode parentName=\"p\">{`paragraph`}</inlineCode>{` prop, you can change\nthe number of paragraphs rendered by `}<inlineCode parentName=\"p\">{`LoremIpsum`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-text-loremipsum--secondary-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`paragraphs`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of lipsum paragraphs to render`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport page from \\\"./LoremIpsum.docs.mdx\\\";\\n\\nimport { LoremIpsum, LoremIpsumProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Text/LoremIpsum\\\",\\n  component: LoremIpsum,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = (): React.ReactElement => {\\n  return <LoremIpsum />;\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const SecondaryUse = (args: LoremIpsumProps): React.ReactElement => {\\n  return <LoremIpsum {...args} />;\\n};\\n\\nSecondaryUse.args = {\\n  paragraphs: 2,\\n};\\n\\nSecondaryUse.storyName = \\\"secondary use\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":16},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":24,\"line\":16},\"endBody\":{\"col\":1,\"line\":18}},\"SecondaryUse\":{\"startLoc\":{\"col\":28,\"line\":22},\"endLoc\":{\"col\":1,\"line\":24},\"startBody\":{\"col\":28,\"line\":22},\"endBody\":{\"col\":1,\"line\":24}}};\n    \nimport React from \"react\";\n\nimport page from \"./LoremIpsum.docs.mdx\";\n\nimport { LoremIpsum, LoremIpsumProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Text/LoremIpsum\",\n  component: LoremIpsum,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = (): React.ReactElement => {\n  return <LoremIpsum />;\n};;\n\nBasicUse.storyName = \"basic use\";\n\nexport const SecondaryUse = (args: LoremIpsumProps): React.ReactElement => {\n  return <LoremIpsum {...args} />;\n};\n\nSecondaryUse.args = {\n  paragraphs: 2,\n};\n\nSecondaryUse.storyName = \"secondary use\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return <LoremIpsum />;\\n}\" }, ...BasicUse.parameters };\nSecondaryUse.parameters = { storySource: { source: \"(args: LoremIpsumProps): React.ReactElement => {\\n  return <LoremIpsum {...args} />;\\n}\" }, ...SecondaryUse.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { Box } from \"../Box\";\n\nimport { LoremIpsumProps } from \"./types\";\n\nconst text = [\n  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque egestas porta. Vivamus dui urna, vestibulum et erat et, luctus imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in, volutpat neque. Sed egestas condimentum orci, ac finibus urna sodales ac.\",\n  \"Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis, eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium. Sed tempor nulla ac egestas vestibulum. Praesent venenatis gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a diam euismod iaculis.\",\n  \"Cras arcu velit, aliquet at odio vitae, volutpat lobortis sapien. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Curabitur mollis mi non ante vestibulum maximus. Suspendisse potenti. Quisque sagittis, tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat eros nulla at nunc. Morbi interdum in elit consequat volutpat. Sed at augue in arcu interdum luctus. Nunc pretium neque et bibendum malesuada. Aliquam et enim a enim dictum porta non vitae sem. Nullam sit amet placerat mauris, sed pretium arcu. Nunc finibus neque ac velit euismod, non fermentum nibh auctor. Suspendisse vitae arcu molestie, dapibus dui vel, varius quam. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec sit amet lorem vitae dolor ullamcorper feugiat imperdiet in tellus. Sed et risus condimentum, vulputate nulla quis, mattis magna.\",\n  \"Proin mattis magna purus, ac eleifend ante mollis in. Sed tincidunt aliquam urna. Donec condimentum, diam id varius sodales, ligula diam vulputate risus, ac dictum augue metus id nisl. Nulla facilisi. Phasellus lobortis odio nec massa finibus vehicula. Mauris efficitur nisi ac vestibulum scelerisque. Cras accumsan est ac est tristique, id placerat diam interdum. Suspendisse vulputate molestie odio a efficitur. Fusce viverra mi eros, in pellentesque erat dapibus eget. Donec iaculis lectus arcu, at faucibus erat rhoncus vel. Aenean accumsan, tortor non rutrum varius, tellus justo euismod nisl, in rhoncus ipsum elit nec ante. Cras vel magna interdum, mattis nisi eget, suscipit nunc. Vestibulum venenatis mi vel lobortis eleifend.\",\n  \"Nullam sit amet venenatis urna. Etiam pretium, purus eu cursus venenatis, elit odio sodales metus, eu tincidunt ipsum dolor a dolor. Donec vulputate, lorem in bibendum tristique, quam arcu eleifend tortor, et malesuada ex nisi cursus mi. Pellentesque eget cursus neque, quis vulputate lacus. Vivamus tempor velit eget ipsum iaculis viverra. Vestibulum mattis malesuada nisl vel posuere. Nam ullamcorper congue metus, eget rhoncus libero iaculis non. Curabitur rutrum quis sapien rutrum blandit. Cras quis consequat enim. Mauris luctus semper erat non molestie. Vivamus cursus in mi sed tincidunt. Donec accumsan mi at vulputate feugiat. Vestibulum feugiat sem quis ex pretium ultricies. Fusce non quam tincidunt, malesuada sem ut, eleifend nunc. Duis tempus nulla turpis, ac dictum ipsum dignissim ac.\",\n  \"Vivamus interdum feugiat purus, at facilisis massa maximus ut. In cursus tortor a metus efficitur, quis aliquet arcu euismod. Curabitur fringilla in massa interdum viverra. Vestibulum volutpat, libero iaculis venenatis cursus, magna orci mollis eros, a lobortis justo ipsum a justo. Donec porta in purus eu condimentum. Integer sit amet laoreet orci. Donec tempor erat eu feugiat feugiat. Donec accumsan purus ex, feugiat lobortis ante aliquam vel. In posuere augue sed lectus eleifend ultricies. Etiam eleifend sem magna. Sed convallis velit in sollicitudin tincidunt. Mauris sed velit nec odio sagittis feugiat id vel magna. Duis iaculis porta est, ut finibus justo hendrerit vitae. Cras rutrum at est eget egestas. Mauris ac aliquam dui.\",\n  \"Morbi euismod sodales euismod. Nunc rutrum pretium purus et lobortis. Donec vulputate vitae leo lobortis euismod. Phasellus interdum vitae ex ut lacinia. Vivamus luctus auctor ligula, vel tempor mi vestibulum nec. Interdum et malesuada fames ac ante ipsum primis in faucibus. Ut pretium vel tortor vel tristique. Ut eleifend vulputate malesuada. Donec consectetur justo in pretium interdum. Suspendisse rhoncus eleifend leo elementum porta. Aenean ut nisl id ante lobortis fringilla ac ut orci.\",\n  \"Aenean placerat nisl ac cursus euismod. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. In purus nunc, ultrices sit amet purus ut, ultrices eleifend lectus. Vestibulum ut auctor metus, nec pellentesque lacus. Suspendisse luctus elementum libero sit amet volutpat. Cras molestie tortor sem, sit amet consequat augue maximus eu. Aenean pretium ornare augue, eu rhoncus risus. Ut ac pretium ante.\",\n  \"Interdum et malesuada fames ac ante ipsum primis in faucibus. Proin lacinia nisl dolor, nec luctus leo luctus et. Phasellus a nulla eget ligula tempus tincidunt. Duis eget tortor eget dolor convallis dapibus. Nunc augue purus, consectetur vitae vulputate nec, convallis id ex. Vestibulum tincidunt gravida enim. Ut sagittis est blandit odio consequat consequat. Quisque tristique rutrum felis in suscipit. Donec suscipit, velit ut gravida placerat, nibh justo viverra sapien, et finibus ligula ligula id arcu. Donec vitae sem posuere, efficitur arcu id, ultrices dolor. Duis vel erat vitae magna consequat sollicitudin quis non leo. Vivamus lectus enim, tristique sit amet convallis eget, feugiat eget nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n];\n\nexport const LoremIpsum = ({\n  className,\n  paragraphs = 1,\n  ...props\n}: LoremIpsumProps): React.ReactElement => {\n  return (\n    <div {...props} className={classNames([\"bcl-lorem-ipsum\", className])}>\n      {text.slice(0, paragraphs).map((t, idx) => (\n        <Box boxMargin={{ bottom: \"md\" }} key={idx}>\n          {t}\n        </Box>\n      ))}\n    </div>\n  );\n};\n","export { LoremIpsum } from \"./LoremIpsum\";\n\nexport type { LoremIpsumProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { Menu } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Overlay/Menu\" component={Menu} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"menu\"\n    }}>{`Menu`}</h1>\n    <p><inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` is a floating panel that contains a list of actions,\nNOT selected values. These actions can be within the page\nor navigational in their nature.`}</p>\n    <p>{`To ensure that your `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` components are accessible, we\nrecommend the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Give a unique DOM id to the menu target (the target is usually a `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{`, pass the `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` attribute to this button)`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-haspopup=\"true\"`}</inlineCode>{` to the menu target`}</li>\n      <li parentName=\"ul\">{`Give a unique DOM id to the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{` component`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-controls=\"<menu-id>\"`}</inlineCode>{` to the menu target,\nwhere `}<inlineCode parentName=\"li\">{`<menu-id`}</inlineCode>{`> is the DOM id of the menu`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-expanded=\"<value>\"`}</inlineCode>{` to the menu target,\nwhere `}<inlineCode parentName=\"li\">{`<value>`}</inlineCode>{` is the boolean indicating whether the menu is open`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-labelledby=\"<target-id>\"`}</inlineCode>{` to the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{`,\nwhere the `}<inlineCode parentName=\"li\">{`<target-id>`}</inlineCode>{` is the DOM id of the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{` target element`}</li>\n      <li parentName=\"ul\">{`Give unique DOM ids to each button inside a `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode></li>\n    </ul>\n    <p>{`To learn more about menu accessibility, check out `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-actions-active-descendant.html\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`these`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`links`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use-with-action-buttons\"\n    }}>{`Basic use with action buttons`}</h3>\n    <p>{`Action buttons are typically used to make something happen\nwithout leaving the current page/pill that the user is on.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-menu--basic-use-with-action-buttons\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"basic-use-with-category-buttons\"\n    }}>{`Basic use with category buttons`}</h3>\n    <p>{`Category buttons are typically navigational in nature and\noften redirect the user to another page/pill on click.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-menu--basic-use-with-category-buttons\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-action-buttons-and-icons\"\n    }}>{`With action buttons and icons`}</h3>\n    <p>{`Action buttons can also be decorated with icons to visually\nset them apart more easily.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-menu--with-action-buttons-icons\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-category-buttons-and-icons\"\n    }}>{`With category buttons and icons`}</h3>\n    <p>{`Just like action buttons, category buttons can also\nbe decorated with icons to visually set them apart\nmore easily.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-menu--with-category-buttons-icons\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-grouped-action-buttons-and-no-header\"\n    }}>{`With grouped action buttons and no header`}</h3>\n    <p>{`It may be desirable to group related action buttons\ntogether to make it easier for the user to find what\nthey're looking for via the `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{` component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-menu--with-grouped-action-buttons-no-header\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-grouped-action-buttons-and-header\"\n    }}>{`With grouped action buttons and header`}</h3>\n    <p>{`In addition to grouping buttons together, you may also want\nto denote a specific group by giving it a name. You can do\nso using the `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` prop in `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-menu--with-grouped-action-buttons-header\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-grouped-category-buttons-and-no-header\"\n    }}>{`With grouped category buttons and no header`}</h3>\n    <p>{`It may be desirable to group related action buttons\ntogether to make it easier for the user to find what\nthey're looking for via the `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{` component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-menu--with-grouped-category-buttons-no-header\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-grouped-category-buttons-and-header\"\n    }}>{`With grouped category buttons and header`}</h3>\n    <p>{`In addition to grouping buttons together, you may also want\nto denote a specific group by giving it a name. You can do\nso using the `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` prop in `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-menu--with-grouped-category-buttons-header\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  Menu,\n  MenuActionButton,\n  MenuCategoryButton,\n  MenuGroup,\n} from \"@braze/beacon-labs-menu\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"menu-1\"\n    }}><inlineCode parentName=\"h3\">{`Menu`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( ReactNode, ReactNode[], ({ activePlacement, targetDimensions, popperDimensions }) => ReactNode )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component, or a render prop that accepts the auto-calculated placement plus the dimensions of the target and the popper (or undefined if not available)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickInside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu should be closed when a user clicks inside the menu; does NOT prevent event handlers from firing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickOutside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu should be closed when a user clicks outside the target or the menu`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`delay`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( `}<inlineCode parentName=\"td\">{`[number OR null, number OR null]`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the amount of time, if any, to delay opening and/or closing the menu by`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`distance`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`8`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from bottom of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fixed`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`set to true if the Popover is not meant to move with the page`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`determines if the component should be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hideTopMargin`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu doesn't have any spacing on top`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be opened`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClose`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be closed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`placement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`,`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bottom`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Popover relative to target`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`portalRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref of Portal inside which Popover will be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed to the parent menu element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM id to be passed to the parent menu element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`skidding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from left of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`styledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`target`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired target component's ID`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`targetRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to pass down to the target object`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`triggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseenter`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`focus`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for menu on behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`untriggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseleave`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`blur`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for menu off behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(`}<inlineCode parentName=\"td\">{`default`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`nav`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`nav`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`different visual treatments depending on menu use case`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`1031`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index for the component and its sub-components`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"menuactionbutton\"\n    }}><inlineCode parentName=\"h3\">{`MenuActionButton`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`iconName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`see `}<inlineCode parentName=\"td\">{`BrazeIcon`}</inlineCode>{` docs for list of allowed icons`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name of spot icon to be rendered, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies the type of button for the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"menucategorybutton\"\n    }}><inlineCode parentName=\"h3\">{`MenuCategoryButton`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`heading`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`heading to be displayed in the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`iconName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`see `}<inlineCode parentName=\"td\">{`BrazeIcon`}</inlineCode>{` docs for list of allowed icons`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name of spot icon to be rendered, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies the type of button for the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"menugroup\"\n    }}><inlineCode parentName=\"h3\">{`MenuGroup`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`heading`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`heading to be displayed in the group, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\n\\nimport { Button } from \\\"../Button\\\";\\nimport { Flex } from \\\"../Flex\\\";\\nimport { MenuActionButton } from \\\"../MenuActionButton\\\";\\nimport { MenuCategoryButton } from \\\"../MenuCategoryButton\\\";\\nimport { MenuGroup } from \\\"../MenuGroup\\\";\\nimport { placementTypes } from \\\"../Popper\\\";\\n\\nimport { Menu, useMenu } from \\\"./Menu\\\";\\nimport page from \\\"./Menu.docs.mdx\\\";\\nimport { MenuProps } from \\\"./types\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Overlay/Menu\\\",\\n  component: Menu,\\n  parameters: { docs: { page } },\\n  argTypes: {\\n    closeOnClickInside: {\\n      control: { type: \\\"boolean\\\" },\\n      defaultValue: false,\\n    },\\n    placement: {\\n      options: placementTypes,\\n      control: { type: \\\"select\\\" },\\n      defaultValue: \\\"bottom-start\\\",\\n    },\\n    variant: {\\n      options: [\\\"default\\\", \\\"nav\\\"],\\n      control: { type: \\\"select\\\" },\\n      defaultValue: \\\"default\\\",\\n    },\\n  },\\n} as ComponentMeta<typeof Menu>;\\n\\nexport const BasicUseWithActionButtons = ({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Flex\\n        justifyContent=\\\"center\\\"\\n        alignItems=\\\"center\\\"\\n        style={{ height: \\\"90vh\\\" }}\\n      >\\n        <Button\\n          ref={targetRef}\\n          className=\\\"open-close-button\\\"\\n          id=\\\"menu1-button\\\"\\n          aria-haspopup=\\\"true\\\"\\n          aria-controls=\\\"menu1\\\"\\n          aria-expanded={menuState.isOpen}\\n        >\\n          Click to open\\n        </Button>\\n      </Flex>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu1\\\"\\n        aria-labelledby=\\\"menu1-button\\\"\\n      >\\n        <MenuActionButton id=\\\"mi1\\\">User Preview</MenuActionButton>\\n        <MenuActionButton id=\\\"mi2\\\">CSV Export User Data</MenuActionButton>\\n        <MenuActionButton id=\\\"mi3\\\">CSV Export Email Address</MenuActionButton>\\n        <MenuActionButton id=\\\"mi4\\\">\\n          Export as Facebook Audience\\n        </MenuActionButton>\\n        <MenuActionButton disabled id=\\\"mi32\\\">\\n          Export as Google+ Audience\\n        </MenuActionButton>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n};\\n\\nBasicUseWithActionButtons.storyName = \\\"basic use w/ action buttons\\\";\\n\\nexport const BasicUseWithCategoryButtons = ({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu2-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu2\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu2\\\"\\n        aria-labelledby=\\\"menu2-button\\\"\\n      >\\n        <MenuCategoryButton id=\\\"mi5\\\" heading=\\\"Retention Report\\\">\\n          Identify if users come back over time\\n        </MenuCategoryButton>\\n        <MenuCategoryButton id=\\\"mi6\\\" heading=\\\"Funnel Report\\\">\\n          Pinpoint where and why users drop off\\n        </MenuCategoryButton>\\n        <MenuCategoryButton id=\\\"mi7\\\" heading=\\\"Campaign Comparison\\\">\\n          Measure the impact of different campaigns\\n        </MenuCategoryButton>\\n        <MenuCategoryButton id=\\\"mi33\\\" heading=\\\"Beta Feature\\\" disabled>\\n          This is disabled\\n        </MenuCategoryButton>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n};\\n\\nBasicUseWithCategoryButtons.storyName = \\\"basic use w/ category buttons\\\";\\n\\nexport const WithActionButtonsIcons = ({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu3-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu3\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu3\\\"\\n        aria-labelledby=\\\"menu3-button\\\"\\n      >\\n        <MenuActionButton id=\\\"mi8\\\" iconName=\\\"eye\\\">\\n          User Preview\\n        </MenuActionButton>\\n        <MenuActionButton id=\\\"mi9\\\" iconName=\\\"file-alt\\\">\\n          CSV Export User Data\\n        </MenuActionButton>\\n        <MenuActionButton id=\\\"mi10\\\" iconName=\\\"file-alt\\\">\\n          CSV Export Email Address\\n        </MenuActionButton>\\n        <MenuActionButton id=\\\"mi11\\\" iconName={[\\\"fab\\\", \\\"facebook-square\\\"]}>\\n          Export as Facebook Audience\\n        </MenuActionButton>\\n        <MenuActionButton\\n          id=\\\"mi34\\\"\\n          iconName={[\\\"fab\\\", \\\"google-plus-square\\\"]}\\n          disabled\\n        >\\n          Export as Google+ Audience\\n        </MenuActionButton>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithActionButtonsIcons.storyName = \\\"w/ action buttons + icons\\\";\\n\\nexport const WithCategoryButtonsIcons = ({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu4-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu4\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu4\\\"\\n        aria-labelledby=\\\"menu4-button\\\"\\n      >\\n        <MenuCategoryButton\\n          id=\\\"mi12\\\"\\n          heading=\\\"Retention Report\\\"\\n          iconName=\\\"retention-report\\\"\\n        >\\n          Identify if users come back over time\\n        </MenuCategoryButton>\\n        <MenuCategoryButton\\n          id=\\\"mi13\\\"\\n          heading=\\\"Funnel Report\\\"\\n          iconName=\\\"funnel-report\\\"\\n        >\\n          Pinpoint where and why users drop off\\n        </MenuCategoryButton>\\n        <MenuCategoryButton\\n          id=\\\"mi14\\\"\\n          heading=\\\"Campaign Comparison\\\"\\n          iconName=\\\"campaign-comparison\\\"\\n        >\\n          Measure the impact of different campaigns\\n        </MenuCategoryButton>\\n        <MenuCategoryButton\\n          id=\\\"mi34\\\"\\n          heading=\\\"Beta Feature\\\"\\n          iconName=\\\"campaign-comparison\\\"\\n          disabled\\n        >\\n          Measure the impact of different campaigns\\n        </MenuCategoryButton>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithCategoryButtonsIcons.storyName = \\\"w/ category buttons + icons\\\";\\n\\nexport const WithGroupedActionButtonsNoHeader = ({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu5-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu5\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu5\\\"\\n        aria-labelledby=\\\"menu5-button\\\"\\n      >\\n        <MenuGroup>\\n          <MenuActionButton id=\\\"mi15\\\">Print Chart</MenuActionButton>\\n        </MenuGroup>\\n        <MenuGroup>\\n          <MenuActionButton id=\\\"mi16\\\">Download PNG Image</MenuActionButton>\\n          <MenuActionButton id=\\\"mi17\\\">Download JPEG Image</MenuActionButton>\\n          <MenuActionButton id=\\\"mi18\\\">Download PDF Document</MenuActionButton>\\n          <MenuActionButton id=\\\"mi19\\\">\\n            Download SVG Vector Image\\n          </MenuActionButton>\\n          <MenuActionButton id=\\\"mi20\\\">Download CSV</MenuActionButton>\\n        </MenuGroup>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithGroupedActionButtonsNoHeader.storyName =\\n  \\\"w/ grouped action buttons + no header\\\";\\n\\nexport const WithGroupedActionButtonsHeader = ({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu6-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu6\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu6\\\"\\n        aria-labelledby=\\\"menu6-button\\\"\\n      >\\n        <MenuGroup heading=\\\"Message One or More Channels\\\">\\n          <MenuActionButton id=\\\"mi21\\\">Multichannel Campaign</MenuActionButton>\\n        </MenuGroup>\\n        <MenuGroup heading=\\\"Single Channel With Multivariate Testing\\\">\\n          <MenuActionButton id=\\\"mi22\\\">Email</MenuActionButton>\\n          <MenuActionButton id=\\\"mi23\\\">Push Notification</MenuActionButton>\\n          <MenuActionButton id=\\\"mi24\\\">In-App Messaging</MenuActionButton>\\n          <MenuActionButton id=\\\"mi25\\\">Content Card</MenuActionButton>\\n        </MenuGroup>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithGroupedActionButtonsHeader.storyName = \\\"w/ grouped action buttons + header\\\";\\n\\nexport const WithGroupedCategoryButtonsNoHeader = ({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu7-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu7\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu7\\\"\\n        aria-labelledby=\\\"menu7-button\\\"\\n      >\\n        <MenuGroup>\\n          <MenuCategoryButton id=\\\"mi26\\\" heading=\\\"Retention Report\\\">\\n            Identify if users come back over time\\n          </MenuCategoryButton>\\n        </MenuGroup>\\n        <MenuGroup>\\n          <MenuCategoryButton id=\\\"mi27\\\" heading=\\\"Funnel Report\\\">\\n            Pinpoint where and why users drop off\\n          </MenuCategoryButton>\\n          <MenuCategoryButton id=\\\"mi28\\\" heading=\\\"Campaign Comparison\\\">\\n            Measure the impact of different campaigns\\n          </MenuCategoryButton>\\n        </MenuGroup>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithGroupedCategoryButtonsNoHeader.storyName =\\n  \\\"w/ grouped category buttons + no header\\\";\\n\\nexport const WithGroupedCategoryButtonsHeader = ({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu8-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu8\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu8\\\"\\n        aria-labelledby=\\\"menu8-button\\\"\\n      >\\n        <MenuGroup heading=\\\"Report\\\">\\n          <MenuCategoryButton id=\\\"mi29\\\" heading=\\\"Retention Report\\\">\\n            Identify if users come back over time\\n          </MenuCategoryButton>\\n        </MenuGroup>\\n        <MenuGroup heading=\\\"Comparison\\\">\\n          <MenuCategoryButton id=\\\"mi30\\\" heading=\\\"Funnel Report\\\">\\n            Pinpoint where and why users drop off\\n          </MenuCategoryButton>\\n          <MenuCategoryButton id=\\\"mi31\\\" heading=\\\"Campaign Comparison\\\">\\n            Measure the impact of different campaigns\\n          </MenuCategoryButton>\\n        </MenuGroup>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithGroupedCategoryButtonsHeader.storyName =\\n  \\\"w/ grouped category buttons + header\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUseWithActionButtons\":{\"startLoc\":{\"col\":41,\"line\":38},\"endLoc\":{\"col\":1,\"line\":84},\"startBody\":{\"col\":41,\"line\":38},\"endBody\":{\"col\":1,\"line\":84}},\"BasicUseWithCategoryButtons\":{\"startLoc\":{\"col\":43,\"line\":88},\"endLoc\":{\"col\":1,\"line\":131},\"startBody\":{\"col\":43,\"line\":88},\"endBody\":{\"col\":1,\"line\":131}},\"WithActionButtonsIcons\":{\"startLoc\":{\"col\":38,\"line\":135},\"endLoc\":{\"col\":1,\"line\":185},\"startBody\":{\"col\":38,\"line\":135},\"endBody\":{\"col\":1,\"line\":185}},\"WithCategoryButtonsIcons\":{\"startLoc\":{\"col\":40,\"line\":189},\"endLoc\":{\"col\":1,\"line\":249},\"startBody\":{\"col\":40,\"line\":189},\"endBody\":{\"col\":1,\"line\":249}},\"WithGroupedActionButtonsNoHeader\":{\"startLoc\":{\"col\":48,\"line\":253},\"endLoc\":{\"col\":1,\"line\":296},\"startBody\":{\"col\":48,\"line\":253},\"endBody\":{\"col\":1,\"line\":296}},\"WithGroupedActionButtonsHeader\":{\"startLoc\":{\"col\":46,\"line\":301},\"endLoc\":{\"col\":1,\"line\":341},\"startBody\":{\"col\":46,\"line\":301},\"endBody\":{\"col\":1,\"line\":341}},\"WithGroupedCategoryButtonsNoHeader\":{\"startLoc\":{\"col\":50,\"line\":345},\"endLoc\":{\"col\":1,\"line\":389},\"startBody\":{\"col\":50,\"line\":345},\"endBody\":{\"col\":1,\"line\":389}},\"WithGroupedCategoryButtonsHeader\":{\"startLoc\":{\"col\":48,\"line\":394},\"endLoc\":{\"col\":1,\"line\":438},\"startBody\":{\"col\":48,\"line\":394},\"endBody\":{\"col\":1,\"line\":438}}};\n    \nimport React from \"react\";\nimport { ComponentMeta } from \"@storybook/react\";\n\nimport { Button } from \"../Button\";\nimport { Flex } from \"../Flex\";\nimport { MenuActionButton } from \"../MenuActionButton\";\nimport { MenuCategoryButton } from \"../MenuCategoryButton\";\nimport { MenuGroup } from \"../MenuGroup\";\nimport { placementTypes } from \"../Popper\";\n\nimport { Menu, useMenu } from \"./Menu\";\nimport page from \"./Menu.docs.mdx\";\nimport { MenuProps } from \"./types\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Overlay/Menu\",\n  component: Menu,\n  parameters: { docs: { page } },\n  argTypes: {\n    closeOnClickInside: {\n      control: { type: \"boolean\" },\n      defaultValue: false,\n    },\n    placement: {\n      options: placementTypes,\n      control: { type: \"select\" },\n      defaultValue: \"bottom-start\",\n    },\n    variant: {\n      options: [\"default\", \"nav\"],\n      control: { type: \"select\" },\n      defaultValue: \"default\",\n    },\n  },\n} as ComponentMeta<typeof Menu>;\n\nexport const BasicUseWithActionButtons = ({\n  closeOnClickInside,\n  placement,\n  variant,\n}: MenuProps) => {\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Flex\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        style={{ height: \"90vh\" }}\n      >\n        <Button\n          ref={targetRef}\n          className=\"open-close-button\"\n          id=\"menu1-button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"menu1\"\n          aria-expanded={menuState.isOpen}\n        >\n          Click to open\n        </Button>\n      </Flex>\n      <Menu\n        {...menuState}\n        targetRef={targetRef}\n        placement={placement}\n        variant={variant}\n        closeOnClickInside={closeOnClickInside}\n        id=\"menu1\"\n        aria-labelledby=\"menu1-button\"\n      >\n        <MenuActionButton id=\"mi1\">User Preview</MenuActionButton>\n        <MenuActionButton id=\"mi2\">CSV Export User Data</MenuActionButton>\n        <MenuActionButton id=\"mi3\">CSV Export Email Address</MenuActionButton>\n        <MenuActionButton id=\"mi4\">\n          Export as Facebook Audience\n        </MenuActionButton>\n        <MenuActionButton disabled id=\"mi32\">\n          Export as Google+ Audience\n        </MenuActionButton>\n      </Menu>\n    </React.Fragment>\n  );\n};;\n\nBasicUseWithActionButtons.storyName = \"basic use w/ action buttons\";\n\nexport const BasicUseWithCategoryButtons = ({\n  closeOnClickInside,\n  placement,\n  variant,\n}: MenuProps) => {\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Button\n        ref={targetRef}\n        className=\"open-close-button\"\n        id=\"menu2-button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"menu2\"\n        aria-expanded={menuState.isOpen}\n      >\n        Click to open\n      </Button>\n      <Menu\n        {...menuState}\n        targetRef={targetRef}\n        placement={placement}\n        variant={variant}\n        closeOnClickInside={closeOnClickInside}\n        id=\"menu2\"\n        aria-labelledby=\"menu2-button\"\n      >\n        <MenuCategoryButton id=\"mi5\" heading=\"Retention Report\">\n          Identify if users come back over time\n        </MenuCategoryButton>\n        <MenuCategoryButton id=\"mi6\" heading=\"Funnel Report\">\n          Pinpoint where and why users drop off\n        </MenuCategoryButton>\n        <MenuCategoryButton id=\"mi7\" heading=\"Campaign Comparison\">\n          Measure the impact of different campaigns\n        </MenuCategoryButton>\n        <MenuCategoryButton id=\"mi33\" heading=\"Beta Feature\" disabled>\n          This is disabled\n        </MenuCategoryButton>\n      </Menu>\n    </React.Fragment>\n  );\n};;\n\nBasicUseWithCategoryButtons.storyName = \"basic use w/ category buttons\";\n\nexport const WithActionButtonsIcons = ({\n  closeOnClickInside,\n  placement,\n  variant,\n}: MenuProps) => {\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Button\n        ref={targetRef}\n        className=\"open-close-button\"\n        id=\"menu3-button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"menu3\"\n        aria-expanded={menuState.isOpen}\n      >\n        Click to open\n      </Button>\n      <Menu\n        {...menuState}\n        targetRef={targetRef}\n        placement={placement}\n        variant={variant}\n        closeOnClickInside={closeOnClickInside}\n        id=\"menu3\"\n        aria-labelledby=\"menu3-button\"\n      >\n        <MenuActionButton id=\"mi8\" iconName=\"eye\">\n          User Preview\n        </MenuActionButton>\n        <MenuActionButton id=\"mi9\" iconName=\"file-alt\">\n          CSV Export User Data\n        </MenuActionButton>\n        <MenuActionButton id=\"mi10\" iconName=\"file-alt\">\n          CSV Export Email Address\n        </MenuActionButton>\n        <MenuActionButton id=\"mi11\" iconName={[\"fab\", \"facebook-square\"]}>\n          Export as Facebook Audience\n        </MenuActionButton>\n        <MenuActionButton\n          id=\"mi34\"\n          iconName={[\"fab\", \"google-plus-square\"]}\n          disabled\n        >\n          Export as Google+ Audience\n        </MenuActionButton>\n      </Menu>\n    </React.Fragment>\n  );\n};;\n\nWithActionButtonsIcons.storyName = \"w/ action buttons + icons\";\n\nexport const WithCategoryButtonsIcons = ({\n  closeOnClickInside,\n  placement,\n  variant,\n}: MenuProps) => {\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Button\n        ref={targetRef}\n        className=\"open-close-button\"\n        id=\"menu4-button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"menu4\"\n        aria-expanded={menuState.isOpen}\n      >\n        Click to open\n      </Button>\n      <Menu\n        {...menuState}\n        targetRef={targetRef}\n        placement={placement}\n        variant={variant}\n        closeOnClickInside={closeOnClickInside}\n        id=\"menu4\"\n        aria-labelledby=\"menu4-button\"\n      >\n        <MenuCategoryButton\n          id=\"mi12\"\n          heading=\"Retention Report\"\n          iconName=\"retention-report\"\n        >\n          Identify if users come back over time\n        </MenuCategoryButton>\n        <MenuCategoryButton\n          id=\"mi13\"\n          heading=\"Funnel Report\"\n          iconName=\"funnel-report\"\n        >\n          Pinpoint where and why users drop off\n        </MenuCategoryButton>\n        <MenuCategoryButton\n          id=\"mi14\"\n          heading=\"Campaign Comparison\"\n          iconName=\"campaign-comparison\"\n        >\n          Measure the impact of different campaigns\n        </MenuCategoryButton>\n        <MenuCategoryButton\n          id=\"mi34\"\n          heading=\"Beta Feature\"\n          iconName=\"campaign-comparison\"\n          disabled\n        >\n          Measure the impact of different campaigns\n        </MenuCategoryButton>\n      </Menu>\n    </React.Fragment>\n  );\n};;\n\nWithCategoryButtonsIcons.storyName = \"w/ category buttons + icons\";\n\nexport const WithGroupedActionButtonsNoHeader = ({\n  closeOnClickInside,\n  placement,\n  variant,\n}: MenuProps) => {\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Button\n        ref={targetRef}\n        className=\"open-close-button\"\n        id=\"menu5-button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"menu5\"\n        aria-expanded={menuState.isOpen}\n      >\n        Click to open\n      </Button>\n      <Menu\n        {...menuState}\n        targetRef={targetRef}\n        placement={placement}\n        variant={variant}\n        closeOnClickInside={closeOnClickInside}\n        id=\"menu5\"\n        aria-labelledby=\"menu5-button\"\n      >\n        <MenuGroup>\n          <MenuActionButton id=\"mi15\">Print Chart</MenuActionButton>\n        </MenuGroup>\n        <MenuGroup>\n          <MenuActionButton id=\"mi16\">Download PNG Image</MenuActionButton>\n          <MenuActionButton id=\"mi17\">Download JPEG Image</MenuActionButton>\n          <MenuActionButton id=\"mi18\">Download PDF Document</MenuActionButton>\n          <MenuActionButton id=\"mi19\">\n            Download SVG Vector Image\n          </MenuActionButton>\n          <MenuActionButton id=\"mi20\">Download CSV</MenuActionButton>\n        </MenuGroup>\n      </Menu>\n    </React.Fragment>\n  );\n};;\n\nWithGroupedActionButtonsNoHeader.storyName =\n  \"w/ grouped action buttons + no header\";\n\nexport const WithGroupedActionButtonsHeader = ({\n  closeOnClickInside,\n  placement,\n  variant,\n}: MenuProps) => {\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Button\n        ref={targetRef}\n        className=\"open-close-button\"\n        id=\"menu6-button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"menu6\"\n        aria-expanded={menuState.isOpen}\n      >\n        Click to open\n      </Button>\n      <Menu\n        {...menuState}\n        targetRef={targetRef}\n        placement={placement}\n        variant={variant}\n        closeOnClickInside={closeOnClickInside}\n        id=\"menu6\"\n        aria-labelledby=\"menu6-button\"\n      >\n        <MenuGroup heading=\"Message One or More Channels\">\n          <MenuActionButton id=\"mi21\">Multichannel Campaign</MenuActionButton>\n        </MenuGroup>\n        <MenuGroup heading=\"Single Channel With Multivariate Testing\">\n          <MenuActionButton id=\"mi22\">Email</MenuActionButton>\n          <MenuActionButton id=\"mi23\">Push Notification</MenuActionButton>\n          <MenuActionButton id=\"mi24\">In-App Messaging</MenuActionButton>\n          <MenuActionButton id=\"mi25\">Content Card</MenuActionButton>\n        </MenuGroup>\n      </Menu>\n    </React.Fragment>\n  );\n};;\n\nWithGroupedActionButtonsHeader.storyName = \"w/ grouped action buttons + header\";\n\nexport const WithGroupedCategoryButtonsNoHeader = ({\n  closeOnClickInside,\n  placement,\n  variant,\n}: MenuProps) => {\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Button\n        ref={targetRef}\n        className=\"open-close-button\"\n        id=\"menu7-button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"menu7\"\n        aria-expanded={menuState.isOpen}\n      >\n        Click to open\n      </Button>\n      <Menu\n        {...menuState}\n        targetRef={targetRef}\n        placement={placement}\n        variant={variant}\n        closeOnClickInside={closeOnClickInside}\n        id=\"menu7\"\n        aria-labelledby=\"menu7-button\"\n      >\n        <MenuGroup>\n          <MenuCategoryButton id=\"mi26\" heading=\"Retention Report\">\n            Identify if users come back over time\n          </MenuCategoryButton>\n        </MenuGroup>\n        <MenuGroup>\n          <MenuCategoryButton id=\"mi27\" heading=\"Funnel Report\">\n            Pinpoint where and why users drop off\n          </MenuCategoryButton>\n          <MenuCategoryButton id=\"mi28\" heading=\"Campaign Comparison\">\n            Measure the impact of different campaigns\n          </MenuCategoryButton>\n        </MenuGroup>\n      </Menu>\n    </React.Fragment>\n  );\n};;\n\nWithGroupedCategoryButtonsNoHeader.storyName =\n  \"w/ grouped category buttons + no header\";\n\nexport const WithGroupedCategoryButtonsHeader = ({\n  closeOnClickInside,\n  placement,\n  variant,\n}: MenuProps) => {\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Button\n        ref={targetRef}\n        className=\"open-close-button\"\n        id=\"menu8-button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"menu8\"\n        aria-expanded={menuState.isOpen}\n      >\n        Click to open\n      </Button>\n      <Menu\n        {...menuState}\n        targetRef={targetRef}\n        placement={placement}\n        variant={variant}\n        closeOnClickInside={closeOnClickInside}\n        id=\"menu8\"\n        aria-labelledby=\"menu8-button\"\n      >\n        <MenuGroup heading=\"Report\">\n          <MenuCategoryButton id=\"mi29\" heading=\"Retention Report\">\n            Identify if users come back over time\n          </MenuCategoryButton>\n        </MenuGroup>\n        <MenuGroup heading=\"Comparison\">\n          <MenuCategoryButton id=\"mi30\" heading=\"Funnel Report\">\n            Pinpoint where and why users drop off\n          </MenuCategoryButton>\n          <MenuCategoryButton id=\"mi31\" heading=\"Campaign Comparison\">\n            Measure the impact of different campaigns\n          </MenuCategoryButton>\n        </MenuGroup>\n      </Menu>\n    </React.Fragment>\n  );\n};\n\nWithGroupedCategoryButtonsHeader.storyName =\n  \"w/ grouped category buttons + header\";\n\n\n\nBasicUseWithActionButtons.parameters = { storySource: { source: \"({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Flex\\n        justifyContent=\\\"center\\\"\\n        alignItems=\\\"center\\\"\\n        style={{ height: \\\"90vh\\\" }}\\n      >\\n        <Button\\n          ref={targetRef}\\n          className=\\\"open-close-button\\\"\\n          id=\\\"menu1-button\\\"\\n          aria-haspopup=\\\"true\\\"\\n          aria-controls=\\\"menu1\\\"\\n          aria-expanded={menuState.isOpen}\\n        >\\n          Click to open\\n        </Button>\\n      </Flex>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu1\\\"\\n        aria-labelledby=\\\"menu1-button\\\"\\n      >\\n        <MenuActionButton id=\\\"mi1\\\">User Preview</MenuActionButton>\\n        <MenuActionButton id=\\\"mi2\\\">CSV Export User Data</MenuActionButton>\\n        <MenuActionButton id=\\\"mi3\\\">CSV Export Email Address</MenuActionButton>\\n        <MenuActionButton id=\\\"mi4\\\">\\n          Export as Facebook Audience\\n        </MenuActionButton>\\n        <MenuActionButton disabled id=\\\"mi32\\\">\\n          Export as Google+ Audience\\n        </MenuActionButton>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n}\" }, ...BasicUseWithActionButtons.parameters };\nBasicUseWithCategoryButtons.parameters = { storySource: { source: \"({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu2-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu2\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu2\\\"\\n        aria-labelledby=\\\"menu2-button\\\"\\n      >\\n        <MenuCategoryButton id=\\\"mi5\\\" heading=\\\"Retention Report\\\">\\n          Identify if users come back over time\\n        </MenuCategoryButton>\\n        <MenuCategoryButton id=\\\"mi6\\\" heading=\\\"Funnel Report\\\">\\n          Pinpoint where and why users drop off\\n        </MenuCategoryButton>\\n        <MenuCategoryButton id=\\\"mi7\\\" heading=\\\"Campaign Comparison\\\">\\n          Measure the impact of different campaigns\\n        </MenuCategoryButton>\\n        <MenuCategoryButton id=\\\"mi33\\\" heading=\\\"Beta Feature\\\" disabled>\\n          This is disabled\\n        </MenuCategoryButton>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n}\" }, ...BasicUseWithCategoryButtons.parameters };\nWithActionButtonsIcons.parameters = { storySource: { source: \"({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu3-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu3\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu3\\\"\\n        aria-labelledby=\\\"menu3-button\\\"\\n      >\\n        <MenuActionButton id=\\\"mi8\\\" iconName=\\\"eye\\\">\\n          User Preview\\n        </MenuActionButton>\\n        <MenuActionButton id=\\\"mi9\\\" iconName=\\\"file-alt\\\">\\n          CSV Export User Data\\n        </MenuActionButton>\\n        <MenuActionButton id=\\\"mi10\\\" iconName=\\\"file-alt\\\">\\n          CSV Export Email Address\\n        </MenuActionButton>\\n        <MenuActionButton id=\\\"mi11\\\" iconName={[\\\"fab\\\", \\\"facebook-square\\\"]}>\\n          Export as Facebook Audience\\n        </MenuActionButton>\\n        <MenuActionButton\\n          id=\\\"mi34\\\"\\n          iconName={[\\\"fab\\\", \\\"google-plus-square\\\"]}\\n          disabled\\n        >\\n          Export as Google+ Audience\\n        </MenuActionButton>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithActionButtonsIcons.parameters };\nWithCategoryButtonsIcons.parameters = { storySource: { source: \"({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu4-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu4\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu4\\\"\\n        aria-labelledby=\\\"menu4-button\\\"\\n      >\\n        <MenuCategoryButton\\n          id=\\\"mi12\\\"\\n          heading=\\\"Retention Report\\\"\\n          iconName=\\\"retention-report\\\"\\n        >\\n          Identify if users come back over time\\n        </MenuCategoryButton>\\n        <MenuCategoryButton\\n          id=\\\"mi13\\\"\\n          heading=\\\"Funnel Report\\\"\\n          iconName=\\\"funnel-report\\\"\\n        >\\n          Pinpoint where and why users drop off\\n        </MenuCategoryButton>\\n        <MenuCategoryButton\\n          id=\\\"mi14\\\"\\n          heading=\\\"Campaign Comparison\\\"\\n          iconName=\\\"campaign-comparison\\\"\\n        >\\n          Measure the impact of different campaigns\\n        </MenuCategoryButton>\\n        <MenuCategoryButton\\n          id=\\\"mi34\\\"\\n          heading=\\\"Beta Feature\\\"\\n          iconName=\\\"campaign-comparison\\\"\\n          disabled\\n        >\\n          Measure the impact of different campaigns\\n        </MenuCategoryButton>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithCategoryButtonsIcons.parameters };\nWithGroupedActionButtonsNoHeader.parameters = { storySource: { source: \"({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu5-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu5\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu5\\\"\\n        aria-labelledby=\\\"menu5-button\\\"\\n      >\\n        <MenuGroup>\\n          <MenuActionButton id=\\\"mi15\\\">Print Chart</MenuActionButton>\\n        </MenuGroup>\\n        <MenuGroup>\\n          <MenuActionButton id=\\\"mi16\\\">Download PNG Image</MenuActionButton>\\n          <MenuActionButton id=\\\"mi17\\\">Download JPEG Image</MenuActionButton>\\n          <MenuActionButton id=\\\"mi18\\\">Download PDF Document</MenuActionButton>\\n          <MenuActionButton id=\\\"mi19\\\">\\n            Download SVG Vector Image\\n          </MenuActionButton>\\n          <MenuActionButton id=\\\"mi20\\\">Download CSV</MenuActionButton>\\n        </MenuGroup>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithGroupedActionButtonsNoHeader.parameters };\nWithGroupedActionButtonsHeader.parameters = { storySource: { source: \"({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu6-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu6\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu6\\\"\\n        aria-labelledby=\\\"menu6-button\\\"\\n      >\\n        <MenuGroup heading=\\\"Message One or More Channels\\\">\\n          <MenuActionButton id=\\\"mi21\\\">Multichannel Campaign</MenuActionButton>\\n        </MenuGroup>\\n        <MenuGroup heading=\\\"Single Channel With Multivariate Testing\\\">\\n          <MenuActionButton id=\\\"mi22\\\">Email</MenuActionButton>\\n          <MenuActionButton id=\\\"mi23\\\">Push Notification</MenuActionButton>\\n          <MenuActionButton id=\\\"mi24\\\">In-App Messaging</MenuActionButton>\\n          <MenuActionButton id=\\\"mi25\\\">Content Card</MenuActionButton>\\n        </MenuGroup>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithGroupedActionButtonsHeader.parameters };\nWithGroupedCategoryButtonsNoHeader.parameters = { storySource: { source: \"({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu7-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu7\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu7\\\"\\n        aria-labelledby=\\\"menu7-button\\\"\\n      >\\n        <MenuGroup>\\n          <MenuCategoryButton id=\\\"mi26\\\" heading=\\\"Retention Report\\\">\\n            Identify if users come back over time\\n          </MenuCategoryButton>\\n        </MenuGroup>\\n        <MenuGroup>\\n          <MenuCategoryButton id=\\\"mi27\\\" heading=\\\"Funnel Report\\\">\\n            Pinpoint where and why users drop off\\n          </MenuCategoryButton>\\n          <MenuCategoryButton id=\\\"mi28\\\" heading=\\\"Campaign Comparison\\\">\\n            Measure the impact of different campaigns\\n          </MenuCategoryButton>\\n        </MenuGroup>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithGroupedCategoryButtonsNoHeader.parameters };\nWithGroupedCategoryButtonsHeader.parameters = { storySource: { source: \"({\\n  closeOnClickInside,\\n  placement,\\n  variant,\\n}: MenuProps) => {\\n  const [menuState, targetRef] = useMenu<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button\\n        ref={targetRef}\\n        className=\\\"open-close-button\\\"\\n        id=\\\"menu8-button\\\"\\n        aria-haspopup=\\\"true\\\"\\n        aria-controls=\\\"menu8\\\"\\n        aria-expanded={menuState.isOpen}\\n      >\\n        Click to open\\n      </Button>\\n      <Menu\\n        {...menuState}\\n        targetRef={targetRef}\\n        placement={placement}\\n        variant={variant}\\n        closeOnClickInside={closeOnClickInside}\\n        id=\\\"menu8\\\"\\n        aria-labelledby=\\\"menu8-button\\\"\\n      >\\n        <MenuGroup heading=\\\"Report\\\">\\n          <MenuCategoryButton id=\\\"mi29\\\" heading=\\\"Retention Report\\\">\\n            Identify if users come back over time\\n          </MenuCategoryButton>\\n        </MenuGroup>\\n        <MenuGroup heading=\\\"Comparison\\\">\\n          <MenuCategoryButton id=\\\"mi30\\\" heading=\\\"Funnel Report\\\">\\n            Pinpoint where and why users drop off\\n          </MenuCategoryButton>\\n          <MenuCategoryButton id=\\\"mi31\\\" heading=\\\"Campaign Comparison\\\">\\n            Measure the impact of different campaigns\\n          </MenuCategoryButton>\\n        </MenuGroup>\\n      </Menu>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithGroupedCategoryButtonsHeader.parameters };","import React, { useRef } from \"react\";\nimport { css } from \"styled-components\";\nimport classNames from \"classnames\";\nimport { Transition, TransitionStatus } from \"react-transition-group\";\n\nimport { Popper, usePopper } from \"../Popper\";\n\nimport { MenuProps } from \"./types\";\nimport { StyledMenu, popperOverrides } from \"./StyledMenu\";\nimport { useMenuA11y } from \"./useMenuA11y\";\n\n/**\n * A function that abstracts the open/close logic of a menu component\n * @param targetRef an optional ref object that should be used instead of initializing a new one\n * @param initialState an optional initial state for the handler\n * @returns an array containing state management props for the menu as its first element and the ref object to be passed to both the target and the menu\n * @note this function renames usePopper to provide a consistent point of entry and simplify the cognitive overhead for the developer\n */\nexport const useMenu = usePopper;\n\nconst duration = 300;\nconst defaultStyle = {\n  transition: `opacity ${duration}ms ease-in-out`,\n  opacity: 0,\n};\nconst transitionStyles: {\n  [key in TransitionStatus]?: React.CSSProperties;\n} = {\n  entering: { opacity: 1 },\n  entered: { opacity: 1 },\n  exiting: { opacity: 0 },\n  exited: { opacity: 0 },\n};\n\nexport const Menu = React.forwardRef(\n  (\n    {\n      children,\n      className,\n      closeOnClickInside,\n      id,\n      isOpen,\n      hideTopMargin,\n      onClose,\n      onOpen,\n      popperClassName,\n      popperId,\n      popperStyledCss,\n      size = \"lg\",\n      style,\n      styledCss,\n      target,\n      targetRef,\n      variant = \"default\",\n      ...props\n    }: MenuProps,\n    ref: React.RefObject<HTMLDivElement>\n  ): React.ReactElement => {\n    // create a ref for the menu\n    const menuRef = useRef<HTMLUListElement>(null);\n    // use the menu a11y hook to manage a11y behavior\n    const activeDescendantId = useMenuA11y(menuRef, {\n      isOpen,\n      onClose,\n      onOpen,\n      target,\n      targetRef,\n    });\n\n    return (\n      <Popper\n        triggers={[\"click\"]}\n        untriggers={[\"click\"]}\n        {...props}\n        ref={ref}\n        className={popperClassName}\n        id={popperId}\n        isOpen={isOpen}\n        interactive\n        noArrow\n        popperStyledCss={css`\n          ${popperOverrides}${popperStyledCss || \"\"}\n        `}\n        target={target}\n        targetRef={targetRef}\n        onClose={onClose}\n        onOpen={onOpen}\n        style={hideTopMargin ? { borderTop: 0 } : undefined}\n      >\n        {typeof children === \"function\" ? (\n          ({ activePlacement, targetDimensions, popperDimensions }) => (\n            <Transition in={isOpen} timeout={duration} appear>\n              {(state) => (\n                <StyledMenu\n                  className={classNames([\"bcl-menu\", className])}\n                  id={id}\n                  style={{\n                    ...style,\n                    ...defaultStyle,\n                    ...transitionStyles[state],\n                  }}\n                  styledCss={styledCss}\n                  ref={menuRef}\n                  tabIndex={-1}\n                  aria-labelledby={props[\"aria-labelledby\"]}\n                  aria-activedescendant={activeDescendantId}\n                  onClick={closeOnClickInside ? onClose : undefined}\n                  size={size}\n                  hideTopMargin={hideTopMargin}\n                  variant={variant}\n                >\n                  {children({\n                    activePlacement,\n                    targetDimensions,\n                    popperDimensions,\n                  })}\n                </StyledMenu>\n              )}\n            </Transition>\n          )\n        ) : (\n          <Transition in={isOpen} timeout={duration} appear>\n            {(state) => (\n              <StyledMenu\n                className={classNames([\"bcl-menu\", className])}\n                id={id}\n                style={{\n                  ...style,\n                  ...defaultStyle,\n                  ...transitionStyles[state],\n                }}\n                styledCss={styledCss}\n                ref={menuRef}\n                tabIndex={-1}\n                aria-labelledby={props[\"aria-labelledby\"]}\n                aria-activedescendant={activeDescendantId}\n                onClick={closeOnClickInside ? onClose : undefined}\n                size={size}\n                hideTopMargin={hideTopMargin}\n                variant={variant}\n              >\n                {children}\n              </StyledMenu>\n            )}\n          </Transition>\n        )}\n      </Popper>\n    );\n  }\n);\n\nMenu.displayName = \"Menu\";\n","import styled, { css } from \"styled-components\";\nimport { getBorderRadius, getColor, getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledMenuButton } from \"../MenuButton\";\n\nimport { BaseStyledMenuProps, StyledMenuProps } from \"./types\";\n\nexport const popperOverrides = css`\n  box-sizing: border-box;\n  max-width: 460px;\n  background: transparent;\n`;\n\nconst getSize = ({ size }: BaseStyledMenuProps) => {\n  if (size === \"sm\") {\n    return css`\n      max-width: 200px;\n      max-height: 380px;\n    `;\n  }\n\n  return css`\n    min-width: 300px;\n    max-width: 460px;\n    max-height: 380px;\n  `;\n};\n\nconst getButtonOverrides = ({ variant }: BaseStyledMenuProps) => {\n  switch (variant) {\n    case \"nav\":\n      return css`\n        &:hover:not(:disabled),\n        &:focus:not(:disabled) {\n          background-color: ${getColor(\"blue\", 50)};\n        }\n      `;\n    default:\n      return null;\n  }\n};\n\nexport const StyledMenu = styled.ul<StyledMenuProps>`\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  border: 1px solid ${getColor(\"gray\", 100)};\n  border-radius: ${getBorderRadius(\"sm\")};\n  padding: ${getSpacing(\"md\")} 0;\n  box-shadow: 0px 5px 21px rgba(195, 195, 195, 0.5);\n  overflow-x: hidden;\n  overflow-y: auto;\n  background-color: ${getColor(\"gray\", 0)};\n  outline: none;\n  margin-top: ${(props) => props.hideTopMargin && 0};\n\n  ${getSize};\n\n  & ${StyledMenuButton} {\n    ${getButtonOverrides};\n  }\n`;\n","import { KeyboardKey } from \"../types\";\n\n/**\n * Function that assigns a keyboard event's key to a predictable value,\n * while retaining backwards compatibility\n * @param event a KeyboardEvent object\n * @returns a string indicating the key that was in the event\n */\nexport const getKey = (event: KeyboardEvent): KeyboardKey | undefined => {\n  if (event.key === \"ArrowDown\" || event.keyCode === 40) {\n    return \"arrowDown\";\n  }\n\n  if (event.key === \"ArrowUp\" || event.keyCode === 38) {\n    return \"arrowUp\";\n  }\n\n  if (event.key === \"Enter\" || event.keyCode === 13) {\n    return \"enter\";\n  }\n\n  if (event.key === \"Home\" || event.keyCode === 36) {\n    return \"home\";\n  }\n\n  if (event.key === \"End\" || event.keyCode === 35) {\n    return \"end\";\n  }\n\n  if (event.key === \"Escape\" || event.keyCode === 27) {\n    return \"esc\";\n  }\n\n  if (event.keyCode >= 65 && event.keyCode <= 90) {\n    return \"letter\";\n  }\n\n  return undefined;\n};\n","export { getKey } from \"./getKey\";\n","export { Menu, useMenu } from \"./Menu\";\n\nexport { StyledMenu } from \"./StyledMenu\";\n\nexport type { MenuProps, StyledMenuProps } from \"./types\";\n","export { useMenuA11y } from \"./useMenuA11y\";\n","import { useEffect, useState, useCallback } from \"react\";\n\nimport { PopperProps, getElement } from \"../../Popper\";\nimport {\n  KeyboardKey,\n  ActiveDescendantId,\n  OpenFocusTarget,\n  Alphabet,\n} from \"../types\";\nimport { getKey } from \"../getKey\";\n\nconst focusableElements = [\n  \"a[href]\",\n  \"area[href]\",\n  \"input:not([disabled]):not([type=hidden])\",\n  \"select:not([disabled])\",\n  \"textarea:not([disabled])\",\n  \"button:not([disabled])\",\n  \"object\",\n  \"embed\",\n  \"[tabindex]:not(.modal)\",\n  \"audio[controls]\",\n  \"video[controls]\",\n  '[contenteditable]:not([contenteditable=\"false\"])',\n];\nconst menuOpenKeyTypes: KeyboardKey[] = [\"arrowDown\", \"arrowUp\"];\nconst targetIgnoreKeyTypes: KeyboardKey[] = [\n  ...menuOpenKeyTypes,\n  \"home\",\n  \"end\",\n  \"letter\",\n  \"esc\",\n];\n\nexport const useMenuA11y = (\n  menuRef: React.RefObject<HTMLUListElement>,\n  {\n    isOpen,\n    onClose,\n    onOpen,\n    target,\n    targetRef,\n  }: Pick<PopperProps, \"isOpen\" | \"onClose\" | \"onOpen\" | \"target\" | \"targetRef\">\n): ActiveDescendantId => {\n  // set a small state for the focus target\n  const [openFocusTarget, setOpenFocusTarget] = useState<OpenFocusTarget>(null);\n  // set a small state for the letter focus target\n  const [letterFocusTarget, setLetterFocusTarget] = useState<Alphabet | null>(\n    null\n  );\n  // set a small state for the active descendant id\n  const [activeDescendantId, setActiveDescendantId] =\n    useState<ActiveDescendantId>(undefined);\n\n  // side effects for the key behavior on the target\n  useEffect(() => {\n    // get target element for comparison\n    const element = getElement({ target, targetRef });\n\n    // only do this if the target element is defined, otherwise bail\n    if (!element) {\n      return;\n    }\n\n    // listen to keyboard events on the menu\n    const targetEventListener = (event: KeyboardEvent) => {\n      // map keycodes to variable for easy reference\n      const keyType = getKey(event);\n\n      // if key type is not defined or is one we want to ignore, then bail\n      if (!keyType || !targetIgnoreKeyTypes.includes(keyType)) {\n        return;\n      }\n\n      // create some variables to make this logic easier to think through\n      const homeAndClosed = keyType === \"home\" && !isOpen;\n      const endAndClosed = keyType === \"end\" && !isOpen;\n\n      // prevent default behavior to avoid page scrolling unintentionally\n      // UNLESS user pressed home/end and the menu is closed\n      if (!homeAndClosed && !endAndClosed) {\n        event.preventDefault();\n      }\n\n      // only open when key is up/down arrow, home, or end\n      if (menuOpenKeyTypes.includes(keyType)) {\n        onOpen();\n      }\n\n      // if arrow down, indicate that we should focus on the first element\n      if (keyType === \"arrowDown\") {\n        setOpenFocusTarget(\"first\");\n      }\n      // if arrow up, indicate that we should focus on the last element\n      else if (keyType === \"arrowUp\") {\n        setOpenFocusTarget(\"last\");\n      }\n      // if home, indicate that we should focus on the first element\n      else if (keyType === \"home\" && isOpen) {\n        setOpenFocusTarget(\"first\");\n      }\n      // if end, indicate that we should focus on the last element\n      else if (keyType === \"end\" && isOpen) {\n        setOpenFocusTarget(\"last\");\n      }\n      // if a letter, indicate that we should focus on the corresponding element\n      else if (keyType === \"letter\") {\n        setLetterFocusTarget(event.key as Alphabet);\n      }\n      // if esc, close the menu\n      else if (keyType === \"esc\") {\n        onClose();\n      }\n    };\n\n    // add event listener to the target element\n    element.addEventListener(\"keydown\", targetEventListener);\n\n    // make sure to cleanup when unmounting\n    return () => {\n      element.removeEventListener(\"keydown\", targetEventListener);\n    };\n  }, [isOpen, onClose, onOpen, target, targetRef]);\n\n  // clean up open focus target when menu is closed\n  useEffect(() => {\n    if (!isOpen) {\n      setOpenFocusTarget(null);\n    }\n  }, [isOpen, setOpenFocusTarget]);\n\n  /**\n   * Function to get all elements within the menu component\n   * @returns an array where the first element is the array of elements inside the menu\n   *          and the second element is the menu node (or both null)\n   */\n  const getMenuElements = useCallback(():\n    | [HTMLElement[], HTMLUListElement]\n    | [null, null] => {\n    // map menuRef.current to node to keep track\n    const node = menuRef.current;\n\n    // only do this if the menu is open AND menuRef.current is defined, otherwise bail\n    if (!isOpen || !node) {\n      return [null, null];\n    }\n\n    // get all the elements inside menu\n    const elem = Array.from(node.querySelectorAll(focusableElements.join(\", \")))\n      // filter out disabled elements, if any\n      .filter((el) => !el.hasAttribute(\"disabled\")) as HTMLElement[];\n\n    return [elem, node];\n  }, [isOpen, menuRef]);\n  /**\n   * Function to focus on a descendant, update the aria-activedescendent,\n   * and optionally reset focus target\n   * @param descendants array of HTML Elements inside the menu\n   * @param descendantIndex indicates specific descendant to focus on\n   * @param resetFocusTarget indicates whether the focus target should be reset back to null\n   */\n  const focusOnDescendantByIndex = useCallback(\n    (\n      descendants: HTMLElement[],\n      descendantIndex: \"first\" | \"last\" | number,\n      resetFocusTarget = false\n    ) => {\n      // get desired descendant\n      const descendant =\n        descendantIndex === \"first\"\n          ? // if index is 'first', get first descendant\n            descendants[0]\n          : descendantIndex === \"last\"\n          ? // if index is 'last', get last descendant\n            descendants[descendants.length - 1]\n          : // otherwise, get descendant indicated by its index\n            descendants[descendantIndex];\n\n      // set active descendant id\n      setActiveDescendantId(descendant.id);\n\n      // reset the focus target to 'null', if desired\n      if (resetFocusTarget) {\n        setOpenFocusTarget(null);\n      }\n\n      return descendant.focus();\n    },\n    []\n  );\n  /**\n   * Function to focus on a descendant, update the aria-activedescendent,\n   * and optionally reset focus target\n   * @param letter indicates first letter to search for in aria-labels\n   * @param resetFocusTarget indicates whether the focus target should be reset back to null\n   */\n  const focusOnDescendantByLetter = useCallback(\n    (letter: string, resetFocusTarget = false) => {\n      // get menu elements\n      const [elem] = getMenuElements();\n\n      // if elements not defined, bail\n      if (!elem) {\n        return;\n      }\n\n      // get values matching user input\n      const matches = elem\n        // filter to just the elements with labels starting with that key\n        .filter(\n          (e) => e.getAttribute(\"aria-label\")?.[0] === letter.toLowerCase()\n        );\n      // next, check if the current focused element is among them and get its index\n      const currIndex = matches.findIndex((m) => m === document.activeElement);\n      // if curr index not found, then just focus on the first one\n      // otherwise, get the next one and focus on that\n      const descendant =\n        currIndex === -1\n          ? matches.shift()\n          : matches[(currIndex + 1) % matches.length];\n\n      // reset the letter focus target to 'null', if desired\n      if (resetFocusTarget) {\n        setLetterFocusTarget(null);\n      }\n\n      // if descendant not defined, bail\n      if (!descendant) {\n        return;\n      }\n\n      // set active descendant id\n      setActiveDescendantId(descendant.id);\n\n      // otherwise, get the next one and focus on that\n      return descendant.focus();\n    },\n    [getMenuElements]\n  );\n\n  // side effects for menu element selection behavior when user is focused on target\n  useEffect(() => {\n    // get menu elements\n    const [elem] = getMenuElements();\n\n    // if elements not defined, bail\n    if (!elem) {\n      return;\n    }\n\n    // if focus target is 'first' focus on the first element and set focus target to 'null'\n    if (openFocusTarget === \"first\") {\n      focusOnDescendantByIndex(elem, \"first\", true);\n    }\n\n    // if focus target is 'last' focus on the last element and set focus target to 'null'\n    if (openFocusTarget === \"last\") {\n      focusOnDescendantByIndex(elem, \"last\", true);\n    }\n  }, [focusOnDescendantByIndex, getMenuElements, openFocusTarget]);\n\n  // side effects for letter key behavior while user is focused on target\n  useEffect(() => {\n    // get menu elements\n    const [elem] = getMenuElements();\n\n    // if elements not defined, bail\n    if (!elem) {\n      return;\n    }\n\n    // if a letter focus target is defined AND menu is open,\n    // then focus on the first descendant beginning with the letter focus target\n    if (letterFocusTarget && isOpen) {\n      focusOnDescendantByLetter(letterFocusTarget, true);\n    }\n  }, [focusOnDescendantByLetter, getMenuElements, isOpen, letterFocusTarget]);\n\n  // side effects for key behavior within the menu\n  useEffect(() => {\n    // get menu elements and the menu node\n    const [elem, node] = getMenuElements();\n\n    // if neither the elements nor the node is defined, bail\n    if (!elem || !node) {\n      return;\n    }\n\n    // listen to keyboard events on the menu\n    const menuEventListener = (event: KeyboardEvent) => {\n      // map keycodes to variable for easy reference\n      const keyType = getKey(event);\n      // get index of the child that is currently focused\n      const activeElemIndex = elem.findIndex(\n        (e) => e === document.activeElement\n      );\n\n      // prevent default behavior and propagation to avoid page from doing things (e.g. scrolling) unintentionally\n      if (keyType !== \"enter\") {\n        event.preventDefault();\n\n        event.stopPropagation();\n      }\n\n      // if arrow down, shift focus to next element in elem\n      if (keyType === \"arrowDown\") {\n        return focusOnDescendantByIndex(\n          elem,\n          (activeElemIndex + 1) % elem.length\n        );\n      }\n\n      // if arrow up, shift focus to previous element in elem\n      if (keyType === \"arrowUp\") {\n        return focusOnDescendantByIndex(\n          elem,\n          activeElemIndex === 0\n            ? elem.length - 1\n            : (activeElemIndex - 1) % elem.length\n        );\n      }\n\n      // if home key, shift focus to first element in elem\n      if (keyType === \"home\") {\n        return focusOnDescendantByIndex(elem, \"first\");\n      }\n\n      // if arrow up OR end key, shift focus to last element in elem\n      if (keyType === \"end\") {\n        return focusOnDescendantByIndex(elem, \"last\");\n      }\n\n      // set focus on the menu button\n      if (keyType === \"enter\") {\n        // get target element for comparison\n        const element = getElement({ target, targetRef });\n\n        return element?.focus();\n      }\n\n      // close menu and set focus on the menu button\n      if (keyType === \"esc\") {\n        // get target element for comparison\n        const element = getElement({ target, targetRef });\n\n        onClose();\n\n        return element?.focus();\n      }\n\n      // if user types a letter, then focus on the next button starting with that key, if any\n      if (keyType === \"letter\") {\n        return focusOnDescendantByLetter(event.key);\n      }\n    };\n\n    // add event listener to the menu\n    node.addEventListener(\"keydown\", menuEventListener);\n\n    // make sure to cleanup when unmounting\n    return () => {\n      node.removeEventListener(\"keydown\", menuEventListener);\n    };\n  }, [\n    focusOnDescendantByIndex,\n    focusOnDescendantByLetter,\n    getMenuElements,\n    isOpen,\n    menuRef,\n    onClose,\n    openFocusTarget,\n    target,\n    targetRef,\n  ]);\n\n  return activeDescendantId;\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { getColor } from \"@braze/beacon-styling\";\n\nimport { BodyText } from \"../BodyText\";\nimport { Flex } from \"../Flex\";\nimport { Icon } from \"../Icon\";\nimport { MenuButton } from \"../MenuButton\";\n\nimport { MenuActionButtonProps } from \"./types\";\n\nexport const MenuActionButton = ({\n  children,\n  className,\n  iconName,\n  ...props\n}: MenuActionButtonProps): React.ReactElement => (\n  <li role=\"menuitem\">\n    <MenuButton\n      {...props}\n      className={classNames([\"bcl-menu-action-button\", className])}\n      aria-label={\n        typeof children === \"string\" ? children.toLowerCase() : undefined\n      }\n    >\n      {iconName && (\n        <Flex style={{ minWidth: 32 }} justifyContent=\"center\">\n          <Icon name={iconName} color={getColor(\"gray\", 600)} size=\"1x\" />\n        </Flex>\n      )}\n      <BodyText size=\"md\">{children}</BodyText>\n    </MenuButton>\n  </li>\n);\n\nMenuActionButton.displayName = \"MenuActionButton\";\n","export { MenuActionButton } from \"./MenuActionButton\";\n\nexport type { MenuActionButtonProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { MenuButtonProps } from \"./types\";\nimport { StyledMenuButton } from \"./StyledMenuButton\";\n\nexport const MenuButton = ({\n  className,\n  ...props\n}: MenuButtonProps): React.ReactElement => (\n  <StyledMenuButton\n    {...props}\n    className={classNames([\"bcl-menu-button\", className])}\n    type=\"button\"\n  />\n);\n\nMenuButton.displayName = \"MenuButton\";\n","import styled, { css } from \"styled-components\";\nimport { getColor, getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledBodyText } from \"../BodyText\";\nimport { StyledHeading } from \"../Heading\";\nimport { StyledIcon } from \"../Icon\";\n\nimport { StyledMenuButtonProps } from \"./types\";\n\nexport const StyledMenuButton = styled.button<StyledMenuButtonProps>`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: ${getSpacing(\"sm\")} ${getSpacing(\"xl\")};\n  text-align: left;\n\n  &:hover:not(:disabled),\n  &:focus:not(:disabled) {\n    background-color: ${getColor(\"gray\", 100)};\n  }\n\n  ${StyledIcon} {\n    margin-right: ${getSpacing(\"sm\")};\n    font-size: 1rem;\n  }\n\n  ${(props) =>\n    props.disabled &&\n    css`\n      cursor: not-allowed;\n\n      ${StyledHeading}, ${StyledBodyText}, ${StyledIcon} {\n        color: ${getColor(\"gray\", 400)};\n      }\n\n      .bcl-braze-icon {\n        opacity: 0.3;\n      }\n    `};\n`;\n","export { MenuButton } from \"./MenuButton\";\n\nexport { StyledMenuButton } from \"./StyledMenuButton\";\n\nexport type { MenuButtonProps, StyledMenuButtonProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { BodyText } from \"../BodyText\";\nimport { Box } from \"../Box\";\nimport { BrazeIcon } from \"../BrazeIcon\";\nimport { Flex } from \"../Flex\";\nimport { FlexBox } from \"../FlexBox\";\nimport { Heading } from \"../Heading\";\nimport { MenuButton } from \"../MenuButton\";\n\nimport { MenuCategoryButtonProps } from \"./types\";\n\nexport const MenuCategoryButton = ({\n  children,\n  className,\n  heading,\n  iconName,\n  ...props\n}: MenuCategoryButtonProps): React.ReactElement => (\n  <li role=\"none\">\n    <MenuButton\n      {...props}\n      className={classNames([\"bcl-menu-category-button\", className])}\n      role=\"menuitem\"\n      tabIndex={-1}\n      aria-label={\n        typeof children === \"string\" ? children.toLowerCase() : undefined\n      }\n    >\n      {iconName && (\n        <FlexBox\n          style={{ minWidth: 32 }}\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          boxMargin={{ right: \"lg\" }}\n        >\n          <BrazeIcon name={iconName} />\n        </FlexBox>\n      )}\n      <Flex direction=\"column\">\n        <Box boxMargin={{ bottom: \"xs\" }}>\n          <Heading level={5} variant=\"light\">\n            {heading}\n          </Heading>\n        </Box>\n        <BodyText size=\"sm\">{children}</BodyText>\n      </Flex>\n    </MenuButton>\n  </li>\n);\n\nMenuCategoryButton.displayName = \"MenuCategoryButton\";\n","export { MenuCategoryButton } from \"./MenuCategoryButton\";\n\nexport type { MenuCategoryButtonProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { Heading } from \"../Heading\";\n\nimport { MenuGroupProps } from \"./types\";\nimport { StyledMenuGroup } from \"./StyledMenuGroup\";\n\nexport const MenuGroup = ({\n  children,\n  className,\n  heading,\n  ...props\n}: MenuGroupProps): React.ReactElement => (\n  <StyledMenuGroup\n    {...props}\n    className={classNames([\"bcl-menu-group\", className])}\n    hasHeading={!!heading}\n  >\n    {heading && <Heading level={6}>{heading}</Heading>}\n    {children}\n  </StyledMenuGroup>\n);\n\nMenuGroup.displayName = \"MenuGroup\";\n","import styled, { css } from \"styled-components\";\nimport { getColor, getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledHeading } from \"../Heading\";\nimport { StyledMenuButton } from \"../MenuButton\";\n\nimport { StyledMenuGroupProps } from \"./types\";\n\nexport const StyledMenuGroup = styled.div<StyledMenuGroupProps>`\n  width: 100%;\n\n  &:not(:last-of-type) {\n    padding-bottom: ${getSpacing(\"md\")};\n    margin-bottom: ${getSpacing(\"md\")};\n    border-bottom: 1px solid ${getColor(\"gray\", 100)};\n  }\n\n  & > ${StyledHeading} {\n    padding: ${getSpacing(\"md\")} ${getSpacing(\"xl\")} ${getSpacing(\"sm\")};\n    color: ${getColor(\"gray\", 500)};\n    text-transform: uppercase;\n  }\n\n  ${(props) =>\n    props.hasHeading &&\n    css`\n      &:last-of-type {\n        margin-bottom: ${getSpacing(\"sm\")};\n      }\n\n      & > ${StyledMenuButton} {\n        padding-left: ${getSpacing(\"xxl\")};\n      }\n    `};\n`;\n","export { MenuGroup } from \"./MenuGroup\";\n\nexport type { MenuGroupProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean, select, text, withKnobs } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Box } from \"../Box\";\nimport { Button } from \"../Button\";\nimport { FieldLabel } from \"../FieldLabel\";\nimport { Input } from \"../Input\";\nimport { LoremIpsum } from \"../LoremIpsum\";\nimport { Popover, usePopover } from \"../Popover\";\nimport { PopoverBody } from \"../PopoverBody\";\nimport { PopoverHeading } from \"../PopoverHeading\";\nimport { Portal } from \"../Portal\";\nimport { RadioButton } from \"../RadioButton\";\nimport { RadioButtonGroup } from \"../RadioButtonGroup\";\nimport { Tooltip, useTooltip } from \"../Tooltip\";\nimport { ModalBody } from \"../ModalBody\";\nimport { ModalFooter } from \"../ModalFooter\";\nimport { ModalHeading } from \"../ModalHeading\";\nimport { Modal } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <Meta title=\"Core/Overlay/Modal\" component={Modal} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` component is used to provide additional context and/or prompt\nthe user to take some sort of action. The goal is to avoid taking the user\nto a different screen, especially if the actions done by the modal are\ndestructive.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: to align the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` components left and right, you can use the\n`}<inlineCode parentName=\"p\">{`ModalFooter`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`aligner`}</inlineCode>{` mode as shown in the examples below.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"size-small-wo-icon\"\n    }}>{`Size: small (w/o icon)`}</h3>\n    <p>{`Small modals are used for short communications that may need user input.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--size-small-wo-icon\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"size-small-w-icon\"\n    }}>{`Size: small (w/ icon)`}</h3>\n    <p>{`When appropriate a small modal can have an icon. To pass one, specify\nthe `}<inlineCode parentName=\"p\">{`iconType`}</inlineCode>{` prop in `}<inlineCode parentName=\"p\">{`ModalHeading`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--size-small-w-icon\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"size-medium\"\n    }}>{`Size: medium`}</h3>\n    <p>{`Medium modals are the most common modal size in the dashboard.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--size-medium\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"size-large\"\n    }}>{`Size: large`}</h3>\n    <p>{`Large modals are used to display large and complex content. They should be\nused sparingly and very intentionally.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--size-large\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"size-extra-large\"\n    }}>{`Size: extra large`}</h3>\n    <p>{`Use the extra large modal `}<strong parentName=\"p\">{`only when`}</strong>{` the content doesn't fit in\n`}<inlineCode parentName=\"p\">{`size === 'lg'`}</inlineCode>{`. Before using `}<inlineCode parentName=\"p\">{`extra large`}</inlineCode>{`, ask yourself:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Should this be a new page instead?`}</li>\n      <li parentName=\"ul\">{`Am I trying to put too much content inside a Modal?`}</li>\n      <li parentName=\"ul\">{`When was the last time I went on `}<a parentName=\"li\" {...{\n          \"href\": \"https://modalzmodalzmodalz.com/\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`ModalzModalzModalz`}</a>{`?`}</li>\n    </ul>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--size-extra-large\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"heading-size-with-h3\"\n    }}>{`Heading size with h3`}</h3>\n    <p>{`You can also modify the size of the `}<inlineCode parentName=\"p\">{`ModalHeading`}</inlineCode>{` using the `}<inlineCode parentName=\"p\">{`level`}</inlineCode>{`\nprop, much like you would a standalone `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` component. By default,\n`}<inlineCode parentName=\"p\">{`ModalHeading`}</inlineCode>{` has a level of `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: Go over to the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab and play with the knobs to see\nhow the `}<inlineCode parentName=\"p\">{`ModalHeading`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`h3`}</inlineCode>{` format might work in different `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`\nsizes.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--heading-size-with-h-3\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"nested-modals\"\n    }}>{`Nested Modals`}</h3>\n    <p>{`To nest modals, simply render a modal as a child of another modal. The z-indexing\nwill be automatically calculated.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--nested-modals\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"nested-modals-with-custom-z-index\"\n    }}>{`Nested Modals with Custom Z-Index`}</h3>\n    <p>{`To nest modals, simply render a modal as a child of another modal. The z-indexing\nwill be automatically calculated even with a custom z-index passed to the parent\nmodal.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--nested-modals-with-custom-z-index\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"non-dismissable-modal\"\n    }}>{`Non-dismissable Modal`}</h3>\n    <p><inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`s are not dismissable if `}<inlineCode parentName=\"p\">{`toggle`}</inlineCode>{` is not passed to the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`. This will\nprevent closing from clicking outside of the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`, as well remove any automatic\nclosing components (such as the close button). You can still add a components that\ndismiss the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` manually.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--non-dismissable-modal\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"non-dismissable-modal-with-no-exit-button\"\n    }}>{`Non-dismissable Modal with No exit button`}</h4>\n    <p>{`The exit `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` on a non-dismissable `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` is completely optional. This can\nbe used to block user interaction if needed.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--non-dismissable-modal-with-no-exit\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"modal-with-outside-content\"\n    }}>{`Modal with Outside Content`}</h3>\n    <p><inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`s often have poppers and other content that is inside the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`, but in another\n`}<inlineCode parentName=\"p\">{`Portal`}</inlineCode>{`. You can use the `}<inlineCode parentName=\"p\">{`bcl-ignore-click-outside`}</inlineCode>{` class to have the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` not\nclose.`}</p>\n    <p>{`Clicking on the pink \"Click Me\" square in the example below will NOT close the\n`}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`.`}</p>\n    <p>{`To view this effect, view the story in \"Canvas\" view (this is \"Docs\" view).`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--modal-with-outside-content\" mdxType=\"Story\" />\n    </Canvas>\n    <h4 {...{\n      \"id\": \"modal-with-beacon-popoverstooltips\"\n    }}>{`Modal with Beacon Popovers/Tooltips`}</h4>\n    <p>{`You can see some examples of using our pre-built `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{`s and `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`s with\nthe `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` below.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-modal--modal-with-popovers\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  Modal,\n  ModalBody,\n  ModalHeading,\n  ModalFooter,\n  Button,\n} from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"modal-1\"\n    }}><inlineCode parentName=\"h3\">{`Modal`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`autoFocus`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`focuses on the modal wrapper when true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates whether component should be visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`keyboard`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that keyboard commands should be listened to by the `}<inlineCode parentName=\"td\">{`Modal`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`func: `}<inlineCode parentName=\"td\">{`React.RefObject<any>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM node override to use portal into`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`outsideClickIgnoreClass`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bcl-ignore-click-outside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`when clicking outside, class name to ignore for toggle`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(`}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`xl`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sm`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size of the `}<inlineCode parentName=\"td\">{`Modal`}</inlineCode>{` to be displayed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`toggle`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`func: `}<inlineCode parentName=\"td\">{`() => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`toggle function that toggles the modal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`1040`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index value for the component and its children`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"modalheading\"\n    }}><inlineCode parentName=\"h3\">{`ModalHeading`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`iconType`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`warning`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type of icon to be rendered, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`level`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`2`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`3`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`2`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`which heading level the component should use`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`toggle`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`func`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function that renders an X button that toggles the modal`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"modalbody\"\n    }}><inlineCode parentName=\"h3\">{`ModalBody`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"modalfooter\"\n    }}><inlineCode parentName=\"h3\">{`ModalFooter`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`aligner`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the component is being used as an aligner; required if using 'side' prop`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`side`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates side of the parent footer to align items to; requires 'align' to be true`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useCallback } from \\\"react\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\n\\nimport { Box } from \\\"../Box\\\";\\nimport { Button } from \\\"../Button\\\";\\nimport { FieldLabel } from \\\"../FieldLabel\\\";\\nimport { Input } from \\\"../Input\\\";\\nimport { LoremIpsum } from \\\"../LoremIpsum\\\";\\nimport { Popover, usePopover } from \\\"../Popover\\\";\\nimport { PopoverBody } from \\\"../PopoverBody\\\";\\nimport { PopoverHeading } from \\\"../PopoverHeading\\\";\\nimport { Portal } from \\\"../Portal\\\";\\nimport { RadioButton } from \\\"../RadioButton\\\";\\nimport { RadioButtonGroup } from \\\"../RadioButtonGroup\\\";\\nimport { Tooltip, useTooltip } from \\\"../Tooltip\\\";\\nimport { ModalBody } from \\\"../ModalBody\\\";\\nimport { ModalFooter } from \\\"../ModalFooter\\\";\\nimport { ModalHeading, ModalHeadingProps } from \\\"../ModalHeading\\\";\\n\\nimport page from \\\"./Modal.docs.mdx\\\";\\n\\nimport { Modal, ModalProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Overlay/Modal\\\",\\n  component: Modal,\\n  parameters: {\\n    docs: { page },\\n  },\\n  argTypes: {\\n    level: {\\n      options: [3, 2],\\n      control: { type: \\\"select\\\" },\\n    },\\n  },\\n} as ComponentMeta<typeof Modal>;\\n\\ninterface Args extends ModalProps {\\n  level: ModalHeadingProps[\\\"level\\\"];\\n}\\n\\nconst defaultArgs: Args = {\\n  level: 3,\\n  size: \\\"sm\\\",\\n};\\n\\nexport const SizeSmallWoIcon = ({\\n  level,\\n  ...args\\n}: Args): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal {...args} isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading level={level}>You have unsaved changes!</ModalHeading>\\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nSizeSmallWoIcon.storyName = \\\"size: small (w/o icon)\\\";\\n\\nSizeSmallWoIcon.args = defaultArgs;\\n\\nexport const SizeSmallWIcon = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"sm\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading iconType=\\\"warning\\\">\\n          You have unsaved changes!\\n        </ModalHeading>\\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nSizeSmallWIcon.storyName = \\\"size: small (w/ icon)\\\";\\n\\nexport const SizeMedium = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"md\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\\n        <ModalBody>\\n          <FieldLabel label=\\\"App name\\\">\\n            <Input id=\\\"exampleInput\\\" />\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Platform\\\">\\n            <select\\n              id=\\\"exampleInput2\\\"\\n              style={{\\n                height: 40,\\n                width: 300,\\n                paddingLeft: 10,\\n                border: \\\"1px solid #A8B3B8\\\",\\n              }}\\n            >\\n              <option>Android</option>\\n              <option>FireOS</option>\\n              <option>iOS</option>\\n              <option>Windows</option>\\n              <option>Web</option>\\n              <option>tvOS</option>\\n              <option>Roku</option>\\n            </select>\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Push Provider\\\">\\n            <RadioButtonGroup name=\\\"radios\\\">\\n              <RadioButton id=\\\"radioButton1\\\" value=\\\"Firebase (FCM)\\\">\\n                Firebase (FCM)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton2\\\" value=\\\"Huawei (HMS)\\\">\\n                Huawei (HMS)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton3\\\" value=\\\"Baidu\\\">\\n                Baidu\\n              </RadioButton>\\n            </RadioButtonGroup>\\n          </FieldLabel>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button id=\\\"cancelButton\\\" variant=\\\"secondary\\\" onClick={toggle}>\\n              Cancel\\n            </Button>\\n            <Button id=\\\"addButton\\\">Add App</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nSizeMedium.storyName = \\\"size: medium\\\";\\n\\nexport const SizeLarge = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"lg\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\\n        <ModalBody>\\n          <FieldLabel label=\\\"App name\\\">\\n            <Input id=\\\"exampleInput\\\" />\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Platform\\\">\\n            <select\\n              id=\\\"exampleInput2\\\"\\n              style={{\\n                height: 40,\\n                width: 300,\\n                paddingLeft: 10,\\n                border: \\\"1px solid #A8B3B8\\\",\\n              }}\\n            >\\n              <option>Android</option>\\n              <option>FireOS</option>\\n              <option>iOS</option>\\n              <option>Windows</option>\\n              <option>Web</option>\\n              <option>tvOS</option>\\n              <option>Roku</option>\\n            </select>\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Push Provider\\\">\\n            <RadioButtonGroup name=\\\"radios\\\">\\n              <RadioButton id=\\\"radioButton1\\\" value=\\\"Firebase (FCM)\\\">\\n                Firebase (FCM)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton2\\\" value=\\\"Huawei (HMS)\\\">\\n                Huawei (HMS)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton3\\\" value=\\\"Baidu\\\">\\n                Baidu\\n              </RadioButton>\\n            </RadioButtonGroup>\\n          </FieldLabel>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button id=\\\"cancelButton\\\" variant=\\\"secondary\\\" onClick={toggle}>\\n              Cancel\\n            </Button>\\n            <Button id=\\\"addButton\\\">Add App</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nSizeLarge.storyName = \\\"size: large\\\";\\n\\nexport const SizeExtraLarge = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"xl\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\\n        <ModalBody>\\n          <FieldLabel label=\\\"App name\\\">\\n            <Input id=\\\"exampleInput\\\" />\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Platform\\\">\\n            <select\\n              id=\\\"exampleInput2\\\"\\n              style={{\\n                height: 40,\\n                width: 300,\\n                paddingLeft: 10,\\n                border: \\\"1px solid #A8B3B8\\\",\\n              }}\\n            >\\n              <option>Android</option>\\n              <option>FireOS</option>\\n              <option>iOS</option>\\n              <option>Windows</option>\\n              <option>Web</option>\\n              <option>tvOS</option>\\n              <option>Roku</option>\\n            </select>\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Push Provider\\\">\\n            <RadioButtonGroup name=\\\"radios\\\">\\n              <RadioButton id=\\\"radioButton1\\\" value=\\\"Firebase (FCM)\\\">\\n                Firebase (FCM)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton2\\\" value=\\\"Huawei (HMS)\\\">\\n                Huawei (HMS)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton3\\\" value=\\\"Baidu\\\">\\n                Baidu\\n              </RadioButton>\\n            </RadioButtonGroup>\\n          </FieldLabel>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button id=\\\"cancelButton\\\" variant=\\\"secondary\\\" onClick={toggle}>\\n              Cancel\\n            </Button>\\n            <Button id=\\\"addButton\\\">Add App</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nSizeExtraLarge.storyName = \\\"size: extra large\\\";\\n\\nexport const HeadingSizeWithH3 = ({\\n  level,\\n  ...args\\n}: Args): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal {...args} isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading level={level}>\\n          Add New App to Stopwatch &amp; Droidboy\\n        </ModalHeading>\\n        <ModalBody>\\n          <FieldLabel label=\\\"App name\\\">\\n            <Input id=\\\"exampleInput\\\" />\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Platform\\\">\\n            <select\\n              id=\\\"exampleInput2\\\"\\n              style={{\\n                height: 40,\\n                width: 300,\\n                paddingLeft: 10,\\n                border: \\\"1px solid #A8B3B8\\\",\\n              }}\\n            >\\n              <option>Android</option>\\n              <option>FireOS</option>\\n              <option>iOS</option>\\n              <option>Windows</option>\\n              <option>Web</option>\\n              <option>tvOS</option>\\n              <option>Roku</option>\\n            </select>\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Push Provider\\\">\\n            <RadioButtonGroup name=\\\"radios\\\">\\n              <RadioButton id=\\\"radioButton1\\\" value=\\\"Firebase (FCM)\\\">\\n                Firebase (FCM)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton2\\\" value=\\\"Huawei (HMS)\\\">\\n                Huawei (HMS)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton3\\\" value=\\\"Baidu\\\">\\n                Baidu\\n              </RadioButton>\\n            </RadioButtonGroup>\\n          </FieldLabel>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button id=\\\"cancelButton\\\" variant=\\\"secondary\\\" onClick={toggle}>\\n              Cancel\\n            </Button>\\n            <Button id=\\\"addButton\\\">Add App</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nHeadingSizeWithH3.storyName = \\\"heading size (with h3)\\\";\\n\\nHeadingSizeWithH3.args = defaultArgs;\\n\\nexport const NestedModals = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [isInnerOpen, setInnerOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    // only close the parent modal if the child modal is closed\\n    if (!isInnerOpen) {\\n      setOpen(!isOpen);\\n    }\\n  };\\n\\n  const toggleInner = () => {\\n    setInnerOpen(!isInnerOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"xl\\\" isOpen={isOpen} toggle={toggle} className=\\\"outer\\\">\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <Button onClick={() => setInnerOpen(true)}>Show modal</Button>\\n          <Modal\\n            size=\\\"xl\\\"\\n            isOpen={isInnerOpen}\\n            toggle={toggleInner}\\n            className=\\\"inner\\\"\\n          >\\n            <ModalHeading>A HEADER. NEW THINGS. WHATEVER!</ModalHeading>\\n            <ModalBody>\\n              <LoremIpsum paragraphs={2} />\\n            </ModalBody>\\n            <ModalFooter>\\n              <ModalFooter aligner side=\\\"left\\\">\\n                <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n              </ModalFooter>\\n              <ModalFooter aligner side=\\\"right\\\">\\n                <Button variant=\\\"secondary\\\" onClick={toggleInner}>\\n                  Keep Editing\\n                </Button>\\n                <Button>Save Draft</Button>\\n              </ModalFooter>\\n            </ModalFooter>\\n          </Modal>\\n          <LoremIpsum paragraphs={7} />\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nNestedModals.storyName = \\\"nested modals\\\";\\n\\nexport const NestedModalsWithCustomZIndex = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [isInnerOpen, setInnerOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    // only close the parent modal if the child modal is closed\\n    if (!isInnerOpen) {\\n      setOpen(!isOpen);\\n    }\\n  };\\n\\n  const toggleInner = () => {\\n    setInnerOpen(!isInnerOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal\\n        size=\\\"xl\\\"\\n        isOpen={isOpen}\\n        toggle={toggle}\\n        className=\\\"outer\\\"\\n        zIndex={605}\\n      >\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <Button onClick={() => setInnerOpen(true)}>Show modal</Button>\\n          <Modal\\n            size=\\\"xl\\\"\\n            isOpen={isInnerOpen}\\n            toggle={toggleInner}\\n            className=\\\"inner\\\"\\n          >\\n            <ModalHeading>A HEADER. NEW THINGS. WHATEVER!</ModalHeading>\\n            <ModalBody>\\n              <LoremIpsum paragraphs={2} />\\n            </ModalBody>\\n            <ModalFooter>\\n              <ModalFooter aligner side=\\\"left\\\">\\n                <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n              </ModalFooter>\\n              <ModalFooter aligner side=\\\"right\\\">\\n                <Button variant=\\\"secondary\\\" onClick={toggleInner}>\\n                  Keep Editing\\n                </Button>\\n                <Button>Save Draft</Button>\\n              </ModalFooter>\\n            </ModalFooter>\\n          </Modal>\\n          <LoremIpsum paragraphs={7} />\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nNestedModalsWithCustomZIndex.storyName = \\\"nested modals with custom z-index\\\";\\n\\nexport const NonDismissableModal = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal isOpen={isOpen}>\\n        <ModalHeading>You could mess stuff up!</ModalHeading>\\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button intent=\\\"danger\\\" onClick={toggle}>\\n              I Accept\\n            </Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nNonDismissableModal.storyName = \\\"non-dismissable modal\\\";\\n\\nexport const NonDismissableModalWithNoExit = (): React.ReactElement => {\\n  const [seconds, setSeconds] = React.useState(10);\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = useCallback(() => {\\n    setOpen(!isOpen);\\n\\n    setSeconds(10);\\n  }, [isOpen]);\\n\\n  React.useEffect(() => {\\n    let interval;\\n\\n    if (isOpen) {\\n      interval = setInterval(() => {\\n        setSeconds((seconds) => (seconds > 0 ? seconds - 1 : seconds));\\n      }, 1000);\\n    } else {\\n      clearInterval(interval);\\n    }\\n\\n    return () => clearInterval(interval);\\n  }, [isOpen]);\\n\\n  React.useEffect(() => {\\n    if (seconds === 0) {\\n      toggle();\\n    }\\n  }, [seconds, toggle]);\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal isOpen={isOpen}>\\n        <ModalHeading>You could mess stuff up!</ModalHeading>\\n        <ModalBody>{seconds} second(s) until Modal close</ModalBody>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nNonDismissableModalWithNoExit.storyName = \\\"non-dismissable modal with no exit\\\";\\n\\nexport const ModalWithOutsideContent = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"lg\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <Portal style={{ zIndex: 2400 }}>\\n            <div\\n              className=\\\"bcl-ignore-click-outside clickMeExample\\\"\\n              style={{\\n                zIndex: 2400,\\n                position: \\\"absolute\\\",\\n                padding: \\\"20px\\\",\\n                background: \\\"pink\\\",\\n              }}\\n            >\\n              Click Me\\n            </div>\\n          </Portal>\\n          <Portal style={{ zIndex: 2400 }}>\\n            <div\\n              className=\\\"clickMeCloseExample\\\"\\n              style={{\\n                zIndex: 2400,\\n                position: \\\"absolute\\\",\\n                top: \\\"300px\\\",\\n                padding: \\\"20px\\\",\\n                background: \\\"pink\\\",\\n              }}\\n            >\\n              Click Me To Close\\n            </div>\\n          </Portal>\\n          <LoremIpsum paragraphs={5} />\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nModalWithOutsideContent.storyName = \\\"modal with outside content\\\";\\n\\nexport const ModalWithPopovers = (): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n  const [tooltipState, targetTooltipRef] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"lg\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <Button className=\\\"popoverOpen\\\" ref={targetRef}>\\n            Click to open/close\\n          </Button>\\n          <Popover\\n            {...popoverState}\\n            targetRef={targetRef}\\n            defaultPlacement=\\\"bottom\\\"\\n          >\\n            <PopoverHeading>Heading</PopoverHeading>\\n            <PopoverBody>\\n              We need to let the user know something in this tooltip!\\n            </PopoverBody>\\n          </Popover>\\n          <Box boxPadding={{ vertical: \\\"md\\\" }}>\\n            <span id=\\\"test_text\\\">Some text should be covered</span>\\n          </Box>\\n          <LoremIpsum paragraphs={1} />\\n          <Button className=\\\"tooltipOpen\\\" ref={targetTooltipRef}>\\n            Click to open/close tooltip\\n          </Button>\\n          <Tooltip\\n            targetRef={targetTooltipRef}\\n            triggers={[\\\"click\\\"]}\\n            untriggers={[\\\"click\\\"]}\\n            placement=\\\"bottom\\\"\\n            {...tooltipState}\\n          >\\n            Tooltip with some info in it...\\n          </Tooltip>\\n          <Box boxPadding={{ vertical: \\\"sm\\\" }}>\\n            <span id=\\\"test_text2\\\">Some text should be covered</span>\\n          </Box>\\n          <LoremIpsum paragraphs={1} />\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n};\\n\\nModalWithPopovers.storyName = \\\"modal with popovers\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"SizeSmallWoIcon\":{\"startLoc\":{\"col\":31,\"line\":48},\"endLoc\":{\"col\":1,\"line\":78},\"startBody\":{\"col\":31,\"line\":48},\"endBody\":{\"col\":1,\"line\":78}},\"SizeSmallWIcon\":{\"startLoc\":{\"col\":30,\"line\":84},\"endLoc\":{\"col\":1,\"line\":113},\"startBody\":{\"col\":30,\"line\":84},\"endBody\":{\"col\":1,\"line\":113}},\"SizeMedium\":{\"startLoc\":{\"col\":26,\"line\":117},\"endLoc\":{\"col\":1,\"line\":177},\"startBody\":{\"col\":26,\"line\":117},\"endBody\":{\"col\":1,\"line\":177}},\"SizeLarge\":{\"startLoc\":{\"col\":25,\"line\":181},\"endLoc\":{\"col\":1,\"line\":241},\"startBody\":{\"col\":25,\"line\":181},\"endBody\":{\"col\":1,\"line\":241}},\"SizeExtraLarge\":{\"startLoc\":{\"col\":30,\"line\":245},\"endLoc\":{\"col\":1,\"line\":305},\"startBody\":{\"col\":30,\"line\":245},\"endBody\":{\"col\":1,\"line\":305}},\"HeadingSizeWithH3\":{\"startLoc\":{\"col\":33,\"line\":309},\"endLoc\":{\"col\":1,\"line\":374},\"startBody\":{\"col\":33,\"line\":309},\"endBody\":{\"col\":1,\"line\":374}},\"NestedModals\":{\"startLoc\":{\"col\":28,\"line\":380},\"endLoc\":{\"col\":1,\"line\":440},\"startBody\":{\"col\":28,\"line\":380},\"endBody\":{\"col\":1,\"line\":440}},\"NestedModalsWithCustomZIndex\":{\"startLoc\":{\"col\":44,\"line\":444},\"endLoc\":{\"col\":1,\"line\":510},\"startBody\":{\"col\":44,\"line\":444},\"endBody\":{\"col\":1,\"line\":510}},\"NonDismissableModal\":{\"startLoc\":{\"col\":35,\"line\":514},\"endLoc\":{\"col\":1,\"line\":537},\"startBody\":{\"col\":35,\"line\":514},\"endBody\":{\"col\":1,\"line\":537}},\"NonDismissableModalWithNoExit\":{\"startLoc\":{\"col\":45,\"line\":541},\"endLoc\":{\"col\":1,\"line\":580},\"startBody\":{\"col\":45,\"line\":541},\"endBody\":{\"col\":1,\"line\":580}},\"ModalWithOutsideContent\":{\"startLoc\":{\"col\":39,\"line\":584},\"endLoc\":{\"col\":1,\"line\":640},\"startBody\":{\"col\":39,\"line\":584},\"endBody\":{\"col\":1,\"line\":640}},\"ModalWithPopovers\":{\"startLoc\":{\"col\":33,\"line\":644},\"endLoc\":{\"col\":1,\"line\":708},\"startBody\":{\"col\":33,\"line\":644},\"endBody\":{\"col\":1,\"line\":708}}};\n    \nimport React, { useCallback } from \"react\";\nimport { ComponentMeta } from \"@storybook/react\";\n\nimport { Box } from \"../Box\";\nimport { Button } from \"../Button\";\nimport { FieldLabel } from \"../FieldLabel\";\nimport { Input } from \"../Input\";\nimport { LoremIpsum } from \"../LoremIpsum\";\nimport { Popover, usePopover } from \"../Popover\";\nimport { PopoverBody } from \"../PopoverBody\";\nimport { PopoverHeading } from \"../PopoverHeading\";\nimport { Portal } from \"../Portal\";\nimport { RadioButton } from \"../RadioButton\";\nimport { RadioButtonGroup } from \"../RadioButtonGroup\";\nimport { Tooltip, useTooltip } from \"../Tooltip\";\nimport { ModalBody } from \"../ModalBody\";\nimport { ModalFooter } from \"../ModalFooter\";\nimport { ModalHeading, ModalHeadingProps } from \"../ModalHeading\";\n\nimport page from \"./Modal.docs.mdx\";\n\nimport { Modal, ModalProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Overlay/Modal\",\n  component: Modal,\n  parameters: {\n    docs: { page },\n  },\n  argTypes: {\n    level: {\n      options: [3, 2],\n      control: { type: \"select\" },\n    },\n  },\n} as ComponentMeta<typeof Modal>;\n\ninterface Args extends ModalProps {\n  level: ModalHeadingProps[\"level\"];\n}\n\nconst defaultArgs: Args = {\n  level: 3,\n  size: \"sm\",\n};\n\nexport const SizeSmallWoIcon = ({\n  level,\n  ...args\n}: Args): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal {...args} isOpen={isOpen} toggle={toggle}>\n        <ModalHeading level={level}>You have unsaved changes!</ModalHeading>\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"left\">\n            <Button variant=\"quaternary\">Don&apos;t save</Button>\n          </ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button variant=\"secondary\" onClick={toggle}>\n              Keep Editing\n            </Button>\n            <Button>Save Draft</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nSizeSmallWoIcon.storyName = \"size: small (w/o icon)\";\n\nSizeSmallWoIcon.args = defaultArgs;\n\nexport const SizeSmallWIcon = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal size=\"sm\" isOpen={isOpen} toggle={toggle}>\n        <ModalHeading iconType=\"warning\">\n          You have unsaved changes!\n        </ModalHeading>\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"left\">\n            <Button variant=\"quaternary\">Don&apos;t save</Button>\n          </ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button variant=\"secondary\" onClick={toggle}>\n              Keep Editing\n            </Button>\n            <Button>Save Draft</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nSizeSmallWIcon.storyName = \"size: small (w/ icon)\";\n\nexport const SizeMedium = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal size=\"md\" isOpen={isOpen} toggle={toggle}>\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\n        <ModalBody>\n          <FieldLabel label=\"App name\">\n            <Input id=\"exampleInput\" />\n          </FieldLabel>\n          <FieldLabel label=\"Platform\">\n            <select\n              id=\"exampleInput2\"\n              style={{\n                height: 40,\n                width: 300,\n                paddingLeft: 10,\n                border: \"1px solid #A8B3B8\",\n              }}\n            >\n              <option>Android</option>\n              <option>FireOS</option>\n              <option>iOS</option>\n              <option>Windows</option>\n              <option>Web</option>\n              <option>tvOS</option>\n              <option>Roku</option>\n            </select>\n          </FieldLabel>\n          <FieldLabel label=\"Push Provider\">\n            <RadioButtonGroup name=\"radios\">\n              <RadioButton id=\"radioButton1\" value=\"Firebase (FCM)\">\n                Firebase (FCM)\n              </RadioButton>\n              <RadioButton id=\"radioButton2\" value=\"Huawei (HMS)\">\n                Huawei (HMS)\n              </RadioButton>\n              <RadioButton id=\"radioButton3\" value=\"Baidu\">\n                Baidu\n              </RadioButton>\n            </RadioButtonGroup>\n          </FieldLabel>\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button id=\"cancelButton\" variant=\"secondary\" onClick={toggle}>\n              Cancel\n            </Button>\n            <Button id=\"addButton\">Add App</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nSizeMedium.storyName = \"size: medium\";\n\nexport const SizeLarge = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal size=\"lg\" isOpen={isOpen} toggle={toggle}>\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\n        <ModalBody>\n          <FieldLabel label=\"App name\">\n            <Input id=\"exampleInput\" />\n          </FieldLabel>\n          <FieldLabel label=\"Platform\">\n            <select\n              id=\"exampleInput2\"\n              style={{\n                height: 40,\n                width: 300,\n                paddingLeft: 10,\n                border: \"1px solid #A8B3B8\",\n              }}\n            >\n              <option>Android</option>\n              <option>FireOS</option>\n              <option>iOS</option>\n              <option>Windows</option>\n              <option>Web</option>\n              <option>tvOS</option>\n              <option>Roku</option>\n            </select>\n          </FieldLabel>\n          <FieldLabel label=\"Push Provider\">\n            <RadioButtonGroup name=\"radios\">\n              <RadioButton id=\"radioButton1\" value=\"Firebase (FCM)\">\n                Firebase (FCM)\n              </RadioButton>\n              <RadioButton id=\"radioButton2\" value=\"Huawei (HMS)\">\n                Huawei (HMS)\n              </RadioButton>\n              <RadioButton id=\"radioButton3\" value=\"Baidu\">\n                Baidu\n              </RadioButton>\n            </RadioButtonGroup>\n          </FieldLabel>\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button id=\"cancelButton\" variant=\"secondary\" onClick={toggle}>\n              Cancel\n            </Button>\n            <Button id=\"addButton\">Add App</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nSizeLarge.storyName = \"size: large\";\n\nexport const SizeExtraLarge = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal size=\"xl\" isOpen={isOpen} toggle={toggle}>\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\n        <ModalBody>\n          <FieldLabel label=\"App name\">\n            <Input id=\"exampleInput\" />\n          </FieldLabel>\n          <FieldLabel label=\"Platform\">\n            <select\n              id=\"exampleInput2\"\n              style={{\n                height: 40,\n                width: 300,\n                paddingLeft: 10,\n                border: \"1px solid #A8B3B8\",\n              }}\n            >\n              <option>Android</option>\n              <option>FireOS</option>\n              <option>iOS</option>\n              <option>Windows</option>\n              <option>Web</option>\n              <option>tvOS</option>\n              <option>Roku</option>\n            </select>\n          </FieldLabel>\n          <FieldLabel label=\"Push Provider\">\n            <RadioButtonGroup name=\"radios\">\n              <RadioButton id=\"radioButton1\" value=\"Firebase (FCM)\">\n                Firebase (FCM)\n              </RadioButton>\n              <RadioButton id=\"radioButton2\" value=\"Huawei (HMS)\">\n                Huawei (HMS)\n              </RadioButton>\n              <RadioButton id=\"radioButton3\" value=\"Baidu\">\n                Baidu\n              </RadioButton>\n            </RadioButtonGroup>\n          </FieldLabel>\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button id=\"cancelButton\" variant=\"secondary\" onClick={toggle}>\n              Cancel\n            </Button>\n            <Button id=\"addButton\">Add App</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nSizeExtraLarge.storyName = \"size: extra large\";\n\nexport const HeadingSizeWithH3 = ({\n  level,\n  ...args\n}: Args): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal {...args} isOpen={isOpen} toggle={toggle}>\n        <ModalHeading level={level}>\n          Add New App to Stopwatch &amp; Droidboy\n        </ModalHeading>\n        <ModalBody>\n          <FieldLabel label=\"App name\">\n            <Input id=\"exampleInput\" />\n          </FieldLabel>\n          <FieldLabel label=\"Platform\">\n            <select\n              id=\"exampleInput2\"\n              style={{\n                height: 40,\n                width: 300,\n                paddingLeft: 10,\n                border: \"1px solid #A8B3B8\",\n              }}\n            >\n              <option>Android</option>\n              <option>FireOS</option>\n              <option>iOS</option>\n              <option>Windows</option>\n              <option>Web</option>\n              <option>tvOS</option>\n              <option>Roku</option>\n            </select>\n          </FieldLabel>\n          <FieldLabel label=\"Push Provider\">\n            <RadioButtonGroup name=\"radios\">\n              <RadioButton id=\"radioButton1\" value=\"Firebase (FCM)\">\n                Firebase (FCM)\n              </RadioButton>\n              <RadioButton id=\"radioButton2\" value=\"Huawei (HMS)\">\n                Huawei (HMS)\n              </RadioButton>\n              <RadioButton id=\"radioButton3\" value=\"Baidu\">\n                Baidu\n              </RadioButton>\n            </RadioButtonGroup>\n          </FieldLabel>\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button id=\"cancelButton\" variant=\"secondary\" onClick={toggle}>\n              Cancel\n            </Button>\n            <Button id=\"addButton\">Add App</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nHeadingSizeWithH3.storyName = \"heading size (with h3)\";\n\nHeadingSizeWithH3.args = defaultArgs;\n\nexport const NestedModals = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n  const [isInnerOpen, setInnerOpen] = React.useState(false);\n\n  const toggle = () => {\n    // only close the parent modal if the child modal is closed\n    if (!isInnerOpen) {\n      setOpen(!isOpen);\n    }\n  };\n\n  const toggleInner = () => {\n    setInnerOpen(!isInnerOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal size=\"xl\" isOpen={isOpen} toggle={toggle} className=\"outer\">\n        <ModalHeading>You have unsaved changes!</ModalHeading>\n        <ModalBody>\n          <Button onClick={() => setInnerOpen(true)}>Show modal</Button>\n          <Modal\n            size=\"xl\"\n            isOpen={isInnerOpen}\n            toggle={toggleInner}\n            className=\"inner\"\n          >\n            <ModalHeading>A HEADER. NEW THINGS. WHATEVER!</ModalHeading>\n            <ModalBody>\n              <LoremIpsum paragraphs={2} />\n            </ModalBody>\n            <ModalFooter>\n              <ModalFooter aligner side=\"left\">\n                <Button variant=\"quaternary\">Don&apos;t save</Button>\n              </ModalFooter>\n              <ModalFooter aligner side=\"right\">\n                <Button variant=\"secondary\" onClick={toggleInner}>\n                  Keep Editing\n                </Button>\n                <Button>Save Draft</Button>\n              </ModalFooter>\n            </ModalFooter>\n          </Modal>\n          <LoremIpsum paragraphs={7} />\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"left\">\n            <Button variant=\"quaternary\">Don&apos;t save</Button>\n          </ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button variant=\"secondary\" onClick={toggle}>\n              Keep Editing\n            </Button>\n            <Button>Save Draft</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nNestedModals.storyName = \"nested modals\";\n\nexport const NestedModalsWithCustomZIndex = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n  const [isInnerOpen, setInnerOpen] = React.useState(false);\n\n  const toggle = () => {\n    // only close the parent modal if the child modal is closed\n    if (!isInnerOpen) {\n      setOpen(!isOpen);\n    }\n  };\n\n  const toggleInner = () => {\n    setInnerOpen(!isInnerOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal\n        size=\"xl\"\n        isOpen={isOpen}\n        toggle={toggle}\n        className=\"outer\"\n        zIndex={605}\n      >\n        <ModalHeading>You have unsaved changes!</ModalHeading>\n        <ModalBody>\n          <Button onClick={() => setInnerOpen(true)}>Show modal</Button>\n          <Modal\n            size=\"xl\"\n            isOpen={isInnerOpen}\n            toggle={toggleInner}\n            className=\"inner\"\n          >\n            <ModalHeading>A HEADER. NEW THINGS. WHATEVER!</ModalHeading>\n            <ModalBody>\n              <LoremIpsum paragraphs={2} />\n            </ModalBody>\n            <ModalFooter>\n              <ModalFooter aligner side=\"left\">\n                <Button variant=\"quaternary\">Don&apos;t save</Button>\n              </ModalFooter>\n              <ModalFooter aligner side=\"right\">\n                <Button variant=\"secondary\" onClick={toggleInner}>\n                  Keep Editing\n                </Button>\n                <Button>Save Draft</Button>\n              </ModalFooter>\n            </ModalFooter>\n          </Modal>\n          <LoremIpsum paragraphs={7} />\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"left\">\n            <Button variant=\"quaternary\">Don&apos;t save</Button>\n          </ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button variant=\"secondary\" onClick={toggle}>\n              Keep Editing\n            </Button>\n            <Button>Save Draft</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nNestedModalsWithCustomZIndex.storyName = \"nested modals with custom z-index\";\n\nexport const NonDismissableModal = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal isOpen={isOpen}>\n        <ModalHeading>You could mess stuff up!</ModalHeading>\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button intent=\"danger\" onClick={toggle}>\n              I Accept\n            </Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nNonDismissableModal.storyName = \"non-dismissable modal\";\n\nexport const NonDismissableModalWithNoExit = (): React.ReactElement => {\n  const [seconds, setSeconds] = React.useState(10);\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = useCallback(() => {\n    setOpen(!isOpen);\n\n    setSeconds(10);\n  }, [isOpen]);\n\n  React.useEffect(() => {\n    let interval;\n\n    if (isOpen) {\n      interval = setInterval(() => {\n        setSeconds((seconds) => (seconds > 0 ? seconds - 1 : seconds));\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [isOpen]);\n\n  React.useEffect(() => {\n    if (seconds === 0) {\n      toggle();\n    }\n  }, [seconds, toggle]);\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal isOpen={isOpen}>\n        <ModalHeading>You could mess stuff up!</ModalHeading>\n        <ModalBody>{seconds} second(s) until Modal close</ModalBody>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nNonDismissableModalWithNoExit.storyName = \"non-dismissable modal with no exit\";\n\nexport const ModalWithOutsideContent = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal size=\"lg\" isOpen={isOpen} toggle={toggle}>\n        <ModalHeading>You have unsaved changes!</ModalHeading>\n        <ModalBody>\n          <Portal style={{ zIndex: 2400 }}>\n            <div\n              className=\"bcl-ignore-click-outside clickMeExample\"\n              style={{\n                zIndex: 2400,\n                position: \"absolute\",\n                padding: \"20px\",\n                background: \"pink\",\n              }}\n            >\n              Click Me\n            </div>\n          </Portal>\n          <Portal style={{ zIndex: 2400 }}>\n            <div\n              className=\"clickMeCloseExample\"\n              style={{\n                zIndex: 2400,\n                position: \"absolute\",\n                top: \"300px\",\n                padding: \"20px\",\n                background: \"pink\",\n              }}\n            >\n              Click Me To Close\n            </div>\n          </Portal>\n          <LoremIpsum paragraphs={5} />\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"left\">\n            <Button variant=\"quaternary\">Don&apos;t save</Button>\n          </ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button variant=\"secondary\" onClick={toggle}>\n              Keep Editing\n            </Button>\n            <Button>Save Draft</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};;\n\nModalWithOutsideContent.storyName = \"modal with outside content\";\n\nexport const ModalWithPopovers = (): React.ReactElement => {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const toggle = () => {\n    setOpen(!isOpen);\n  };\n\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n  const [tooltipState, targetTooltipRef] = useTooltip<HTMLButtonElement>();\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\n      <Modal size=\"lg\" isOpen={isOpen} toggle={toggle}>\n        <ModalHeading>You have unsaved changes!</ModalHeading>\n        <ModalBody>\n          <Button className=\"popoverOpen\" ref={targetRef}>\n            Click to open/close\n          </Button>\n          <Popover\n            {...popoverState}\n            targetRef={targetRef}\n            defaultPlacement=\"bottom\"\n          >\n            <PopoverHeading>Heading</PopoverHeading>\n            <PopoverBody>\n              We need to let the user know something in this tooltip!\n            </PopoverBody>\n          </Popover>\n          <Box boxPadding={{ vertical: \"md\" }}>\n            <span id=\"test_text\">Some text should be covered</span>\n          </Box>\n          <LoremIpsum paragraphs={1} />\n          <Button className=\"tooltipOpen\" ref={targetTooltipRef}>\n            Click to open/close tooltip\n          </Button>\n          <Tooltip\n            targetRef={targetTooltipRef}\n            triggers={[\"click\"]}\n            untriggers={[\"click\"]}\n            placement=\"bottom\"\n            {...tooltipState}\n          >\n            Tooltip with some info in it...\n          </Tooltip>\n          <Box boxPadding={{ vertical: \"sm\" }}>\n            <span id=\"test_text2\">Some text should be covered</span>\n          </Box>\n          <LoremIpsum paragraphs={1} />\n        </ModalBody>\n        <ModalFooter>\n          <ModalFooter aligner side=\"left\">\n            <Button variant=\"quaternary\">Don&apos;t save</Button>\n          </ModalFooter>\n          <ModalFooter aligner side=\"right\">\n            <Button variant=\"secondary\" onClick={toggle}>\n              Keep Editing\n            </Button>\n            <Button>Save Draft</Button>\n          </ModalFooter>\n        </ModalFooter>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nModalWithPopovers.storyName = \"modal with popovers\";\n\n\n\nSizeSmallWoIcon.parameters = { storySource: { source: \"({\\n  level,\\n  ...args\\n}: Args): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal {...args} isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading level={level}>You have unsaved changes!</ModalHeading>\\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...SizeSmallWoIcon.parameters };\nSizeSmallWIcon.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"sm\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading iconType=\\\"warning\\\">\\n          You have unsaved changes!\\n        </ModalHeading>\\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...SizeSmallWIcon.parameters };\nSizeMedium.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"md\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\\n        <ModalBody>\\n          <FieldLabel label=\\\"App name\\\">\\n            <Input id=\\\"exampleInput\\\" />\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Platform\\\">\\n            <select\\n              id=\\\"exampleInput2\\\"\\n              style={{\\n                height: 40,\\n                width: 300,\\n                paddingLeft: 10,\\n                border: \\\"1px solid #A8B3B8\\\",\\n              }}\\n            >\\n              <option>Android</option>\\n              <option>FireOS</option>\\n              <option>iOS</option>\\n              <option>Windows</option>\\n              <option>Web</option>\\n              <option>tvOS</option>\\n              <option>Roku</option>\\n            </select>\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Push Provider\\\">\\n            <RadioButtonGroup name=\\\"radios\\\">\\n              <RadioButton id=\\\"radioButton1\\\" value=\\\"Firebase (FCM)\\\">\\n                Firebase (FCM)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton2\\\" value=\\\"Huawei (HMS)\\\">\\n                Huawei (HMS)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton3\\\" value=\\\"Baidu\\\">\\n                Baidu\\n              </RadioButton>\\n            </RadioButtonGroup>\\n          </FieldLabel>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button id=\\\"cancelButton\\\" variant=\\\"secondary\\\" onClick={toggle}>\\n              Cancel\\n            </Button>\\n            <Button id=\\\"addButton\\\">Add App</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...SizeMedium.parameters };\nSizeLarge.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"lg\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\\n        <ModalBody>\\n          <FieldLabel label=\\\"App name\\\">\\n            <Input id=\\\"exampleInput\\\" />\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Platform\\\">\\n            <select\\n              id=\\\"exampleInput2\\\"\\n              style={{\\n                height: 40,\\n                width: 300,\\n                paddingLeft: 10,\\n                border: \\\"1px solid #A8B3B8\\\",\\n              }}\\n            >\\n              <option>Android</option>\\n              <option>FireOS</option>\\n              <option>iOS</option>\\n              <option>Windows</option>\\n              <option>Web</option>\\n              <option>tvOS</option>\\n              <option>Roku</option>\\n            </select>\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Push Provider\\\">\\n            <RadioButtonGroup name=\\\"radios\\\">\\n              <RadioButton id=\\\"radioButton1\\\" value=\\\"Firebase (FCM)\\\">\\n                Firebase (FCM)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton2\\\" value=\\\"Huawei (HMS)\\\">\\n                Huawei (HMS)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton3\\\" value=\\\"Baidu\\\">\\n                Baidu\\n              </RadioButton>\\n            </RadioButtonGroup>\\n          </FieldLabel>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button id=\\\"cancelButton\\\" variant=\\\"secondary\\\" onClick={toggle}>\\n              Cancel\\n            </Button>\\n            <Button id=\\\"addButton\\\">Add App</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...SizeLarge.parameters };\nSizeExtraLarge.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"xl\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>Add New App to Stopwatch &amp; Droidboy</ModalHeading>\\n        <ModalBody>\\n          <FieldLabel label=\\\"App name\\\">\\n            <Input id=\\\"exampleInput\\\" />\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Platform\\\">\\n            <select\\n              id=\\\"exampleInput2\\\"\\n              style={{\\n                height: 40,\\n                width: 300,\\n                paddingLeft: 10,\\n                border: \\\"1px solid #A8B3B8\\\",\\n              }}\\n            >\\n              <option>Android</option>\\n              <option>FireOS</option>\\n              <option>iOS</option>\\n              <option>Windows</option>\\n              <option>Web</option>\\n              <option>tvOS</option>\\n              <option>Roku</option>\\n            </select>\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Push Provider\\\">\\n            <RadioButtonGroup name=\\\"radios\\\">\\n              <RadioButton id=\\\"radioButton1\\\" value=\\\"Firebase (FCM)\\\">\\n                Firebase (FCM)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton2\\\" value=\\\"Huawei (HMS)\\\">\\n                Huawei (HMS)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton3\\\" value=\\\"Baidu\\\">\\n                Baidu\\n              </RadioButton>\\n            </RadioButtonGroup>\\n          </FieldLabel>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button id=\\\"cancelButton\\\" variant=\\\"secondary\\\" onClick={toggle}>\\n              Cancel\\n            </Button>\\n            <Button id=\\\"addButton\\\">Add App</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...SizeExtraLarge.parameters };\nHeadingSizeWithH3.parameters = { storySource: { source: \"({\\n  level,\\n  ...args\\n}: Args): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal {...args} isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading level={level}>\\n          Add New App to Stopwatch &amp; Droidboy\\n        </ModalHeading>\\n        <ModalBody>\\n          <FieldLabel label=\\\"App name\\\">\\n            <Input id=\\\"exampleInput\\\" />\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Platform\\\">\\n            <select\\n              id=\\\"exampleInput2\\\"\\n              style={{\\n                height: 40,\\n                width: 300,\\n                paddingLeft: 10,\\n                border: \\\"1px solid #A8B3B8\\\",\\n              }}\\n            >\\n              <option>Android</option>\\n              <option>FireOS</option>\\n              <option>iOS</option>\\n              <option>Windows</option>\\n              <option>Web</option>\\n              <option>tvOS</option>\\n              <option>Roku</option>\\n            </select>\\n          </FieldLabel>\\n          <FieldLabel label=\\\"Push Provider\\\">\\n            <RadioButtonGroup name=\\\"radios\\\">\\n              <RadioButton id=\\\"radioButton1\\\" value=\\\"Firebase (FCM)\\\">\\n                Firebase (FCM)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton2\\\" value=\\\"Huawei (HMS)\\\">\\n                Huawei (HMS)\\n              </RadioButton>\\n              <RadioButton id=\\\"radioButton3\\\" value=\\\"Baidu\\\">\\n                Baidu\\n              </RadioButton>\\n            </RadioButtonGroup>\\n          </FieldLabel>\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button id=\\\"cancelButton\\\" variant=\\\"secondary\\\" onClick={toggle}>\\n              Cancel\\n            </Button>\\n            <Button id=\\\"addButton\\\">Add App</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...HeadingSizeWithH3.parameters };\nNestedModals.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [isInnerOpen, setInnerOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    // only close the parent modal if the child modal is closed\\n    if (!isInnerOpen) {\\n      setOpen(!isOpen);\\n    }\\n  };\\n\\n  const toggleInner = () => {\\n    setInnerOpen(!isInnerOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"xl\\\" isOpen={isOpen} toggle={toggle} className=\\\"outer\\\">\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <Button onClick={() => setInnerOpen(true)}>Show modal</Button>\\n          <Modal\\n            size=\\\"xl\\\"\\n            isOpen={isInnerOpen}\\n            toggle={toggleInner}\\n            className=\\\"inner\\\"\\n          >\\n            <ModalHeading>A HEADER. NEW THINGS. WHATEVER!</ModalHeading>\\n            <ModalBody>\\n              <LoremIpsum paragraphs={2} />\\n            </ModalBody>\\n            <ModalFooter>\\n              <ModalFooter aligner side=\\\"left\\\">\\n                <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n              </ModalFooter>\\n              <ModalFooter aligner side=\\\"right\\\">\\n                <Button variant=\\\"secondary\\\" onClick={toggleInner}>\\n                  Keep Editing\\n                </Button>\\n                <Button>Save Draft</Button>\\n              </ModalFooter>\\n            </ModalFooter>\\n          </Modal>\\n          <LoremIpsum paragraphs={7} />\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...NestedModals.parameters };\nNestedModalsWithCustomZIndex.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [isInnerOpen, setInnerOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    // only close the parent modal if the child modal is closed\\n    if (!isInnerOpen) {\\n      setOpen(!isOpen);\\n    }\\n  };\\n\\n  const toggleInner = () => {\\n    setInnerOpen(!isInnerOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal\\n        size=\\\"xl\\\"\\n        isOpen={isOpen}\\n        toggle={toggle}\\n        className=\\\"outer\\\"\\n        zIndex={605}\\n      >\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <Button onClick={() => setInnerOpen(true)}>Show modal</Button>\\n          <Modal\\n            size=\\\"xl\\\"\\n            isOpen={isInnerOpen}\\n            toggle={toggleInner}\\n            className=\\\"inner\\\"\\n          >\\n            <ModalHeading>A HEADER. NEW THINGS. WHATEVER!</ModalHeading>\\n            <ModalBody>\\n              <LoremIpsum paragraphs={2} />\\n            </ModalBody>\\n            <ModalFooter>\\n              <ModalFooter aligner side=\\\"left\\\">\\n                <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n              </ModalFooter>\\n              <ModalFooter aligner side=\\\"right\\\">\\n                <Button variant=\\\"secondary\\\" onClick={toggleInner}>\\n                  Keep Editing\\n                </Button>\\n                <Button>Save Draft</Button>\\n              </ModalFooter>\\n            </ModalFooter>\\n          </Modal>\\n          <LoremIpsum paragraphs={7} />\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...NestedModalsWithCustomZIndex.parameters };\nNonDismissableModal.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal isOpen={isOpen}>\\n        <ModalHeading>You could mess stuff up!</ModalHeading>\\n        <ModalBody>What do you think you&apos;re doing?</ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button intent=\\\"danger\\\" onClick={toggle}>\\n              I Accept\\n            </Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...NonDismissableModal.parameters };\nNonDismissableModalWithNoExit.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [seconds, setSeconds] = React.useState(10);\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = useCallback(() => {\\n    setOpen(!isOpen);\\n\\n    setSeconds(10);\\n  }, [isOpen]);\\n\\n  React.useEffect(() => {\\n    let interval;\\n\\n    if (isOpen) {\\n      interval = setInterval(() => {\\n        setSeconds((seconds) => (seconds > 0 ? seconds - 1 : seconds));\\n      }, 1000);\\n    } else {\\n      clearInterval(interval);\\n    }\\n\\n    return () => clearInterval(interval);\\n  }, [isOpen]);\\n\\n  React.useEffect(() => {\\n    if (seconds === 0) {\\n      toggle();\\n    }\\n  }, [seconds, toggle]);\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal isOpen={isOpen}>\\n        <ModalHeading>You could mess stuff up!</ModalHeading>\\n        <ModalBody>{seconds} second(s) until Modal close</ModalBody>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...NonDismissableModalWithNoExit.parameters };\nModalWithOutsideContent.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"lg\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <Portal style={{ zIndex: 2400 }}>\\n            <div\\n              className=\\\"bcl-ignore-click-outside clickMeExample\\\"\\n              style={{\\n                zIndex: 2400,\\n                position: \\\"absolute\\\",\\n                padding: \\\"20px\\\",\\n                background: \\\"pink\\\",\\n              }}\\n            >\\n              Click Me\\n            </div>\\n          </Portal>\\n          <Portal style={{ zIndex: 2400 }}>\\n            <div\\n              className=\\\"clickMeCloseExample\\\"\\n              style={{\\n                zIndex: 2400,\\n                position: \\\"absolute\\\",\\n                top: \\\"300px\\\",\\n                padding: \\\"20px\\\",\\n                background: \\\"pink\\\",\\n              }}\\n            >\\n              Click Me To Close\\n            </div>\\n          </Portal>\\n          <LoremIpsum paragraphs={5} />\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...ModalWithOutsideContent.parameters };\nModalWithPopovers.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setOpen] = React.useState(false);\\n\\n  const toggle = () => {\\n    setOpen(!isOpen);\\n  };\\n\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n  const [tooltipState, targetTooltipRef] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setOpen(true)}>Show modal</Button>\\n      <Modal size=\\\"lg\\\" isOpen={isOpen} toggle={toggle}>\\n        <ModalHeading>You have unsaved changes!</ModalHeading>\\n        <ModalBody>\\n          <Button className=\\\"popoverOpen\\\" ref={targetRef}>\\n            Click to open/close\\n          </Button>\\n          <Popover\\n            {...popoverState}\\n            targetRef={targetRef}\\n            defaultPlacement=\\\"bottom\\\"\\n          >\\n            <PopoverHeading>Heading</PopoverHeading>\\n            <PopoverBody>\\n              We need to let the user know something in this tooltip!\\n            </PopoverBody>\\n          </Popover>\\n          <Box boxPadding={{ vertical: \\\"md\\\" }}>\\n            <span id=\\\"test_text\\\">Some text should be covered</span>\\n          </Box>\\n          <LoremIpsum paragraphs={1} />\\n          <Button className=\\\"tooltipOpen\\\" ref={targetTooltipRef}>\\n            Click to open/close tooltip\\n          </Button>\\n          <Tooltip\\n            targetRef={targetTooltipRef}\\n            triggers={[\\\"click\\\"]}\\n            untriggers={[\\\"click\\\"]}\\n            placement=\\\"bottom\\\"\\n            {...tooltipState}\\n          >\\n            Tooltip with some info in it...\\n          </Tooltip>\\n          <Box boxPadding={{ vertical: \\\"sm\\\" }}>\\n            <span id=\\\"test_text2\\\">Some text should be covered</span>\\n          </Box>\\n          <LoremIpsum paragraphs={1} />\\n        </ModalBody>\\n        <ModalFooter>\\n          <ModalFooter aligner side=\\\"left\\\">\\n            <Button variant=\\\"quaternary\\\">Don&apos;t save</Button>\\n          </ModalFooter>\\n          <ModalFooter aligner side=\\\"right\\\">\\n            <Button variant=\\\"secondary\\\" onClick={toggle}>\\n              Keep Editing\\n            </Button>\\n            <Button>Save Draft</Button>\\n          </ModalFooter>\\n        </ModalFooter>\\n      </Modal>\\n    </React.Fragment>\\n  );\\n}\" }, ...ModalWithPopovers.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\nimport styled from \"styled-components\";\n\nimport { CloseButton } from \"../CloseButton\";\nimport { Portal } from \"../Portal\";\nimport { LevelsContextProvider } from \"../LevelsContext\";\nimport { ModalContextProvider } from \"../ModalContext\";\n\nimport { ModalBackdrop } from \"./ModalBackdrop\";\nimport { ModalContent } from \"./ModalContent\";\nimport { ModalDialog } from \"./ModalDialog\";\nimport { StyledModal } from \"./StyledModal\";\nimport { useModalLevel, BASE_Z_INDEX, MODAL_LEVEL_TICK } from \"./useModalLevel\";\nimport { ModalProps } from \"./types\";\n\nconst focusableElements = [\n  \"a[href]\",\n  \"area[href]\",\n  \"input:not([disabled]):not([type=hidden])\",\n  \"select:not([disabled])\",\n  \"textarea:not([disabled])\",\n  \"button:not([disabled])\",\n  \"object\",\n  \"embed\",\n  \"[tabindex]:not(.modal)\",\n  \"audio[controls]\",\n  \"video[controls]\",\n  '[contenteditable]:not([contenteditable=\"false\"])',\n];\n\nfunction getFocusableChildren(ref: React.RefObject<HTMLElement>) {\n  return ref.current?.querySelectorAll(focusableElements.join(\", \"));\n}\n\nfunction getFocusedChild(ref: React.RefObject<HTMLElement>) {\n  let currentFocus;\n\n  const focusableChildren = getFocusableChildren(ref);\n\n  if (typeof document !== \"undefined\") {\n    currentFocus = document.activeElement;\n  } else {\n    // we can't test this with Cypress, so ignore it\n    /* istanbul ignore next */\n    currentFocus = focusableChildren?.[0];\n  }\n\n  return currentFocus;\n}\n\nfunction setFocus(ref: React.RefObject<HTMLDivElement>) {\n  if (typeof ref.current?.focus === \"function\") {\n    ref.current.focus();\n  }\n}\n\n/**\n * gets the index of the new focusable item to focus on\n *\n * @param currentFocus index of the currently focused item\n * @param totalFocusable number of total focusable items\n * @param isShifted indicates if the shift key is pressed\n *\n * @returns the index of the item to now focus on\n */\nexport const getNewFocusIndex = (\n  currentFocus: number,\n  totalFocusable: number,\n  isShifted: boolean\n): number => {\n  if (isShifted) {\n    // if the shift key is pressed, and at beginning of list,\n    // wrap to the end of the list\n    if (currentFocus === 0) {\n      return totalFocusable - 1;\n    }\n\n    // if the shift key is pressed and not at the beginning of list,\n    // go back one\n    return currentFocus - 1;\n  }\n\n  // if not at the end of the list, go forward one\n  if (currentFocus < totalFocusable - 1) {\n    return currentFocus + 1;\n  }\n\n  // otherwise, wrap to the beginning of the list\n  return 0;\n};\n\nexport const ModalCloseButton = styled(CloseButton)`\n  position: absolute;\n`;\n\nexport const Modal = ({\n  autoFocus = true,\n  className,\n  children,\n  isOpen,\n  keyboard = true,\n  node,\n  size = \"sm\",\n  toggle,\n  zIndex,\n  ...props\n}: ModalProps): React.ReactElement => {\n  // refs here\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\n  const contentRef = React.useRef<HTMLDivElement>(null);\n\n  // event handlers here\n  const handleEscape = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (isOpen && keyboard && event.keyCode === 27 && toggle) {\n      event.preventDefault();\n\n      event.stopPropagation();\n\n      toggle(event);\n    }\n  };\n\n  const handleTab = (event: React.KeyboardEvent<HTMLElement>) => {\n    // if not a tab event, return out\n    if (event.keyCode !== 9 || !keyboard) {\n      return;\n    }\n\n    // get focusable children\n    const focusableChildren = getFocusableChildren(wrapperRef);\n\n    if (!focusableChildren) {\n      return;\n    }\n\n    const totalFocusable = focusableChildren.length;\n\n    if (totalFocusable === 0) {\n      return;\n    }\n\n    // get the current focused child and index\n    const currentFocus = getFocusedChild(wrapperRef);\n\n    let focusedIndex = 0;\n\n    for (let i = 0; i < totalFocusable; i++) {\n      if (focusableChildren[i] === currentFocus) {\n        focusedIndex = i;\n\n        break;\n      }\n    }\n\n    event.preventDefault();\n\n    const newFocus = getNewFocusIndex(\n      focusedIndex,\n      totalFocusable,\n      event.shiftKey\n    );\n\n    (focusableChildren[newFocus] as HTMLElement).focus();\n  };\n\n  // hooks here\n  React.useEffect(() => {\n    if (autoFocus && isOpen) {\n      setFocus(contentRef);\n    }\n  }, [autoFocus, isOpen]);\n\n  React.useEffect(() => {\n    document.body.style.overflow = isOpen ? \"hidden\" : \"\";\n\n    return () => {\n      if (isOpen) {\n        // on unmount, restore scrolling on the body\n        document.body.style.overflow = \"\";\n      }\n    };\n  }, [isOpen]);\n\n  const calcZIndex = useModalLevel(zIndex);\n\n  return (\n    <Portal node={node}>\n      {isOpen && (\n        <LevelsContextProvider\n          step={MODAL_LEVEL_TICK}\n          base={BASE_Z_INDEX}\n          level={zIndex ? zIndex + 2 * MODAL_LEVEL_TICK : undefined}\n        >\n          <ModalContextProvider size={size}>\n            <StyledModal\n              {...props}\n              isOpen={isOpen}\n              className={classNames([\"bcl-modal\", className])}\n              onKeyUp={handleEscape}\n              onKeyDown={handleTab}\n              ref={wrapperRef}\n            >\n              <ModalBackdrop zIndex={calcZIndex - MODAL_LEVEL_TICK} />\n              <ModalDialog isOpen={isOpen} zIndex={calcZIndex}>\n                <ModalContent\n                  ref={contentRef}\n                  tabIndex={0}\n                  isOpen={isOpen}\n                  toggle={toggle}\n                  size={size}\n                >\n                  {toggle && (\n                    <ModalCloseButton className=\"close-icon\" onClick={toggle} />\n                  )}\n                  {children}\n                </ModalContent>\n              </ModalDialog>\n            </StyledModal>\n          </ModalContextProvider>\n        </LevelsContextProvider>\n      )}\n    </Portal>\n  );\n};\n\nModal.displayName = \"Modal\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { ModalBackdropProps } from \"../types\";\n\nimport { StyledModalBackdrop } from \"./StyledModalBackdrop\";\n\nexport const ModalBackdrop = React.forwardRef(\n  (\n    { className, zIndex = 1040, ...props }: ModalBackdropProps,\n    ref: React.RefObject<HTMLDivElement>\n  ) => (\n    <StyledModalBackdrop\n      {...props}\n      zIndex={zIndex}\n      ref={ref}\n      className={classNames([\"bcl-modal-backdrop\", className])}\n    />\n  )\n);\n\nModalBackdrop.displayName = \"ModalBackdrop\";\n","import styled from \"styled-components\";\n\nimport { StyledModalBackdropProps } from \"../types\";\n\nexport const StyledModalBackdrop = styled.div<StyledModalBackdropProps>`\n  opacity: 0.5;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: ${(props) => props.zIndex};\n  background-color: rgba(0, 0, 0, 0.9);\n`;\n","export { ModalBackdrop } from \"./ModalBackdrop\";\n\nexport { StyledModalBackdrop } from \"./StyledModalBackdrop\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { ModalContentProps } from \"../types\";\n\nimport { StyledModalContent } from \"./StyledModalContent\";\n\n/**\n * Check whether some DOM node is our Component's node.\n */\nexport function isNodeFound(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  current,\n  componentNode: HTMLDivElement | null,\n  ignoreClass: string\n): boolean {\n  if (current === componentNode) {\n    return true;\n  }\n\n  // SVG <use/> elements do not technically reside in the rendered DOM, so\n  // they do not have classList directly, but they offer a link to their\n  // corresponding element, which can have classList. This extra check is for\n  // that case.\n  // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement\n  // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17\n  /* istanbul ignore next */\n  if (current.correspondingElement) {\n    return current.correspondingElement.classList.contains(ignoreClass);\n  }\n\n  return current.classList.contains(ignoreClass);\n}\n\n/**\n * Try to find our node in a hierarchy of nodes, returning the document\n * node as highest node if our node is not found in the path up.\n */\nexport function findHighest(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  current,\n  componentNode: HTMLDivElement | null,\n  ignoreClass: string\n): boolean | React.ReactNode {\n  if (current === componentNode) {\n    return true;\n  }\n\n  // If source=local then this event came from 'somewhere'\n  // inside and should be ignored. We could handle this with\n  // a layered approach, too, but that requires going back to\n  // thinking in terms of Dom node nesting, running counter\n  // to React's 'you shouldn't care about the DOM' philosophy.\n  while (current.parentNode) {\n    if (isNodeFound(current, componentNode, ignoreClass)) {\n      return true;\n    }\n\n    current = current.parentNode;\n  }\n\n  return current;\n}\n\n/**\n * React hook that creates event bindings that listen to whether the area outside\n * of that encompassed by the 'ref' is clicked on. If a user clicks on the outside\n * area, then the 'callbackFn' argument will be invoked.\n * @param ref HTML element to compare click event to and see if it was outside of\n * @param callbackFn function to call if outside area clicked\n */\nfunction useOnClickOutside(\n  ref: React.RefObject<HTMLDivElement>,\n  callbackFn: () => void,\n  ignoreClassName = \"bcl-ignore-click-outside\"\n): void {\n  React.useEffect(\n    function initUseOnClickOutside() {\n      function outsideClickListener(event: MouseEvent) {\n        if (\n          findHighest(event.target, ref.current, ignoreClassName) !== document\n        ) {\n          return;\n        }\n\n        callbackFn();\n      }\n\n      document.addEventListener(\"mousedown\", outsideClickListener);\n\n      document.addEventListener(\"touchstart\", outsideClickListener);\n\n      return function cleanupUseOnClickOutside() {\n        document.removeEventListener(\"mousedown\", outsideClickListener);\n\n        document.removeEventListener(\"touchstart\", outsideClickListener);\n      };\n    },\n    [ref, callbackFn, ignoreClassName]\n  );\n}\n\nexport const ModalContent = React.forwardRef(\n  (\n    {\n      className,\n      isOpen,\n      outsideClickIgnoreClass = \"bcl-ignore-click-outside\",\n      toggle,\n      size,\n      ...props\n    }: ModalContentProps,\n    ref: React.RefObject<HTMLDivElement>\n  ) => {\n    // create handler for outside clicks\n    const handleClickOutside = () => {\n      if (isOpen && toggle) {\n        toggle();\n      }\n    };\n\n    // listen to outside clicks and toggle if open\n    useOnClickOutside(ref, handleClickOutside, outsideClickIgnoreClass);\n\n    return (\n      <StyledModalContent\n        {...props}\n        ref={ref}\n        size={size}\n        className={classNames([\n          \"bcl-modal-content\",\n          `bcl-modal-content-${size}`,\n          className,\n        ])}\n      />\n    );\n  }\n);\n\nModalContent.displayName = \"ModalContent\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getColor,\n  getBorderRadius,\n  getSpacing,\n  getBreakpoint,\n} from \"@braze/beacon-styling\";\n\nimport { StyledCloseButton } from \"../../CloseButton\";\nimport { StyledModalBody } from \"../../ModalBody\";\nimport { StyledModalFooter } from \"../../ModalFooter\";\nimport { StyledModalHeading } from \"../../ModalHeading\";\nimport { StyledModalContentProps } from \"../types\";\n\nconst mapModalSizeToSpacing = ({ size }: StyledModalContentProps) => {\n  switch (size) {\n    case \"md\":\n    case \"lg\":\n    case \"xl\":\n      return css`\n        padding: ${getSpacing(\"xxl\")};\n\n        ${StyledModalHeading} {\n          margin-bottom: ${getSpacing(\"xl\")};\n        }\n\n        ${StyledModalBody} {\n          padding: ${getSpacing(\"md\")};\n          margin: -${getSpacing(\"md\")};\n        }\n\n        ${StyledModalFooter} {\n          &:not(.aligner) {\n            margin-top: ${getSpacing(\"xl\")};\n          }\n\n          &.aligner {\n            margin-top: ${getSpacing(\"sm\")};\n          }\n        }\n\n        ${StyledCloseButton} {\n          top: ${getSpacing(\"xl\")};\n          right: ${getSpacing(\"xl\")};\n          font-size: 16px;\n        }\n      `;\n    case \"sm\":\n    default:\n      return css`\n        padding: ${getSpacing(\"xl\")};\n\n        ${StyledModalHeading} {\n          margin: ${getSpacing(\"md\")} ${getSpacing(\"md\")} ${getSpacing(\"xs\")};\n        }\n\n        ${StyledModalBody} {\n          padding: ${getSpacing(\"md\")} ${getSpacing(\"md\")};\n        }\n\n        ${StyledModalFooter} {\n          padding: 0 ${getSpacing(\"xs\")};\n          margin-bottom: ${getSpacing(\"xs\")};\n\n          &:not(.aligner) {\n            margin-top: ${getSpacing(\"xl\")};\n          }\n\n          &.aligner {\n            margin-top: ${getSpacing(\"sm\")};\n          }\n        }\n\n        ${StyledCloseButton} {\n          top: ${getSpacing(\"lg\")};\n          right: ${getSpacing(\"lg\")};\n          font-size: 12px;\n        }\n      `;\n  }\n};\n\nconst mapModalSizeToPx = ({ size }: StyledModalContentProps) => {\n  switch (size) {\n    case \"md\":\n      return css`\n        width: 760px;\n      `;\n    case \"lg\":\n      return css`\n        width: 920px;\n      `;\n    case \"xl\":\n      return css`\n        width: 1080px;\n      `;\n    case \"sm\":\n    default:\n      return css`\n        width: 520px;\n      `;\n  }\n};\n\nexport const StyledModalContent = styled.div<StyledModalContentProps>`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  pointer-events: auto;\n  background-color: ${getColor(\"gray\", 0)};\n  -webkit-background-clip: padding-box;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  outline: 0;\n  border: none;\n  border-radius: ${getBorderRadius(\"md\")};\n  overflow-x: hidden;\n  overflow-y: scroll;\n  box-sizing: border-box;\n\n  max-width: 90vw;\n  max-height: calc(100vh - 120px);\n\n  ${mapModalSizeToPx};\n  ${mapModalSizeToSpacing};\n\n  @media (max-width: ${getBreakpoint(\"sm\")}px) {\n    width: 90vw;\n  }\n`;\n","export { ModalContent } from \"./ModalContent\";\n\nexport { StyledModalContent } from \"./StyledModalContent\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { ModalDialogProps } from \"../types\";\n\nimport { StyledModalDialog } from \"./StyledModalDialog\";\n\nexport const ModalDialog = React.forwardRef(\n  (\n    { className, zIndex, ...props }: ModalDialogProps,\n    ref: React.RefObject<HTMLDivElement>\n  ) => (\n    <StyledModalDialog\n      {...props}\n      ref={ref}\n      zIndex={zIndex}\n      className={classNames([\"bcl-modal-dialog\", className])}\n    />\n  )\n);\n\nModalDialog.displayName = \"ModalDialog\";\n","import styled, { css } from \"styled-components\";\nimport { getBreakpoint, getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledModalDialogProps } from \"../types\";\n\nexport const StyledModalDialog = styled.div<StyledModalDialogProps>`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: ${(props) => props.zIndex};\n  display: none;\n  overflow: hidden;\n  outline: 0;\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      display: flex;\n      justify-content: center;\n      top: 60px;\n      bottom: 60px;\n      transform: translate(0, 0);\n\n      @media (max-width: ${getBreakpoint(\"sm\")}px) {\n        top: ${getSpacing(\"xxxl\")};\n        bottom: ${getSpacing(\"xxxl\")};\n      }\n    `};\n`;\n","export { ModalDialog } from \"./ModalDialog\";\n\nexport { StyledModalDialog } from \"./StyledModalDialog\";\n","import styled, { css } from \"styled-components\";\n\nimport { StyledModalProps } from \"./types\";\n\nexport const StyledModal = styled.div<StyledModalProps>`\n  ${(props) =>\n    props.isOpen &&\n    css`\n      overflow-x: hidden;\n      overflow-y: auto;\n    `};\n`;\n","export { Modal } from \"./Modal\";\n\nexport { StyledModalContent } from \"./ModalContent\";\n\nexport type { ModalProps, StyledModalContentProps } from \"./types\";\n","export { useModalLevel } from \"./useModalLevel\";\n\nexport { BASE_Z_INDEX, MODAL_LEVEL_TICK } from \"./useModalLevel\";\n","import { useContext } from \"react\";\n\nimport { LevelsContext } from \"../../LevelsContext\";\n\nconst BASE_Z_INDEX = 1050;\nconst MODAL_LEVEL_TICK = 10;\n\n/**\n * hook to handle finding the zIndex for a modal\n *\n * @param zIndex - custom zIndex to override other options\n *\n * @returns the zIndex to use on the modal\n */\nexport const useModalLevel = (zIndex?: number): number => {\n  const level = useContext(LevelsContext);\n\n  if (zIndex) {\n    // we add the modal tick amount to keep backwards compatibillity\n    // long term it would be best to remove this\n    return zIndex + MODAL_LEVEL_TICK;\n  }\n\n  if (level) {\n    return level;\n  }\n\n  return BASE_Z_INDEX;\n};\n\nexport { BASE_Z_INDEX, MODAL_LEVEL_TICK };\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { ModalBodyProps } from \"./types\";\nimport { StyledModalBody } from \"./StyledModalBody\";\n\nexport const ModalBody = ({\n  className,\n  ...props\n}: ModalBodyProps): React.ReactElement => (\n  <StyledModalBody\n    {...props}\n    className={classNames([\"bcl-modal-body\", className])}\n  />\n);\n","import styled from \"styled-components\";\nimport {\n  getFontFamily,\n  getFontSize,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledModalBodyProps } from \"./types\";\n\nexport const StyledModalBody = styled.div<StyledModalBodyProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  font-size: ${getFontSize(\"body\", \"md\")};\n  position: relative;\n  flex: 1 1 auto;\n  overflow-y: auto;\n`;\n","export { ModalBody } from \"./ModalBody\";\n\nexport { StyledModalBody } from \"./StyledModalBody\";\n\nexport type { ModalBodyProps, StyledModalBodyProps } from \"./types\";\n","import React, { createContext } from \"react\";\n\nimport { ModalContextInterface, ModalContextProviderProps } from \"./types\";\n\nconst defaultContext: ModalContextInterface = {\n  size: \"sm\",\n};\n\nexport const ModalContext =\n  createContext<ModalContextInterface>(defaultContext);\n\nexport const ModalContextProvider = ({\n  children,\n  size,\n}: ModalContextProviderProps): React.ReactElement => {\n  const value = React.useMemo(\n    () => ({\n      size,\n    }),\n    [size]\n  );\n\n  return (\n    <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\n  );\n};\n","export { ModalContext, ModalContextProvider } from \"./ModalContext\";\n\nexport type { ModalContextInterface, ModalContextProviderProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { StyledModalFooter } from \"./StyledModalFooter\";\nimport { ModalFooterProps } from \"./types\";\n\nexport const ModalFooter = ({\n  className,\n  ...props\n}: ModalFooterProps): React.ReactElement => (\n  <StyledModalFooter\n    {...props}\n    className={classNames([\"bcl-modal-footer\", className])}\n  />\n);\n\nModalFooter.displayName = \"ModalFooter\";\n","import styled from \"styled-components\";\n\nimport { StyledButtonGroup } from \"../ButtonGroup\";\n\nimport { StyledModalFooterProps } from \"./types\";\n\nconst getAttrs = () => ({ direction: \"row\" });\n\nexport const StyledModalFooter = styled(StyledButtonGroup).attrs(\n  getAttrs\n)<StyledModalFooterProps>``;\n","export { ModalFooter } from \"./ModalFooter\";\n\nexport { StyledModalFooter } from \"./StyledModalFooter\";\n\nexport type { ModalFooterProps, StyledModalFooterProps } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { Heading } from \"../Heading\";\nimport { Icon, BrazeIconName } from \"../Icon\";\nimport { ModalContext } from \"../ModalContext\";\n\nimport { StyledModalHeading } from \"./StyledModalHeading\";\nimport { ModalHeadingProps, IconTypes } from \"./types\";\n\nconst getIconName = (iconType?: IconTypes): BrazeIconName | void => {\n  switch (iconType) {\n    case \"warning\":\n      return \"exclamation-triangle\";\n    default:\n      return;\n  }\n};\n\nexport const ModalHeading = ({\n  className,\n  children,\n  iconType,\n  level = 2,\n  ...props\n}: ModalHeadingProps): React.ReactElement => {\n  const iconName = getIconName(iconType);\n  const { size } = useContext(ModalContext);\n\n  return (\n    <StyledModalHeading\n      {...props}\n      iconType={iconType}\n      className={classNames([\"bcl-modal-header\", className])}\n    >\n      {iconName ? <Icon className=\"optional-icon\" name={iconName} /> : null}\n      <Heading level={size === \"sm\" ? 3 : level}>{children}</Heading>\n    </StyledModalHeading>\n  );\n};\n","import styled from \"styled-components\";\nimport {\n  intentColorSelector,\n  getFontFamily,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledHeading } from \"../Heading\";\nimport { StyledIcon } from \"../Icon\";\n\nimport { StyledModalHeadingProps } from \"./types\";\n\nconst getIconColor = ({ iconType, ...props }: StyledModalHeadingProps) => {\n  switch (iconType) {\n    case \"warning\":\n      return intentColorSelector(props, \"warning\", 500);\n    default:\n      return;\n  }\n};\n\nexport const StyledModalHeading = styled.div<StyledModalHeadingProps>`\n  display: flex;\n\n  ${StyledIcon}.optional-icon {\n    margin-right: 0.5rem;\n    color: ${getIconColor};\n  }\n\n  ${StyledHeading} {\n    font-family: ${getFontFamily(\"base\")};\n    font-weight: ${getFontWeight(\"bold\")};\n    margin-right: auto;\n  }\n`;\n","export { ModalHeading } from \"./ModalHeading\";\n\nexport { StyledModalHeading } from \"./StyledModalHeading\";\n\nexport type { ModalHeadingProps, StyledModalHeadingProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { number, select, text } from \"@storybook/addon-knobs\";\nimport { FieldLabel } from \"@braze/beacon-core\";\nimport { NumberInput } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Forms/NumberInput\" component={NumberInput} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"numberinput\"\n    }}>{`NumberInput`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` component allows you to accept numerical\nvalues from your user and provide them with helper tools to\nincrement and decrement the current value.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` component uses the same props as the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`\ncomponent and defines custom styles for the up/down steppers\n(hover to see these!).`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: Unlike the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component, the `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` does NOT\naccept the `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` prop and is hardcoded to always use `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(0);\n          return <div>\n          <FieldLabel label=\"This is a number field\" mdxType=\"FieldLabel\">\n            <NumberInput type=\"number\" min={number(\"Min\", 0)} max={number(\"Max\", 100)} step={number(\"Step\", 1)} onChange={event => {\n                setValue(event.target.value);\n              }} value={value} vSize={select(\"Size\", [\"sm\", \"md\"], \"md\")} mdxType=\"NumberInput\" />\n          </FieldLabel>\n          <dl>\n            <dt>Number value:</dt>\n            <dd id=\"number-value\">{value}</dd>\n          </dl>\n        </div>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-minmax\"\n    }}>{`With min/max`}</h3>\n    <p>{`To bound your user's stepping to between allowed values, you can\nuse the `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` props.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: The `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` props do NOT prevent the user from\nmanually entering any number value; if you need value validation,\nyou must implement this yourself.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with min/max\" mdxType=\"Story\">\n    <FieldLabel label=\"This is a number field\" mdxType=\"FieldLabel\">\n      <NumberInput type=\"number\" min={1} max={10} mdxType=\"NumberInput\" />\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-step\"\n    }}>{`With step`}</h3>\n    <p>{`To allow your user to increment/decrement their values faster,\nyou can define the `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` prop as shown below.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with step\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(0);\n          return <div>\n          <FieldLabel label=\"This is a number field\" mdxType=\"FieldLabel\">\n            <NumberInput type=\"number\" step={5} onChange={event => {\n                setValue(event.target.value);\n              }} value={value} mdxType=\"NumberInput\" />\n          </FieldLabel>\n          <dl>\n            <dt>Number value:</dt>\n            <dd id=\"number-value\">{value}</dd>\n          </dl>\n        </div>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` to disable the use of the underlying input.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled\" mdxType=\"Story\">\n    <NumberInput placeholder=\"Enter text in me!\" disabled mdxType=\"NumberInput\" />\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid\"\n    }}>{`Invalid`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` to denote that the value in the input is not valid.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Add a descriptive error message to the field's label to tell your user what went wrong.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"invalid\" mdxType=\"Story\">\n    <FieldLabel label=\"Field Label\" htmlFor=\"invalidInput\" status=\"danger\" statusText={text(\"Error Message\", \"Please enter a valid value in this field\")} mdxType=\"FieldLabel\">\n      <NumberInput id=\"invalidInput\" placeholder=\"Enter text in me!\" invalid mdxType=\"NumberInput\" />\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { NumberInput } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`containerClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed to the container element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fullWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`takes up 100% of the width of the container`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the currently inputted value is invalid`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`max`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`max value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`min`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`min value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLInputElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`step`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`step to use when bumping up numbers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( string, number, string[] )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be rendered in the input field`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [value, setValue] = React.useState(0);\n  return <div>\n          <FieldLabel label=\"This is a number field\">\n            <NumberInput type=\"number\" min={number(\"Min\", 0)} max={number(\"Max\", 100)} step={number(\"Step\", 1)} onChange={event => {\n        setValue(event.target.value);\n      }} value={value} vSize={select(\"Size\", [\"sm\", \"md\"], \"md\")} />\n          </FieldLabel>\n          <dl>\n            <dt>Number value:</dt>\n            <dd id=\"number-value\">{value}</dd>\n          </dl>\n        </div>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(0);\\n  return <div>\\n          <FieldLabel label=\\\"This is a number field\\\">\\n            <NumberInput type=\\\"number\\\" min={number(\\\"Min\\\", 0)} max={number(\\\"Max\\\", 100)} step={number(\\\"Step\\\", 1)} onChange={event => {\\n        setValue(event.target.value);\\n      }} value={value} vSize={select(\\\"Size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} />\\n          </FieldLabel>\\n          <dl>\\n            <dt>Number value:</dt>\\n            <dd id=\\\"number-value\\\">{value}</dd>\\n          </dl>\\n        </div>;\\n}' } };\n\nexport const withMinMax = () => (\n          <FieldLabel label=\"This is a number field\">\n      <NumberInput type=\"number\" min={1} max={10} />\n    </FieldLabel>\n        );\nwithMinMax.storyName = 'with min/max';\nwithMinMax.parameters = { storySource: { source: '<FieldLabel label=\\\"This is a number field\\\">\\n      <NumberInput type=\\\"number\\\" min={1} max={10} />\\n    </FieldLabel>' } };\n\nexport const withStep = (() => {\n  const [value, setValue] = React.useState(0);\n  return <div>\n          <FieldLabel label=\"This is a number field\">\n            <NumberInput type=\"number\" step={5} onChange={event => {\n        setValue(event.target.value);\n      }} value={value} />\n          </FieldLabel>\n          <dl>\n            <dt>Number value:</dt>\n            <dd id=\"number-value\">{value}</dd>\n          </dl>\n        </div>;\n});\nwithStep.storyName = 'with step';\nwithStep.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(0);\\n  return <div>\\n          <FieldLabel label=\\\"This is a number field\\\">\\n            <NumberInput type=\\\"number\\\" step={5} onChange={event => {\\n        setValue(event.target.value);\\n      }} value={value} />\\n          </FieldLabel>\\n          <dl>\\n            <dt>Number value:</dt>\\n            <dd id=\\\"number-value\\\">{value}</dd>\\n          </dl>\\n        </div>;\\n}' } };\n\nexport const disabled = () => (\n          <NumberInput placeholder=\"Enter text in me!\" disabled />\n        );\ndisabled.storyName = 'disabled';\ndisabled.parameters = { storySource: { source: '<NumberInput placeholder=\\\"Enter text in me!\\\" disabled />' } };\n\nexport const invalid = () => (\n          <FieldLabel label=\"Field Label\" htmlFor=\"invalidInput\" status=\"danger\" statusText={text(\"Error Message\", \"Please enter a valid value in this field\")}>\n      <NumberInput id=\"invalidInput\" placeholder=\"Enter text in me!\" invalid />\n    </FieldLabel>\n        );\ninvalid.storyName = 'invalid';\ninvalid.parameters = { storySource: { source: '<FieldLabel label=\\\"Field Label\\\" htmlFor=\\\"invalidInput\\\" status=\\\"danger\\\" statusText={text(\\\"Error Message\\\", \\\"Please enter a valid value in this field\\\")}>\\n      <NumberInput id=\\\"invalidInput\\\" placeholder=\\\"Enter text in me!\\\" invalid />\\n    </FieldLabel>' } };\n\nconst componentMeta = { title: 'Core/Forms/NumberInput', component: NumberInput, includeStories: [\"basicUse\",\"withMinMax\",\"withStep\",\"disabled\",\"invalid\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"with min/max\":\"withMinMax\",\"with step\":\"withStep\",\"disabled\":\"disabled\",\"invalid\":\"invalid\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React, { forwardRef } from \"react\";\nimport classNames from \"classnames\";\n\nimport { Input } from \"../Input\";\n\nimport { NumberInputProps } from \"./types\";\nimport { StyledNumberInput } from \"./StyledNumberInput\";\nimport { NumberInputButton } from \"./NumberInputButton\";\n\nconst dispatchChangeEvent = (element: HTMLInputElement): void => {\n  const event = new Event(\"change\", {\n    bubbles: true,\n    cancelable: true,\n    composed: false,\n  });\n\n  element.dispatchEvent(event);\n};\n\nexport const NumberInput = forwardRef(\n  (\n    { containerClassName, disabled, ...props }: NumberInputProps,\n    ref: React.RefObject<HTMLInputElement>\n  ) => {\n    const newRef = React.useRef<HTMLInputElement>(null);\n    const activeRef = ref || newRef;\n\n    const handleIncrement = () => {\n      if (!activeRef.current) {\n        return;\n      }\n\n      // note: the DOM .stepUp() function does change the value, but it does not call onChange\n      // see https://codesandbox.io/s/funny-monad-cns9o?file=/src/index.js\n      activeRef.current.stepUp();\n\n      dispatchChangeEvent(activeRef.current);\n    };\n\n    const handleDecrement = () => {\n      if (!activeRef.current) {\n        return;\n      }\n\n      // note: the DOM .stepDown() function does change the value, but it does not call onChange\n      // see https://codesandbox.io/s/funny-monad-cns9o?file=/src/index.js\n      activeRef.current.stepDown();\n\n      dispatchChangeEvent(activeRef.current);\n    };\n\n    return (\n      <StyledNumberInput\n        className={classNames([\"bcl-number-input\", containerClassName])}\n      >\n        <Input type=\"number\" {...props} ref={activeRef} disabled={disabled} />\n        {!disabled && (\n          <NumberInputButton\n            className=\"number-input--up-button\"\n            direction=\"up\"\n            onClick={handleIncrement}\n          />\n        )}\n        {!disabled && (\n          <NumberInputButton\n            className=\"number-input--down-button\"\n            direction=\"down\"\n            onClick={handleDecrement}\n          />\n        )}\n      </StyledNumberInput>\n    );\n  }\n);\n\nNumberInput.displayName = \"NumberInput\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { NumberInputButtonProps } from \"../types\";\nimport { Icon, IconComponentName } from \"../../Icon\";\n\nimport { StyledNumberInputButton } from \"./StyledNumberInputButton\";\n\nexport const NumberInputButton = ({\n  className,\n  direction,\n  ...props\n}: NumberInputButtonProps): React.ReactElement | null => (\n  <StyledNumberInputButton\n    {...props}\n    className={classNames([\"bcl-number-input-button\", className])}\n    direction={direction}\n  >\n    {direction && (\n      <Icon size=\"1x\" name={`angle-${direction}` as IconComponentName} />\n    )}\n  </StyledNumberInputButton>\n);\n\nNumberInputButton.displayName = \"NumberInputButton\";\n","import styled, { css } from \"styled-components\";\nimport { getColor, getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledNumberInputButtonProps } from \"../types\";\n\nconst getDirectionStyles = ({ direction }: StyledNumberInputButtonProps) => {\n  switch (direction) {\n    case \"down\":\n      return css`\n        top: 50%;\n        bottom: 1px;\n        align-items: flex-start;\n      `;\n    case \"up\":\n      return css`\n        top: 1px;\n        bottom: 50%;\n        align-items: flex-end;\n      `;\n    default:\n      return null;\n  }\n};\n\nexport const StyledNumberInputButton = styled.div<StyledNumberInputButtonProps>`\n  position: absolute;\n  display: inline-flex;\n  right: 1px;\n  padding: 0 ${getSpacing(\"sm\")};\n  color: ${getColor(\"gray\", 300)};\n\n  &:hover,\n  &:active {\n    color: ${getColor(\"gray\", 900)};\n  }\n\n  &:active {\n    background-color: ${getColor(\"gray\", 100)};\n  }\n\n  ${getDirectionStyles};\n`;\n","export { NumberInputButton } from \"./NumberInputButton\";\n\nexport { StyledNumberInputButton } from \"./StyledNumberInputButton\";\n\nexport type {\n  NumberInputButtonProps,\n  StyledNumberInputButtonProps,\n} from \"../types\";\n","import styled from \"styled-components\";\n\nimport { StyledInput } from \"../Input\";\n\nimport { StyledNumberInputProps } from \"./types\";\nimport { StyledNumberInputButton } from \"./NumberInputButton\";\n\nexport const StyledNumberInput = styled.div<StyledNumberInputProps>`\n  position: relative;\n  display: inline-block;\n  user-select: none;\n  width: fit-content;\n\n  ${StyledNumberInputButton} {\n    opacity: 0;\n  }\n\n  &:hover ${StyledNumberInputButton} {\n    opacity: 1;\n  }\n\n  ${StyledInput} {\n    &[type=\"number\"] {\n      appearance: textfield;\n\n      &::-webkit-inner-spin-button,\n      &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n      }\n    }\n  }\n`;\n","export { NumberInput } from \"./NumberInput\";\n\nexport { StyledNumberInput } from \"./StyledNumberInput\";\n\nexport type { NumberInputProps, StyledNumberInputProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"panel\"\n    }}>{`Panel`}</h1>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Panel`}</inlineCode>{` organizes your content and contains page elements that\nare related to each other.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Panel`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Panels can have insets according to our sizing scale via the\n`}<inlineCode parentName=\"p\">{`PanelBody`}</inlineCode>{` component. This can be specified using the `}<inlineCode parentName=\"p\">{`inset`}</inlineCode>{`\nprop. See `}<inlineCode parentName=\"p\">{`canvas`}</inlineCode>{` tab to access the knob for the inset value.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-panel--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"no-header\"\n    }}>{`No header`}</h3>\n    <p>{`By omitting the `}<inlineCode parentName=\"p\">{`PanelHeader`}</inlineCode>{` component, you can render a `}<inlineCode parentName=\"p\">{`Panel`}</inlineCode>{`\nwithout a header.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-panel--no-header\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"stacking\"\n    }}>{`Stacking`}</h3>\n    <p>{`Adjacent panels will stack with proper spacing:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-panel--stacking\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"text-alignment\"\n    }}>{`Text alignment`}</h3>\n    <p>{`The text alignment of `}<inlineCode parentName=\"p\">{`PanelBody`}</inlineCode>{` contentcan be specified via the\n`}<inlineCode parentName=\"p\">{`textAlign`}</inlineCode>{` prop. Tab over to the `}<inlineCode parentName=\"p\">{`canvas`}</inlineCode>{` section to access the\nknob that controls `}<inlineCode parentName=\"p\">{`textAlign`}</inlineCode>{` to see it for yourself!`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-panel--text-alignment\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"light-background\"\n    }}>{`Light background`}</h3>\n    <p>{`The background of a `}<inlineCode parentName=\"p\">{`Panel`}</inlineCode>{` can be adjusted to a light color via the\n`}<inlineCode parentName=\"p\">{`background`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-panel--light-background\" mdxType=\"Story\" />\n    </Canvas>\n    <p>{`Form elements on `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` backgrounds should render their default\nbackgrounds and have visible focus styling.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-panel--light-background-with-form-elements\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Panel, PanelBody, PanelHeader } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"panel-1\"\n    }}><inlineCode parentName=\"h3\">{`Panel`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`background`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`default`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`light`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`default`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`background color for panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"panelbody\"\n    }}><inlineCode parentName=\"h3\">{`PanelBody`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`inset`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`xs`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`s`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`m`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`l`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`xl`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`xxl`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`xxxl`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xl`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`inner spacing for the panel body`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`textAlign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text alignment within the panel body`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"panelheader\"\n    }}><inlineCode parentName=\"h3\">{`PanelHeader`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { SpacingType } from \\\"@braze/beacon-theme\\\";\\n\\nimport { FieldLabel } from \\\"../FieldLabel\\\";\\nimport { Input } from \\\"../Input\\\";\\nimport { PanelBody, insetSizes } from \\\"../PanelBody\\\";\\nimport { PanelHeader } from \\\"../PanelHeader\\\";\\n\\nimport page from \\\"./Panel.docs.mdx\\\";\\n\\nimport { Panel, PanelProps } from \\\".\\\";\\n\\nconst textAlignOptions = [\\\"center\\\", \\\"left\\\", \\\"right\\\"];\\nconst textAlignMap = {\\n  center: \\\"center\\\",\\n  left: \\\"left\\\",\\n  right: \\\"right\\\",\\n};\\n\\nconst insetSizeMap = insetSizes.reduce(\\n  (\\n    all: { [size: string]: SpacingType },\\n    size\\n  ): { [size: string]: SpacingType } => {\\n    all[size] = size;\\n\\n    return all;\\n  },\\n  {}\\n);\\n\\n\\nexport default {\\n  title: \\\"Core/Content Display/Panel\\\",\\n  component: Panel,\\n  parameters: {\\n    docs: { page },\\n  },\\n  argTypes: {\\n    inset: {\\n      mapping: insetSizeMap,\\n      control: {\\n        type: \\\"select\\\",\\n        options: insetSizes,\\n        labels: insetSizeMap,\\n      },\\n    },\\n    textAlign: {\\n      mapping: textAlignMap,\\n      control: {\\n        type: \\\"select\\\",\\n        options: textAlignOptions,\\n        labels: textAlignMap,\\n      },\\n    },\\n  },\\n};\\n\\nexport const BasicUse = (args: PanelProps): React.ReactElement => {\\n  return (\\n    <Panel>\\n      <PanelHeader>This is a panel</PanelHeader>\\n      <PanelBody {...args}>Hello world!</PanelBody>\\n    </Panel>\\n  );\\n};\\n\\nBasicUse.args = {\\n  inset: \\\"xl\\\",\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const NoHeader = (): React.ReactElement => {\\n  return (\\n    <Panel>\\n      <PanelBody>Hello world!</PanelBody>\\n    </Panel>\\n  );\\n};\\n\\nNoHeader.storyName = \\\"no header\\\";\\n\\nexport const Stacking = (): React.ReactElement => {\\n  return (\\n    <React.Fragment>\\n      <Panel>\\n        <PanelHeader>This is a panel</PanelHeader>\\n        <PanelBody>Hello world!</PanelBody>\\n      </Panel>\\n      <Panel>\\n        <PanelHeader>This is another panel</PanelHeader>\\n        <PanelBody>Hello world!</PanelBody>\\n      </Panel>\\n      <Panel>\\n        <PanelHeader>Yet another panel!</PanelHeader>\\n        <PanelBody>Hello world again!</PanelBody>\\n      </Panel>\\n    </React.Fragment>\\n  );\\n};\\n\\nStacking.storyName = \\\"stacking\\\";\\n\\nexport const TextAlignment = (args: PanelProps): React.ReactElement => {\\n  return (\\n    <Panel>\\n      <PanelHeader>This is a panel</PanelHeader>\\n      <PanelBody {...args}>Hello world!</PanelBody>\\n    </Panel>\\n  );\\n};\\n\\nTextAlignment.args = {\\n  textAlign: \\\"left\\\",\\n};\\n\\nTextAlignment.storyName = \\\"text alignment\\\";\\n\\nexport const LightBackground = (): React.ReactElement => {\\n  return (\\n    <Panel background=\\\"light\\\">\\n      <PanelHeader>This is a panel</PanelHeader>\\n      <PanelBody>Hello world!</PanelBody>\\n    </Panel>\\n  );\\n};\\n\\nLightBackground.storyName = \\\"light background\\\";\\n\\nexport const LightBackgroundWithFormElements = (): React.ReactElement => {\\n  return (\\n    <Panel background=\\\"light\\\">\\n      <PanelHeader>This is a panel</PanelHeader>\\n      <PanelBody>\\n        <FieldLabel htmlFor=\\\"input-1\\\" label=\\\"Input 1\\\">\\n          <Input id=\\\"input-1\\\" />\\n        </FieldLabel>\\n        <FieldLabel htmlFor=\\\"input-2\\\" label=\\\"Input 2\\\">\\n          <Input id=\\\"input-2\\\" />\\n        </FieldLabel>\\n        <FieldLabel htmlFor=\\\"input-3\\\" label=\\\"Input 3\\\">\\n          <Input id=\\\"input-3\\\" />\\n        </FieldLabel>\\n      </PanelBody>\\n    </Panel>\\n  );\\n};\\n\\nLightBackgroundWithFormElements.storyName =\\n  \\\"light background with form elements\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":59},\"endLoc\":{\"col\":1,\"line\":66},\"startBody\":{\"col\":24,\"line\":59},\"endBody\":{\"col\":1,\"line\":66}},\"NoHeader\":{\"startLoc\":{\"col\":24,\"line\":74},\"endLoc\":{\"col\":1,\"line\":80},\"startBody\":{\"col\":24,\"line\":74},\"endBody\":{\"col\":1,\"line\":80}},\"Stacking\":{\"startLoc\":{\"col\":24,\"line\":84},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":24,\"line\":84},\"endBody\":{\"col\":1,\"line\":101}},\"TextAlignment\":{\"startLoc\":{\"col\":29,\"line\":105},\"endLoc\":{\"col\":1,\"line\":112},\"startBody\":{\"col\":29,\"line\":105},\"endBody\":{\"col\":1,\"line\":112}},\"LightBackground\":{\"startLoc\":{\"col\":31,\"line\":120},\"endLoc\":{\"col\":1,\"line\":127},\"startBody\":{\"col\":31,\"line\":120},\"endBody\":{\"col\":1,\"line\":127}},\"LightBackgroundWithFormElements\":{\"startLoc\":{\"col\":47,\"line\":131},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":47,\"line\":131},\"endBody\":{\"col\":1,\"line\":148}}};\n    \nimport React from \"react\";\nimport { SpacingType } from \"@braze/beacon-theme\";\n\nimport { FieldLabel } from \"../FieldLabel\";\nimport { Input } from \"../Input\";\nimport { PanelBody, insetSizes } from \"../PanelBody\";\nimport { PanelHeader } from \"../PanelHeader\";\n\nimport page from \"./Panel.docs.mdx\";\n\nimport { Panel, PanelProps } from \".\";\n\nconst textAlignOptions = [\"center\", \"left\", \"right\"];\nconst textAlignMap = {\n  center: \"center\",\n  left: \"left\",\n  right: \"right\",\n};\n\nconst insetSizeMap = insetSizes.reduce(\n  (\n    all: { [size: string]: SpacingType },\n    size\n  ): { [size: string]: SpacingType } => {\n    all[size] = size;\n\n    return all;\n  },\n  {}\n);\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Content Display/Panel\",\n  component: Panel,\n  parameters: {\n    docs: { page },\n  },\n  argTypes: {\n    inset: {\n      mapping: insetSizeMap,\n      control: {\n        type: \"select\",\n        options: insetSizes,\n        labels: insetSizeMap,\n      },\n    },\n    textAlign: {\n      mapping: textAlignMap,\n      control: {\n        type: \"select\",\n        options: textAlignOptions,\n        labels: textAlignMap,\n      },\n    },\n  },\n};\n\nexport const BasicUse = (args: PanelProps): React.ReactElement => {\n  return (\n    <Panel>\n      <PanelHeader>This is a panel</PanelHeader>\n      <PanelBody {...args}>Hello world!</PanelBody>\n    </Panel>\n  );\n};;\n\nBasicUse.args = {\n  inset: \"xl\",\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const NoHeader = (): React.ReactElement => {\n  return (\n    <Panel>\n      <PanelBody>Hello world!</PanelBody>\n    </Panel>\n  );\n};;\n\nNoHeader.storyName = \"no header\";\n\nexport const Stacking = (): React.ReactElement => {\n  return (\n    <React.Fragment>\n      <Panel>\n        <PanelHeader>This is a panel</PanelHeader>\n        <PanelBody>Hello world!</PanelBody>\n      </Panel>\n      <Panel>\n        <PanelHeader>This is another panel</PanelHeader>\n        <PanelBody>Hello world!</PanelBody>\n      </Panel>\n      <Panel>\n        <PanelHeader>Yet another panel!</PanelHeader>\n        <PanelBody>Hello world again!</PanelBody>\n      </Panel>\n    </React.Fragment>\n  );\n};;\n\nStacking.storyName = \"stacking\";\n\nexport const TextAlignment = (args: PanelProps): React.ReactElement => {\n  return (\n    <Panel>\n      <PanelHeader>This is a panel</PanelHeader>\n      <PanelBody {...args}>Hello world!</PanelBody>\n    </Panel>\n  );\n};;\n\nTextAlignment.args = {\n  textAlign: \"left\",\n};\n\nTextAlignment.storyName = \"text alignment\";\n\nexport const LightBackground = (): React.ReactElement => {\n  return (\n    <Panel background=\"light\">\n      <PanelHeader>This is a panel</PanelHeader>\n      <PanelBody>Hello world!</PanelBody>\n    </Panel>\n  );\n};;\n\nLightBackground.storyName = \"light background\";\n\nexport const LightBackgroundWithFormElements = (): React.ReactElement => {\n  return (\n    <Panel background=\"light\">\n      <PanelHeader>This is a panel</PanelHeader>\n      <PanelBody>\n        <FieldLabel htmlFor=\"input-1\" label=\"Input 1\">\n          <Input id=\"input-1\" />\n        </FieldLabel>\n        <FieldLabel htmlFor=\"input-2\" label=\"Input 2\">\n          <Input id=\"input-2\" />\n        </FieldLabel>\n        <FieldLabel htmlFor=\"input-3\" label=\"Input 3\">\n          <Input id=\"input-3\" />\n        </FieldLabel>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nLightBackgroundWithFormElements.storyName =\n  \"light background with form elements\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: PanelProps): React.ReactElement => {\\n  return (\\n    <Panel>\\n      <PanelHeader>This is a panel</PanelHeader>\\n      <PanelBody {...args}>Hello world!</PanelBody>\\n    </Panel>\\n  );\\n}\" }, ...BasicUse.parameters };\nNoHeader.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <Panel>\\n      <PanelBody>Hello world!</PanelBody>\\n    </Panel>\\n  );\\n}\" }, ...NoHeader.parameters };\nStacking.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <React.Fragment>\\n      <Panel>\\n        <PanelHeader>This is a panel</PanelHeader>\\n        <PanelBody>Hello world!</PanelBody>\\n      </Panel>\\n      <Panel>\\n        <PanelHeader>This is another panel</PanelHeader>\\n        <PanelBody>Hello world!</PanelBody>\\n      </Panel>\\n      <Panel>\\n        <PanelHeader>Yet another panel!</PanelHeader>\\n        <PanelBody>Hello world again!</PanelBody>\\n      </Panel>\\n    </React.Fragment>\\n  );\\n}\" }, ...Stacking.parameters };\nTextAlignment.parameters = { storySource: { source: \"(args: PanelProps): React.ReactElement => {\\n  return (\\n    <Panel>\\n      <PanelHeader>This is a panel</PanelHeader>\\n      <PanelBody {...args}>Hello world!</PanelBody>\\n    </Panel>\\n  );\\n}\" }, ...TextAlignment.parameters };\nLightBackground.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <Panel background=\\\"light\\\">\\n      <PanelHeader>This is a panel</PanelHeader>\\n      <PanelBody>Hello world!</PanelBody>\\n    </Panel>\\n  );\\n}\" }, ...LightBackground.parameters };\nLightBackgroundWithFormElements.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <Panel background=\\\"light\\\">\\n      <PanelHeader>This is a panel</PanelHeader>\\n      <PanelBody>\\n        <FieldLabel htmlFor=\\\"input-1\\\" label=\\\"Input 1\\\">\\n          <Input id=\\\"input-1\\\" />\\n        </FieldLabel>\\n        <FieldLabel htmlFor=\\\"input-2\\\" label=\\\"Input 2\\\">\\n          <Input id=\\\"input-2\\\" />\\n        </FieldLabel>\\n        <FieldLabel htmlFor=\\\"input-3\\\" label=\\\"Input 3\\\">\\n          <Input id=\\\"input-3\\\" />\\n        </FieldLabel>\\n      </PanelBody>\\n    </Panel>\\n  );\\n}\" }, ...LightBackgroundWithFormElements.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { PanelProps } from \"./types\";\nimport { StyledPanel } from \"./StyledPanel\";\n\nexport const Panel = ({\n  className,\n  background = \"default\",\n  ...props\n}: PanelProps): React.ReactElement => (\n  <StyledPanel\n    {...props}\n    className={classNames([\"bcl-Panel\", \"bcl-panel\", className])}\n    background={background}\n  />\n);\n","import styled from \"styled-components\";\nimport {\n  colorSelector,\n  getFontFamily,\n  getFontWeight,\n  getSpacing,\n} from \"@braze/beacon-styling\";\n\nimport { StyledPanelProps } from \"./types\";\n\nfunction getBackground({ background, ...props }: StyledPanelProps) {\n  switch (background) {\n    case \"light\":\n      return colorSelector(props, \"gray\", 50);\n    case \"default\":\n    default:\n      return colorSelector(props, \"gray\", 0);\n  }\n}\n\nexport const StyledPanel = styled.section<StyledPanelProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  margin-bottom: ${getSpacing(\"xxl\")};\n  background: ${getBackground};\n  box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n\n  &:last-of-type {\n    margin-bottom: ${getSpacing(\"none\")};\n  }\n`;\n","export { Panel } from \"./Panel\";\n\nexport type { PanelProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { PanelBodyProps } from \"./types\";\nimport { StyledPanelBody } from \"./StyledPanelBody\";\n\nexport const PanelBody = ({\n  className,\n  inset = \"xl\",\n  ...props\n}: PanelBodyProps): React.ReactElement => (\n  <StyledPanelBody\n    {...props}\n    className={classNames([\"bcl-panel-body\", className])}\n    inset={inset}\n  />\n);\n","import styled from \"styled-components\";\nimport {\n  getSpacing,\n  getFontSize,\n  getBorderWidth,\n  getColor,\n} from \"@braze/beacon-styling\";\n\nimport { StyledPanelBodyProps } from \"./types\";\n\nexport const insetSizes: Exclude<StyledPanelBodyProps[\"inset\"], undefined>[] = [\n  \"none\",\n  \"xs\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"xxl\",\n  \"xxxl\",\n];\n\nexport const StyledPanelBody = styled.div<StyledPanelBodyProps>`\n  font-size: ${getFontSize(\"body\", \"md\")};\n  padding: ${({ inset }) => inset && getSpacing(inset)};\n  text-align: ${({ textAlign }) => textAlign};\n  border: ${getBorderWidth(\"thin\")} solid ${getColor(\"gray\", 100)};\n  border-top: none;\n  border-radius: 0 0 3px 3px;\n`;\n","export { PanelBody } from \"./PanelBody\";\n\nexport { StyledPanelBody, insetSizes } from \"./StyledPanelBody\";\n\nexport type { PanelBodyProps } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { PanelHeaderProps } from \"./types\";\nimport { StyledPanelHeader } from \"./StyledPanelHeader\";\n\nexport const PanelHeader = ({\n  className,\n  ...props\n}: PanelHeaderProps): React.ReactElement => (\n  <StyledPanelHeader\n    {...props}\n    className={classNames([\"bcl-panel-header\", className])}\n  />\n);\n","import styled from \"styled-components\";\nimport { getColor, getSpacing, getFontSize } from \"@braze/beacon-styling\";\n\nimport { StyledPanelHeaderProps } from \"./types\";\n\nexport const StyledPanelHeader = styled.header<StyledPanelHeaderProps>`\n  background: ${getColor(\"gray\", 200)};\n  color: ${getColor(\"gray\", 900)};\n  padding: ${getSpacing(\"lg\")};\n  border-radius: 3px 3px 0 0;\n  font-size: ${getFontSize(\"heading\", 4)};\n  font-weight: bold;\n`;\n","export { PanelHeader } from \"./PanelHeader\";\n\nexport { StyledPanelHeader } from \"./StyledPanelHeader\";\n\nexport type { PanelHeaderProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"popover\"\n    }}>{`Popover`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component opens a box that overlays other content to provide\ncontextual help to a user. `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` provides the ability to display\nadditional contextual information or functionality. It can house various\nelements such as header, scrollable content, text links or buttons.\n`}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` can be dismissed via a close icon, clicking the control that\nopened it, or by clicking anywhere outside of the popover.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you need to provide simple context and/or have no need for\ninteractivity, please use the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` component instead`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: The `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component has a `}<inlineCode parentName=\"p\">{`30vh`}</inlineCode>{` max-height by default, which\nis to encourage limiting the amount of content placed in `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`s.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`WARNING: The `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component should only be used in conjunction with a `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`\nelement. Behavior with other elements is undefined and may not function correctly.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use-trigger-on-click\"\n    }}>{`Basic use: trigger on click`}</h3>\n    <p>{`By default, the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component is set to open only by clicking on\nits target element. If you wish to override this behavior, please read\non for customization options below.`}</p>\n    <p>{`To facilitate usage, we also export a `}<inlineCode parentName=\"p\">{`usePopover`}</inlineCode>{` hook that manages\nthe `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`s state for you. Simply invoke the hook, assign it to a\nvariable, and use the object spread notation in `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` to use it,\nas shown below!`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--small-target\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"trigger-on-focus\"\n    }}>{`Trigger on focus`}</h3>\n    <p>{`By setting the `}<inlineCode parentName=\"p\">{`triggers`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`['focus']`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`untriggers`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`['blur']`}</inlineCode>{`,\nyou can make the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` open when the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` is focused and close\nwhen it is blurred. To test this functionality, we recommend tabbing into\nthe box rather than clicking on the button to clearly see the behavior on\n`}<inlineCode parentName=\"p\">{`focus`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`blur`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--trigger-on-focus\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"trigger-on-hover\"\n    }}>{`Trigger on hover`}</h3>\n    <p>{`By setting the `}<inlineCode parentName=\"p\">{`triggers`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`['mouseenter', 'mouseleave']`}</inlineCode>{`, you\ncan make the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` open when the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` is hovered and close when\nit is no longer hovered.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--trigger-on-hover\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"use-with-target-dom-id\"\n    }}>{`Use with target DOM id`}</h3>\n    <p>{`Depending on your target component, it may not always be possible to use refs\nto get access to the DOM node. In such cases, the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` prop is provided as\nan escape hatch. The `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` prop must correspond to the DOM id of the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{`\nelement. Note that this requires that no two DOM ids are the same.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--use-with-dom-id\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"interactive-prevent-close-when-hovering-over-or-clicking-into-popover\"\n    }}>{`Interactive: prevent close when hovering over or clicking into popover`}</h3>\n    <p>{`Especially within `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`s, it is often useful to allow your user to mouse\nover the contents of the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` and interact with them. To enable this\nfunctionality, set the `}<inlineCode parentName=\"p\">{`interactive`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--interactive\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-close-button\"\n    }}>{`With close button`}</h3>\n    <p>{`By setting `}<inlineCode parentName=\"p\">{`isCloseEnabled`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, you can ensure that an `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{`\nbutton appears, which closes the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` upon clicking.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--with-close-button\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"automatic-placement-dynamic-positioning-of-popover\"\n    }}>{`Automatic placement: dynamic positioning of popover`}</h3>\n    <p>{`In some cases, it is not known in advance where a popover's target element will be located in the viewport.\nLeave placement undefined to trigger auto-positioning.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: When `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` is placed inside a container with overflow, it is recommended that you define an inner\ncontainer with `}<inlineCode parentName=\"p\">{`position: relative;`}</inlineCode>{` and pass a ref into it as well as into the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`portalRef`}</inlineCode>{`. this\nwill ensure that the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` is portalled into the container with relative positioning, allowing the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`\nto use the coordinates of its target relative to the `}<inlineCode parentName=\"p\">{`portalRef`}</inlineCode>{` parent. See below for example.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--auto-placement\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"modal-use\"\n    }}>{`Modal Use`}</h3>\n    <p><inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` will automatically calculate the z-index needed to display over a\n`}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` it is inside of. Note that the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` z-index is well above the\n`}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`'s base z-index, but the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` still renders above it.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--modal-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"prevent-close-on-outside-click-for-specified-elements-with-class\"\n    }}>{`Prevent close on outside click for specified elements with class`}</h3>\n    <p>{`Sometimes, you may want your `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` to `}<em parentName=\"p\">{`not`}</em>{` close when a user clicks on\nspecific elements. To denote elements that should not cause your `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`\nto close, either give them the a `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`bcl-popper-ignore-click`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--prevent-close-on-outside-click-for-element-with-class\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"prevent-close-on-outside-click-for-specified-elements-with-custom-class\"\n    }}>{`Prevent close on outside click for specified elements with custom class`}</h3>\n    <p>{`You can also pick your own className by passing a value to the\n`}<inlineCode parentName=\"p\">{`ignoreCloseOnClickOutsideClassName`}</inlineCode>{` prop for your `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component; this\nsame className should then be given to your ignored elements as desired.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--prevent-close-on-outside-click-for-element-with-custom-class\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"keyboard-interactivity-and-accessibility-inside-the-popover\"\n    }}>{`Keyboard interactivity and accessibility inside the Popover`}</h2>\n    <p>{`When a Popover has interactive content, making it keyboard accessible is very important. Popover will\nremain open, detecting when an internal interactive element has focus, and then trigger the close\naction when focus tabs out of the popper.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popover--keyboard-accessibility\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  Popover,\n  PopoverBody,\n  PopoverHeading,\n  usePopover,\n} from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"popover-1\"\n    }}><inlineCode parentName=\"h3\">{`Popover`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickOutside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the popper should be closed when a user clicks outside the target or the popper (if interactive)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`defaultPlacement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bottom`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`if automatically placing the popover, the placement to use when the popover is in the middle of the viewport`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`delay`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( `}<inlineCode parentName=\"td\">{`[number OR null, number OR null]`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the amount of time, if any, to delay opening and/or closing the popper by`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ignoreCloseOnClickOutsideClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bcl-popper-ignore-click`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the className that should cause an element containing it to be ignored when determining whether to close popper`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`interactive`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the popper can be hovered/clicked/focused/etc. into`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isIgnoreCloseOnClickOutsideEnabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the ignore close on outside click behavior using specific classNames is enabled`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isCloseEnabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates whether close button should be displayed`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`determines if the component should be rendered`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`distance`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`8`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from bottom of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`skidding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from left of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be opened`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClose`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be closed`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`placement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`auto`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`auto`}</inlineCode>{` (automatic)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Popover relative to target`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`portalRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref of Portal inside which Popover will be rendered`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed to the parent popper element`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM id to be passed to the parent popper element`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperStyle`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object override to be passed to the parent popper component`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperStyledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop passed to popper to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`target`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired target component's ID`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`targetRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to pass down to the target object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`triggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseenter`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`focus`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for popper on behavior`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`untriggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseleave`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`blur`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for popper off behavior`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`1031`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index for the component and its sub-components`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"popoverbody\"\n    }}><inlineCode parentName=\"h3\">{`PopoverBody`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"popoverheading\"\n    }}><inlineCode parentName=\"h3\">{`PopoverHeading`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"usepopover\"\n    }}><inlineCode parentName=\"h3\">{`usePopover`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`usePopover`}</inlineCode>{` is a utility hook that aims to simplify your life when using\na `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` in your project. The function conveniently manages the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`\nstate and the necessary refs for you, making getting started with a `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`\na breeze.`}</p>\n    <p>{`The following are arguments accepted by `}<inlineCode parentName=\"p\">{`usePopover`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`targetRef`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`React.RefObject`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`optional`}</li>\n          <li parentName=\"ul\">{`ref object to be passed to both the target component via its `}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{` and the `}<inlineCode parentName=\"li\">{`Popover`}</inlineCode>{` via its `}<inlineCode parentName=\"li\">{`targetRef`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`boolean`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`optional; `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` by default`}</li>\n          <li parentName=\"ul\">{`sets the initial state of the `}<inlineCode parentName=\"li\">{`Popover`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`usePopover`}</inlineCode>{` returns the an array that can be destructured to reveal the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`state`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`object`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`exposes the state of the `}<inlineCode parentName=\"li\">{`Popover`}</inlineCode>{` and handlers`}</li>\n          <li parentName=\"ul\">{`can be passed into the `}<inlineCode parentName=\"li\">{`Popover`}</inlineCode>{` via object destructuring (e.g. `}<inlineCode parentName=\"li\">{`{...state}`}</inlineCode>{`)`}</li>\n          <li parentName=\"ul\">{`contains the following:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isOpen`}</inlineCode>{`: boolean; indicates current state of the `}<inlineCode parentName=\"li\">{`Popover`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onOpen`}</inlineCode>{`: func; changes `}<inlineCode parentName=\"li\">{`isOpen`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` when called`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onClose`}</inlineCode>{`: func; changes `}<inlineCode parentName=\"li\">{`isOpen`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` when called`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ref`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`React.RefObject`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`if an argument was passed to `}<inlineCode parentName=\"li\">{`targetRef`}</inlineCode>{`, then this is identical to that argument`}</li>\n          <li parentName=\"ul\">{`if an argument was NOT passed to `}<inlineCode parentName=\"li\">{`targetRef`}</inlineCode>{`, this will be a newly instantiated ref object to be passed to both the target component via its `}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{` and the `}<inlineCode parentName=\"li\">{`Popover`}</inlineCode>{` via its `}<inlineCode parentName=\"li\">{`targetRef`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState, useRef, useMemo, ReactElement } from \\\"react\\\";\\nimport { boolean, number, text, select } from \\\"@storybook/addon-knobs\\\";\\n\\nimport { Input } from \\\"../Input\\\";\\nimport { Button } from \\\"../Button\\\";\\nimport { IconButton } from \\\"../IconButton\\\";\\nimport { Modal } from \\\"../Modal\\\";\\nimport { ModalHeading } from \\\"../ModalHeading\\\";\\nimport { ModalBody } from \\\"../ModalBody\\\";\\nimport { AllowedTriggers, AllowedUnTriggers, placementTypes } from \\\"../Popper\\\";\\nimport { PopoverBody } from \\\"../PopoverBody\\\";\\nimport { PopoverHeading } from \\\"../PopoverHeading\\\";\\nimport { BannerAlert } from \\\"../BannerAlert\\\";\\nimport { BannerAlertBody } from \\\"../BannerAlertBody\\\";\\nimport { BannerAlertDescription } from \\\"../BannerAlertDescription\\\";\\nimport { BannerAlertDescriptionText } from \\\"../BannerAlertDescriptionText\\\";\\n\\nimport { Popover, usePopover } from \\\"./Popover\\\";\\nimport page from \\\"./Popover.docs.mdx\\\";\\n\\n// this is used to allow cypress tests to focus away from the popper without using realPress(\\\"Tab\\\")\\n// it's invisible because it doesn't affect the story at all from an enduser perspective\\nconst InvisibleButton = () => {\\n  return <button style={{ color: \\\"transparent\\\" }}>invisible button</button>;\\n};\\n\\n\\nexport default {\\n  title: \\\"Core/Overlay/Popover\\\",\\n  component: Popover,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nconst MustBeCanvasMode = () => (\\n  <div style={{ width: 500 }}>\\n    <BannerAlert intent=\\\"warning\\\" isOpen>\\n      <BannerAlertBody>\\n        <BannerAlertDescription>\\n          <BannerAlertDescriptionText>\\n            Warning: This story only works in Canvas mode, click on the\\n            &quot;Canvas&quot; tab to view it.\\n          </BannerAlertDescriptionText>\\n        </BannerAlertDescription>\\n      </BannerAlertBody>\\n    </BannerAlert>\\n  </div>\\n);\\n\\nexport const BasicUse = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Click to open/close</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        defaultPlacement={select(\\\"Default Placement\\\", placementTypes, \\\"bottom\\\")}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"auto\\\")}\\n        isCloseEnabled={boolean(\\\"Enable close button\\\", false)}\\n        distance={number(\\\"Distance\\\", 10)}\\n        skidding={number(\\\"Skidding\\\", 0)}\\n        interactive={boolean(\\\"Interactive\\\", false)}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const SmallTarget = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div style={{ padding: 40 }}>\\n      <IconButton\\n        ref={targetRef}\\n        name=\\\"plus-circle\\\"\\n        aria-label=\\\"select to open\\\"\\n      />\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        defaultPlacement={select(\\\"Default Placement\\\", placementTypes, \\\"bottom\\\")}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"auto\\\")}\\n        isCloseEnabled={boolean(\\\"Enable close button\\\", false)}\\n        distance={number(\\\"Distance\\\", 10)}\\n        skidding={number(\\\"Skidding\\\", 0)}\\n        interactive={boolean(\\\"Interactive\\\", false)}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns. This will result in many important changes and things to consider, such as how to make this a really, really, really long sentence in order to ensure that the popover tip is pointing at the target button when it would be below if a static % was used to lay out the popover.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nSmallTarget.storyName = \\\"small target\\\";\\n\\nexport const TriggerOnFocus = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Focus to open</Button>\\n      <Popover\\n        targetRef={targetRef}\\n        triggers={[\\\"focus\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"right\\\")}\\n        {...popoverState}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n      <InvisibleButton />\\n    </div>\\n  );\\n};\\n\\nTriggerOnFocus.storyName = \\\"trigger on focus\\\";\\n\\nexport const TriggerOnHover = (): ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>\\n        <span>Hover to open</span>\\n      </Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        triggers={[\\\"mouseenter\\\"]}\\n        untriggers={[\\\"mouseleave\\\"]}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"bottom-start\\\")}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nTriggerOnHover.storyName = \\\"trigger on hover\\\";\\n\\nexport const UseWithDomId = (): React.ReactElement => {\\n  const [popoverState] = usePopover();\\n\\n  return (\\n    <div>\\n      <Button id=\\\"default-button\\\">Click to open/close</Button>\\n      <Popover\\n        {...popoverState}\\n        target=\\\"default-button\\\"\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"bottom\\\")}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nUseWithDomId.storyName = \\\"use with DOM id\\\";\\n\\nexport const Interactive = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Click to open/close</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"bottom\\\")}\\n        isCloseEnabled={boolean(\\\"Enable close button\\\", false)}\\n        interactive\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nInteractive.storyName = \\\"interactive\\\";\\n\\nexport const WithCloseButton = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Click to open/close</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"bottom\\\")}\\n        isCloseEnabled\\n        interactive\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nWithCloseButton.storyName = \\\"with close button\\\";\\n\\nexport const AutoPlacement = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n  const portalRef = useRef<HTMLDivElement>(null);\\n\\n  return (\\n    <div\\n      style={{ width: \\\"100%\\\", height: \\\"100vh\\\", overflow: \\\"scroll\\\" }}\\n      id=\\\"scroll\\\"\\n    >\\n      <MustBeCanvasMode />\\n      (scroll down and right inside the red box and click the button to see\\n      popover placement change)\\n      <div\\n        style={{\\n          border: \\\"1px solid red\\\",\\n          width: \\\"200%\\\",\\n          height: \\\"200%\\\",\\n          display: \\\"flex\\\",\\n          justifyContent: \\\"center\\\",\\n          alignItems: \\\"center\\\",\\n          position: \\\"relative\\\",\\n        }}\\n        ref={portalRef}\\n      >\\n        <Button ref={targetRef}>Click to open/close</Button>\\n        <Popover\\n          {...popoverState}\\n          targetRef={targetRef}\\n          isCloseEnabled={boolean(\\\"Enable close button\\\", false)}\\n          defaultPlacement={select(\\n            \\\"Default placement\\\",\\n            placementTypes,\\n            undefined\\n          )}\\n          interactive\\n          portalRef={portalRef}\\n        >\\n          <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n          <PopoverBody>\\n            {text(\\n              \\\"Body text\\\",\\n              \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n            )}\\n          </PopoverBody>\\n        </Popover>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nAutoPlacement.storyName = \\\"auto-placement\\\";\\n\\nexport const ModalUse = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  return (\\n    <div>\\n      <Button onClick={() => setIsOpen(true)}>Click to open/close</Button>\\n      <Modal isOpen={isOpen} zIndex={2400} toggle={() => setIsOpen(!isOpen)}>\\n        <ModalHeading>Popover Inside!</ModalHeading>\\n        <ModalBody>\\n          <Button ref={targetRef}>Click to open/close</Button>\\n          <Popover {...popoverState} targetRef={targetRef} placement=\\\"right\\\">\\n            <PopoverHeading>Heading</PopoverHeading>\\n            <PopoverBody>\\n              Set the priority of this Canvas relative to other individual\\n              in-app message Campaigns.\\n            </PopoverBody>\\n          </Popover>\\n        </ModalBody>\\n      </Modal>\\n    </div>\\n  );\\n};\\n\\nModalUse.storyName = \\\"modal use\\\";\\n\\nexport const PreventCloseOnOutsideClickForElementWithClass =\\n  (): React.ReactElement => {\\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n    return (\\n      <div>\\n        <Button ref={targetRef}>This button opens the popover</Button>\\n        <Button\\n          className=\\\"bcl-popper-ignore-click\\\"\\n          style={{ marginLeft: \\\"1rem\\\" }}\\n        >\\n          This button does NOT close the popover\\n        </Button>\\n        <Popover\\n          {...popoverState}\\n          targetRef={targetRef}\\n          placement=\\\"bottom\\\"\\n          interactive\\n        >\\n          <PopoverBody>\\n            This is a bunch of content inside the popover\\n          </PopoverBody>\\n        </Popover>\\n      </div>\\n    );\\n  };\\n\\nPreventCloseOnOutsideClickForElementWithClass.storyName =\\n  \\\"prevent close on outside click for element with class\\\";\\n\\nexport const PreventCloseOnOutsideClickForElementWithCustomClass =\\n  (): React.ReactElement => {\\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n    return (\\n      <div>\\n        <Button ref={targetRef}>This button opens the popover</Button>\\n        <Button\\n          className=\\\"custom-popper-ignore-click\\\"\\n          style={{ marginLeft: \\\"1rem\\\" }}\\n        >\\n          This button does NOT close the popover\\n        </Button>\\n        <Popover\\n          {...popoverState}\\n          targetRef={targetRef}\\n          placement=\\\"bottom\\\"\\n          ignoreCloseOnClickOutsideClassName=\\\"custom-popper-ignore-click\\\"\\n          interactive\\n        >\\n          This is a bunch of content inside the popover\\n        </Popover>\\n      </div>\\n    );\\n  };\\n\\nPreventCloseOnOutsideClickForElementWithCustomClass.storyName =\\n  \\\"prevent close on outside click for element with custom class\\\";\\n\\nexport const KeyboardAccessibility = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLInputElement>();\\n  const triggers = useMemo<AllowedTriggers[]>(() => [\\\"focus\\\", \\\"click\\\"], []);\\n  const untriggers = useMemo<AllowedUnTriggers[]>(() => [\\\"blur\\\", \\\"click\\\"], []);\\n  const [saved, setSaved] = useState(false);\\n\\n  return (\\n    <div>\\n      <Button type=\\\"button\\\">\\n        Does nothing, here for testing purposes only\\n      </Button>\\n      <Input ref={targetRef} placeholder=\\\"focus to show popover\\\" />\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        triggers={triggers}\\n        untriggers={untriggers}\\n        interactive\\n        popperStyle={{ maxWidth: \\\"none\\\", maxHeight: \\\"none\\\" }}\\n      >\\n        <div id=\\\"boring\\\">\\n          Here is a div that is not interactive that is nested in the popover\\n        </div>\\n        Here is a form you can tab into\\n        <Input placeholder=\\\"internal form\\\" />\\n        <Button variant=\\\"primary\\\" type=\\\"button\\\" onClick={() => setSaved(true)}>\\n          Save\\n        </Button>\\n        {saved && \\\"content saved\\\"}\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nKeyboardAccessibility.storyName = \\\"keyboard accessibility\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":51},\"endLoc\":{\"col\":1,\"line\":77},\"startBody\":{\"col\":24,\"line\":51},\"endBody\":{\"col\":1,\"line\":77}},\"SmallTarget\":{\"startLoc\":{\"col\":27,\"line\":81},\"endLoc\":{\"col\":1,\"line\":111},\"startBody\":{\"col\":27,\"line\":81},\"endBody\":{\"col\":1,\"line\":111}},\"TriggerOnFocus\":{\"startLoc\":{\"col\":30,\"line\":115},\"endLoc\":{\"col\":1,\"line\":139},\"startBody\":{\"col\":30,\"line\":115},\"endBody\":{\"col\":1,\"line\":139}},\"TriggerOnHover\":{\"startLoc\":{\"col\":30,\"line\":143},\"endLoc\":{\"col\":1,\"line\":168},\"startBody\":{\"col\":30,\"line\":143},\"endBody\":{\"col\":1,\"line\":168}},\"UseWithDomId\":{\"startLoc\":{\"col\":28,\"line\":172},\"endLoc\":{\"col\":1,\"line\":193},\"startBody\":{\"col\":28,\"line\":172},\"endBody\":{\"col\":1,\"line\":193}},\"Interactive\":{\"startLoc\":{\"col\":27,\"line\":197},\"endLoc\":{\"col\":1,\"line\":220},\"startBody\":{\"col\":27,\"line\":197},\"endBody\":{\"col\":1,\"line\":220}},\"WithCloseButton\":{\"startLoc\":{\"col\":31,\"line\":224},\"endLoc\":{\"col\":1,\"line\":247},\"startBody\":{\"col\":31,\"line\":224},\"endBody\":{\"col\":1,\"line\":247}},\"AutoPlacement\":{\"startLoc\":{\"col\":29,\"line\":251},\"endLoc\":{\"col\":1,\"line\":299},\"startBody\":{\"col\":29,\"line\":251},\"endBody\":{\"col\":1,\"line\":299}},\"ModalUse\":{\"startLoc\":{\"col\":24,\"line\":303},\"endLoc\":{\"col\":1,\"line\":325},\"startBody\":{\"col\":24,\"line\":303},\"endBody\":{\"col\":1,\"line\":325}},\"PreventCloseOnOutsideClickForElementWithClass\":{\"startLoc\":{\"col\":2,\"line\":330},\"endLoc\":{\"col\":3,\"line\":354},\"startBody\":{\"col\":2,\"line\":330},\"endBody\":{\"col\":3,\"line\":354}},\"PreventCloseOnOutsideClickForElementWithCustomClass\":{\"startLoc\":{\"col\":2,\"line\":360},\"endLoc\":{\"col\":3,\"line\":383},\"startBody\":{\"col\":2,\"line\":360},\"endBody\":{\"col\":3,\"line\":383}},\"KeyboardAccessibility\":{\"startLoc\":{\"col\":37,\"line\":388},\"endLoc\":{\"col\":1,\"line\":420},\"startBody\":{\"col\":37,\"line\":388},\"endBody\":{\"col\":1,\"line\":420}}};\n    \nimport React, { useState, useRef, useMemo, ReactElement } from \"react\";\nimport { boolean, number, text, select } from \"@storybook/addon-knobs\";\n\nimport { Input } from \"../Input\";\nimport { Button } from \"../Button\";\nimport { IconButton } from \"../IconButton\";\nimport { Modal } from \"../Modal\";\nimport { ModalHeading } from \"../ModalHeading\";\nimport { ModalBody } from \"../ModalBody\";\nimport { AllowedTriggers, AllowedUnTriggers, placementTypes } from \"../Popper\";\nimport { PopoverBody } from \"../PopoverBody\";\nimport { PopoverHeading } from \"../PopoverHeading\";\nimport { BannerAlert } from \"../BannerAlert\";\nimport { BannerAlertBody } from \"../BannerAlertBody\";\nimport { BannerAlertDescription } from \"../BannerAlertDescription\";\nimport { BannerAlertDescriptionText } from \"../BannerAlertDescriptionText\";\n\nimport { Popover, usePopover } from \"./Popover\";\nimport page from \"./Popover.docs.mdx\";\n\n// this is used to allow cypress tests to focus away from the popper without using realPress(\"Tab\")\n// it's invisible because it doesn't affect the story at all from an enduser perspective\nconst InvisibleButton = () => {\n  return <button style={{ color: \"transparent\" }}>invisible button</button>;\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Overlay/Popover\",\n  component: Popover,\n  parameters: {\n    docs: { page },\n  },\n};\n\nconst MustBeCanvasMode = () => (\n  <div style={{ width: 500 }}>\n    <BannerAlert intent=\"warning\" isOpen>\n      <BannerAlertBody>\n        <BannerAlertDescription>\n          <BannerAlertDescriptionText>\n            Warning: This story only works in Canvas mode, click on the\n            &quot;Canvas&quot; tab to view it.\n          </BannerAlertDescriptionText>\n        </BannerAlertDescription>\n      </BannerAlertBody>\n    </BannerAlert>\n  </div>\n);\n\nexport const BasicUse = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>Click to open/close</Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        defaultPlacement={select(\"Default Placement\", placementTypes, \"bottom\")}\n        placement={select(\"Placement\", placementTypes, \"auto\")}\n        isCloseEnabled={boolean(\"Enable close button\", false)}\n        distance={number(\"Distance\", 10)}\n        skidding={number(\"Skidding\", 0)}\n        interactive={boolean(\"Interactive\", false)}\n      >\n        <PopoverHeading>{text(\"Heading text\", \"Heading\")}</PopoverHeading>\n        <PopoverBody>\n          {text(\n            \"Body text\",\n            \"Set the priority of this Canvas relative to other individual in-app message Campaigns.\"\n          )}\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nexport const SmallTarget = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div style={{ padding: 40 }}>\n      <IconButton\n        ref={targetRef}\n        name=\"plus-circle\"\n        aria-label=\"select to open\"\n      />\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        defaultPlacement={select(\"Default Placement\", placementTypes, \"bottom\")}\n        placement={select(\"Placement\", placementTypes, \"auto\")}\n        isCloseEnabled={boolean(\"Enable close button\", false)}\n        distance={number(\"Distance\", 10)}\n        skidding={number(\"Skidding\", 0)}\n        interactive={boolean(\"Interactive\", false)}\n      >\n        <PopoverHeading>{text(\"Heading text\", \"Heading\")}</PopoverHeading>\n        <PopoverBody>\n          {text(\n            \"Body text\",\n            \"Set the priority of this Canvas relative to other individual in-app message Campaigns. This will result in many important changes and things to consider, such as how to make this a really, really, really long sentence in order to ensure that the popover tip is pointing at the target button when it would be below if a static % was used to lay out the popover.\"\n          )}\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n};;\n\nSmallTarget.storyName = \"small target\";\n\nexport const TriggerOnFocus = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>Focus to open</Button>\n      <Popover\n        targetRef={targetRef}\n        triggers={[\"focus\"]}\n        untriggers={[\"blur\"]}\n        placement={select(\"Placement\", placementTypes, \"right\")}\n        {...popoverState}\n      >\n        <PopoverHeading>{text(\"Heading text\", \"Heading\")}</PopoverHeading>\n        <PopoverBody>\n          {text(\n            \"Body text\",\n            \"Set the priority of this Canvas relative to other individual in-app message Campaigns.\"\n          )}\n        </PopoverBody>\n      </Popover>\n      <InvisibleButton />\n    </div>\n  );\n};;\n\nTriggerOnFocus.storyName = \"trigger on focus\";\n\nexport const TriggerOnHover = (): ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>\n        <span>Hover to open</span>\n      </Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        triggers={[\"mouseenter\"]}\n        untriggers={[\"mouseleave\"]}\n        placement={select(\"Placement\", placementTypes, \"bottom-start\")}\n      >\n        <PopoverHeading>{text(\"Heading text\", \"Heading\")}</PopoverHeading>\n        <PopoverBody>\n          {text(\n            \"Body text\",\n            \"Set the priority of this Canvas relative to other individual in-app message Campaigns.\"\n          )}\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n};;\n\nTriggerOnHover.storyName = \"trigger on hover\";\n\nexport const UseWithDomId = (): React.ReactElement => {\n  const [popoverState] = usePopover();\n\n  return (\n    <div>\n      <Button id=\"default-button\">Click to open/close</Button>\n      <Popover\n        {...popoverState}\n        target=\"default-button\"\n        placement={select(\"Placement\", placementTypes, \"bottom\")}\n      >\n        <PopoverHeading>{text(\"Heading text\", \"Heading\")}</PopoverHeading>\n        <PopoverBody>\n          {text(\n            \"Body text\",\n            \"Set the priority of this Canvas relative to other individual in-app message Campaigns.\"\n          )}\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n};;\n\nUseWithDomId.storyName = \"use with DOM id\";\n\nexport const Interactive = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>Click to open/close</Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        placement={select(\"Placement\", placementTypes, \"bottom\")}\n        isCloseEnabled={boolean(\"Enable close button\", false)}\n        interactive\n      >\n        <PopoverHeading>{text(\"Heading text\", \"Heading\")}</PopoverHeading>\n        <PopoverBody>\n          {text(\n            \"Body text\",\n            \"Set the priority of this Canvas relative to other individual in-app message Campaigns.\"\n          )}\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n};;\n\nInteractive.storyName = \"interactive\";\n\nexport const WithCloseButton = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>Click to open/close</Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        placement={select(\"Placement\", placementTypes, \"bottom\")}\n        isCloseEnabled\n        interactive\n      >\n        <PopoverHeading>{text(\"Heading text\", \"Heading\")}</PopoverHeading>\n        <PopoverBody>\n          {text(\n            \"Body text\",\n            \"Set the priority of this Canvas relative to other individual in-app message Campaigns.\"\n          )}\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n};;\n\nWithCloseButton.storyName = \"with close button\";\n\nexport const AutoPlacement = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n  const portalRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      style={{ width: \"100%\", height: \"100vh\", overflow: \"scroll\" }}\n      id=\"scroll\"\n    >\n      <MustBeCanvasMode />\n      (scroll down and right inside the red box and click the button to see\n      popover placement change)\n      <div\n        style={{\n          border: \"1px solid red\",\n          width: \"200%\",\n          height: \"200%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          position: \"relative\",\n        }}\n        ref={portalRef}\n      >\n        <Button ref={targetRef}>Click to open/close</Button>\n        <Popover\n          {...popoverState}\n          targetRef={targetRef}\n          isCloseEnabled={boolean(\"Enable close button\", false)}\n          defaultPlacement={select(\n            \"Default placement\",\n            placementTypes,\n            undefined\n          )}\n          interactive\n          portalRef={portalRef}\n        >\n          <PopoverHeading>{text(\"Heading text\", \"Heading\")}</PopoverHeading>\n          <PopoverBody>\n            {text(\n              \"Body text\",\n              \"Set the priority of this Canvas relative to other individual in-app message Campaigns.\"\n            )}\n          </PopoverBody>\n        </Popover>\n      </div>\n    </div>\n  );\n};;\n\nAutoPlacement.storyName = \"auto-placement\";\n\nexport const ModalUse = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>Click to open/close</Button>\n      <Modal isOpen={isOpen} zIndex={2400} toggle={() => setIsOpen(!isOpen)}>\n        <ModalHeading>Popover Inside!</ModalHeading>\n        <ModalBody>\n          <Button ref={targetRef}>Click to open/close</Button>\n          <Popover {...popoverState} targetRef={targetRef} placement=\"right\">\n            <PopoverHeading>Heading</PopoverHeading>\n            <PopoverBody>\n              Set the priority of this Canvas relative to other individual\n              in-app message Campaigns.\n            </PopoverBody>\n          </Popover>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};;\n\nModalUse.storyName = \"modal use\";\n\nexport const PreventCloseOnOutsideClickForElementWithClass =\n  (): React.ReactElement => {\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n    return (\n      <div>\n        <Button ref={targetRef}>This button opens the popover</Button>\n        <Button\n          className=\"bcl-popper-ignore-click\"\n          style={{ marginLeft: \"1rem\" }}\n        >\n          This button does NOT close the popover\n        </Button>\n        <Popover\n          {...popoverState}\n          targetRef={targetRef}\n          placement=\"bottom\"\n          interactive\n        >\n          <PopoverBody>\n            This is a bunch of content inside the popover\n          </PopoverBody>\n        </Popover>\n      </div>\n    );\n  };;\n\nPreventCloseOnOutsideClickForElementWithClass.storyName =\n  \"prevent close on outside click for element with class\";\n\nexport const PreventCloseOnOutsideClickForElementWithCustomClass =\n  (): React.ReactElement => {\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n    return (\n      <div>\n        <Button ref={targetRef}>This button opens the popover</Button>\n        <Button\n          className=\"custom-popper-ignore-click\"\n          style={{ marginLeft: \"1rem\" }}\n        >\n          This button does NOT close the popover\n        </Button>\n        <Popover\n          {...popoverState}\n          targetRef={targetRef}\n          placement=\"bottom\"\n          ignoreCloseOnClickOutsideClassName=\"custom-popper-ignore-click\"\n          interactive\n        >\n          This is a bunch of content inside the popover\n        </Popover>\n      </div>\n    );\n  };;\n\nPreventCloseOnOutsideClickForElementWithCustomClass.storyName =\n  \"prevent close on outside click for element with custom class\";\n\nexport const KeyboardAccessibility = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLInputElement>();\n  const triggers = useMemo<AllowedTriggers[]>(() => [\"focus\", \"click\"], []);\n  const untriggers = useMemo<AllowedUnTriggers[]>(() => [\"blur\", \"click\"], []);\n  const [saved, setSaved] = useState(false);\n\n  return (\n    <div>\n      <Button type=\"button\">\n        Does nothing, here for testing purposes only\n      </Button>\n      <Input ref={targetRef} placeholder=\"focus to show popover\" />\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        triggers={triggers}\n        untriggers={untriggers}\n        interactive\n        popperStyle={{ maxWidth: \"none\", maxHeight: \"none\" }}\n      >\n        <div id=\"boring\">\n          Here is a div that is not interactive that is nested in the popover\n        </div>\n        Here is a form you can tab into\n        <Input placeholder=\"internal form\" />\n        <Button variant=\"primary\" type=\"button\" onClick={() => setSaved(true)}>\n          Save\n        </Button>\n        {saved && \"content saved\"}\n      </Popover>\n    </div>\n  );\n};\n\nKeyboardAccessibility.storyName = \"keyboard accessibility\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Click to open/close</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        defaultPlacement={select(\\\"Default Placement\\\", placementTypes, \\\"bottom\\\")}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"auto\\\")}\\n        isCloseEnabled={boolean(\\\"Enable close button\\\", false)}\\n        distance={number(\\\"Distance\\\", 10)}\\n        skidding={number(\\\"Skidding\\\", 0)}\\n        interactive={boolean(\\\"Interactive\\\", false)}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nSmallTarget.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div style={{ padding: 40 }}>\\n      <IconButton\\n        ref={targetRef}\\n        name=\\\"plus-circle\\\"\\n        aria-label=\\\"select to open\\\"\\n      />\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        defaultPlacement={select(\\\"Default Placement\\\", placementTypes, \\\"bottom\\\")}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"auto\\\")}\\n        isCloseEnabled={boolean(\\\"Enable close button\\\", false)}\\n        distance={number(\\\"Distance\\\", 10)}\\n        skidding={number(\\\"Skidding\\\", 0)}\\n        interactive={boolean(\\\"Interactive\\\", false)}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns. This will result in many important changes and things to consider, such as how to make this a really, really, really long sentence in order to ensure that the popover tip is pointing at the target button when it would be below if a static % was used to lay out the popover.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...SmallTarget.parameters };\nTriggerOnFocus.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Focus to open</Button>\\n      <Popover\\n        targetRef={targetRef}\\n        triggers={[\\\"focus\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"right\\\")}\\n        {...popoverState}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n      <InvisibleButton />\\n    </div>\\n  );\\n}\" }, ...TriggerOnFocus.parameters };\nTriggerOnHover.parameters = { storySource: { source: \"(): ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>\\n        <span>Hover to open</span>\\n      </Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        triggers={[\\\"mouseenter\\\"]}\\n        untriggers={[\\\"mouseleave\\\"]}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"bottom-start\\\")}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...TriggerOnHover.parameters };\nUseWithDomId.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState] = usePopover();\\n\\n  return (\\n    <div>\\n      <Button id=\\\"default-button\\\">Click to open/close</Button>\\n      <Popover\\n        {...popoverState}\\n        target=\\\"default-button\\\"\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"bottom\\\")}\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...UseWithDomId.parameters };\nInteractive.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Click to open/close</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"bottom\\\")}\\n        isCloseEnabled={boolean(\\\"Enable close button\\\", false)}\\n        interactive\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...Interactive.parameters };\nWithCloseButton.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Click to open/close</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        placement={select(\\\"Placement\\\", placementTypes, \\\"bottom\\\")}\\n        isCloseEnabled\\n        interactive\\n      >\\n        <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n        <PopoverBody>\\n          {text(\\n            \\\"Body text\\\",\\n            \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n          )}\\n        </PopoverBody>\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...WithCloseButton.parameters };\nAutoPlacement.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n  const portalRef = useRef<HTMLDivElement>(null);\\n\\n  return (\\n    <div\\n      style={{ width: \\\"100%\\\", height: \\\"100vh\\\", overflow: \\\"scroll\\\" }}\\n      id=\\\"scroll\\\"\\n    >\\n      <MustBeCanvasMode />\\n      (scroll down and right inside the red box and click the button to see\\n      popover placement change)\\n      <div\\n        style={{\\n          border: \\\"1px solid red\\\",\\n          width: \\\"200%\\\",\\n          height: \\\"200%\\\",\\n          display: \\\"flex\\\",\\n          justifyContent: \\\"center\\\",\\n          alignItems: \\\"center\\\",\\n          position: \\\"relative\\\",\\n        }}\\n        ref={portalRef}\\n      >\\n        <Button ref={targetRef}>Click to open/close</Button>\\n        <Popover\\n          {...popoverState}\\n          targetRef={targetRef}\\n          isCloseEnabled={boolean(\\\"Enable close button\\\", false)}\\n          defaultPlacement={select(\\n            \\\"Default placement\\\",\\n            placementTypes,\\n            undefined\\n          )}\\n          interactive\\n          portalRef={portalRef}\\n        >\\n          <PopoverHeading>{text(\\\"Heading text\\\", \\\"Heading\\\")}</PopoverHeading>\\n          <PopoverBody>\\n            {text(\\n              \\\"Body text\\\",\\n              \\\"Set the priority of this Canvas relative to other individual in-app message Campaigns.\\\"\\n            )}\\n          </PopoverBody>\\n        </Popover>\\n      </div>\\n    </div>\\n  );\\n}\" }, ...AutoPlacement.parameters };\nModalUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  return (\\n    <div>\\n      <Button onClick={() => setIsOpen(true)}>Click to open/close</Button>\\n      <Modal isOpen={isOpen} zIndex={2400} toggle={() => setIsOpen(!isOpen)}>\\n        <ModalHeading>Popover Inside!</ModalHeading>\\n        <ModalBody>\\n          <Button ref={targetRef}>Click to open/close</Button>\\n          <Popover {...popoverState} targetRef={targetRef} placement=\\\"right\\\">\\n            <PopoverHeading>Heading</PopoverHeading>\\n            <PopoverBody>\\n              Set the priority of this Canvas relative to other individual\\n              in-app message Campaigns.\\n            </PopoverBody>\\n          </Popover>\\n        </ModalBody>\\n      </Modal>\\n    </div>\\n  );\\n}\" }, ...ModalUse.parameters };\nPreventCloseOnOutsideClickForElementWithClass.parameters = { storySource: { source: \"(): React.ReactElement => {\\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n    return (\\n      <div>\\n        <Button ref={targetRef}>This button opens the popover</Button>\\n        <Button\\n          className=\\\"bcl-popper-ignore-click\\\"\\n          style={{ marginLeft: \\\"1rem\\\" }}\\n        >\\n          This button does NOT close the popover\\n        </Button>\\n        <Popover\\n          {...popoverState}\\n          targetRef={targetRef}\\n          placement=\\\"bottom\\\"\\n          interactive\\n        >\\n          <PopoverBody>\\n            This is a bunch of content inside the popover\\n          </PopoverBody>\\n        </Popover>\\n      </div>\\n    );\\n  }\" }, ...PreventCloseOnOutsideClickForElementWithClass.parameters };\nPreventCloseOnOutsideClickForElementWithCustomClass.parameters = { storySource: { source: \"(): React.ReactElement => {\\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n    return (\\n      <div>\\n        <Button ref={targetRef}>This button opens the popover</Button>\\n        <Button\\n          className=\\\"custom-popper-ignore-click\\\"\\n          style={{ marginLeft: \\\"1rem\\\" }}\\n        >\\n          This button does NOT close the popover\\n        </Button>\\n        <Popover\\n          {...popoverState}\\n          targetRef={targetRef}\\n          placement=\\\"bottom\\\"\\n          ignoreCloseOnClickOutsideClassName=\\\"custom-popper-ignore-click\\\"\\n          interactive\\n        >\\n          This is a bunch of content inside the popover\\n        </Popover>\\n      </div>\\n    );\\n  }\" }, ...PreventCloseOnOutsideClickForElementWithCustomClass.parameters };\nKeyboardAccessibility.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLInputElement>();\\n  const triggers = useMemo<AllowedTriggers[]>(() => [\\\"focus\\\", \\\"click\\\"], []);\\n  const untriggers = useMemo<AllowedUnTriggers[]>(() => [\\\"blur\\\", \\\"click\\\"], []);\\n  const [saved, setSaved] = useState(false);\\n\\n  return (\\n    <div>\\n      <Button type=\\\"button\\\">\\n        Does nothing, here for testing purposes only\\n      </Button>\\n      <Input ref={targetRef} placeholder=\\\"focus to show popover\\\" />\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        triggers={triggers}\\n        untriggers={untriggers}\\n        interactive\\n        popperStyle={{ maxWidth: \\\"none\\\", maxHeight: \\\"none\\\" }}\\n      >\\n        <div id=\\\"boring\\\">\\n          Here is a div that is not interactive that is nested in the popover\\n        </div>\\n        Here is a form you can tab into\\n        <Input placeholder=\\\"internal form\\\" />\\n        <Button variant=\\\"primary\\\" type=\\\"button\\\" onClick={() => setSaved(true)}>\\n          Save\\n        </Button>\\n        {saved && \\\"content saved\\\"}\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...KeyboardAccessibility.parameters };","import React, { useRef } from \"react\";\n\nimport { CloseButton } from \"../CloseButton\";\nimport { Popper, usePopper } from \"../Popper\";\n\nimport { PopoverProps } from \"./types\";\nimport { StyledPopover } from \"./StyledPopover\";\n\n/**\n * A function that abstracts the open/close logic of a popover component\n * @param targetRef an optional ref object that should be used instead of initializing a new one\n * @param initialState an optional initial state for the handler\n * @returns an array containing state management props for the popover as its first element and the ref object to be passed to both the target and the popover\n * @note this function renames usePopper to provide a consistent point of entry and simplify the cognitive overhead for the developer\n */\nexport const usePopover = usePopper;\n\nexport const Popover = React.forwardRef(\n  (\n    {\n      className,\n      children,\n      id,\n      isCloseEnabled,\n      onClose,\n      triggers = [\"click\"],\n      untriggers = [\"click\"],\n      placement,\n      noArrow,\n      popperClassName,\n      popperId,\n      style,\n      styledCss,\n      targetRef,\n      ...props\n    }: PopoverProps,\n    ref: React.RefObject<HTMLDivElement>\n  ) => {\n    const refIfNoRefPassed = useRef<HTMLDivElement>(null);\n    const refToUse = ref || refIfNoRefPassed;\n\n    return (\n      <Popper\n        {...props}\n        className={popperClassName}\n        id={popperId}\n        placement={placement}\n        onClose={onClose}\n        tipVariant=\"light\"\n        triggers={triggers}\n        untriggers={untriggers}\n        noArrow={noArrow}\n        ref={refToUse}\n        targetRef={targetRef}\n      >\n        {({ activePlacement, targetDimensions, popperDimensions }) => {\n          return (\n            <>\n              <StyledPopover\n                className={className}\n                id={id}\n                noArrow={noArrow}\n                placement={activePlacement}\n                style={style}\n                styledCss={styledCss}\n                targetDimensions={targetDimensions}\n                popperDimensions={popperDimensions}\n              >\n                {children}\n              </StyledPopover>\n              {isCloseEnabled && <CloseButton onClick={onClose} />}\n            </>\n          );\n        }}\n      </Popper>\n    );\n  }\n);\n\nPopover.displayName = \"Popover\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getFontSize,\n  getColor,\n  getBorderRadius,\n  colorSelector,\n} from \"@braze/beacon-styling\";\n\nimport { StyledCloseButton } from \"../CloseButton\";\nimport {\n  verticalPlacementSelector,\n  horizontalPlacementSelector,\n} from \"../Popper\";\n\nimport { StyledPopoverProps } from \"./types\";\n\nexport const StyledPopover = styled.div<Partial<StyledPopoverProps>>`\n  padding: 0.75rem;\n  min-width: 200px;\n  max-width: 300px;\n  font-size: ${getFontSize(\"body\", \"xs\")};\n  border: 1px solid ${getColor(\"gray\", 100)};\n  border-radius: ${getBorderRadius(\"sm\")};\n  box-shadow: 0px 5px 21px rgba(195, 195, 195, 0.5);\n\n  ::after {\n    content: \"\";\n    display: ${(props) => (props.noArrow ? \"none\" : \"block\")};\n    position: absolute;\n    width: 0;\n    height: 0;\n    border: 5px solid transparent;\n\n    ${({ placement, targetDimensions, popperDimensions, ...props }) =>\n      placement &&\n      placement.includes(\"top\") &&\n      css`\n        top: calc(100% - 1px);\n        border-top-color: ${colorSelector(props, \"gray\", 0)};\n        left: calc(\n          ${verticalPlacementSelector(\n              placement,\n              targetDimensions,\n              popperDimensions\n            )} - 5px\n        );\n      `};\n\n    ${({ placement, targetDimensions, popperDimensions, ...props }) =>\n      placement &&\n      placement.includes(\"right\") &&\n      css`\n        right: calc(100% - 1px);\n        border-right-color: ${colorSelector(props, \"gray\", 0)};\n        top: calc(\n          ${horizontalPlacementSelector(\n              placement,\n              targetDimensions,\n              popperDimensions\n            )} - 5px\n        );\n      `};\n\n    ${({ placement, targetDimensions, popperDimensions, ...props }) =>\n      placement &&\n      placement.includes(\"bottom\") &&\n      css`\n        bottom: calc(100% - 1px);\n        border-bottom-color: ${colorSelector(props, \"gray\", 0)};\n        left: calc(\n          ${verticalPlacementSelector(\n              placement,\n              targetDimensions,\n              popperDimensions\n            )} - 5px\n        );\n      `};\n\n    ${({ placement, targetDimensions, popperDimensions, ...props }) =>\n      placement &&\n      placement.includes(\"left\") &&\n      css`\n        left: calc(100% - 1px);\n        border-left-color: ${colorSelector(props, \"gray\", 0)};\n        top: calc(\n          ${horizontalPlacementSelector(\n              placement,\n              targetDimensions,\n              popperDimensions\n            )} - 5px\n        );\n      `};\n  }\n\n  & + ${StyledCloseButton} {\n    position: absolute;\n  }\n\n  ${(props) => props.styledCss};\n`;\n","export { Popover } from \"./Popover\";\n\nexport { usePopover } from \"./Popover\";\n\nexport { StyledPopover } from \"./StyledPopover\";\n\nexport type { PopoverProps, StyledPopoverProps } from \"./types\";\n","import styled from \"styled-components\";\nimport classNames from \"classnames\";\nimport { getFontFamily, getFontWeight } from \"@braze/beacon-styling\";\n\nimport { PopoverBodyProps } from \"./types\";\n\nconst getAttrs = ({\n  className,\n}: PopoverBodyProps): React.HTMLAttributes<HTMLDivElement> => ({\n  className: classNames(\"bcl-popover-body\", className),\n});\n\nexport const PopoverBody = styled.div.attrs(getAttrs)<PopoverBodyProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n`;\n","export { PopoverBody } from \"./PopoverBody\";\n\nexport type { PopoverBodyProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\nimport { getColor } from \"@braze/beacon-styling\";\n\nimport { Heading, HeadingProps } from \"../Heading\";\n\nimport { PopoverHeadingProps } from \"./types\";\n\nconst getAttrs = ({ className }: PopoverHeadingProps): HeadingProps => ({\n  className: classNames(\"bcl-popover-heading\", className),\n  level: 6,\n});\n\nexport const PopoverHeading = styled(Heading).attrs(\n  getAttrs\n)<PopoverHeadingProps>`\n  color: ${getColor(\"gray\", 800)};\n`;\n","export { PopoverHeading } from \"./PopoverHeading\";\n\nexport type { PopoverHeadingProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"popper\"\n    }}>{`Popper`}</h1>\n    <p>{`This story exists to document advanced behavior. In most cases, as a developer, you want to look at `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{`.\nProceed if you are writing a new component that uses `}<inlineCode parentName=\"p\">{`Popper`}</inlineCode>{` directly.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: The `}<inlineCode parentName=\"p\">{`Popper`}</inlineCode>{` component has a `}<inlineCode parentName=\"p\">{`30vh`}</inlineCode>{` max-height by default, which\nis to encourage limiting the amount of content placed in `}<inlineCode parentName=\"p\">{`Popper`}</inlineCode>{`s.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"advanced-examples\"\n    }}>{`Advanced Examples`}</h2>\n    <p>{`These examples should be ignored for end user developers, unless implementing a new component that needs to\ninteract with the underlying Popper in more unusual ways.`}</p>\n    <h3 {...{\n      \"id\": \"rendering-later-using-context-to-set-the-data-used-to-render-elements\"\n    }}>{`Rendering later, using Context to set the data used to render elements`}</h3>\n    <p>{`In some cases, it is not known at initial render time what elements will be present that need tooltips.\nThe underlying Popper element that forms the internal implementation of ToolTip supports this use case.`}</p>\n    <p>{`Here is an example source code that demonstrates using React Context and a callback to construct the child\nelements to support a more intuitive developer interface:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const SampleContext = createContext({ addButton: () => {} });\n\nexport const RenderTooltipButton = ({ children }) => {\n  const { addButton } = useContext(SampleContext);\n  useLayoutEffect(() => {\n    // add a parent button with custom tooltip\n    addButton(children);\n  }, [addButton, children]);\n  return null;\n};\n\nexport const DelayedRenderOfChildrenwithTooltips = ({ children }) => {\n  const [buttons, setButtons] = useState(new Set());\n  // useCallback to prevent infinite re-render\n  const addButton = useCallback((buttonText) => {\n    setButtons((oldState) => new Set([...oldState, buttonText])), [setButtons];\n  });\n  return (\n    <SampleContext.Provider value={{ addButton }}>\n      <div>\n        {[...buttons].map((toolTip) => (\n          <span key={toolTip}>\n            <UncontrolledTooltip label={toolTip}>\n              <Button>Hover over me</Button>\n            </UncontrolledTooltip>\n            &nbsp;\n          </span>\n        ))}\n      </div>\n      {children}\n    </SampleContext.Provider>\n  );\n};\n`}</code></pre>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--advanced-example\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"no-crashing-if-the-target-element-doesnt-exist\"\n    }}>{`No crashing if the target element doesn't exist`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--element-not-found\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"overriding-the-default-height\"\n    }}>{`Overriding the default height`}</h3>\n    <p>{`For some use cases, such as the Popper used inside Beacon's `}<inlineCode parentName=\"p\">{`DatePicker`}</inlineCode>{`,\nit is necessary to override the max height and max width.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--large-popper-content\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"prevent-close-on-outside-click-for-specified-elements-with-class\"\n    }}>{`Prevent close on outside click for specified elements with class`}</h3>\n    <p>{`Sometimes, you may want your `}<inlineCode parentName=\"p\">{`Popper`}</inlineCode>{` to `}<em parentName=\"p\">{`not`}</em>{` close when a user clicks on\nspecific elements. To denote elements that should not cause your `}<inlineCode parentName=\"p\">{`Popper`}</inlineCode>{`\nto close, either give them the a `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`bcl-popper-ignore-click`}</inlineCode>{`\nor whatever className corresponds to the `}<inlineCode parentName=\"p\">{`ignoreCloseOnClickOutsideClassName`}</inlineCode>{`\nprop you provide your `}<inlineCode parentName=\"p\">{`Popper`}</inlineCode>{` component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--prevent-close-on-outside-click-for-element-with-class\" mdxType=\"Story\" />\n    </Canvas>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--prevent-close-on-outside-click-for-element-with-custom-class\" mdxType=\"Story\" />\n    </Canvas>\n    <p>{`To completely disable closing the popper except by clicking on the target, pass `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`\nto the `}<inlineCode parentName=\"p\">{`closeOnClickOutside`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--prevent-close-on-any-outside-interaction\" mdxType=\"Story\" />\n    </Canvas>\n    <p>{`While this should rarely be needed, if you want to completely disable the\noutside click behavior for performance reasons or to prevent unintentional\nbehavior, you can set `}<inlineCode parentName=\"p\">{`isIgnoreCloseOnClickOutsideEnabled`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--no-crash-on-outside-click-for-element-with-empty-ignore-class\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"rendering-a-popper-with-internal-interactive-elements\"\n    }}>{`Rendering a popper with internal interactive elements`}</h3>\n    <p>{`When the popper contains elements that users can interact with, such as a form or a link to open external documentation, the\n`}<inlineCode parentName=\"p\">{`interactive`}</inlineCode>{` prop should be true to prevent the popper closing on interacting with its internal elements`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--interactive\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"delaying-opening-the-popper\"\n    }}>{`Delaying opening the popper`}</h3>\n    <p>{`In some cases (such as for tooltips), it may be desirable to delay opening the popper by a set amount.\nNote that if `}<inlineCode parentName=\"p\">{`delay`}</inlineCode>{` is specified, `}<inlineCode parentName=\"p\">{`untriggers`}</inlineCode>{` is a required property to get the desired behavior.\nOtherwise, the popup will disappear immediately.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--delay-open-and-close\" mdxType=\"Story\" />\n    </Canvas>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--delay-only-close\" mdxType=\"Story\" />\n    </Canvas>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-popper--delay-only-open\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Popper } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"popper-1\"\n    }}><inlineCode parentName=\"h3\">{`Popper`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( ReactNode, ({ activePlacement, targetDimensions, popperDimensions }) => ReactNode )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component, or a render prop that accepts the auto-calculated placement plus the dimensions of the target and the popper (or undefined if not available)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickOutside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the popper should be closed when a user clicks outside the target or the popper (if interactive)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`delay`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( `}<inlineCode parentName=\"td\">{`[number OR null, number OR null]`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the amount of time, if any, to delay opening and/or closing the popper by`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`interactive`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the popper can be hovered/clicked/focused/etc. into`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ignoreCloseOnClickOutsideClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bcl-popper-ignore-click`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the className that should cause an element containing it to be ignored when determining whether to close popper`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isIgnoreCloseOnClickOutsideEnabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the ignore close on outside click behavior using specific classNames is enabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`determines if the component should be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`distance`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`8`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from bottom of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`skidding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from left of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be opened`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClose`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be closed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`placement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`auto`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`auto`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Popper relative to target`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperStyle`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object override to be passed to the parent popper component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperStyledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`portalRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref of Portal inside which Popper will be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`target`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired target component's ID`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`targetRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to pass down to the target object`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`triggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseenter`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`focus`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for popper on behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`untriggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseleave`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`blur`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`scroll`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for popper off behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`1031`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index for the component and its sub-components`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {\\n  useState,\\n  useLayoutEffect,\\n  useContext,\\n  createContext,\\n  useCallback,\\n} from \\\"react\\\";\\n\\nimport { Button } from \\\"../Button\\\";\\nimport { UncontrolledTooltip } from \\\"../UncontrolledTooltip\\\";\\nimport { Tooltip, useTooltip } from \\\"../Tooltip\\\";\\nimport { Popover, usePopover } from \\\"../Popover\\\";\\nimport { LoremIpsum } from \\\"../LoremIpsum\\\";\\n\\nimport page from \\\"./Popper.docs.mdx\\\";\\nimport { PlacementType } from \\\"./types\\\";\\n\\nimport { AllowedUnTriggers, Popper, PopperProps } from \\\".\\\";\\n\\n// this is used to allow cypress tests to focus away from the popper without using realPress(\\\"Tab\\\")\\n// it's invisible because it doesn't affect the story at all from an enduser perspective\\nconst InvisibleButton = () => {\\n  return <button style={{ color: \\\"transparent\\\" }}>invisible button</button>;\\n};\\n\\nconst SampleContext = createContext({\\n  \\n  addButton: (_children?: React.ReactNode) => {},\\n});\\n\\nconst RenderTooltipButton = ({ children }: { children: React.ReactNode }) => {\\n  const { addButton } = useContext(SampleContext);\\n\\n  useLayoutEffect(() => {\\n    addButton(children);\\n  }, [addButton, children]);\\n\\n  return null;\\n};\\n\\ninterface DelayedRenderOfChildrenwithTooltipsProps {\\n  mouseLeaveUntrigger: boolean;\\n  placement: PlacementType;\\n  children: React.ReactNode;\\n}\\n\\nconst DelayedRenderOfChildrenwithTooltips = ({\\n  mouseLeaveUntrigger = false,\\n  placement = \\\"auto\\\",\\n  children,\\n}: DelayedRenderOfChildrenwithTooltipsProps) => {\\n  const [buttons, setButtons] = useState(new Set<string>());\\n  const addButton = useCallback(\\n    (buttonText) =>\\n      setButtons((oldState) => new Set<string>([...oldState, buttonText])),\\n    [setButtons]\\n  );\\n\\n  return (\\n    <SampleContext.Provider value={{ addButton }}>\\n      <div>\\n        {[...buttons].map((toolTip) => (\\n          <span key={toolTip}>\\n            <UncontrolledTooltip\\n              label={toolTip}\\n              placement={placement}\\n              triggers={[\\\"click\\\"]}\\n              untriggers={\\n                [\\\"click\\\"].concat(\\n                  mouseLeaveUntrigger ? [\\\"mouseleave\\\"] : []\\n                ) as AllowedUnTriggers[]\\n              }\\n            >\\n              <Button>Hover over me</Button>\\n            </UncontrolledTooltip>\\n            &nbsp;\\n          </span>\\n        ))}\\n      </div>\\n      {children}\\n    </SampleContext.Provider>\\n  );\\n};\\n\\n\\nexport default {\\n  title: \\\"Core/Overlay/Popper\\\",\\n  component: Popper,\\n  parameters: {\\n    docs: { page },\\n  },\\n  argTypes: {\\n    placement: {\\n      label: \\\"Placement\\\",\\n      control: {\\n        type: \\\"select\\\",\\n        options: [\\n          \\\"auto\\\",\\n          \\\"top-start\\\",\\n          \\\"top\\\",\\n          \\\"top-end\\\",\\n          \\\"right-start\\\",\\n          \\\"right\\\",\\n          \\\"right-end\\\",\\n          \\\"bottom-end\\\",\\n          \\\"bottom\\\",\\n          \\\"bottom-start\\\",\\n          \\\"left-end\\\",\\n          \\\"left\\\",\\n          \\\"left-start\\\",\\n        ],\\n      },\\n    },\\n  },\\n};\\n\\nexport const AdvancedExample = (\\n  props: DelayedRenderOfChildrenwithTooltipsProps\\n): React.ReactElement => {\\n  return (\\n    <DelayedRenderOfChildrenwithTooltips {...props}>\\n      <RenderTooltipButton>Hi!</RenderTooltipButton>\\n      <RenderTooltipButton>There!</RenderTooltipButton>\\n    </DelayedRenderOfChildrenwithTooltips>\\n  );\\n};\\n\\nAdvancedExample.argTypes = {\\n  mouseLeaveUntrigger: {\\n    name: \\\"mouse leave untrigger\\\",\\n    type: \\\"boolean\\\",\\n  },\\n};\\n\\nAdvancedExample.args = {\\n  mouseLeaveUntrigger: false,\\n  placement: \\\"auto\\\",\\n};\\n\\nAdvancedExample.storyName = \\\"advanced example\\\";\\n\\nexport const ElementNotFound = (): React.ReactElement => {\\n  const [tooltipState] = useTooltip();\\n\\n  return (\\n    <div>\\n      <Button id=\\\"right\\\">This button has the wrong ID</Button>\\n      <Tooltip {...tooltipState} target=\\\"wrong\\\">\\n        This won&apos;t show\\n      </Tooltip>\\n    </div>\\n  );\\n};\\n\\nElementNotFound.storyName = \\\"element not found\\\";\\n\\nexport const LargePopperContent = (props: PopperProps): React.ReactElement => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const portalRef = React.useRef<HTMLDivElement>(null);\\n\\n  return (\\n    <div\\n      style={{ width: \\\"100%\\\", height: \\\"100vh\\\", overflow: \\\"scroll\\\" }}\\n      id=\\\"scroll\\\"\\n    >\\n      (scroll down and right inside the red box and click the button to see\\n      popover placement change)\\n      <div\\n        style={{\\n          border: \\\"1px solid red\\\",\\n          width: \\\"200%\\\",\\n          height: \\\"200%\\\",\\n          display: \\\"flex\\\",\\n          justifyContent: \\\"center\\\",\\n          alignItems: \\\"center\\\",\\n          position: \\\"relative\\\",\\n        }}\\n        ref={portalRef}\\n      >\\n        <Button id=\\\"right\\\" onClick={() => setIsOpen((open) => !open)}>\\n          Click to open/close\\n        </Button>\\n        <Popper\\n          isOpen={isOpen}\\n          target=\\\"right\\\"\\n          noArrow\\n          popperStyle={{ maxWidth: \\\"none\\\", maxHeight: \\\"none\\\" }}\\n          portalRef={portalRef}\\n          {...props}\\n          onOpen={() => {}}\\n          onClose={() => {}}\\n        >\\n          <div\\n            style={{\\n              width: 600,\\n              height: 400,\\n              display: \\\"flex\\\",\\n              alignItems: \\\"center\\\",\\n              justifyContent: \\\"center\\\",\\n              background: \\\"pink\\\",\\n            }}\\n          >\\n            <div>Large Popper</div>\\n          </div>\\n        </Popper>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nLargePopperContent.args = {\\n  placement: \\\"auto\\\",\\n};\\n\\nLargePopperContent.storyName = \\\"large popper content\\\";\\n\\nexport const PreventCloseOnOutsideClickForElementWithClass = (\\n  props: PopperProps\\n): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button className=\\\"popper-open-btn\\\" ref={targetRef}>\\n        This button opens the popover\\n      </Button>\\n      <Button\\n        className=\\\"bcl-popper-ignore-click\\\"\\n        style={{ marginLeft: \\\"1rem\\\" }}\\n      >\\n        This button does NOT close the popover\\n      </Button>\\n      <Popover {...popoverState} targetRef={targetRef} {...props}>\\n        This is a bunch of content inside the popover\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nPreventCloseOnOutsideClickForElementWithClass.args = {\\n  placement: \\\"bottom\\\",\\n};\\n\\nPreventCloseOnOutsideClickForElementWithClass.storyName =\\n  \\\"prevent close on outside click for element with class\\\";\\n\\nexport const PreventCloseOnOutsideClickForElementWithCustomClass = (\\n  props: PopperProps\\n): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button className=\\\"popper-open-btn\\\" ref={targetRef}>\\n        This button opens the popover\\n      </Button>\\n      <Button\\n        className=\\\"custom-popper-ignore-click\\\"\\n        style={{ marginLeft: \\\"1rem\\\" }}\\n      >\\n        This button does NOT close the popover\\n      </Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        ignoreCloseOnClickOutsideClassName=\\\"custom-popper-ignore-click\\\"\\n        {...props}\\n      >\\n        This is a bunch of content inside the popover\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nPreventCloseOnOutsideClickForElementWithCustomClass.args = {\\n  placement: \\\"bottom\\\",\\n};\\n\\nPreventCloseOnOutsideClickForElementWithCustomClass.storyName =\\n  \\\"prevent close on outside click for element with custom class\\\";\\n\\nexport const PreventCloseOnAnyOutsideInteraction = (): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button toggles the popover</Button>\\n      <Button type=\\\"button\\\" style={{ marginLeft: \\\"1rem\\\" }}>\\n        Click this to not close the popover\\n      </Button>\\n      <div>\\n        Nothing except a click on the button will open/close the popover\\n      </div>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        placement=\\\"bottom\\\"\\n        closeOnClickOutside={false}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"click\\\"]}\\n      >\\n        This is a bunch of content inside the popper\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nPreventCloseOnAnyOutsideInteraction.storyName =\\n  \\\"prevent close on any outside interaction\\\";\\n\\nexport const NoCrashOnOutsideClickForElementWithEmptyIgnoreClass =\\n  (): React.ReactElement => {\\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n    return (\\n      <div>\\n        <Button className=\\\"popper-open-btn\\\" ref={targetRef}>\\n          This button opens the popover\\n        </Button>\\n        <Button\\n          className=\\\"bcl-popper-ignore-click\\\"\\n          style={{ marginLeft: \\\"1rem\\\" }}\\n        >\\n          This button does NOT close the popover\\n        </Button>\\n        <Popover\\n          {...popoverState}\\n          targetRef={targetRef}\\n          placement=\\\"bottom\\\"\\n          isIgnoreCloseOnClickOutsideEnabled={false}\\n        >\\n          This is a bunch of content inside the popover\\n        </Popover>\\n      </div>\\n    );\\n  };\\n\\nNoCrashOnOutsideClickForElementWithEmptyIgnoreClass.storyName =\\n  \\\"no crash on outside click for element with empty ignore class\\\";\\n\\nexport const Interactive = (props: PopperProps): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n  const [clicked, setClicked] = useState(false);\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button toggles the popover</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"click\\\"]}\\n        {...props}\\n      >\\n        This is a bunch of content inside the popper with a{\\\" \\\"}\\n        <Button onClick={() => setClicked(true)}>button</Button>.\\n        <span id=\\\"button-clicked\\\">\\n          {clicked ? \\\"Button clicked.\\\" : \\\"Button not clicked.\\\"}\\n        </span>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\\nInteractive.args = {\\n  placement: \\\"auto\\\",\\n  interactive: true,\\n};\\n\\nInteractive.storyName = \\\"interactive\\\";\\n\\nexport const DelayOpenAndClose = ({\\n  delay,\\n}: {\\n  delay: number;\\n}): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        delay={delay}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n      >\\n        This is a bunch of content inside the popover\\n      </Popover>\\n      <InvisibleButton />\\n    </div>\\n  );\\n};\\n\\nDelayOpenAndClose.argTypes = {\\n  delay: {\\n    type: \\\"number\\\",\\n    label: \\\"Delay\\\",\\n  },\\n};\\n\\nDelayOpenAndClose.args = {\\n  delay: 2000,\\n};\\n\\nDelayOpenAndClose.storyName = \\\"delay open and close\\\";\\n\\nexport const DelayOnlyClose = ({\\n  delay,\\n}: {\\n  delay: number;\\n}): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        delay={[null, delay]}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n      >\\n        This is a bunch of content inside the popover\\n      </Popover>\\n      <InvisibleButton />\\n    </div>\\n  );\\n};\\n\\nDelayOnlyClose.argTypes = {\\n  delay: {\\n    type: \\\"number\\\",\\n    label: \\\"Delay\\\",\\n  },\\n};\\n\\nDelayOnlyClose.args = {\\n  delay: 2000,\\n};\\n\\nDelayOnlyClose.storyName = \\\"delay only close\\\";\\n\\nexport const DelayOnlyOpen = ({\\n  delay,\\n}: {\\n  delay: number;\\n}): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        delay={[delay, null]}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n      >\\n        This is a bunch of content inside the popover\\n      </Popover>\\n      <InvisibleButton />\\n    </div>\\n  );\\n};\\n\\nDelayOnlyOpen.argTypes = {\\n  delay: {\\n    type: \\\"number\\\",\\n    label: \\\"Delay\\\",\\n  },\\n};\\n\\nDelayOnlyOpen.args = {\\n  delay: 2000,\\n};\\n\\nDelayOnlyOpen.storyName = \\\"delay only open\\\";\\n\\nexport const ClosingOnScroll = () => {\\n  const [tooltipState1, targetRef1] = usePopover<HTMLButtonElement>();\\n  const [tooltipState2, targetRef2] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <div>\\n        <LoremIpsum paragraphs={5} />\\n      </div>\\n      <Button ref={targetRef1}>Hover to open</Button>\\n      <Popover\\n        targetRef={targetRef1}\\n        triggers={[\\\"mouseenter\\\", \\\"click\\\"]}\\n        untriggers={[\\\"mouseleave\\\", \\\"scroll\\\"]}\\n        {...tooltipState1}\\n      >\\n        Popover 1\\n      </Popover>\\n      <div\\n        style={{\\n          height: 300,\\n          width: \\\"100vw\\\",\\n          margin: 50,\\n          overflow: \\\"auto\\\",\\n        }}\\n        id=\\\"internal-scroll\\\"\\n      >\\n        <div\\n          style={{\\n            height: 500,\\n            width: \\\"100vw\\\",\\n          }}\\n        >\\n          <Button ref={targetRef2}>Hover to open 2</Button>\\n          <Popover\\n            targetRef={targetRef2}\\n            triggers={[\\\"mouseenter\\\", \\\"click\\\"]}\\n            untriggers={[\\\"mouseleave\\\", \\\"scroll\\\"]}\\n            {...tooltipState2}\\n          >\\n            Popover 2\\n          </Popover>\\n        </div>\\n      </div>\\n      <div>\\n        <LoremIpsum paragraphs={5} />\\n      </div>\\n    </div>\\n  );\\n};\\n\\nClosingOnScroll.storyName = \\\"closing on scroll\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"AdvancedExample\":{\"startLoc\":{\"col\":31,\"line\":117},\"endLoc\":{\"col\":1,\"line\":126},\"startBody\":{\"col\":31,\"line\":117},\"endBody\":{\"col\":1,\"line\":126}},\"ElementNotFound\":{\"startLoc\":{\"col\":31,\"line\":142},\"endLoc\":{\"col\":1,\"line\":153},\"startBody\":{\"col\":31,\"line\":142},\"endBody\":{\"col\":1,\"line\":153}},\"LargePopperContent\":{\"startLoc\":{\"col\":34,\"line\":157},\"endLoc\":{\"col\":1,\"line\":209},\"startBody\":{\"col\":34,\"line\":157},\"endBody\":{\"col\":1,\"line\":209}},\"PreventCloseOnOutsideClickForElementWithClass\":{\"startLoc\":{\"col\":61,\"line\":217},\"endLoc\":{\"col\":1,\"line\":238},\"startBody\":{\"col\":61,\"line\":217},\"endBody\":{\"col\":1,\"line\":238}},\"PreventCloseOnOutsideClickForElementWithCustomClass\":{\"startLoc\":{\"col\":67,\"line\":247},\"endLoc\":{\"col\":1,\"line\":273},\"startBody\":{\"col\":67,\"line\":247},\"endBody\":{\"col\":1,\"line\":273}},\"PreventCloseOnAnyOutsideInteraction\":{\"startLoc\":{\"col\":51,\"line\":282},\"endLoc\":{\"col\":1,\"line\":306},\"startBody\":{\"col\":51,\"line\":282},\"endBody\":{\"col\":1,\"line\":306}},\"NoCrashOnOutsideClickForElementWithEmptyIgnoreClass\":{\"startLoc\":{\"col\":2,\"line\":312},\"endLoc\":{\"col\":3,\"line\":336},\"startBody\":{\"col\":2,\"line\":312},\"endBody\":{\"col\":3,\"line\":336}},\"Interactive\":{\"startLoc\":{\"col\":27,\"line\":341},\"endLoc\":{\"col\":1,\"line\":363},\"startBody\":{\"col\":27,\"line\":341},\"endBody\":{\"col\":1,\"line\":363}},\"DelayOpenAndClose\":{\"startLoc\":{\"col\":33,\"line\":372},\"endLoc\":{\"col\":1,\"line\":394},\"startBody\":{\"col\":33,\"line\":372},\"endBody\":{\"col\":1,\"line\":394}},\"DelayOnlyClose\":{\"startLoc\":{\"col\":30,\"line\":409},\"endLoc\":{\"col\":1,\"line\":431},\"startBody\":{\"col\":30,\"line\":409},\"endBody\":{\"col\":1,\"line\":431}},\"DelayOnlyOpen\":{\"startLoc\":{\"col\":29,\"line\":446},\"endLoc\":{\"col\":1,\"line\":468},\"startBody\":{\"col\":29,\"line\":446},\"endBody\":{\"col\":1,\"line\":468}},\"ClosingOnScroll\":{\"startLoc\":{\"col\":31,\"line\":483},\"endLoc\":{\"col\":1,\"line\":532},\"startBody\":{\"col\":31,\"line\":483},\"endBody\":{\"col\":1,\"line\":532}}};\n    \nimport React, {\n  useState,\n  useLayoutEffect,\n  useContext,\n  createContext,\n  useCallback,\n} from \"react\";\n\nimport { Button } from \"../Button\";\nimport { UncontrolledTooltip } from \"../UncontrolledTooltip\";\nimport { Tooltip, useTooltip } from \"../Tooltip\";\nimport { Popover, usePopover } from \"../Popover\";\nimport { LoremIpsum } from \"../LoremIpsum\";\n\nimport page from \"./Popper.docs.mdx\";\nimport { PlacementType } from \"./types\";\n\nimport { AllowedUnTriggers, Popper, PopperProps } from \".\";\n\n// this is used to allow cypress tests to focus away from the popper without using realPress(\"Tab\")\n// it's invisible because it doesn't affect the story at all from an enduser perspective\nconst InvisibleButton = () => {\n  return <button style={{ color: \"transparent\" }}>invisible button</button>;\n};\n\nconst SampleContext = createContext({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addButton: (_children?: React.ReactNode) => {},\n});\n\nconst RenderTooltipButton = ({ children }: { children: React.ReactNode }) => {\n  const { addButton } = useContext(SampleContext);\n\n  useLayoutEffect(() => {\n    addButton(children);\n  }, [addButton, children]);\n\n  return null;\n};\n\ninterface DelayedRenderOfChildrenwithTooltipsProps {\n  mouseLeaveUntrigger: boolean;\n  placement: PlacementType;\n  children: React.ReactNode;\n}\n\nconst DelayedRenderOfChildrenwithTooltips = ({\n  mouseLeaveUntrigger = false,\n  placement = \"auto\",\n  children,\n}: DelayedRenderOfChildrenwithTooltipsProps) => {\n  const [buttons, setButtons] = useState(new Set<string>());\n  const addButton = useCallback(\n    (buttonText) =>\n      setButtons((oldState) => new Set<string>([...oldState, buttonText])),\n    [setButtons]\n  );\n\n  return (\n    <SampleContext.Provider value={{ addButton }}>\n      <div>\n        {[...buttons].map((toolTip) => (\n          <span key={toolTip}>\n            <UncontrolledTooltip\n              label={toolTip}\n              placement={placement}\n              triggers={[\"click\"]}\n              untriggers={\n                [\"click\"].concat(\n                  mouseLeaveUntrigger ? [\"mouseleave\"] : []\n                ) as AllowedUnTriggers[]\n              }\n            >\n              <Button>Hover over me</Button>\n            </UncontrolledTooltip>\n            &nbsp;\n          </span>\n        ))}\n      </div>\n      {children}\n    </SampleContext.Provider>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Overlay/Popper\",\n  component: Popper,\n  parameters: {\n    docs: { page },\n  },\n  argTypes: {\n    placement: {\n      label: \"Placement\",\n      control: {\n        type: \"select\",\n        options: [\n          \"auto\",\n          \"top-start\",\n          \"top\",\n          \"top-end\",\n          \"right-start\",\n          \"right\",\n          \"right-end\",\n          \"bottom-end\",\n          \"bottom\",\n          \"bottom-start\",\n          \"left-end\",\n          \"left\",\n          \"left-start\",\n        ],\n      },\n    },\n  },\n};\n\nexport const AdvancedExample = (\n  props: DelayedRenderOfChildrenwithTooltipsProps\n): React.ReactElement => {\n  return (\n    <DelayedRenderOfChildrenwithTooltips {...props}>\n      <RenderTooltipButton>Hi!</RenderTooltipButton>\n      <RenderTooltipButton>There!</RenderTooltipButton>\n    </DelayedRenderOfChildrenwithTooltips>\n  );\n};;\n\nAdvancedExample.argTypes = {\n  mouseLeaveUntrigger: {\n    name: \"mouse leave untrigger\",\n    type: \"boolean\",\n  },\n};\n\nAdvancedExample.args = {\n  mouseLeaveUntrigger: false,\n  placement: \"auto\",\n};\n\nAdvancedExample.storyName = \"advanced example\";\n\nexport const ElementNotFound = (): React.ReactElement => {\n  const [tooltipState] = useTooltip();\n\n  return (\n    <div>\n      <Button id=\"right\">This button has the wrong ID</Button>\n      <Tooltip {...tooltipState} target=\"wrong\">\n        This won&apos;t show\n      </Tooltip>\n    </div>\n  );\n};;\n\nElementNotFound.storyName = \"element not found\";\n\nexport const LargePopperContent = (props: PopperProps): React.ReactElement => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const portalRef = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      style={{ width: \"100%\", height: \"100vh\", overflow: \"scroll\" }}\n      id=\"scroll\"\n    >\n      (scroll down and right inside the red box and click the button to see\n      popover placement change)\n      <div\n        style={{\n          border: \"1px solid red\",\n          width: \"200%\",\n          height: \"200%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          position: \"relative\",\n        }}\n        ref={portalRef}\n      >\n        <Button id=\"right\" onClick={() => setIsOpen((open) => !open)}>\n          Click to open/close\n        </Button>\n        <Popper\n          isOpen={isOpen}\n          target=\"right\"\n          noArrow\n          popperStyle={{ maxWidth: \"none\", maxHeight: \"none\" }}\n          portalRef={portalRef}\n          {...props}\n          onOpen={() => {}}\n          onClose={() => {}}\n        >\n          <div\n            style={{\n              width: 600,\n              height: 400,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              background: \"pink\",\n            }}\n          >\n            <div>Large Popper</div>\n          </div>\n        </Popper>\n      </div>\n    </div>\n  );\n};;\n\nLargePopperContent.args = {\n  placement: \"auto\",\n};\n\nLargePopperContent.storyName = \"large popper content\";\n\nexport const PreventCloseOnOutsideClickForElementWithClass = (\n  props: PopperProps\n): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button className=\"popper-open-btn\" ref={targetRef}>\n        This button opens the popover\n      </Button>\n      <Button\n        className=\"bcl-popper-ignore-click\"\n        style={{ marginLeft: \"1rem\" }}\n      >\n        This button does NOT close the popover\n      </Button>\n      <Popover {...popoverState} targetRef={targetRef} {...props}>\n        This is a bunch of content inside the popover\n      </Popover>\n    </div>\n  );\n};;\n\nPreventCloseOnOutsideClickForElementWithClass.args = {\n  placement: \"bottom\",\n};\n\nPreventCloseOnOutsideClickForElementWithClass.storyName =\n  \"prevent close on outside click for element with class\";\n\nexport const PreventCloseOnOutsideClickForElementWithCustomClass = (\n  props: PopperProps\n): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button className=\"popper-open-btn\" ref={targetRef}>\n        This button opens the popover\n      </Button>\n      <Button\n        className=\"custom-popper-ignore-click\"\n        style={{ marginLeft: \"1rem\" }}\n      >\n        This button does NOT close the popover\n      </Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        ignoreCloseOnClickOutsideClassName=\"custom-popper-ignore-click\"\n        {...props}\n      >\n        This is a bunch of content inside the popover\n      </Popover>\n    </div>\n  );\n};;\n\nPreventCloseOnOutsideClickForElementWithCustomClass.args = {\n  placement: \"bottom\",\n};\n\nPreventCloseOnOutsideClickForElementWithCustomClass.storyName =\n  \"prevent close on outside click for element with custom class\";\n\nexport const PreventCloseOnAnyOutsideInteraction = (): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>This button toggles the popover</Button>\n      <Button type=\"button\" style={{ marginLeft: \"1rem\" }}>\n        Click this to not close the popover\n      </Button>\n      <div>\n        Nothing except a click on the button will open/close the popover\n      </div>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        placement=\"bottom\"\n        closeOnClickOutside={false}\n        triggers={[\"click\"]}\n        untriggers={[\"click\"]}\n      >\n        This is a bunch of content inside the popper\n      </Popover>\n    </div>\n  );\n};;\n\nPreventCloseOnAnyOutsideInteraction.storyName =\n  \"prevent close on any outside interaction\";\n\nexport const NoCrashOnOutsideClickForElementWithEmptyIgnoreClass =\n  (): React.ReactElement => {\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n    return (\n      <div>\n        <Button className=\"popper-open-btn\" ref={targetRef}>\n          This button opens the popover\n        </Button>\n        <Button\n          className=\"bcl-popper-ignore-click\"\n          style={{ marginLeft: \"1rem\" }}\n        >\n          This button does NOT close the popover\n        </Button>\n        <Popover\n          {...popoverState}\n          targetRef={targetRef}\n          placement=\"bottom\"\n          isIgnoreCloseOnClickOutsideEnabled={false}\n        >\n          This is a bunch of content inside the popover\n        </Popover>\n      </div>\n    );\n  };;\n\nNoCrashOnOutsideClickForElementWithEmptyIgnoreClass.storyName =\n  \"no crash on outside click for element with empty ignore class\";\n\nexport const Interactive = (props: PopperProps): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n  const [clicked, setClicked] = useState(false);\n\n  return (\n    <div>\n      <Button ref={targetRef}>This button toggles the popover</Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        triggers={[\"click\"]}\n        untriggers={[\"click\"]}\n        {...props}\n      >\n        This is a bunch of content inside the popper with a{\" \"}\n        <Button onClick={() => setClicked(true)}>button</Button>.\n        <span id=\"button-clicked\">\n          {clicked ? \"Button clicked.\" : \"Button not clicked.\"}\n        </span>\n      </Popover>\n    </div>\n  );\n};;\n\nInteractive.args = {\n  placement: \"auto\",\n  interactive: true,\n};\n\nInteractive.storyName = \"interactive\";\n\nexport const DelayOpenAndClose = ({\n  delay,\n}: {\n  delay: number;\n}): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        delay={delay}\n        triggers={[\"click\"]}\n        untriggers={[\"blur\"]}\n      >\n        This is a bunch of content inside the popover\n      </Popover>\n      <InvisibleButton />\n    </div>\n  );\n};;\n\nDelayOpenAndClose.argTypes = {\n  delay: {\n    type: \"number\",\n    label: \"Delay\",\n  },\n};\n\nDelayOpenAndClose.args = {\n  delay: 2000,\n};\n\nDelayOpenAndClose.storyName = \"delay open and close\";\n\nexport const DelayOnlyClose = ({\n  delay,\n}: {\n  delay: number;\n}): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        delay={[null, delay]}\n        triggers={[\"click\"]}\n        untriggers={[\"blur\"]}\n      >\n        This is a bunch of content inside the popover\n      </Popover>\n      <InvisibleButton />\n    </div>\n  );\n};;\n\nDelayOnlyClose.argTypes = {\n  delay: {\n    type: \"number\",\n    label: \"Delay\",\n  },\n};\n\nDelayOnlyClose.args = {\n  delay: 2000,\n};\n\nDelayOnlyClose.storyName = \"delay only close\";\n\nexport const DelayOnlyOpen = ({\n  delay,\n}: {\n  delay: number;\n}): React.ReactElement => {\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\n      <Popover\n        {...popoverState}\n        targetRef={targetRef}\n        delay={[delay, null]}\n        triggers={[\"click\"]}\n        untriggers={[\"blur\"]}\n      >\n        This is a bunch of content inside the popover\n      </Popover>\n      <InvisibleButton />\n    </div>\n  );\n};;\n\nDelayOnlyOpen.argTypes = {\n  delay: {\n    type: \"number\",\n    label: \"Delay\",\n  },\n};\n\nDelayOnlyOpen.args = {\n  delay: 2000,\n};\n\nDelayOnlyOpen.storyName = \"delay only open\";\n\nexport const ClosingOnScroll = () => {\n  const [tooltipState1, targetRef1] = usePopover<HTMLButtonElement>();\n  const [tooltipState2, targetRef2] = usePopover<HTMLButtonElement>();\n\n  return (\n    <div>\n      <div>\n        <LoremIpsum paragraphs={5} />\n      </div>\n      <Button ref={targetRef1}>Hover to open</Button>\n      <Popover\n        targetRef={targetRef1}\n        triggers={[\"mouseenter\", \"click\"]}\n        untriggers={[\"mouseleave\", \"scroll\"]}\n        {...tooltipState1}\n      >\n        Popover 1\n      </Popover>\n      <div\n        style={{\n          height: 300,\n          width: \"100vw\",\n          margin: 50,\n          overflow: \"auto\",\n        }}\n        id=\"internal-scroll\"\n      >\n        <div\n          style={{\n            height: 500,\n            width: \"100vw\",\n          }}\n        >\n          <Button ref={targetRef2}>Hover to open 2</Button>\n          <Popover\n            targetRef={targetRef2}\n            triggers={[\"mouseenter\", \"click\"]}\n            untriggers={[\"mouseleave\", \"scroll\"]}\n            {...tooltipState2}\n          >\n            Popover 2\n          </Popover>\n        </div>\n      </div>\n      <div>\n        <LoremIpsum paragraphs={5} />\n      </div>\n    </div>\n  );\n};\n\nClosingOnScroll.storyName = \"closing on scroll\";\n\n\n\nAdvancedExample.parameters = { storySource: { source: \"(\\n  props: DelayedRenderOfChildrenwithTooltipsProps\\n): React.ReactElement => {\\n  return (\\n    <DelayedRenderOfChildrenwithTooltips {...props}>\\n      <RenderTooltipButton>Hi!</RenderTooltipButton>\\n      <RenderTooltipButton>There!</RenderTooltipButton>\\n    </DelayedRenderOfChildrenwithTooltips>\\n  );\\n}\" }, ...AdvancedExample.parameters };\nElementNotFound.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [tooltipState] = useTooltip();\\n\\n  return (\\n    <div>\\n      <Button id=\\\"right\\\">This button has the wrong ID</Button>\\n      <Tooltip {...tooltipState} target=\\\"wrong\\\">\\n        This won&apos;t show\\n      </Tooltip>\\n    </div>\\n  );\\n}\" }, ...ElementNotFound.parameters };\nLargePopperContent.parameters = { storySource: { source: \"(props: PopperProps): React.ReactElement => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const portalRef = React.useRef<HTMLDivElement>(null);\\n\\n  return (\\n    <div\\n      style={{ width: \\\"100%\\\", height: \\\"100vh\\\", overflow: \\\"scroll\\\" }}\\n      id=\\\"scroll\\\"\\n    >\\n      (scroll down and right inside the red box and click the button to see\\n      popover placement change)\\n      <div\\n        style={{\\n          border: \\\"1px solid red\\\",\\n          width: \\\"200%\\\",\\n          height: \\\"200%\\\",\\n          display: \\\"flex\\\",\\n          justifyContent: \\\"center\\\",\\n          alignItems: \\\"center\\\",\\n          position: \\\"relative\\\",\\n        }}\\n        ref={portalRef}\\n      >\\n        <Button id=\\\"right\\\" onClick={() => setIsOpen((open) => !open)}>\\n          Click to open/close\\n        </Button>\\n        <Popper\\n          isOpen={isOpen}\\n          target=\\\"right\\\"\\n          noArrow\\n          popperStyle={{ maxWidth: \\\"none\\\", maxHeight: \\\"none\\\" }}\\n          portalRef={portalRef}\\n          {...props}\\n          onOpen={() => {}}\\n          onClose={() => {}}\\n        >\\n          <div\\n            style={{\\n              width: 600,\\n              height: 400,\\n              display: \\\"flex\\\",\\n              alignItems: \\\"center\\\",\\n              justifyContent: \\\"center\\\",\\n              background: \\\"pink\\\",\\n            }}\\n          >\\n            <div>Large Popper</div>\\n          </div>\\n        </Popper>\\n      </div>\\n    </div>\\n  );\\n}\" }, ...LargePopperContent.parameters };\nPreventCloseOnOutsideClickForElementWithClass.parameters = { storySource: { source: \"(\\n  props: PopperProps\\n): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button className=\\\"popper-open-btn\\\" ref={targetRef}>\\n        This button opens the popover\\n      </Button>\\n      <Button\\n        className=\\\"bcl-popper-ignore-click\\\"\\n        style={{ marginLeft: \\\"1rem\\\" }}\\n      >\\n        This button does NOT close the popover\\n      </Button>\\n      <Popover {...popoverState} targetRef={targetRef} {...props}>\\n        This is a bunch of content inside the popover\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...PreventCloseOnOutsideClickForElementWithClass.parameters };\nPreventCloseOnOutsideClickForElementWithCustomClass.parameters = { storySource: { source: \"(\\n  props: PopperProps\\n): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button className=\\\"popper-open-btn\\\" ref={targetRef}>\\n        This button opens the popover\\n      </Button>\\n      <Button\\n        className=\\\"custom-popper-ignore-click\\\"\\n        style={{ marginLeft: \\\"1rem\\\" }}\\n      >\\n        This button does NOT close the popover\\n      </Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        ignoreCloseOnClickOutsideClassName=\\\"custom-popper-ignore-click\\\"\\n        {...props}\\n      >\\n        This is a bunch of content inside the popover\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...PreventCloseOnOutsideClickForElementWithCustomClass.parameters };\nPreventCloseOnAnyOutsideInteraction.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button toggles the popover</Button>\\n      <Button type=\\\"button\\\" style={{ marginLeft: \\\"1rem\\\" }}>\\n        Click this to not close the popover\\n      </Button>\\n      <div>\\n        Nothing except a click on the button will open/close the popover\\n      </div>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        placement=\\\"bottom\\\"\\n        closeOnClickOutside={false}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"click\\\"]}\\n      >\\n        This is a bunch of content inside the popper\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...PreventCloseOnAnyOutsideInteraction.parameters };\nNoCrashOnOutsideClickForElementWithEmptyIgnoreClass.parameters = { storySource: { source: \"(): React.ReactElement => {\\n    const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n    return (\\n      <div>\\n        <Button className=\\\"popper-open-btn\\\" ref={targetRef}>\\n          This button opens the popover\\n        </Button>\\n        <Button\\n          className=\\\"bcl-popper-ignore-click\\\"\\n          style={{ marginLeft: \\\"1rem\\\" }}\\n        >\\n          This button does NOT close the popover\\n        </Button>\\n        <Popover\\n          {...popoverState}\\n          targetRef={targetRef}\\n          placement=\\\"bottom\\\"\\n          isIgnoreCloseOnClickOutsideEnabled={false}\\n        >\\n          This is a bunch of content inside the popover\\n        </Popover>\\n      </div>\\n    );\\n  }\" }, ...NoCrashOnOutsideClickForElementWithEmptyIgnoreClass.parameters };\nInteractive.parameters = { storySource: { source: \"(props: PopperProps): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n  const [clicked, setClicked] = useState(false);\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button toggles the popover</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"click\\\"]}\\n        {...props}\\n      >\\n        This is a bunch of content inside the popper with a{\\\" \\\"}\\n        <Button onClick={() => setClicked(true)}>button</Button>.\\n        <span id=\\\"button-clicked\\\">\\n          {clicked ? \\\"Button clicked.\\\" : \\\"Button not clicked.\\\"}\\n        </span>\\n      </Popover>\\n    </div>\\n  );\\n}\" }, ...Interactive.parameters };\nDelayOpenAndClose.parameters = { storySource: { source: \"({\\n  delay,\\n}: {\\n  delay: number;\\n}): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        delay={delay}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n      >\\n        This is a bunch of content inside the popover\\n      </Popover>\\n      <InvisibleButton />\\n    </div>\\n  );\\n}\" }, ...DelayOpenAndClose.parameters };\nDelayOnlyClose.parameters = { storySource: { source: \"({\\n  delay,\\n}: {\\n  delay: number;\\n}): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        delay={[null, delay]}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n      >\\n        This is a bunch of content inside the popover\\n      </Popover>\\n      <InvisibleButton />\\n    </div>\\n  );\\n}\" }, ...DelayOnlyClose.parameters };\nDelayOnlyOpen.parameters = { storySource: { source: \"({\\n  delay,\\n}: {\\n  delay: number;\\n}): React.ReactElement => {\\n  const [popoverState, targetRef] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>This button opens the popover eventually</Button>\\n      <Popover\\n        {...popoverState}\\n        targetRef={targetRef}\\n        delay={[delay, null]}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n      >\\n        This is a bunch of content inside the popover\\n      </Popover>\\n      <InvisibleButton />\\n    </div>\\n  );\\n}\" }, ...DelayOnlyOpen.parameters };\nClosingOnScroll.parameters = { storySource: { source: \"() => {\\n  const [tooltipState1, targetRef1] = usePopover<HTMLButtonElement>();\\n  const [tooltipState2, targetRef2] = usePopover<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <div>\\n        <LoremIpsum paragraphs={5} />\\n      </div>\\n      <Button ref={targetRef1}>Hover to open</Button>\\n      <Popover\\n        targetRef={targetRef1}\\n        triggers={[\\\"mouseenter\\\", \\\"click\\\"]}\\n        untriggers={[\\\"mouseleave\\\", \\\"scroll\\\"]}\\n        {...tooltipState1}\\n      >\\n        Popover 1\\n      </Popover>\\n      <div\\n        style={{\\n          height: 300,\\n          width: \\\"100vw\\\",\\n          margin: 50,\\n          overflow: \\\"auto\\\",\\n        }}\\n        id=\\\"internal-scroll\\\"\\n      >\\n        <div\\n          style={{\\n            height: 500,\\n            width: \\\"100vw\\\",\\n          }}\\n        >\\n          <Button ref={targetRef2}>Hover to open 2</Button>\\n          <Popover\\n            targetRef={targetRef2}\\n            triggers={[\\\"mouseenter\\\", \\\"click\\\"]}\\n            untriggers={[\\\"mouseleave\\\", \\\"scroll\\\"]}\\n            {...tooltipState2}\\n          >\\n            Popover 2\\n          </Popover>\\n        </div>\\n      </div>\\n      <div>\\n        <LoremIpsum paragraphs={5} />\\n      </div>\\n    </div>\\n  );\\n}\" }, ...ClosingOnScroll.parameters };","import React from \"react\";\n\nimport { Portal } from \"../Portal\";\n\nimport { PopperContextProvider } from \"./PopperContext\";\nimport { PopperManager } from \"./PopperManager\";\nimport { PopperProps } from \"./types\";\n\nexport const Popper = React.forwardRef(\n  (\n    {\n      children,\n      className,\n      componentName = \"Popper\",\n      id,\n      target,\n      targetRef,\n      popperStyle,\n      popperStyledCss,\n      portalRef,\n      ...props\n    }: PopperProps,\n    ref: React.RefObject<HTMLDivElement>\n  ) => {\n    // if no `target` AND `targetRef` defined, fail\n    if (!target && !targetRef) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // eslint-disable-next-line no-console\n        console.error(\n          `ERROR: You must specify a 'target' or 'targetRef' prop for the '${componentName}' component.`\n        );\n      }\n    }\n\n    return (\n      <Portal node={portalRef}>\n        <PopperContextProvider\n          {...props}\n          portalRef={portalRef}\n          target={target}\n          targetRef={targetRef}\n        >\n          <PopperManager\n            className={className}\n            id={id}\n            popperStyle={popperStyle}\n            popperStyledCss={popperStyledCss}\n            ref={ref}\n          >\n            {children}\n          </PopperManager>\n        </PopperContextProvider>\n      </Portal>\n    );\n  }\n);\n\nPopper.displayName = \"Popper\";\n","import React, { createContext, useContext } from \"react\";\n\nimport { LevelsContext } from \"../../LevelsContext\";\nimport {\n  PlacementType,\n  PopperContextInterface,\n  PopperContextProviderProps,\n} from \"../types\";\n\nexport const placementTypes: PlacementType[] = [\n  \"auto\",\n  \"top-start\",\n  \"top\",\n  \"top-end\",\n  \"right-start\",\n  \"right\",\n  \"right-end\",\n  \"bottom-end\",\n  \"bottom\",\n  \"bottom-start\",\n  \"left-end\",\n  \"left\",\n  \"left-start\",\n];\n\nconst doNothing = (): null => null;\n\n// this ups coverage slightly\ndoNothing();\n\nexport const defaultValue: PopperContextInterface = {\n  onOpen: doNothing,\n  onClose: doNothing,\n};\n\nexport const PopperContext =\n  createContext<PopperContextInterface>(defaultValue);\n\nexport const usePopperContext = (): PopperContextInterface => {\n  return useContext(PopperContext);\n};\n\nexport const PopperContextProvider = ({\n  children,\n  closeOnClickOutside = true,\n  defaultPlacement = \"bottom\",\n  distance = 10,\n  ignoreCloseOnClickOutsideClassName = \"bcl-popper-ignore-click\",\n  isIgnoreCloseOnClickOutsideEnabled = true,\n  placement = \"auto\",\n  skidding = 0,\n  triggers = [\"mouseenter\", \"focus\"],\n  untriggers = [\"mouseleave\", \"blur\"],\n  zIndex: zIndexProp,\n  ...props\n}: PopperContextProviderProps): React.ReactElement => {\n  const baseIndex = useContext(LevelsContext);\n  const zIndex = zIndexProp === undefined ? baseIndex || 1031 : zIndexProp;\n\n  return (\n    <PopperContext.Provider\n      value={{\n        ...props,\n        closeOnClickOutside,\n        defaultPlacement,\n        distance,\n        ignoreCloseOnClickOutsideClassName,\n        isIgnoreCloseOnClickOutsideEnabled,\n        placement,\n        skidding,\n        triggers,\n        untriggers,\n        zIndex,\n      }}\n    >\n      {children}\n    </PopperContext.Provider>\n  );\n};\n","export { PopperContext } from \"./PopperContext\";\n\nexport {\n  PopperContextProvider,\n  placementTypes,\n  usePopperContext,\n} from \"./PopperContext\";\n","import React, { forwardRef, useRef } from \"react\";\n\nimport { PopperRenderer } from \"../PopperRenderer\";\nimport { usePopperEvents } from \"../usePopperEvents\";\nimport { usePopperContext } from \"../PopperContext\";\nimport { PopperManagerProps } from \"../types\";\n\nexport const PopperManager = forwardRef(\n  (\n    props: PopperManagerProps,\n    ref: React.RefObject<HTMLDivElement>\n  ): React.ReactElement | null => {\n    // create a ref for the popper\n    const newRef = useRef<HTMLDivElement>(null);\n    const popperRef = ref || newRef;\n\n    /**\n     * open/close event listeners per triggers\n     */\n    usePopperEvents(popperRef);\n\n    // get desired props from context\n    const { isOpen } = usePopperContext();\n\n    return isOpen ? <PopperRenderer {...props} ref={popperRef} /> : null;\n  }\n);\n\nPopperManager.displayName = \"PopperManager\";\n","export { PopperManager } from \"./PopperManager\";\n","import React, { forwardRef, useLayoutEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\n\nimport { StyledPopper } from \"../StyledPopper\";\nimport { usePopperContext } from \"../PopperContext\";\nimport { usePopperPlacement } from \"../usePopperPlacement\";\nimport { useOutsideClick } from \"../useOutsideClick\";\nimport { useScrollListener } from \"../useScrollListener\";\nimport { PopperRendererProps } from \"../types\";\n\nexport const PopperRenderer = forwardRef(\n  (\n    { children, className, popperStyle, ...props }: PopperRendererProps,\n    ref: React.RefObject<HTMLDivElement>\n  ): React.ReactElement => {\n    const refIfNoRefPassed = useRef<HTMLDivElement>(null);\n    const refToUse = ref || refIfNoRefPassed;\n\n    // get desired props from context\n    const {\n      tipVariant = \"dark\",\n      zIndex,\n      targetRef,\n      interactive,\n      noArrow,\n    } = usePopperContext();\n\n    /**\n     * placement state management\n     */\n    const { activePlacement, left, top, handlePlacementUpdate } =\n      usePopperPlacement(ref);\n\n    const targetDimensions = targetRef?.current?.getBoundingClientRect();\n    const popperDimensions = refToUse?.current?.getBoundingClientRect();\n\n    /**\n     * outside click handler\n     */\n    useOutsideClick(ref);\n\n    /**\n     * scroll listener\n     */\n    useScrollListener(handlePlacementUpdate);\n\n    /**\n     * update the placement after each render.\n     * note that this won't trigger a re-render if the measurements haven't changed.\n     */\n    useLayoutEffect(() => {\n      handlePlacementUpdate();\n    });\n\n    return (\n      <StyledPopper\n        {...props}\n        className={classNames(\"bcl-popper\", className)}\n        ref={ref}\n        left={left}\n        top={top}\n        placement={activePlacement}\n        tipVariant={tipVariant}\n        zIndex={zIndex}\n        interactive={interactive}\n        noArrow={noArrow}\n        style={popperStyle}\n        targetDimensions={targetDimensions}\n        popperDimensions={popperDimensions}\n      >\n        {typeof children === \"function\"\n          ? children({ activePlacement, targetDimensions, popperDimensions })\n          : children}\n      </StyledPopper>\n    );\n  }\n);\n\nPopperRenderer.displayName = \"PopperRenderer\";\n","export { PopperRenderer } from \"./PopperRenderer\";\n","import styled, { css } from \"styled-components\";\nimport {\n  colorSelector,\n  getFontFamily,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledPopperProps } from \"./types\";\nimport {\n  horizontalPlacementSelector,\n  verticalPlacementSelector,\n} from \"./utils\";\n\n/**\n * Function that uses the StyledPopperProps to return a theme color\n * @param props props object for StyledPopperProps, must contain 'tipVariant'\n * @returns a theme color based on the input\n */\nconst tipVariantSelector = ({ tipVariant, ...props }: StyledPopperProps) => {\n  return tipVariant === \"dark\"\n    ? colorSelector(props, \"gray\", 900)\n    : colorSelector(props, \"gray\", 100);\n};\n\nexport const StyledPopper = styled.div<StyledPopperProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  top: ${(props) => props.top || 0}px;\n  left: ${(props) => props.left || 0}px;\n  position: absolute;\n  display: block;\n  max-width: 276px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  background-color: white;\n  background-clip: padding-box;\n  z-index: ${(props) => props.zIndex};\n  overflow: visible;\n  max-height: 30vh;\n  border: ${(props) => props.interactive && \"10px solid transparent\"};\n\n  ::before {\n    content: \"\";\n    display: ${(props) => (props.noArrow ? \"none\" : \"block\")};\n    position: absolute;\n    pointer-events: none;\n    border: 6px solid transparent;\n    width: 0;\n    height: 0;\n    opacity: ${(props) => props.tipVariant === \"dark\" && 0.95};\n\n    ${({ placement, targetDimensions, popperDimensions }) =>\n      placement &&\n      placement.includes(\"top\") &&\n      css`\n        top: 100%;\n        border-top-color: ${tipVariantSelector};\n        left: calc(\n          ${verticalPlacementSelector(\n              placement,\n              targetDimensions,\n              popperDimensions\n            )} - 6px\n        );\n      `};\n\n    ${({ placement, targetDimensions, popperDimensions }) =>\n      placement &&\n      placement.includes(\"right\") &&\n      css`\n        right: 100%;\n        border-right-color: ${tipVariantSelector};\n        top: calc(\n          ${horizontalPlacementSelector(\n              placement,\n              targetDimensions,\n              popperDimensions\n            )} - 6px\n        );\n      `};\n\n    ${({ placement, targetDimensions, popperDimensions }) =>\n      placement &&\n      placement.includes(\"bottom\") &&\n      css`\n        bottom: 100%;\n        border-bottom-color: ${tipVariantSelector};\n        left: calc(\n          ${verticalPlacementSelector(\n              placement,\n              targetDimensions,\n              popperDimensions\n            )} - 6px\n        );\n      `};\n\n    ${({ placement, targetDimensions, popperDimensions }) =>\n      placement &&\n      placement.includes(\"left\") &&\n      css`\n        left: 100%;\n        border-left-color: ${tipVariantSelector};\n        top: calc(\n          ${horizontalPlacementSelector(\n              placement,\n              targetDimensions,\n              popperDimensions\n            )} - 6px\n        );\n      `};\n  }\n\n  ${(props) => props.popperStyledCss};\n`;\n","export { Popper } from \"./Popper\";\n\nexport { placementTypes } from \"./PopperContext\";\n\nexport { StyledPopper } from \"./StyledPopper\";\n\nexport { usePopper } from \"./usePopper\";\n\nexport {\n  getElement,\n  horizontalPlacementSelector,\n  verticalPlacementSelector,\n  extractInteractiveChildren,\n} from \"./utils\";\n\nexport type {\n  PopperProps,\n  StyledPopperProps,\n  AllowedTriggers,\n  AllowedUnTriggers,\n  DelayArray,\n  DelayType,\n  TipVariantType,\n  PlacementType,\n  PopperStateObject,\n} from \"./types\";\n","export { useHandleClose } from \"./useHandleClose\";\n","import { useCallback, useEffect, useRef } from \"react\";\n\nimport { usePopperContext } from \"../PopperContext\";\nimport { getDelay } from \"../utils\";\n\n/**\n * Hook to create a close handler that takes an optional delay\n * into account when defined\n * @returns an array where the first elem is the close handler and the second elem is the timer ref\n */\nexport const useHandleClose = (): [\n  (event) => void,\n  React.RefObject<ReturnType<typeof setTimeout> | null>\n] => {\n  // ref for timeouts\n  const closeTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  // get props from context\n  const { delay, onClose } = usePopperContext();\n\n  /**\n   * Function that handles closing the popper, including\n   * taking into account a delay if defined\n   */\n  const handleClose = useCallback(\n    (event) => {\n      const activeDelay = getDelay(delay);\n\n      // if delay is defined, then implement close with delay\n      if (activeDelay) {\n        // grab the second arg from activeDelay, which is the close delay\n        const [, closeDelay] = activeDelay;\n\n        // if closeDelay is a nullish value, then just call onClose immediately\n        if (!closeDelay) {\n          return onClose(event);\n        }\n\n        // set timeout and also add it to the closeTimerRef\n        closeTimerRef.current = setTimeout(() => onClose(event), closeDelay);\n\n        return;\n      }\n\n      // if no delay is defined, then just call onClose\n      onClose(event);\n    },\n    [delay, onClose]\n  );\n\n  useEffect(() => {\n    // close over the ref\n    const timer = closeTimerRef;\n\n    return () => {\n      if (timer.current) {\n        // ensure that when unmounted, we don't call setState\n        clearTimeout(timer.current);\n      }\n\n      timer.current = null;\n    };\n  }, []);\n\n  return [handleClose, closeTimerRef];\n};\n","export { useHandleOpen } from \"./useHandleOpen\";\n","import { useEffect, useRef } from \"react\";\n\nimport { usePopperContext } from \"../PopperContext\";\nimport { getDelay } from \"../utils\";\n\n/**\n *\n */\nexport const useHandleOpen = (): [\n  (event) => void,\n  React.RefObject<ReturnType<typeof setTimeout> | null>\n] => {\n  // ref for timeouts\n  const timerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  // get props from context\n  const { delay, onOpen } = usePopperContext();\n\n  /**\n   * Function that handles opening the popper, including\n   * taking into account a delay if defined\n   */\n  const handleOpen = (event) => {\n    const activeDelay = getDelay(delay);\n\n    // if delay is defined, then implement open with delay\n    if (!activeDelay) {\n      // if no delay is defined, then just call onOpen\n      onOpen(event);\n\n      return;\n    }\n\n    // grab the first arg from activeDelay, which is the open delay\n    const [openDelay] = activeDelay;\n\n    // if openDelay is a nullish value, then just call onOpen immediately\n    if (!openDelay) {\n      onOpen(event);\n\n      return;\n    }\n\n    if (timerRef.current) {\n      // if the user triggers the timer while any are pending, clear the timer\n\n      clearTimeout(timerRef.current);\n    }\n\n    // set timeout and also add it to the openTimerRef\n    timerRef.current = setTimeout(() => {\n      timerRef.current = null;\n\n      onOpen(event);\n    }, openDelay);\n  };\n\n  useEffect(() => {\n    // close over the ref\n    const timer = timerRef;\n\n    return () => {\n      if (timer.current) {\n        // ensure that when unmounted, we don't call setState\n        clearTimeout(timer.current);\n      }\n\n      timer.current = null;\n    };\n  }, []);\n\n  return [handleOpen, timerRef];\n};\n","export { useMouseLeave } from \"./useMouseLeave\";\n","import { usePopperContext } from \"../PopperContext\";\nimport { getElement, isMouseOverTarget } from \"../utils\";\n\n/**\n * Hook that returns a 'mouseleave' event listener function for Popper\n * @param handleClose the function that should be invoked when all conditions to close popper have been satisfied\n * @param popperRef ref to the Popper DOM element\n */\nexport const useMouseLeave = (\n  handleClose: (event) => void,\n  popperRef: React.RefObject<HTMLDivElement>\n): ((event) => void) => {\n  // get props from context\n  const { untriggers, target, targetRef, interactive } = usePopperContext();\n\n  // mouse move listener for interactive state\n  const handleMouseMove = (event: MouseEvent) => {\n    // if 'mouseleave' is not defined as an untrigger, short circuit\n    if (\n      !untriggers ||\n      !untriggers.includes(\"mouseleave\") ||\n      // if the popper is not visible, short-circuit\n      !popperRef.current\n    ) {\n      return;\n    }\n\n    // get element from targetRef or target\n    const element = getElement({ targetRef, target });\n\n    // get the node that the mousemove event is spawned from\n    const node = event.target as Node;\n\n    if (\n      // if element is not defined, short circuit\n      !element ||\n      // if element contains event node, then do nothing\n      element.contains(node) ||\n      // if popper contains node AND interactive, then do nothing\n      (popperRef.current.contains(node) && interactive) ||\n      isMouseOverTarget(event, element)\n    ) {\n      return;\n    }\n\n    // otherwise, call close fn\n    handleClose(event);\n\n    // finally, remove the event listener\n    document.removeEventListener(\"mousemove\", handleMouseMove);\n  };\n\n  /**\n   * Set up mouse leave, which sets up an event listener\n   * for the mouse move event that will remove this event\n   * listener once the onClose event is called\n   */\n  const handleMouseLeave = (event) => {\n    // add event listener for mouse move\n    document.addEventListener(\"mousemove\", handleMouseMove);\n\n    // call it with this event to avoid skipping the initial destination\n    handleMouseMove(event);\n  };\n\n  return handleMouseLeave;\n};\n","export { useOutsideClick } from \"./useOutsideClick\";\n","import { useEffect } from \"react\";\n\nimport { usePopperContext } from \"../PopperContext\";\nimport { useHandleClose } from \"../useHandleClose\";\nimport { getElement } from \"../utils\";\n\nexport const useOutsideClick = (\n  popperRef: React.RefObject<HTMLDivElement>\n): void => {\n  // get the popper props that we need\n  const {\n    ignoreCloseOnClickOutsideClassName,\n    interactive,\n    isIgnoreCloseOnClickOutsideEnabled,\n    closeOnClickOutside,\n    target,\n    targetRef,\n  } = usePopperContext();\n\n  // get close handler fn\n  const [onClose] = useHandleClose();\n\n  /**\n   * outside click handler\n   */\n  useEffect(() => {\n    // if closeOnClickOutside is false\n    // then short circuit\n    if (!closeOnClickOutside) {\n      return;\n    }\n\n    // get element from targetRef or target\n    const element = getElement({ targetRef, target });\n\n    const listener = (event) => {\n      // if 'ignoreCloseOnClickOutsideClassName' is defined AND\n      // 'isIgnoreCloseOnClickOutsideEnabled' is true,\n      // then check for elements containing the former\n      if (\n        ignoreCloseOnClickOutsideClassName &&\n        isIgnoreCloseOnClickOutsideEnabled\n      ) {\n        // get all elements with ignored class name from the DOM\n        const ignoredElements = Array.from(\n          document.getElementsByClassName(ignoreCloseOnClickOutsideClassName)\n        );\n\n        // loop through elements with the ignore class name\n        // and short-circuit if any contains the event target\n        for (let i = 0; i < ignoredElements.length; i++) {\n          // get current element from array using index\n          const elem = ignoredElements[i];\n\n          // if ignored element contains the target\n          // then short-circuit\n          if (elem.contains(event.target)) {\n            return;\n          }\n        }\n      }\n\n      // if element is not defined OR\n      // the element contains the click target OR\n      // interactive is enabled and the element is within the popper\n      // then short circuit\n      if (\n        !element ||\n        element.contains(event.target) ||\n        !popperRef.current ||\n        (interactive && popperRef.current.contains(event.target))\n      ) {\n        return;\n      }\n\n      onClose(event);\n    };\n\n    // add event listeners for outside click/tap\n    document.addEventListener(\"mousedown\", listener);\n\n    document.addEventListener(\"touchstart\", listener);\n\n    // cleanup stage\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [\n    target,\n    targetRef,\n    onClose,\n    closeOnClickOutside,\n    popperRef,\n    interactive,\n    ignoreCloseOnClickOutsideClassName,\n    isIgnoreCloseOnClickOutsideEnabled,\n  ]);\n};\n","export { usePopper } from \"./usePopper\";\n","import { useRef, useState, useCallback, useEffect } from \"react\";\n\nimport { PopperStateObject } from \"../types\";\n\n/**\n * A function that abstracts the open/close logic of a popper component\n * @param targetRef an optional ref object that should be used instead of initializing a new one\n * @param initialState an optional initial state for the handler\n * @returns an array containing state management props for the popper as its first element and the ref object to be passed to both the target and the popper\n */\nexport const usePopper = <E = HTMLElement>(\n  targetRef?: React.RefObject<E>,\n  initialState = false,\n  disabled = false\n): [PopperStateObject, React.RefObject<E>] => {\n  const newRef = useRef<E>(null);\n  const ref = targetRef || newRef;\n  const [isOpen, setState] = useState(initialState);\n\n  const onOpen = useCallback(() => {\n    if (!disabled) {\n      setState(true);\n    }\n  }, [disabled]);\n\n  const onClose = useCallback(() => {\n    if (!disabled) {\n      setState(false);\n    }\n  }, [disabled]);\n\n  useEffect(() => {\n    if (disabled) {\n      setState(false);\n    }\n  }, [disabled]);\n\n  return [{ isOpen, onOpen, onClose }, ref];\n};\n","export { usePopperEvents } from \"./usePopperEvents\";\n","import { useCallback, useEffect, useRef } from \"react\";\n\nimport { usePopperContext } from \"../PopperContext\";\nimport { AllowedUnTriggers } from \"../types\";\nimport { useHandleClose } from \"../useHandleClose\";\nimport { useHandleOpen } from \"../useHandleOpen\";\nimport { useMouseLeave } from \"../useMouseLeave\";\nimport { extractInteractiveChildren, getElement } from \"../utils\";\n\n// these untriggers cause buggy behavior when included as is\n// and need to be handled separately\nconst excludedUntriggers: AllowedUnTriggers[] = [\"mouseleave\"];\n\nconst getScrollableParentElements = (\n  node: HTMLElement | undefined | null\n): HTMLElement[] => {\n  const ret: HTMLElement[] = [];\n\n  if (!node) {\n    return ret;\n  }\n\n  if (node.scrollHeight > node.clientHeight) {\n    ret.push(node);\n  }\n\n  return ret.concat(getScrollableParentElements(node.parentElement));\n};\n\n/**\n * Hook that handles event subscription for the popper\n * component and updates its placement when changes are made\n * as necessary\n * @param popperRef ref object pointing to the popper element\n * @param placementCallback function that will recalculate the\n * placement of the popper when invokes\n */\nexport const usePopperEvents = (\n  popperRef: React.RefObject<HTMLDivElement>\n): void => {\n  // get props from context\n  const {\n    placement,\n    triggers,\n    untriggers,\n    target,\n    targetRef,\n    closeOnClickOutside,\n    interactive,\n    isOpen,\n  } = usePopperContext();\n\n  // get open handler fn\n  const [handleOpen] = useHandleOpen();\n\n  // whether the event came from a keyboard or a mouse/touch event\n  const fromKeyboard = useRef(false);\n\n  // get close handler fn\n  const [closePopper] = useHandleClose();\n\n  // interactive elements inside the popper\n  const interactiveElements = useRef<HTMLElement[]>([]);\n\n  const handleClose = useCallback(\n    (event) => {\n      // get the popper if it's in the event path (i.e. is a parent of the target)\n      const eventPath = event?.path || event?.composedPath?.();\n\n      const hasPopperParent = eventPath\n        ? !!eventPath?.find((item) => item === popperRef.current)\n        : false;\n\n      if (\n        interactiveElements.current.includes(event?.relatedTarget) ||\n        // if it is NOT a keyboard event, the popper is interactive and the target is the popper or is inside the popper\n        (!fromKeyboard.current &&\n          interactive &&\n          (hasPopperParent || event?.relatedTarget === popperRef.current)) ||\n        event?.relatedTarget === targetRef?.current\n      ) {\n        // abort - the newly focused element is in the list of elements inside the popper\n        return;\n      }\n\n      closePopper(event);\n    },\n    [closePopper, targetRef, popperRef, fromKeyboard, interactive]\n  );\n\n  const closeOnScroll = useCallback(\n    (event) => {\n      closePopper(event);\n    },\n    [closePopper]\n  );\n\n  useEffect(() => {\n    if (!interactive) {\n      interactiveElements.current = [];\n    } else {\n      interactiveElements.current = extractInteractiveChildren(\n        popperRef.current\n      );\n    }\n\n    interactiveElements.current.forEach((node) => {\n      node.addEventListener(\"blur\", handleClose);\n    });\n\n    const interactives = interactiveElements.current;\n\n    return () => {\n      interactives.forEach((node) => {\n        node.removeEventListener(\"blur\", handleClose);\n      });\n    };\n  });\n\n  // get mouse event listeners\n  const handleMouseLeave = useMouseLeave(handleClose, popperRef);\n\n  /**\n   * main event listeners to turn component display on/off\n   *\n   * This MUST be useEffect. In some cases, running useLayoutEffect will try to attach event listeners\n   * before the target element has rendered. Examples are cases where the child elements call a setState\n   * callback to add a new child which then renders a tooltip, using context to setup new children, and so on.\n   */\n  useEffect(() => {\n    // get element from targetRef or target\n    const element = getElement({ targetRef, target });\n\n    // if element is not defined, short circuit\n    if (!element) {\n      return;\n    }\n\n    const scrollableParentElements = getScrollableParentElements(element);\n\n    const detectKeyboardFocus = () => {\n      fromKeyboard.current = true;\n    };\n\n    const detectMouseFocus = () => {\n      fromKeyboard.current = false;\n    };\n\n    const ifClick = (event) => {\n      if (fromKeyboard.current) {\n        return;\n      }\n\n      if (isOpen) {\n        handleClose(event);\n      } else {\n        handleOpen(event);\n      }\n    };\n\n    const openIfFocus = (event) => {\n      if (!fromKeyboard.current) {\n        return;\n      }\n\n      handleOpen(event);\n    };\n\n    const closeIfBlur = (event) => {\n      if (!fromKeyboard.current) {\n        return;\n      }\n\n      handleClose(event);\n    };\n\n    // set a mousedown event on the popper\n    if (popperRef.current) {\n      popperRef.current.addEventListener(\"mousedown\", detectMouseFocus);\n    }\n\n    // these triggers interfere, so we need to differentiate between keyboard and mouse focus\n    element.addEventListener(\"mousedown\", detectMouseFocus);\n\n    document.addEventListener(\"keydown\", detectKeyboardFocus);\n\n    // exclude certain events to allow for custom handling\n    const activeUntriggers = untriggers?.filter((untrigger) => {\n      // exclude if included in excludedUntriggers list\n      if (excludedUntriggers.includes(untrigger)) {\n        return false;\n      }\n\n      // exclude if untrigger is 'click' and 'closeOnClickOutside' is enabled\n      if (untrigger === \"click\") {\n        if (closeOnClickOutside) {\n          return false;\n        }\n\n        if (triggers?.includes(\"click\")) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    // create trigger listeners\n    triggers?.forEach((trigger) => {\n      if (trigger === \"click\") {\n        element.addEventListener(trigger, ifClick);\n      } else if (trigger === \"focus\") {\n        element.addEventListener(trigger, openIfFocus);\n      } else {\n        element.addEventListener(trigger, handleOpen);\n      }\n    });\n\n    // create untrigger listeners\n    activeUntriggers?.forEach((untrigger) => {\n      if (untrigger === \"click\") {\n        element.addEventListener(untrigger, ifClick);\n      } else if (untrigger === \"blur\") {\n        element.addEventListener(untrigger, closeIfBlur);\n      } else if (untrigger === \"scroll\") {\n        document.addEventListener(untrigger, closeOnScroll);\n\n        scrollableParentElements.forEach((el) =>\n          el.addEventListener(untrigger, closeOnScroll)\n        );\n      } else {\n        element.addEventListener(untrigger, handleClose);\n      }\n    });\n\n    // create mouseleave listener\n    element.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    // cleanup stage\n    return () => {\n      element.removeEventListener(\"mousedown\", detectMouseFocus);\n\n      document.removeEventListener(\"keydown\", detectKeyboardFocus);\n\n      // remove trigger listeners\n      triggers?.forEach((trigger) => {\n        if (trigger === \"click\") {\n          element.removeEventListener(trigger, ifClick);\n        } else if (trigger === \"focus\") {\n          element.removeEventListener(trigger, openIfFocus);\n        } else {\n          element.removeEventListener(trigger, handleOpen);\n        }\n      });\n\n      // remove untrigger listeners\n      activeUntriggers?.forEach((untrigger) => {\n        if (untrigger === \"click\") {\n          element.removeEventListener(untrigger, ifClick);\n        } else if (untrigger === \"blur\") {\n          element.removeEventListener(untrigger, closeIfBlur);\n        } else if (untrigger === \"scroll\") {\n          document.addEventListener(untrigger, closeOnScroll);\n\n          scrollableParentElements.forEach((el) =>\n            el.removeEventListener(untrigger, closeOnScroll)\n          );\n        } else {\n          element.removeEventListener(untrigger, handleClose);\n        }\n      });\n\n      // remove mouseleave listener\n      element.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, [\n    closeOnClickOutside,\n    triggers,\n    untriggers,\n    target,\n    targetRef,\n    handleOpen,\n    handleClose,\n    handleMouseLeave,\n    placement,\n    isOpen,\n    popperRef,\n    closeOnScroll,\n  ]);\n};\n","export { usePopperPlacement } from \"./usePopperPlacement\";\n","import { useCallback, useReducer } from \"react\";\n\nimport { usePopperContext } from \"../PopperContext\";\nimport { PlacementType, PopperPlacement } from \"../types\";\nimport { getElement, makePopperPlacement } from \"../utils\";\n\nexport interface PopperPlacementState {\n  left: number;\n  top: number;\n  activePlacement: PlacementType;\n}\n\ninterface UpdatePlacementAction extends PopperPlacementState {}\n\ntype Actions = UpdatePlacementAction;\n\nexport interface UsePopperPlacementResult extends PopperPlacement {\n  /** function to update popper placement */\n  handlePlacementUpdate: () => void;\n}\n\nconst initialState: PopperPlacementState = {\n  left: 0,\n  top: 0,\n  activePlacement: \"bottom\",\n};\n\nconst reducer = (\n  state: PopperPlacementState,\n  action: Actions\n): PopperPlacementState => {\n  if (\n    action.left !== state.left ||\n    action.top !== state.top ||\n    action.activePlacement !== state.activePlacement\n  ) {\n    return {\n      ...state,\n      top: action.top,\n      left: action.left,\n      activePlacement: action.activePlacement,\n    };\n  } else {\n    return state;\n  }\n};\n\nexport const usePopperPlacement = (\n  popperRef: React.RefObject<HTMLDivElement>\n): UsePopperPlacementResult => {\n  // state for coordinate placement\n  const [{ activePlacement, left, top }, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n\n  // get popper context\n  const {\n    defaultPlacement,\n    distance,\n    interactive,\n    placement,\n    portalRef,\n    skidding,\n    target,\n    targetRef,\n  } = usePopperContext();\n\n  /**\n   * Function that gets popper coordinates and updates state\n   */\n  const handlePlacementUpdate = useCallback(() => {\n    // get element from targetRef or target\n    const element = getElement({ targetRef, target });\n\n    // calculate what the placement of the popper should be relative to target\n    const { activePlacement, left, top } = makePopperPlacement(\n      element,\n      popperRef,\n      {\n        defaultPlacement,\n        distance,\n        interactive,\n        placement,\n        portalRef,\n        skidding,\n      }\n    );\n\n    // only update placement state if the coordinates have changed\n    dispatch({ left, top, activePlacement });\n  }, [\n    defaultPlacement,\n    distance,\n    interactive,\n    placement,\n    popperRef,\n    portalRef,\n    skidding,\n    target,\n    targetRef,\n  ]);\n\n  return { left, top, handlePlacementUpdate, activePlacement };\n};\n","export { useScrollListener } from \"./useScrollListener\";\n","import { useEffect } from \"react\";\n\nimport { usePopperContext } from \"../PopperContext\";\n\nconst debounce = (func: () => void, delay: number): (() => void) => {\n  let timerId;\n\n  return (...args) => {\n    const boundFunc = func.bind(this, ...args);\n\n    clearTimeout(timerId);\n\n    timerId = setTimeout(boundFunc, delay);\n  };\n};\n\n/**\n * scroll listener\n */\nexport const useScrollListener = (placementCallback: () => void): void => {\n  const { isOpen } = usePopperContext();\n\n  useEffect(() => {\n    // if popper is not open, then bail to avoid unnecessary ops\n    if (!isOpen) {\n      return;\n    }\n\n    // debounce the placement callback to happen every 25 milliseconds\n    // to prevent jaggy behavior\n    const debouncedCallback = debounce(() => {\n      placementCallback();\n    }, 25);\n\n    // on user scroll, update placement\n    document.addEventListener(\"scroll\", debouncedCallback, true);\n\n    // cleanup stage\n    return () => {\n      document.removeEventListener(\"scroll\", debouncedCallback, true);\n    };\n  }, [isOpen, placementCallback]);\n};\n","// HTML elements that can be interacted with using the keyboard\nconst interactiveNodeNames = [\n  \"BUTTON\",\n  \"A\",\n  \"INPUT\",\n  \"SELECT\",\n  \"TEXTAREA\",\n  \"DETAILS\",\n];\n\nconst isHTMLElement = (node: ChildNode): node is HTMLElement =>\n  node.nodeType === node.ELEMENT_NODE;\n\nconst isKeyboardInteractive = (node: ChildNode): node is HTMLElement => {\n  if (!isHTMLElement(node)) {\n    return false;\n  }\n\n  if (node.hasAttribute(\"tabindex\")) {\n    // anything with a tabIndex that isn't -1 can be tabbed to\n    if (node.getAttribute(\"tabindex\") !== \"-1\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (interactiveNodeNames.includes(node.nodeName)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Given a popper, iterate over its children to find all interactive elements\n *\n * This list is used to control keyboard blur. When focus lands on one of these elements,\n * it will keep the popper open. When focus leaves, it will close the popper\n */\nexport const extractInteractiveChildren = (\n  popperRef: HTMLElement | null\n): HTMLElement[] => {\n  if (popperRef?.hasChildNodes()) {\n    const childNodes: HTMLElement[] = [];\n\n    popperRef.childNodes.forEach((node) => {\n      if (isKeyboardInteractive(node)) {\n        childNodes.push(node);\n      }\n\n      if (isHTMLElement(node)) {\n        const interactiveChildren = extractInteractiveChildren(node);\n\n        if (interactiveChildren.length) {\n          childNodes.push(...interactiveChildren);\n        }\n      }\n    });\n\n    return childNodes;\n  } else {\n    return [];\n  }\n};\n","export * from \"./extractInteractiveChildren\";\n","import { PlacementType } from \"../../../Popper\";\n\nexport const getAutoPlacement = (\n  element: HTMLElement,\n  {\n    popperHeight,\n    popperWidth,\n  }: {\n    popperHeight: number;\n    popperWidth: number;\n  },\n  defaultPlacement: PlacementType = \"bottom\"\n): PlacementType => {\n  // get coordinates of target on the DOM\n  const { top, right, bottom, left } = element.getBoundingClientRect();\n\n  const windowWidth =\n    window.innerWidth ||\n    /* istanbul ignore next */\n    document.documentElement.clientWidth ||\n    /* istanbul ignore next */\n    document.body.clientWidth;\n  const windowHeight =\n    window.innerHeight ||\n    /* istanbul ignore next */\n    document.documentElement.clientHeight ||\n    /* istanbul ignore next */\n    document.body.clientHeight;\n\n  // the midpoint of the target element horizontally\n  //         here\n  // |-------------------|\n  // |      Button       |\n  // |-------------------|\n  const horizontalElementMiddle = left + (right - left) / 2;\n  // the midpoint of the target element vertically\n  // |-------------------|\n  // |      Button       | here\n  // |-------------------|\n  const verticalElementMiddle = top + (bottom - top) / 2;\n\n  const halfPopperWidth = popperWidth / 2;\n  const halfPopperHeight = popperHeight / 2;\n\n  // the rightmost x coordinate of the popper, if it were in right, right-start or right-end placements\n  const rightRightEdge = right + popperWidth;\n  // the leftmost x coordinate of the popper, if it were in left, left-start or left-end placements\n  const endLeftEdge = right - popperWidth;\n  // the rightmost x coordinate of the popper, if it were in bottom-start or top-start placements\n  const startRightEdge = left + popperWidth;\n  // the leftmost x coordinate of the popper, if it were in left, left-start or left-end placements\n  const leftLeftEdge = left - popperWidth;\n  // the bottommost y coordinate of the popper, if it were in bottom, bottom-start or bottom-end placements\n  const bottomBottomEdge = bottom + popperHeight;\n  // the topmost y coordinate of the popper, if it were in top, top-start or top-end placements\n  const topTopEdge = top - popperHeight;\n  // the rightmost x coordinate of the popper, if it were in top or bottom placements\n  const middleRightEdge = horizontalElementMiddle + halfPopperWidth;\n  // the leftmost x coordinate of the popper, if it were in top or bottom placements\n  const middleLeftEdge = horizontalElementMiddle - halfPopperWidth;\n  // the topmost y coordinate of the popper, if it were in right or left placements\n  const middleTopEdge = verticalElementMiddle - halfPopperHeight;\n  // the bottommost y coordinate of the popper, if it were in right or left placements\n  const middleBottomEdge = verticalElementMiddle + halfPopperHeight;\n\n  if (\n    startRightEdge < windowWidth &&\n    endLeftEdge > 0 &&\n    bottomBottomEdge < windowHeight &&\n    topTopEdge > 0 &&\n    rightRightEdge < windowWidth &&\n    leftLeftEdge > 0\n  ) {\n    // this is in the middle of the screen, use default placement\n    return defaultPlacement;\n  }\n\n  // will the popper's right edge be off screen if we use `*-start`, and off-screen if we use `*-end`?\n  if (startRightEdge > windowWidth && endLeftEdge < 0) {\n    if (middleRightEdge < windowWidth && middleLeftEdge > 0) {\n      if (topTopEdge > 0) {\n        return \"top\";\n      }\n\n      if (bottomBottomEdge < windowHeight) {\n        return \"bottom\";\n      }\n    }\n\n    // some part of the box will be off-screen\n    return defaultPlacement;\n  }\n\n  // will the popper's top edge be off screen with `top-*` but on screen with `bottom-*`?\n  if (topTopEdge < 0 && bottomBottomEdge > windowHeight) {\n    if (middleTopEdge > 0 && middleBottomEdge < windowHeight) {\n      if (rightRightEdge < windowWidth) {\n        return \"right\";\n      }\n\n      if (leftLeftEdge > 0) {\n        return \"left\";\n      }\n    }\n\n    // some part of the box will be off-screen\n    return defaultPlacement;\n    // will the popper's right edge be on screen with `*-start`, but off-screen if we use `*-end`?\n  } else {\n    if (startRightEdge < windowWidth && endLeftEdge < 0) {\n      if (bottomBottomEdge < windowHeight) {\n        return \"bottom-start\";\n      }\n\n      // we know that topTopEdge > 0 because otherwise the\n      // if (topTopEdge < 0 && bottomBottomEdge > windowHeight) {\n      // would have been true\n      return \"top-start\";\n    } else {\n      if (bottomBottomEdge < windowHeight) {\n        return \"bottom-end\";\n      }\n\n      // we know that topTopEdge > 0 because otherwise the\n      // if (topTopEdge < 0 && bottomBottomEdge > windowHeight) {\n      // would have been true\n      return \"top-end\";\n    }\n  }\n};\n","export { getAutoPlacement } from \"./getAutoPlacement\";\n","import { DelayArray, DelayType } from \"../../types\";\n\nexport /**\n * Function that returns an array of delay values if delay\n * is defined, null otherwise\n * @param delay an array of two numbers or a single number\n */\nconst getDelay = (delay: DelayType | undefined): DelayArray | null => {\n  if (Array.isArray(delay)) {\n    return delay;\n  }\n\n  if (typeof delay === \"number\") {\n    return [delay, delay];\n  }\n\n  return null;\n};\n","export { getDelay } from \"./getDelay\";\n","import { PopperContextInterface } from \"../../types\";\n\n/**\n * Returns a DOM element by its ID, if `document` global object is defined\n * @param id string that corresponds to DOM id of object desired\n * @returns element that corresponds to the 'id' supplied, if exists\n */\nconst getElementById = (id: string) => {\n  return typeof document !== \"undefined\" && typeof \"window\" !== \"undefined\"\n    ? document.getElementById(id)\n    : null;\n};\n\nexport const getElement = ({\n  targetRef,\n  target,\n}: Pick<\n  PopperContextInterface,\n  \"target\" | \"targetRef\"\n>): HTMLElement | null => {\n  // if targetRef is defined, get the element from it\n  if (targetRef?.current) {\n    return targetRef.current;\n  }\n\n  // if target is defined, get the element using ID\n  if (target) {\n    return getElementById(target);\n  }\n\n  // if neither is defined, return null\n  return null;\n};\n","export { getElement } from \"./getElement\";\n","import { normalizeDimension } from \"../normalizeDimension\";\n\n/**\n *\n * @param popperRef\n */\nexport const getPopperDimensions = (\n  popperRef: React.RefObject<HTMLElement>\n): [number, number] => {\n  // get the dimensions of the Popper element\n  const elementHeight = normalizeDimension(\n    popperRef.current?.getBoundingClientRect().height || 0\n  );\n  const elementWidth = normalizeDimension(\n    popperRef.current?.getBoundingClientRect().width || 0\n  );\n\n  return [elementHeight, elementWidth];\n};\n","export { getPopperDimensions } from \"./getPopperDimensions\";\n","import { RefObject } from \"react\";\n\nimport { TargetCoordinates } from \"../../types\";\n\n/**\n * Get coordinates for the target element on the DOM\n * @param element an HTML element instance\n * @param portalRef ref of Portal inside which Popper will be rendered\n */\nexport const getTargetCoordinates = <P extends HTMLElement = HTMLDivElement>(\n  element: HTMLElement,\n  portalRef?: RefObject<P>\n): TargetCoordinates => {\n  // calculate any offsets based on scroll and/or page layout behavior\n  const pageLeftOffset =\n    window.pageXOffset || document.documentElement.scrollLeft;\n  const pageTopOffset =\n    window.pageYOffset || document.documentElement.scrollTop;\n\n  // get the coordinates of the target element\n  const rect = element.getBoundingClientRect();\n\n  // if portalRef.current is defined, then calculate element's\n  // positioning relative to the portal parent\n  if (portalRef?.current) {\n    // get portalRef's parent bounding rect\n    const parentRect = portalRef.current.getBoundingClientRect();\n\n    // return relative coordinates\n    return {\n      top: rect.top - parentRect.top + pageTopOffset,\n      right: rect.width,\n      bottom: rect.height,\n      left: rect.left - parentRect.left + pageLeftOffset,\n    };\n  }\n\n  // if portalRef.current isn't defined,\n  // then return the absolute coords\n  return {\n    top: rect.top + pageTopOffset,\n    right: rect.width,\n    bottom: rect.height,\n    left: rect.left + pageLeftOffset,\n  };\n};\n","export { getTargetCoordinates } from \"./getTargetCoordinates\";\n","import { PlacementType } from \"../../types\";\n\n/**\n * Function that returns a percent value to determine horizontal placement of the\n * tip based on the placement prop\n * @param placement string value for where popper should be placed\n * @returns a string containing a percentage value (e.g. \"50%\")\n */\nexport const horizontalPlacementSelector = (\n  placement: PlacementType,\n  targetDimensions: DOMRect | undefined,\n  popperDimensions: DOMRect | undefined\n): string => {\n  if (placement && placement.includes(\"start\")) {\n    if (targetDimensions && popperDimensions) {\n      const tipPlacement = Math.min(\n        targetDimensions.height * 0.7,\n        popperDimensions.height * 0.3\n      );\n\n      return `${Math.round(tipPlacement)}px`;\n    }\n\n    return \"30%\";\n  }\n\n  if (placement && placement.includes(\"end\")) {\n    if (targetDimensions && popperDimensions) {\n      const tipPlacement = Math.max(\n        popperDimensions.height - targetDimensions.height * 0.7,\n        popperDimensions.height * 0.7\n      );\n\n      return `${Math.round(tipPlacement)}px`;\n    }\n\n    return \"70%\";\n  }\n\n  return \"50%\";\n};\n","export * from \"./horizontalPlacementSelector\";\n","export { extractInteractiveChildren } from \"./extractInteractiveChildren\";\n\nexport { getDelay } from \"./getDelay\";\n\nexport { getElement } from \"./getElement\";\n\nexport { getPopperDimensions } from \"./getPopperDimensions\";\n\nexport { getTargetCoordinates } from \"./getTargetCoordinates\";\n\nexport { getAutoPlacement } from \"./getAutoPlacement\";\n\nexport { isMouseOverTarget } from \"./isMouseOverTarget\";\n\nexport { makePopperPlacement } from \"./makePopperPlacement\";\n\nexport * from \"./horizontalPlacementSelector\";\n\nexport * from \"./verticalPlacementSelector\";\n","export { isMouseOverTarget } from \"./isMouseOverTarget\";\n","export const isMouseOverTarget = (\n  event: MouseEvent,\n  target: HTMLElement\n): boolean => {\n  // get box coordinates for the target element\n  const { x: minX, y: minY, width, height } = target.getBoundingClientRect();\n\n  // compute max X and max Y allowed based on x,y coordinates and width,height\n  const maxX = minX + width;\n  const maxY = minY + height;\n\n  // determine whether the mouse event is within bounds\n  const withinX = event.clientX >= minX && event.clientX <= maxX;\n  const withinY = event.clientY >= minY && event.clientY <= maxY;\n\n  // return true if mouse is inside the target area\n  return withinX && withinY;\n};\n","export { makePopperPlacement } from \"./makePopperPlacement\";\n","import { PopperContextInterface, PopperPlacement } from \"../../types\";\nimport { getTargetCoordinates } from \"../getTargetCoordinates\";\nimport { getPopperDimensions } from \"../getPopperDimensions\";\nimport { getAutoPlacement } from \"../getAutoPlacement\";\n\nexport const makePopperPlacement = (\n  element: HTMLElement | null,\n  popperRef: React.RefObject<HTMLElement>,\n  {\n    defaultPlacement,\n    distance = 0,\n    interactive,\n    placement,\n    portalRef,\n    skidding = 0,\n  }: Partial<PopperContextInterface>\n): PopperPlacement => {\n  // if element is not defined, short-circuit\n  if (!element) {\n    return {\n      left: 0,\n      top: 0,\n      activePlacement: \"bottom\",\n    };\n  }\n\n  // calculate offset to ensure that overlap of popper when interactive\n  const interactiveOffset = interactive ? -10 : 0;\n\n  // get coordinates of target on the DOM\n  const targetCoordinates = getTargetCoordinates(element, portalRef);\n\n  // get the dimensions of the Popper element\n  const [popperHeight, popperWidth] = getPopperDimensions(popperRef);\n\n  // auto-placement calculations, if 'placement' is 'auto'\n  const activePlacement =\n    placement !== \"auto\"\n      ? placement\n      : getAutoPlacement(\n          element,\n          { popperHeight, popperWidth },\n          defaultPlacement\n        );\n\n  // break up coords for easier readability\n  const { top, right, bottom, left } = targetCoordinates;\n\n  // determine final placement of Popper\n  switch (activePlacement) {\n    case \"bottom\":\n      return {\n        left: left + (right - popperWidth) / 2 + skidding,\n        top: top + bottom + interactiveOffset + distance,\n        activePlacement,\n      };\n    case \"bottom-start\":\n      return {\n        left: left + skidding + interactiveOffset,\n        top: top + bottom + interactiveOffset + distance,\n        activePlacement,\n      };\n    case \"bottom-end\":\n      return {\n        left: left - (popperWidth - right) + skidding - interactiveOffset,\n        top: top + bottom + interactiveOffset + distance,\n        activePlacement,\n      };\n    case \"top\":\n      return {\n        left: left + (right - popperWidth) / 2 + skidding,\n        top: top - popperHeight - interactiveOffset - distance,\n        activePlacement,\n      };\n    case \"top-start\":\n      return {\n        left: left + skidding + interactiveOffset,\n        top: top - popperHeight - interactiveOffset - distance,\n        activePlacement,\n      };\n    case \"top-end\":\n      return {\n        left: left - (popperWidth - right) + skidding - interactiveOffset,\n        top: top - popperHeight - interactiveOffset - distance,\n        activePlacement,\n      };\n    case \"right\":\n      return {\n        left: left + right + interactiveOffset + distance,\n        top: top + (bottom - popperHeight) / 2 + skidding,\n        activePlacement,\n      };\n    case \"right-start\":\n      return {\n        left: left + right + interactiveOffset + distance,\n        top: top + skidding + interactiveOffset,\n        activePlacement,\n      };\n    case \"right-end\":\n      return {\n        left: left + right + interactiveOffset + distance,\n        top: top - (popperHeight - bottom) + skidding - interactiveOffset,\n        activePlacement,\n      };\n    case \"left\":\n      return {\n        left: left - popperWidth - interactiveOffset - distance,\n        top: top + bottom / 2 - popperHeight / 2 + skidding,\n        activePlacement,\n      };\n    case \"left-start\":\n      return {\n        left: left - popperWidth - interactiveOffset - distance,\n        top: top + skidding + interactiveOffset,\n        activePlacement,\n      };\n    case \"left-end\":\n      return {\n        left: left - popperWidth - interactiveOffset - distance,\n        top: top - (popperHeight - bottom) + skidding - interactiveOffset,\n        activePlacement,\n      };\n    default:\n      return {\n        left: left + (right - popperWidth) / 2 + skidding,\n        top: top - popperHeight - interactiveOffset - distance,\n        activePlacement: \"bottom\",\n      };\n  }\n};\n","export * from \"./normalizeDimension\";\n","/**\n * Ensure rounding errors don't cause infinite loops\n *\n * This function was created to address https://jira.braze.com/browse/DASHI-1642\n * where just hovering over the clear indicator for a beacon select would trigger\n * an infinite loop. The issue only manifested in Firefox. Upon inspection of the\n * values, it turned out the popperWidth was oscillating between 2 values:\n * - 131.95001220703125\n * - 131.9499969482422\n *\n * In Chrome, on the other hand, it only used a popperWidth of 131.95, resulting in just 2 renders,\n * the initial, and the render to place the tooltip.\n *\n * This function brings the 2 browsers into parity, as fractional values of a pixel don't have any\n * functional meaning in the DOM. To be safe, in case 8k monitors change things in the future, this\n * preserves up to 1/100th of a pixel.\n */\nexport const normalizeDimension = (value: number): number =>\n  parseFloat(value.toFixed(2));\n","export * from \"./verticalPlacementSelector\";\n","import { PlacementType } from \"../../types\";\n\n/**\n * Function that returns a percent value to determine vertical placement of the\n * tip based on the placement prop\n * @param placement string value for where popper should be placed\n * @returns a string containing a percentage value (e.g. \"50%\")\n */\nexport const verticalPlacementSelector = (\n  placement: PlacementType,\n  targetDimensions: DOMRect | undefined,\n  popperDimensions: DOMRect | undefined\n): string => {\n  if (placement && placement.includes(\"start\")) {\n    if (targetDimensions && popperDimensions) {\n      const tipPlacement = Math.min(\n        targetDimensions.width * 0.8,\n        popperDimensions.width * 0.2\n      );\n\n      return `${Math.round(tipPlacement)}px`;\n    }\n\n    return \"20%\";\n  }\n\n  if (placement && placement.includes(\"end\")) {\n    if (targetDimensions && popperDimensions) {\n      const tipPlacement = Math.max(\n        popperDimensions.width - targetDimensions.width * 0.8,\n        popperDimensions.width * 0.8\n      );\n\n      return `${Math.round(tipPlacement)}px`;\n    }\n\n    return \"80%\";\n  }\n\n  return \"50%\";\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs/blocks\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"portal\"\n    }}>{`Portal`}</h1>\n    <p>{`Portals provide a first-class way to render children into a DOM node that\nexists outside the DOM hierarchy of the parent component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: if you wish to portal your children into a specific div not at the\nbottom of the page, use `}<inlineCode parentName=\"p\">{`React.createPortal`}</inlineCode>{` directly`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Portal`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-portal--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"unmounting\"\n    }}>{`Unmounting`}</h3>\n    <p>{`You can unmount the Portal and it's children by just removing it from the render tree,\nlike any other React component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-portal--unmount\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Portal } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM node override to use portal into`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\n\\nimport { BodyText } from \\\"../BodyText\\\";\\nimport { Heading } from \\\"../Heading\\\";\\nimport { Button } from \\\"../Button\\\";\\n\\nimport page from \\\"./Portal.docs.mdx\\\";\\n\\nimport { Portal } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Portal\\\",\\n  component: Portal,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = (): React.ReactElement => {\\n  return (\\n    <div>\\n      <Heading level={2}>Portal</Heading>\\n      <BodyText>See bottom of page for the rendered component</BodyText>\\n      <Portal>\\n        A <code>Portal</code> is a helper wrapper for{\\\" \\\"}\\n        <code>React.createPortal</code>. This portal is rendered at the bottom\\n        of the page.\\n      </Portal>\\n    </div>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const Unmount = (): React.ReactElement => {\\n  const [isOpen, setIsOpen] = useState(true);\\n\\n  return (\\n    <div>\\n      <Heading level={2}>Portal</Heading>\\n      <BodyText>See bottom of page for the rendered component</BodyText>\\n      <div>\\n        <Button onClick={() => setIsOpen(!isOpen)}>\\n          Click to Toggle Portal\\n        </Button>\\n        {isOpen ? (\\n          <Portal>\\n            A <code>Portal</code> is a helper wrapper for{\\\" \\\"}\\n            <code>React.createPortal</code>. This portal is rendered at the\\n            bottom of the page.\\n          </Portal>\\n        ) : null}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nUnmount.storyName = \\\"unmount\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":20},\"endLoc\":{\"col\":1,\"line\":32},\"startBody\":{\"col\":24,\"line\":20},\"endBody\":{\"col\":1,\"line\":32}},\"Unmount\":{\"startLoc\":{\"col\":23,\"line\":36},\"endLoc\":{\"col\":1,\"line\":57},\"startBody\":{\"col\":23,\"line\":36},\"endBody\":{\"col\":1,\"line\":57}}};\n    \nimport React, { useState } from \"react\";\n\nimport { BodyText } from \"../BodyText\";\nimport { Heading } from \"../Heading\";\nimport { Button } from \"../Button\";\n\nimport page from \"./Portal.docs.mdx\";\n\nimport { Portal } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Portal\",\n  component: Portal,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = (): React.ReactElement => {\n  return (\n    <div>\n      <Heading level={2}>Portal</Heading>\n      <BodyText>See bottom of page for the rendered component</BodyText>\n      <Portal>\n        A <code>Portal</code> is a helper wrapper for{\" \"}\n        <code>React.createPortal</code>. This portal is rendered at the bottom\n        of the page.\n      </Portal>\n    </div>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nexport const Unmount = (): React.ReactElement => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <div>\n      <Heading level={2}>Portal</Heading>\n      <BodyText>See bottom of page for the rendered component</BodyText>\n      <div>\n        <Button onClick={() => setIsOpen(!isOpen)}>\n          Click to Toggle Portal\n        </Button>\n        {isOpen ? (\n          <Portal>\n            A <code>Portal</code> is a helper wrapper for{\" \"}\n            <code>React.createPortal</code>. This portal is rendered at the\n            bottom of the page.\n          </Portal>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nUnmount.storyName = \"unmount\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <div>\\n      <Heading level={2}>Portal</Heading>\\n      <BodyText>See bottom of page for the rendered component</BodyText>\\n      <Portal>\\n        A <code>Portal</code> is a helper wrapper for{\\\" \\\"}\\n        <code>React.createPortal</code>. This portal is rendered at the bottom\\n        of the page.\\n      </Portal>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nUnmount.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [isOpen, setIsOpen] = useState(true);\\n\\n  return (\\n    <div>\\n      <Heading level={2}>Portal</Heading>\\n      <BodyText>See bottom of page for the rendered component</BodyText>\\n      <div>\\n        <Button onClick={() => setIsOpen(!isOpen)}>\\n          Click to Toggle Portal\\n        </Button>\\n        {isOpen ? (\\n          <Portal>\\n            A <code>Portal</code> is a helper wrapper for{\\\" \\\"}\\n            <code>React.createPortal</code>. This portal is rendered at the\\n            bottom of the page.\\n          </Portal>\\n        ) : null}\\n      </div>\\n    </div>\\n  );\\n}\" }, ...Unmount.parameters };","import React, { useRef, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport classNames from \"classnames\";\nimport { useId } from \"@braze/beacon-hooks\";\n\nimport { PortalProps } from \"./types\";\n\n// Note: we cannot fully test this, as it requires server-side rendering\nexport const canUseDOM = !!(\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n);\n\n/**\n * @param id: string that will be used as the DOM id of the portal root\n * @param className: string that will be used as the DOM class name of the portal root\n * @returns a DOM node that gets mounted to the document and is the render target\n * of the React portal.\n */\nexport function usePortal(\n  id?: string,\n  className?: string\n): HTMLDivElement | null {\n  // we cannot fully test this, as it requires server-side rendering\n  /* istanbul ignore next */\n  const domNode = useRef<HTMLDivElement>(\n    canUseDOM ? document.createElement(\"div\") : null\n  );\n\n  useEffect(() => {\n    // we cannot test this, as it requires server-side rendering\n    /* istanbul ignore next */\n    if (!canUseDOM || !domNode.current) {\n      // if DOM unavailable, then bail\n      return;\n    }\n\n    const currentNode = domNode.current;\n\n    currentNode.setAttribute(\n      \"class\",\n      classNames(\"bcl-Portal\", \"bcl-portal\", className)\n    );\n\n    currentNode.setAttribute(\"id\", id || \"portal--container\");\n\n    currentNode.setAttribute(\"tabindex\", \"-1\");\n\n    document.body.appendChild(currentNode);\n\n    return () => {\n      document.body.removeChild(currentNode);\n    };\n  }, [className, domNode, id]);\n\n  return domNode.current;\n}\n\n/**\n * Portal is a wrapper for ReactDOM.createPortal that lets you use it in a declarative\n * fashion. This should be used as the basis for anything rendered above-stream\n * (anything that requires a z-index, like: tooltips, popovers, dialogs, menus, etc).\n */\nexport const Portal = ({\n  children,\n  className,\n  id,\n  node,\n}: PortalProps): React.ReactElement | null => {\n  // Unique global id that we assign to the DOM node\n  const uid = useId(\"bcl-portal\");\n  const portalId = id || uid;\n  const target = usePortal(portalId, className);\n\n  // we cannot test this, as it requires server-side rendering\n  /* istanbul ignore next */\n  if (!target) {\n    // if target is null, then bail\n    return null;\n  }\n\n  return ReactDOM.createPortal(children, node?.current || target);\n};\n","export { Portal } from \"./Portal\";\n\nexport type { PortalProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"radiobutton\"\n    }}>{`RadioButton`}</h1>\n    <p>{`A radio is a form of control allowing users to pick a single option\nfrom the group. All possible options are exposed upfront for users\nto compare.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`RadioButton`}</inlineCode>{` component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: for use cases involving multiple `}<inlineCode parentName=\"p\">{`RadioButtons`}</inlineCode>{` used together,\nplease refer to the `}<inlineCode parentName=\"p\">{`RadioButtonGroup`}</inlineCode>{` stories.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`It is important to note that the `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`defaultChecked`}</inlineCode>{` props\nare only used with isolated `}<inlineCode parentName=\"p\">{`RadioButton`}</inlineCode>{`s. When using in the context\nof a `}<inlineCode parentName=\"p\">{`RadioButtonGroup`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` of the `}<inlineCode parentName=\"p\">{`RadioButtonGroup`}</inlineCode>{` controls\nthe individual `}<inlineCode parentName=\"p\">{`RadioButton`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` prop. See the `}<inlineCode parentName=\"p\">{`RadioButtonGroup`}</inlineCode>{`\nstories for examples there.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-radiobutton--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-children\"\n    }}>{`With children`}</h3>\n    <p>{`Rather than using the `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` prop, you can also pass in content as\nchildren to render a label. Note that when both `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{`\nprops are present, only `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` will be rendered.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-radiobutton--with-children\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-help-text\"\n    }}>{`With help text`}</h3>\n    <p><inlineCode parentName=\"p\">{`RadioButton`}</inlineCode>{` can also be used with a help text underneath,\ninforming the user about the consequences of their selection.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-radiobutton--with-help-text\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid-entry\"\n    }}>{`Invalid entry`}</h3>\n    <p>{`Most commonly, a radio button may be displayed as `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` if\na user fails to make selection when prompted.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-radiobutton--invalid-entry\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"controlling-the-radio-button-state-programmatically\"\n    }}>{`Controlling the radio button state programmatically`}</h2>\n    <p>{`Controlling the radio button's checked state via external state is also possible.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-forms-radiobutton--update-programmatically-later\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { RadioButton } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`checked`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates whether the radio button should be marked as checked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into label component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`containerClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed into the radio button container; use as escape hatch`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`defaultChecked`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates whether the radio button should default to checked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates whether the radio button should be disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`errorText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text to be shown to the user if 'invalid' prop is true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`helpText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text to be shown if the invalid prop is false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`helpTextClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed into the help text; use as escape hatch`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the current state of the radio button is invalid`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalidRadioOnly`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`only set the radio to invalid state, don't display the error text`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`label to be displayed alongside radio button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`labelClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed into the label; use as escape hatch`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLInputElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`sring`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be passed to the change event`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport { Button } from \\\"../Button\\\";\\n\\nimport page from \\\"./RadioButton.docs.mdx\\\";\\n\\nimport { RadioButton, RadioButtonProps } from \\\".\\\";\\n\\ninterface ConnectedRadioButtonProps extends RadioButtonProps {\\n  defaultChecked?: boolean;\\n  disabled: boolean;\\n  invalid: boolean;\\n}\\n\\n\\nexport default {\\n  title: \\\"Core/Forms/RadioButton\\\",\\n  component: RadioButton,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nconst ConnectedRadioButton = ({\\n  defaultChecked = false,\\n  disabled,\\n  invalid,\\n  ...props\\n}: ConnectedRadioButtonProps) => {\\n  const [checked, setChecked] = useState(defaultChecked);\\n\\n  const handleChange = (event) => {\\n    setChecked(!checked);\\n\\n    action(\\\"change\\\")(event);\\n  };\\n\\n  return (\\n    <RadioButton\\n      {...props}\\n      disabled={disabled}\\n      invalid={!checked && invalid}\\n      checked={checked}\\n      onChange={handleChange}\\n    />\\n  );\\n};\\n\\nexport const BasicUse = (args: ConnectedRadioButtonProps) => {\\n  return <ConnectedRadioButton defaultChecked name=\\\"hi\\\" {...args} />;\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nBasicUse.args = {\\n  disabled: false,\\n  label: \\\"Send as soon as campaign is launched\\\",\\n  invalid: false,\\n  value: \\\"hi\\\",\\n};\\n\\nexport const WithChildren = ({ label, ...args }: ConnectedRadioButtonProps) => {\\n  return (\\n    <ConnectedRadioButton defaultChecked name=\\\"whatsup\\\" {...args}>\\n      {label}\\n    </ConnectedRadioButton>\\n  );\\n};\\n\\nWithChildren.storyName = \\\"with children\\\";\\n\\nWithChildren.args = {\\n  disabled: false,\\n  label: \\\"Send as soon as campaign is launched\\\",\\n  invalid: false,\\n  value: \\\"whatsup\\\",\\n};\\n\\nexport const WithHelpText = (args: ConnectedRadioButtonProps) => {\\n  return <ConnectedRadioButton name=\\\"hello\\\" {...args} />;\\n};\\n\\nWithHelpText.storyName = \\\"with help text\\\";\\n\\nWithHelpText.args = {\\n  disabled: false,\\n  label: \\\"Send at a designated time\\\",\\n  helpText: \\\"Choose an optimal time for users to receive this message\\\",\\n  invalid: false,\\n  value: \\\"hello\\\",\\n};\\n\\nexport const InvalidEntry = (args: ConnectedRadioButtonProps) => {\\n  return <ConnectedRadioButton {...args} name=\\\"bye\\\" invalid />;\\n};\\n\\nInvalidEntry.storyName = \\\"invalid entry\\\";\\n\\nInvalidEntry.args = {\\n  disabled: false,\\n  label: \\\"Send at a designated time\\\",\\n  helpText: \\\"Choose an optimal time for users to receive this message\\\",\\n  errorText: \\\"This must be selected\\\",\\n  invalid: false,\\n  value: \\\"bye\\\",\\n};\\n\\nexport const UpdateProgrammaticallyLater = (args: RadioButtonProps) => {\\n  const [checked, setChecked] = useState(false);\\n\\n  return (\\n    <div>\\n      <RadioButton\\n        {...args}\\n        checked={checked}\\n        name=\\\"programmatic\\\"\\n        onChange={(e) => setChecked(!!(e.target as any).value)}\\n      />\\n      <Button\\n        variant=\\\"primary\\\"\\n        onClick={() => setChecked((checked) => !checked)}\\n      >\\n        Toggle radio button\\n      </Button>\\n      <div>{checked ? \\\"should be checked\\\" : \\\"should not be checked\\\"}</div>\\n    </div>\\n  );\\n};\\n\\nUpdateProgrammaticallyLater.storyName = \\\"update programmatically later\\\";\\n\\nUpdateProgrammaticallyLater.args = {\\n  label: \\\"Send as soon as campaign is launched\\\",\\n  value: \\\"programmatic\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":50},\"endLoc\":{\"col\":1,\"line\":52},\"startBody\":{\"col\":24,\"line\":50},\"endBody\":{\"col\":1,\"line\":52}},\"WithChildren\":{\"startLoc\":{\"col\":28,\"line\":63},\"endLoc\":{\"col\":1,\"line\":69},\"startBody\":{\"col\":28,\"line\":63},\"endBody\":{\"col\":1,\"line\":69}},\"WithHelpText\":{\"startLoc\":{\"col\":28,\"line\":80},\"endLoc\":{\"col\":1,\"line\":82},\"startBody\":{\"col\":28,\"line\":80},\"endBody\":{\"col\":1,\"line\":82}},\"InvalidEntry\":{\"startLoc\":{\"col\":28,\"line\":94},\"endLoc\":{\"col\":1,\"line\":96},\"startBody\":{\"col\":28,\"line\":94},\"endBody\":{\"col\":1,\"line\":96}},\"UpdateProgrammaticallyLater\":{\"startLoc\":{\"col\":43,\"line\":109},\"endLoc\":{\"col\":1,\"line\":129},\"startBody\":{\"col\":43,\"line\":109},\"endBody\":{\"col\":1,\"line\":129}}};\n    \nimport React, { useState } from \"react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport { Button } from \"../Button\";\n\nimport page from \"./RadioButton.docs.mdx\";\n\nimport { RadioButton, RadioButtonProps } from \".\";\n\ninterface ConnectedRadioButtonProps extends RadioButtonProps {\n  defaultChecked?: boolean;\n  disabled: boolean;\n  invalid: boolean;\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Forms/RadioButton\",\n  component: RadioButton,\n  parameters: {\n    docs: { page },\n  },\n};\n\nconst ConnectedRadioButton = ({\n  defaultChecked = false,\n  disabled,\n  invalid,\n  ...props\n}: ConnectedRadioButtonProps) => {\n  const [checked, setChecked] = useState(defaultChecked);\n\n  const handleChange = (event) => {\n    setChecked(!checked);\n\n    action(\"change\")(event);\n  };\n\n  return (\n    <RadioButton\n      {...props}\n      disabled={disabled}\n      invalid={!checked && invalid}\n      checked={checked}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport const BasicUse = (args: ConnectedRadioButtonProps) => {\n  return <ConnectedRadioButton defaultChecked name=\"hi\" {...args} />;\n};;\n\nBasicUse.storyName = \"basic use\";\n\nBasicUse.args = {\n  disabled: false,\n  label: \"Send as soon as campaign is launched\",\n  invalid: false,\n  value: \"hi\",\n};\n\nexport const WithChildren = ({ label, ...args }: ConnectedRadioButtonProps) => {\n  return (\n    <ConnectedRadioButton defaultChecked name=\"whatsup\" {...args}>\n      {label}\n    </ConnectedRadioButton>\n  );\n};;\n\nWithChildren.storyName = \"with children\";\n\nWithChildren.args = {\n  disabled: false,\n  label: \"Send as soon as campaign is launched\",\n  invalid: false,\n  value: \"whatsup\",\n};\n\nexport const WithHelpText = (args: ConnectedRadioButtonProps) => {\n  return <ConnectedRadioButton name=\"hello\" {...args} />;\n};;\n\nWithHelpText.storyName = \"with help text\";\n\nWithHelpText.args = {\n  disabled: false,\n  label: \"Send at a designated time\",\n  helpText: \"Choose an optimal time for users to receive this message\",\n  invalid: false,\n  value: \"hello\",\n};\n\nexport const InvalidEntry = (args: ConnectedRadioButtonProps) => {\n  return <ConnectedRadioButton {...args} name=\"bye\" invalid />;\n};;\n\nInvalidEntry.storyName = \"invalid entry\";\n\nInvalidEntry.args = {\n  disabled: false,\n  label: \"Send at a designated time\",\n  helpText: \"Choose an optimal time for users to receive this message\",\n  errorText: \"This must be selected\",\n  invalid: false,\n  value: \"bye\",\n};\n\nexport const UpdateProgrammaticallyLater = (args: RadioButtonProps) => {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <div>\n      <RadioButton\n        {...args}\n        checked={checked}\n        name=\"programmatic\"\n        onChange={(e) => setChecked(!!(e.target as any).value)}\n      />\n      <Button\n        variant=\"primary\"\n        onClick={() => setChecked((checked) => !checked)}\n      >\n        Toggle radio button\n      </Button>\n      <div>{checked ? \"should be checked\" : \"should not be checked\"}</div>\n    </div>\n  );\n};\n\nUpdateProgrammaticallyLater.storyName = \"update programmatically later\";\n\nUpdateProgrammaticallyLater.args = {\n  label: \"Send as soon as campaign is launched\",\n  value: \"programmatic\",\n};\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: ConnectedRadioButtonProps) => {\\n  return <ConnectedRadioButton defaultChecked name=\\\"hi\\\" {...args} />;\\n}\" }, ...BasicUse.parameters };\nWithChildren.parameters = { storySource: { source: \"({ label, ...args }: ConnectedRadioButtonProps) => {\\n  return (\\n    <ConnectedRadioButton defaultChecked name=\\\"whatsup\\\" {...args}>\\n      {label}\\n    </ConnectedRadioButton>\\n  );\\n}\" }, ...WithChildren.parameters };\nWithHelpText.parameters = { storySource: { source: \"(args: ConnectedRadioButtonProps) => {\\n  return <ConnectedRadioButton name=\\\"hello\\\" {...args} />;\\n}\" }, ...WithHelpText.parameters };\nInvalidEntry.parameters = { storySource: { source: \"(args: ConnectedRadioButtonProps) => {\\n  return <ConnectedRadioButton {...args} name=\\\"bye\\\" invalid />;\\n}\" }, ...InvalidEntry.parameters };\nUpdateProgrammaticallyLater.parameters = { storySource: { source: \"(args: RadioButtonProps) => {\\n  const [checked, setChecked] = useState(false);\\n\\n  return (\\n    <div>\\n      <RadioButton\\n        {...args}\\n        checked={checked}\\n        name=\\\"programmatic\\\"\\n        onChange={(e) => setChecked(!!(e.target as any).value)}\\n      />\\n      <Button\\n        variant=\\\"primary\\\"\\n        onClick={() => setChecked((checked) => !checked)}\\n      >\\n        Toggle radio button\\n      </Button>\\n      <div>{checked ? \\\"should be checked\\\" : \\\"should not be checked\\\"}</div>\\n    </div>\\n  );\\n}\" }, ...UpdateProgrammaticallyLater.parameters };","import React, { useRef } from \"react\";\nimport classNames from \"classnames\";\n\nimport { Flex } from \"../Flex\";\nimport { HelpText } from \"../HelpText\";\nimport { StatusText } from \"../StatusText\";\n\nimport { RadioButtonProps } from \"./types\";\nimport { RadioLabel } from \"./RadioLabel\";\nimport { StyledRadioButton } from \"./StyledRadioButton\";\n\nexport const RadioButton = React.forwardRef(\n  (\n    {\n      children,\n      id,\n      containerClassName,\n      checked,\n      disabled,\n      errorText,\n      helpText,\n      helpTextClassName,\n      invalid,\n      invalidRadioOnly,\n      label,\n      labelClassName,\n      ...props\n    }: RadioButtonProps,\n    ref: React.RefObject<HTMLInputElement>\n  ) => {\n    const fakeId = useRef<string>(\n      `radio-button-${Math.floor(Math.random() * 1000000000)}`\n    );\n    const activeId = id || fakeId.current;\n\n    return (\n      <Flex direction=\"column\">\n        <StyledRadioButton\n          className={classNames(\"bcl-radio-button\", containerClassName)}\n        >\n          <input\n            {...props}\n            ref={ref}\n            type=\"radio\"\n            id={activeId}\n            checked={checked}\n            disabled={disabled}\n          />\n          {(children || label) && (\n            <RadioLabel\n              htmlFor={activeId}\n              checked={checked}\n              className={labelClassName}\n              invalid={invalid}\n              disabled={disabled}\n            >\n              {children || label}\n            </RadioLabel>\n          )}\n        </StyledRadioButton>\n\n        {helpText && (!invalid || invalidRadioOnly) && (\n          <HelpText className={helpTextClassName} disabled={disabled}>\n            {helpText}\n          </HelpText>\n        )}\n        {invalid && errorText && !invalidRadioOnly && (\n          <StatusText>{errorText}</StatusText>\n        )}\n      </Flex>\n    );\n  }\n);\n\nRadioButton.displayName = \"RadioButton\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { RadioLabelProps } from \"../types\";\n\nimport { StyledRadioLabel } from \"./StyledRadioLabel\";\n\nexport const RadioLabel = ({\n  children,\n  className,\n  ...props\n}: RadioLabelProps): React.ReactElement => (\n  <StyledRadioLabel {...props} className={classNames([\"bcl-label\", className])}>\n    <span>{children}</span>\n  </StyledRadioLabel>\n);\n","import styled, { css } from \"styled-components\";\nimport {\n  colorSelector,\n  intentColorSelector,\n  getFontFamily,\n  borderWidthSelector,\n  getColor,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledRadioLabelProps } from \"../types\";\nimport { Label } from \"../../Label\";\n\nconst mdRadioSize = 18;\nconst mdRadioCheckedSize = 12;\n\nfunction borderSwitch({\n  checked,\n  disabled,\n  invalid,\n  ...props\n}: StyledRadioLabelProps) {\n  if (disabled) {\n    return colorSelector(props, \"gray\", 300);\n  }\n\n  if (checked) {\n    return intentColorSelector(props, \"info\", 500);\n  }\n\n  if (invalid) {\n    return intentColorSelector(props, \"danger\", 500);\n  }\n\n  return colorSelector(props, \"gray\", 400);\n}\n\nexport const radioButtonShadowCss = css`\n  box-shadow: 0 0 0 5px ${getColor(\"gray\", 100)};\n`;\n\nexport const StyledRadioLabel = styled(Label)<StyledRadioLabelProps>`\n  min-height: ${mdRadioSize + 2}px;\n  padding: 0 ${mdRadioSize + 12}px;\n  margin-bottom: 0 !important;\n  cursor: pointer;\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  color: ${(props) =>\n    props.disabled\n      ? colorSelector(props, \"gray\", 400)\n      : colorSelector(props, \"gray\", 900)};\n\n  &:before,\n  &:after {\n    position: absolute;\n    content: \"\";\n    border-radius: 50%;\n    transition: 0.15s all;\n  }\n\n  &:before {\n    left: 0;\n    top: 0;\n    width: ${(props) => (props.invalid ? mdRadioSize - 1 : mdRadioSize)}px;\n    height: ${(props) => (props.invalid ? mdRadioSize - 1 : mdRadioSize)}px;\n    border-color: ${borderSwitch};\n    border-style: solid;\n    border-width: ${(props) =>\n      props.invalid\n        ? borderWidthSelector(props, \"thick\")\n        : borderWidthSelector(props, \"thin\")};\n    background: ${(props) =>\n      props.disabled && colorSelector(props, \"gray\", 100)};\n  }\n\n  &:hover::before {\n    ${radioButtonShadowCss}\n  }\n\n  &:after {\n    top: ${(mdRadioSize - mdRadioCheckedSize) / 2 + 1}px;\n    left: ${(mdRadioSize - mdRadioCheckedSize) / 2 + 1}px;\n    width: ${(props) =>\n      props.invalid ? mdRadioCheckedSize + 1 : mdRadioCheckedSize}px;\n    height: ${(props) =>\n      props.invalid ? mdRadioCheckedSize + 1 : mdRadioCheckedSize}px;\n    background: ${(props) =>\n      !props.disabled\n        ? intentColorSelector(props, \"info\", 500)\n        : colorSelector(props, \"gray\", 300)};\n    opacity: 0;\n  }\n\n  span {\n    line-height: 1.7;\n  }\n`;\n","export { RadioLabel } from \"./RadioLabel\";\n\nexport { radioButtonShadowCss } from \"./StyledRadioLabel\";\n\nexport type { RadioLabelProps } from \"../types\";\n","import styled from \"styled-components\";\n\nimport { StyledHelpText } from \"../HelpText\";\n\nimport { StyledRadioButtonProps } from \"./types\";\nimport { radioButtonShadowCss } from \"./RadioLabel\";\n\nexport const StyledRadioButton = styled.div<StyledRadioButtonProps>`\n  position: relative;\n  display: inline-flex;\n\n  input[type=\"radio\"] {\n    opacity: 0;\n    margin: 0;\n    width: 0;\n\n    &:focus + label:before {\n      ${radioButtonShadowCss}\n    }\n\n    &:checked + label:after {\n      opacity: 1;\n    }\n  }\n\n  & + ${StyledHelpText} {\n    margin-top: 0rem;\n    padding-left: 30px;\n  }\n`;\n","export { RadioButton } from \"./RadioButton\";\n\nexport type { RadioButtonProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { withKnobs } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Button } from \"../Button\";\nimport { StatusText } from \"../StatusText\";\nimport { RadioButton } from \"../RadioButton\";\nimport { RadioButtonGroup } from \".\";\nexport const ConnectedRadioButton = ({\n  defaultChecked = false,\n  disabled,\n  invalid,\n  ...props\n}) => {\n  const [checkedValue, setCheckedValue] = React.useState(defaultChecked);\n\n  const handleChange = event => {\n    setCheckedValue(event.target.value);\n    action(\"change\")(event);\n  };\n\n  return <RadioButtonGroup {...props} invalid={!checkedValue && invalid} onChange={handleChange} value={checkedValue} mdxType=\"RadioButtonGroup\" />;\n};\n\nconst layoutProps = {\n  ConnectedRadioButton\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"radiobuttongroup\"\n    }}>{`RadioButtonGroup`}</h1>\n    <Meta title=\"Core/Forms/RadioButtonGroup\" component={RadioButtonGroup} mdxType=\"Meta\" />\n    <p>{`A `}<inlineCode parentName=\"p\">{`RadioButtonGroup`}</inlineCode>{` allows the user to group together different radio\nbuttons that control the same input.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`RadioButtonGroup`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`The goal of a radio button group is to bring together a collection of `}<inlineCode parentName=\"p\">{`RadioButton`}</inlineCode>{`\ncomponents and provide a single point to manage their overall behavior.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    <RadioButtonGroup label=\"Sending options\" name=\"basic-radio\" onChange={action(\"changed\")} mdxType=\"RadioButtonGroup\">\n      <RadioButton label=\"Send as soon as campaign is launched\" value=\"asap\" mdxType=\"RadioButton\" />\n      <RadioButton helpText=\"Choose an optimal time for users to receive this message\" label=\"Send at a designated time\" value=\"choose\" mdxType=\"RadioButton\" />\n      <RadioButton helpText=\"Each user will receive the campaign at the time they are most likely to engage\" label=\"Intelligent Timing\" value=\"intelligent\" mdxType=\"RadioButton\" />\n    </RadioButtonGroup>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid-use\"\n    }}>{`Invalid use`}</h3>\n    <p>{`It may happen that you need to mark a group of radio buttons collectively as being `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{`,\ntypically to inform the user that they must pick one of the available options before\nproceeding.`}</p>\n    <p>{`The example below shows how this can be accomplished (click `}<inlineCode parentName=\"p\">{`Show code`}</inlineCode>{` to see implementation\ndetails.)`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"invalid use\" mdxType=\"Story\">\n    <ConnectedRadioButton label=\"Sending options\" invalid errorText=\"Choose at least one option from the list\" mdxType=\"ConnectedRadioButton\">\n      <RadioButton label=\"Send as soon as campaign is launched\" name=\"invalid-radio\" value=\"asap\" mdxType=\"RadioButton\" />\n      <RadioButton helpText=\"Choose an optimal time for users to receive this message\" label=\"Send at a designated time\" name=\"invalid-radio\" value=\"choose\" mdxType=\"RadioButton\" />\n      <RadioButton helpText=\"Each user will receive the campaign at the time they are most likely to engage\" label=\"Intelligent Timing\" name=\"invalid-radio\" value=\"intelligent\" mdxType=\"RadioButton\" />\n    </ConnectedRadioButton>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"horizontal-stacking\"\n    }}>{`Horizontal stacking`}</h3>\n    <p>{`Certain use cases may also call for a grid-like layout of the radio buttons. In such cases,\nthe `}<inlineCode parentName=\"p\">{`stacking`}</inlineCode>{` prop should be set to `}<inlineCode parentName=\"p\">{`horizontal`}</inlineCode>{` to automatically enable this behavior, as\nshown below.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"horizontal stacking\" mdxType=\"Story\">\n    <RadioButtonGroup label=\"Sending options\" name=\"basic-radio\" onChange={action(\"changed\")} stacking=\"horizontal\" mdxType=\"RadioButtonGroup\">\n      <RadioButton label=\"Send as soon as campaign is launched\" value=\"asap\" mdxType=\"RadioButton\" />\n      <RadioButton helpText=\"Choose an optimal time\" label=\"Send at a designated time\" value=\"choose\" mdxType=\"RadioButton\" />\n      <RadioButton helpText=\"Each user will receive the campaign at the time they are most likely to engage\" label=\"Intelligent Timing\" value=\"intelligent\" mdxType=\"RadioButton\" />\n    </RadioButtonGroup>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"controlling-which-radio-is-checked-with-external-state\"\n    }}>{`Controlling which radio is checked with external state`}</h3>\n    <p>{`To control the state of the internal checkboxes, do not use the `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` property of the\nchild `}<inlineCode parentName=\"p\">{`RadioButton`}</inlineCode>{` components. Instead, set the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property on the `}<inlineCode parentName=\"p\">{`RadioButtonGroup`}</inlineCode>{`.`}</p>\n    <p>{`This example illustrates sharing the selected radio button with an external group of buttons.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"external state controlling checked\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"choose\");\n          return <div>\n          <RadioButtonGroup label=\"Sending options\" name=\"basic-radio\" value={value} onChange={e => setValue(e.target.value)} mdxType=\"RadioButtonGroup\">\n            <RadioButton label=\"Send as soon as campaign is launched\" value=\"asap\" mdxType=\"RadioButton\" />\n            <RadioButton helpText=\"Choose an optimal time for users to receive this message\" label=\"Send at a designated time\" value=\"choose\" mdxType=\"RadioButton\" />\n            <RadioButton helpText=\"Each user will receive the campaign at the time they are most likely to engage\" label=\"Intelligent Timing\" value=\"intelligent\" mdxType=\"RadioButton\" />\n          </RadioButtonGroup>\n          <StatusText status=\"success\" mdxType=\"StatusText\">\n            Choose a value from the buttons below\n          </StatusText>\n          <div id=\"other-buttons\">\n            <Button data-active={value === \"asap\" || undefined} variant={value === \"asap\" ? \"primary\" : \"secondary\"} onClick={() => setValue(\"asap\")} mdxType=\"Button\">\n              Send as soon as campaign is launched\n            </Button>\n            <Button data-active={value === \"choose\" || undefined} variant={value === \"choose\" ? \"primary\" : \"secondary\"} onClick={() => setValue(\"choose\")} mdxType=\"Button\">\n              Send at a designated time\n            </Button>\n            <Button data-active={value === \"intelligent\" || undefined} variant={value === \"intelligent\" ? \"primary\" : \"secondary\"} onClick={() => setValue(\"intelligent\")} mdxType=\"Button\">\n              Intelligent Timing\n            </Button>\n          </div>\n        </div>;\n        }}\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { RadioButtonGroup } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`style`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = () => (\n          <RadioButtonGroup label=\"Sending options\" name=\"basic-radio\" onChange={action(\"changed\")}>\n      <RadioButton label=\"Send as soon as campaign is launched\" value=\"asap\" />\n      <RadioButton helpText=\"Choose an optimal time for users to receive this message\" label=\"Send at a designated time\" value=\"choose\" />\n      <RadioButton helpText=\"Each user will receive the campaign at the time they are most likely to engage\" label=\"Intelligent Timing\" value=\"intelligent\" />\n    </RadioButtonGroup>\n        );\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '<RadioButtonGroup label=\\\"Sending options\\\" name=\\\"basic-radio\\\" onChange={action(\\\"changed\\\")}>\\n      <RadioButton label=\\\"Send as soon as campaign is launched\\\" value=\\\"asap\\\" />\\n      <RadioButton helpText=\\\"Choose an optimal time for users to receive this message\\\" label=\\\"Send at a designated time\\\" value=\\\"choose\\\" />\\n      <RadioButton helpText=\\\"Each user will receive the campaign at the time they are most likely to engage\\\" label=\\\"Intelligent Timing\\\" value=\\\"intelligent\\\" />\\n    </RadioButtonGroup>' } };\n\nexport const invalidUse = () => (\n          <ConnectedRadioButton label=\"Sending options\" invalid errorText=\"Choose at least one option from the list\">\n      <RadioButton label=\"Send as soon as campaign is launched\" name=\"invalid-radio\" value=\"asap\" />\n      <RadioButton helpText=\"Choose an optimal time for users to receive this message\" label=\"Send at a designated time\" name=\"invalid-radio\" value=\"choose\" />\n      <RadioButton helpText=\"Each user will receive the campaign at the time they are most likely to engage\" label=\"Intelligent Timing\" name=\"invalid-radio\" value=\"intelligent\" />\n    </ConnectedRadioButton>\n        );\ninvalidUse.storyName = 'invalid use';\ninvalidUse.parameters = { storySource: { source: '<ConnectedRadioButton label=\\\"Sending options\\\" invalid errorText=\\\"Choose at least one option from the list\\\">\\n      <RadioButton label=\\\"Send as soon as campaign is launched\\\" name=\\\"invalid-radio\\\" value=\\\"asap\\\" />\\n      <RadioButton helpText=\\\"Choose an optimal time for users to receive this message\\\" label=\\\"Send at a designated time\\\" name=\\\"invalid-radio\\\" value=\\\"choose\\\" />\\n      <RadioButton helpText=\\\"Each user will receive the campaign at the time they are most likely to engage\\\" label=\\\"Intelligent Timing\\\" name=\\\"invalid-radio\\\" value=\\\"intelligent\\\" />\\n    </ConnectedRadioButton>' } };\n\nexport const horizontalStacking = () => (\n          <RadioButtonGroup label=\"Sending options\" name=\"basic-radio\" onChange={action(\"changed\")} stacking=\"horizontal\">\n      <RadioButton label=\"Send as soon as campaign is launched\" value=\"asap\" />\n      <RadioButton helpText=\"Choose an optimal time\" label=\"Send at a designated time\" value=\"choose\" />\n      <RadioButton helpText=\"Each user will receive the campaign at the time they are most likely to engage\" label=\"Intelligent Timing\" value=\"intelligent\" />\n    </RadioButtonGroup>\n        );\nhorizontalStacking.storyName = 'horizontal stacking';\nhorizontalStacking.parameters = { storySource: { source: '<RadioButtonGroup label=\\\"Sending options\\\" name=\\\"basic-radio\\\" onChange={action(\\\"changed\\\")} stacking=\\\"horizontal\\\">\\n      <RadioButton label=\\\"Send as soon as campaign is launched\\\" value=\\\"asap\\\" />\\n      <RadioButton helpText=\\\"Choose an optimal time\\\" label=\\\"Send at a designated time\\\" value=\\\"choose\\\" />\\n      <RadioButton helpText=\\\"Each user will receive the campaign at the time they are most likely to engage\\\" label=\\\"Intelligent Timing\\\" value=\\\"intelligent\\\" />\\n    </RadioButtonGroup>' } };\n\nexport const externalStateControllingChecked = (() => {\n  const [value, setValue] = React.useState(\"choose\");\n  return <div>\n          <RadioButtonGroup label=\"Sending options\" name=\"basic-radio\" value={value} onChange={e => setValue(e.target.value)}>\n            <RadioButton label=\"Send as soon as campaign is launched\" value=\"asap\" />\n            <RadioButton helpText=\"Choose an optimal time for users to receive this message\" label=\"Send at a designated time\" value=\"choose\" />\n            <RadioButton helpText=\"Each user will receive the campaign at the time they are most likely to engage\" label=\"Intelligent Timing\" value=\"intelligent\" />\n          </RadioButtonGroup>\n          <StatusText status=\"success\">\n            Choose a value from the buttons below\n          </StatusText>\n          <div id=\"other-buttons\">\n            <Button data-active={value === \"asap\" || undefined} variant={value === \"asap\" ? \"primary\" : \"secondary\"} onClick={() => setValue(\"asap\")}>\n              Send as soon as campaign is launched\n            </Button>\n            <Button data-active={value === \"choose\" || undefined} variant={value === \"choose\" ? \"primary\" : \"secondary\"} onClick={() => setValue(\"choose\")}>\n              Send at a designated time\n            </Button>\n            <Button data-active={value === \"intelligent\" || undefined} variant={value === \"intelligent\" ? \"primary\" : \"secondary\"} onClick={() => setValue(\"intelligent\")}>\n              Intelligent Timing\n            </Button>\n          </div>\n        </div>;\n});\nexternalStateControllingChecked.storyName = 'external state controlling checked';\nexternalStateControllingChecked.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"choose\\\");\\n  return <div>\\n          <RadioButtonGroup label=\\\"Sending options\\\" name=\\\"basic-radio\\\" value={value} onChange={e => setValue(e.target.value)}>\\n            <RadioButton label=\\\"Send as soon as campaign is launched\\\" value=\\\"asap\\\" />\\n            <RadioButton helpText=\\\"Choose an optimal time for users to receive this message\\\" label=\\\"Send at a designated time\\\" value=\\\"choose\\\" />\\n            <RadioButton helpText=\\\"Each user will receive the campaign at the time they are most likely to engage\\\" label=\\\"Intelligent Timing\\\" value=\\\"intelligent\\\" />\\n          </RadioButtonGroup>\\n          <StatusText status=\\\"success\\\">\\n            Choose a value from the buttons below\\n          </StatusText>\\n          <div id=\\\"other-buttons\\\">\\n            <Button data-active={value === \\\"asap\\\" || undefined} variant={value === \\\"asap\\\" ? \\\"primary\\\" : \\\"secondary\\\"} onClick={() => setValue(\\\"asap\\\")}>\\n              Send as soon as campaign is launched\\n            </Button>\\n            <Button data-active={value === \\\"choose\\\" || undefined} variant={value === \\\"choose\\\" ? \\\"primary\\\" : \\\"secondary\\\"} onClick={() => setValue(\\\"choose\\\")}>\\n              Send at a designated time\\n            </Button>\\n            <Button data-active={value === \\\"intelligent\\\" || undefined} variant={value === \\\"intelligent\\\" ? \\\"primary\\\" : \\\"secondary\\\"} onClick={() => setValue(\\\"intelligent\\\")}>\\n              Intelligent Timing\\n            </Button>\\n          </div>\\n        </div>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Forms/RadioButtonGroup', component: RadioButtonGroup, includeStories: [\"basicUse\",\"invalidUse\",\"horizontalStacking\",\"externalStateControllingChecked\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"invalid use\":\"invalidUse\",\"horizontal stacking\":\"horizontalStacking\",\"external state controlling checked\":\"externalStateControllingChecked\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React from \"react\";\nimport classNames from \"classnames\";\nimport styled, { css } from \"styled-components\";\n\nimport { StyledFlex } from \"../Flex\";\nimport { Label } from \"../Label\";\nimport { StatusText, StyledStatusText } from \"../StatusText\";\nimport { RadioButtonProps } from \"../RadioButton\";\n\nimport { StyledRadioButtonGroupProps, RadioButtonGroupProps } from \"./types\";\n\nconst horizontalGrid = css`\n  .bcl-radio-button-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto;\n    column-gap: 1.5rem;\n    row-gap: 1rem;\n    max-width: fit-content;\n  }\n`;\n\nexport const StyledRadioButtonGroup = styled.div<StyledRadioButtonGroupProps>`\n  .bcl-radio-button-grid {\n    margin-top: 0.25rem;\n  }\n\n  ${(props) => props.stacking === \"horizontal\" && horizontalGrid};\n\n  ${StyledFlex} {\n    max-width: ${(props) => (props.stacking === \"horizontal\" ? 350 : 450)}px;\n\n    &:not(:last-of-type) {\n      margin-bottom: 1rem;\n    }\n  }\n\n  ${StyledStatusText} {\n    margin-top: 1rem;\n  }\n`;\n\nexport const RadioButtonGroup = ({\n  children,\n  className,\n  errorText,\n  invalid,\n  label,\n  name,\n  onChange,\n  stacking = \"vertical\",\n  value,\n  ...props\n}: RadioButtonGroupProps): React.ReactElement => {\n  return (\n    <StyledRadioButtonGroup\n      {...props}\n      className={classNames([\"bcl-radio-button-group\", className])}\n      stacking={stacking}\n    >\n      {label && <Label>{label}</Label>}\n      <div className=\"bcl-radio-button-grid\">\n        {React.Children.map(\n          children,\n          (child: React.ReactElement<RadioButtonProps>) =>\n            React.cloneElement(child, {\n              checked: value ? child.props.value === value : undefined,\n              invalid,\n              invalidRadioOnly: true,\n              name,\n              onChange,\n            })\n        )}\n      </div>\n      {invalid && errorText && <StatusText>{errorText}</StatusText>}\n    </StyledRadioButtonGroup>\n  );\n};\n","export { RadioButtonGroup } from \"./RadioButtonGroup\";\n\nexport type { RadioButtonGroupProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { useState } from \"react\";\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { Button, placementTypes, IconButton, MenuActionButton, MenuCategoryButton, MenuGroup, Menu, useMenu } from \"@braze/beacon-core\";\nimport { ScreenReaderText } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Content Display/ScreenReaderText\" component={ScreenReaderText} mdxType=\"Meta\" />\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ScreenReaderText`}</inlineCode>{` component is used to display information to users of screen readers that should be\ninvisible to sighted users. Note that in most cases, `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` should be used to set the text to read\nto screen readers. `}<inlineCode parentName=\"p\">{`ScreenReaderText`}</inlineCode>{` is only to be used for complex instructions, such as explaining how\nto open and close the menu.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Here is an example of using an `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` on an `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`ScreenReaderText`}</inlineCode>{` to explain\nhow to access a `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` using an `}<inlineCode parentName=\"p\">{`aria-labelledby`}</inlineCode>{` attribute on the `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode></p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <div>\n          <h1 id=\"info-header\">Info</h1>\n          <IconButton aria-label=\"Get Help.\" name=\"cog\" mdxType=\"IconButton\" />\n          <ScreenReaderText id=\"menu-label\" mdxType=\"ScreenReaderText\">\n            Click the button to open the menu, click outside of the menu to close.\n          </ScreenReaderText>\n          <div>\n            <Button ref={targetRef} className=\"open-close-button\" id=\"menu1-button\" aria-haspopup=\"true\" aria-controls=\"menu1\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n              Open\n            </Button>\n          </div>\n          <Menu {...menuState} targetRef={targetRef} placement={\"bottom-start\"} closeOnClickInside={false} id=\"menu1\" aria-labelledby=\"menu1-button menu-label\" mdxType=\"Menu\">\n            <MenuActionButton id=\"mi1\" mdxType=\"MenuActionButton\">User Preview</MenuActionButton>\n            <MenuActionButton id=\"mi2\" mdxType=\"MenuActionButton\">CSV Export User Data</MenuActionButton>\n            <MenuActionButton id=\"mi3\" mdxType=\"MenuActionButton\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi4\" mdxType=\"MenuActionButton\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton disabled id=\"mi32\" mdxType=\"MenuActionButton\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </div>;\n        }}\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { ScreenReaderText } from \"@braze/beacon-labs-screen-reader-text\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <div>\n          <h1 id=\"info-header\">Info</h1>\n          <IconButton aria-label=\"Get Help.\" name=\"cog\" />\n          <ScreenReaderText id=\"menu-label\">\n            Click the button to open the menu, click outside of the menu to close.\n          </ScreenReaderText>\n          <div>\n            <Button ref={targetRef} className=\"open-close-button\" id=\"menu1-button\" aria-haspopup=\"true\" aria-controls=\"menu1\" aria-expanded={menuState.isOpen}>\n              Open\n            </Button>\n          </div>\n          <Menu {...menuState} targetRef={targetRef} placement={\"bottom-start\"} closeOnClickInside={false} id=\"menu1\" aria-labelledby=\"menu1-button menu-label\">\n            <MenuActionButton id=\"mi1\">User Preview</MenuActionButton>\n            <MenuActionButton id=\"mi2\">CSV Export User Data</MenuActionButton>\n            <MenuActionButton id=\"mi3\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi4\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton disabled id=\"mi32\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </div>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <div>\\n          <h1 id=\\\"info-header\\\">Info</h1>\\n          <IconButton aria-label=\\\"Get Help.\\\" name=\\\"cog\\\" />\\n          <ScreenReaderText id=\\\"menu-label\\\">\\n            Click the button to open the menu, click outside of the menu to close.\\n          </ScreenReaderText>\\n          <div>\\n            <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu1-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu1\\\" aria-expanded={menuState.isOpen}>\\n              Open\\n            </Button>\\n          </div>\\n          <Menu {...menuState} targetRef={targetRef} placement={\\\"bottom-start\\\"} closeOnClickInside={false} id=\\\"menu1\\\" aria-labelledby=\\\"menu1-button menu-label\\\">\\n            <MenuActionButton id=\\\"mi1\\\">User Preview</MenuActionButton>\\n            <MenuActionButton id=\\\"mi2\\\">CSV Export User Data</MenuActionButton>\\n            <MenuActionButton id=\\\"mi3\\\">\\n              CSV Export Email Address\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi4\\\">\\n              Export as Facebook Audience\\n            </MenuActionButton>\\n            <MenuActionButton disabled id=\\\"mi32\\\">\\n              Export as Google+ Audience\\n            </MenuActionButton>\\n          </Menu>\\n        </div>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Content Display/ScreenReaderText', component: ScreenReaderText, includeStories: [\"basicUse\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import styled from \"styled-components\";\nimport classNames from \"classnames\";\n\nimport { ScreenReaderTextProps } from \"./types\";\n\n/**\n * Copyright (c) 2021 by ffoodd (https://codepen.io/ffoodd/pen/gwKZyq)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nexport const ScreenReaderText = styled.span.attrs<ScreenReaderTextProps>(\n  ({ className }) => ({\n    className: classNames(\"bcl-screen-reader-text\", className),\n  })\n)`\n  border: 0 !important;\n  clip: rect(1px, 1px, 1px, 1px) !important;\n  -webkit-clip-path: inset(50%) !important;\n  clip-path: inset(50%) !important;\n  height: 1px !important;\n  margin: -1px !important;\n  overflow: hidden !important;\n  padding: 0 !important;\n  position: absolute !important;\n  width: 1px !important;\n  white-space: nowrap !important;\n`;\n","export { ScreenReaderText } from \"./ScreenReaderText\";\n\nexport type { ScreenReaderTextProps } from \"./types\";\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport { IntentContext } from \"../BannerAlert/IntentContext\";\n\nimport { SimpleBannerAlertProps } from \"./types\";\nimport { StyledBannerAlert } from \"./StyledBannerAlert\";\n\nexport const SimpleBannerAlert = ({\n  intent: intentOverride,\n  children,\n  className,\n}: SimpleBannerAlertProps): React.ReactElement => {\n  const intent = useContext(IntentContext);\n\n  return (\n    <StyledBannerAlert\n      intent={intentOverride || intent}\n      className={classNames([\"bcl-banner-alert\", className])}\n    >\n      {children}\n    </StyledBannerAlert>\n  );\n};\n\nSimpleBannerAlert.displayName = \"SimpleBannerAlert\";\n","import styled from \"styled-components\";\nimport { getFontFamily, getColor, getFontWeight } from \"@braze/beacon-styling\";\n\nimport { createGetIntentColor } from \"../BannerAlert/getIntentColor\";\n\nimport { StyledSimpleBannerAlertProps } from \"./types\";\n\n/**\n * get the color to display for a specific intent\n * @param intent - the intent to get the color for\n * @return the color to display\n */\nexport const getIntentColor = createGetIntentColor(400);\n\nexport const StyledBannerAlert = styled.div<StyledSimpleBannerAlertProps>`\n  display: flex;\n  align-items: stretch;\n  justify-content: space-between;\n\n  min-height: 38px;\n\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n\n  background-color: ${getColor(\"gray\", 0)};\n\n  border: 1px solid;\n  border-left: 8px solid;\n  border-radius: 3px;\n\n  border-color: ${getIntentColor};\n`;\n","export { SimpleBannerAlert } from \"./SimpleBannerAlert\";\n\nexport type { SimpleBannerAlertProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { SkeletonLoader } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Primitives/SkeletonLoader\" component={SkeletonLoader} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"skeletonloader\"\n    }}>{`SkeletonLoader`}</h1>\n    <p>{`A `}<inlineCode parentName=\"p\">{`SkeletonLoader`}</inlineCode>{` stands in for content while content is still being loaded.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`SkeletonLoader`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SkeletonLoader`}</inlineCode>{` pulses to indicate a loading state. By default, it will fill\nthe size of it's container, however multiple variants exist for common use cases.\nIf you need a custom size, use this version of the loader.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    <div style={{\n          width: \"200px\",\n          height: \"100px\"\n        }}>\n      <SkeletonLoader mdxType=\"SkeletonLoader\" />\n    </div>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"text-variant\"\n    }}>{`Text Variant`}</h3>\n    <p>{`This variant should be used in place of text. It has a set height, but fills the\nwidth of it's container. It currently mimics medium sized text. If a custom height\nis needed, use the basic variant.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"text variant\" mdxType=\"Story\">\n    <SkeletonLoader variant=\"text\" mdxType=\"SkeletonLoader\" />\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"checkbox-variant\"\n    }}>{`Checkbox Variant`}</h3>\n    <p>{`This variant should be used in place of a checkbox. It is set to the correct\nheight and width of a normal checkbox. If a custom size is needed, use the basic\nvariant.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"checkbox variant\" mdxType=\"Story\">\n    <SkeletonLoader variant=\"checkbox\" mdxType=\"SkeletonLoader\" />\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"image-variant\"\n    }}>{`Image Variant`}</h3>\n    <p>{`This variant should be used in place of a thumbnail image. The `}<inlineCode parentName=\"p\">{`image-round`}</inlineCode>{` variant\nis reserved for avatar images. If a custom image size is needed, use the basic\nvariant.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"image variant\" mdxType=\"Story\">\n    <SkeletonLoader variant=\"image\" mdxType=\"SkeletonLoader\" />\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"round-image-variant\"\n    }}>{`Round Image Variant`}</h3>\n    <p>{`This variant should be used in place of avatar images. If a custom image size is\nneeded, use the basic variant.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"round image variant\" mdxType=\"Story\">\n    <SkeletonLoader variant=\"image-round\" mdxType=\"SkeletonLoader\" />\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { SkeletonLoader } from \"@braze/beacon-labs-skeleton-loader\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(undefined, \"text\", \"checkbox\", \"image\", \"image-round\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`optional variant for pre-built loaders for content types`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = () => (\n          <div style={{\n  width: \"200px\",\n  height: \"100px\"\n}}>\n      <SkeletonLoader />\n    </div>\n        );\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '<div style={{\\n  width: \\\"200px\\\",\\n  height: \\\"100px\\\"\\n}}>\\n      <SkeletonLoader />\\n    </div>' } };\n\nexport const textVariant = () => (\n          <SkeletonLoader variant=\"text\" />\n        );\ntextVariant.storyName = 'text variant';\ntextVariant.parameters = { storySource: { source: '<SkeletonLoader variant=\\\"text\\\" />' } };\n\nexport const checkboxVariant = () => (\n          <SkeletonLoader variant=\"checkbox\" />\n        );\ncheckboxVariant.storyName = 'checkbox variant';\ncheckboxVariant.parameters = { storySource: { source: '<SkeletonLoader variant=\\\"checkbox\\\" />' } };\n\nexport const imageVariant = () => (\n          <SkeletonLoader variant=\"image\" />\n        );\nimageVariant.storyName = 'image variant';\nimageVariant.parameters = { storySource: { source: '<SkeletonLoader variant=\\\"image\\\" />' } };\n\nexport const roundImageVariant = () => (\n          <SkeletonLoader variant=\"image-round\" />\n        );\nroundImageVariant.storyName = 'round image variant';\nroundImageVariant.parameters = { storySource: { source: '<SkeletonLoader variant=\\\"image-round\\\" />' } };\n\nconst componentMeta = { title: 'Core/Primitives/SkeletonLoader', component: SkeletonLoader, includeStories: [\"basicUse\",\"textVariant\",\"checkboxVariant\",\"imageVariant\",\"roundImageVariant\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"text variant\":\"textVariant\",\"checkbox variant\":\"checkboxVariant\",\"image variant\":\"imageVariant\",\"round image variant\":\"roundImageVariant\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import classNames from \"classnames\";\nimport styled, { css, keyframes, StyledProps } from \"styled-components\";\nimport { getColor, getBorderRadius } from \"@braze/beacon-styling\";\n\nimport { SkeletonLoaderProps } from \"./types\";\n\nconst getVariantCss = ({ variant }: StyledProps<SkeletonLoaderProps>) => {\n  switch (variant) {\n    case \"checkbox\":\n      return css`\n        height: 18px;\n        width: 18px;\n      `;\n    case \"text\":\n      return css`\n        height: 14px;\n        width: 100%;\n      `;\n    case \"image\":\n      return css`\n        height: 26px;\n        width: 26px;\n      `;\n    case \"image-round\":\n      return css`\n        height: 26px;\n        width: 26px;\n\n        border-radius: 100%;\n      `;\n    default:\n      return css`\n        height: 100%;\n        width: 100%;\n      `;\n  }\n};\n\nconst pulse = keyframes`\n    0% {\n      background-position: 0% 0%\n    }\n    100% {\n      background-position: -135% 0%\n    }\n`;\n\nexport const SkeletonLoader = styled.div.attrs(\n  ({ className, variant, ...props }: SkeletonLoaderProps) => ({\n    ...props,\n    variant,\n    className: classNames([\n      \"bcl-skeleton-loader\",\n      variant ? `bcl-skeleton-loader-${variant}` : \"\",\n      className,\n    ]),\n  })\n)<SkeletonLoaderProps>`\n  border-radius: ${getBorderRadius(\"sm\")};\n\n  background: linear-gradient(\n    -90deg,\n    ${getColor(\"gray\", 100)} 0%,\n    ${getColor(\"gray\", 50)} 50%,\n    ${getColor(\"gray\", 100)} 100%\n  );\n\n  background-size: 400% 400%;\n\n  animation: ${pulse} 1.2s ease-in-out infinite;\n\n  ${getVariantCss}\n`;\n","export { SkeletonLoader } from \"./SkeletonLoader\";\n\nexport type { SkeletonLoaderProps, SkeletonLoaderVariant } from \"./types\";\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { getIntentColor } from \"@braze/beacon-styling\";\n\nimport { Icon } from \"../Icon\";\nimport { BodyText } from \"../BodyText\";\n\nimport { Status, StatusTextProps } from \"./types\";\nimport { StyledStatusText } from \"./StyledStatusText\";\n\nfunction getIconColor(status: Status) {\n  switch (status) {\n    case \"danger\":\n      return getIntentColor(\"danger\", 500);\n    case \"success\":\n      return getIntentColor(\"success\", 500);\n    default:\n      return null;\n  }\n}\n\nfunction getIconName(status: Status) {\n  switch (status) {\n    case \"danger\":\n      return \"exclamation-triangle\";\n    case \"success\":\n      return \"check-circle\";\n    default:\n      return null;\n  }\n}\n\nexport const StatusText = ({\n  className,\n  children,\n  displayIcon = true,\n  status = \"danger\",\n  ...props\n}: StatusTextProps): React.ReactElement => {\n  const iconColor = getIconColor(status);\n  const iconName = getIconName(status);\n\n  return (\n    <StyledStatusText\n      {...props}\n      className={classNames([\"bcl-status-text\", className])}\n    >\n      {displayIcon && iconColor && iconName && (\n        <Icon color={iconColor} name={iconName} size=\"sm\" />\n      )}\n      <BodyText variant={status}>{children}</BodyText>\n    </StyledStatusText>\n  );\n};\n","import styled from \"styled-components\";\nimport { getFontSize } from \"@braze/beacon-styling\";\n\nimport { StyledIcon } from \"../Icon\";\nimport { StyledBodyText } from \"../BodyText\";\n\nimport { StyledStatusTextProps } from \"./types\";\n\nexport const StyledStatusText = styled.div<StyledStatusTextProps>`\n  position: relative;\n  margin-top: 6px;\n  margin-left: 3px;\n\n  ${StyledIcon} {\n    margin-right: 0.5rem;\n    transform: translateY(2px);\n  }\n\n  ${StyledBodyText} {\n    font-size: ${getFontSize(\"body\", \"xs\")};\n    transform: translateY(-1px);\n  }\n`;\n","export { StatusText } from \"./StatusText\";\n\nexport { StyledStatusText } from \"./StyledStatusText\";\n\nexport type { StatusTextProps, Status } from \"./types\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getBorderWidth,\n  getColor,\n  getIntentColor,\n  intentColorSelector,\n} from \"@braze/beacon-styling\";\n\nimport {\n  HiddenCheckboxProps,\n  StyledSwitchWrapperProps,\n  StyledSwitchProps,\n} from \"./types\";\n\nexport const HiddenCheckbox = styled.input.attrs({\n  type: \"checkbox\",\n})<HiddenCheckboxProps>`\n  position: absolute;\n  opacity: 0;\n  margin: 0;\n  width: 0;\n`;\n\nconst getStyles = ({ active, disabled, ...props }: StyledSwitchProps) => {\n  if (disabled) {\n    return css`\n      background: ${getColor(\"gray\", 300)};\n      ${active ? \"justify-content: flex-end;\" : \"\"}\n    `;\n  }\n\n  if (active) {\n    return css`\n      background: ${intentColorSelector(props, \"primary\", 500)};\n      justify-content: flex-end;\n    `;\n  }\n\n  return css`\n    background: ${getColor(\"gray\", 600)};\n  `;\n};\n\nexport const StyledSwitchWrapper = styled.button.attrs({\n  type: \"button\",\n})<StyledSwitchWrapperProps>`\n  display: inline-block;\n  cursor: ${(props) => props.disabled && \"no-drop\"};\n`;\n\nexport const StyledSwitch = styled.div<StyledSwitchProps>`\n  height: 20px;\n  width: 38px;\n  outline: none;\n\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n\n  border-radius: 100px;\n\n  ${getStyles}\n\n  &:focus-visible:not(:disabled),\n  &:active:not(:disabled) {\n    outline: ${getBorderWidth(\"thick\")} solid ${getIntentColor(\"primary\", 400)};\n    outline-offset: 3px;\n\n    /* prevents the outline from getting covered by adjacent elements */\n    position: relative;\n  }\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Switch`}</inlineCode>{` component acts as a stylized \"checkbox\", and is intended for use\ncases such as user setting toggles.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`Switch`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SimpleSwitch`}</inlineCode>{` components are not intended for use\nin forms. Use a `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{` component instead.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Switch`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Switch`}</inlineCode>{` component that toggles between \"on\" and \"off\". Using the `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` prop,\nyou can define both the label visually displayed to the user as well as the\n`}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` value for the container.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-switch--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Switch`}</inlineCode>{` component can be disabled using the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop\nto prevent user from making changes but still visually reflect\nthe current state of the underlying `}<inlineCode parentName=\"p\">{`Switch`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-switch--disabled-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"use-with-children\"\n    }}>{`Use with children`}</h3>\n    <p>{`Below is an example of using the `}<inlineCode parentName=\"p\">{`Switch`}</inlineCode>{` component with a custom child rather\nthan a `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` string.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` In such cases, the `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` should always be included for\naccessibilty reasons.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-switch--use-with-children\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"use-without-label-or-children\"\n    }}>{`Use without label or children`}</h3>\n    <p>{`You can also use a switch without any `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` prop.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` This is NOT recommended for general use, and the `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{`\nshould always be included for accessibilty reasons.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-switch--use-without-label-or-children\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Switch } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"switch-1\"\n    }}>{`Switch`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`checked`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates if the switch is currently \"on\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`oneOf( ReactNode, ReactNode[] )`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`child to be passed into the component; must be a single node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the switch should be visually disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text label for the switch`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.ChangeEvent<HTMLInputElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function for switch check/uncheck`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLInputElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`oneOf( string, number )`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be represented in the switch`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\n\\nimport page from \\\"./Switch.docs.mdx\\\";\\nimport { Switch } from \\\"./Switch\\\";\\nimport { SwitchProps } from \\\"./types\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Primitives/Switch\\\",\\n  component: Switch,\\n  parameters: {\\n    docs: { page },\\n  },\\n  argTypes: {\\n    label: {\\n      type: \\\"text\\\",\\n    },\\n    disabled: {\\n      type: \\\"boolean\\\",\\n    },\\n  },\\n};\\n\\ninterface ArgsType extends Omit<SwitchProps, \\\"data-testid\\\"> {}\\n\\nexport const BasicUse = (props: ArgsType) => {\\n  const [checked, setChecked] = useState(true);\\n\\n  return (\\n    <>\\n      <Switch\\n        checked={checked}\\n        onChange={() => setChecked(!checked)}\\n        data-testid=\\\"a-switch-to-select-in-tests\\\"\\n        {...props}\\n      />\\n      <pre>\\n        <code>checked: </code>\\n        <code className=\\\"checked-value\\\">{JSON.stringify(checked)}</code>\\n      </pre>\\n    </>\\n  );\\n};\\n\\nBasicUse.args = {\\n  label: \\\"Two Factor Authentication\\\",\\n  disabled: false,\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const DisabledUse = ({ disabled }) => {\\n  const [checked, setChecked] = useState(true);\\n\\n  return (\\n    <div>\\n      <div>\\n        <Switch\\n          className=\\\"2fa-switch\\\"\\n          checked={checked}\\n          disabled={disabled}\\n          onChange={() => setChecked(!checked)}\\n          label=\\\"Two Factor Authentication\\\"\\n        />\\n        <Switch\\n          checked={!checked}\\n          disabled={disabled}\\n          onChange={() => setChecked(!checked)}\\n          label=\\\"SAML Authentication\\\"\\n        />\\n      </div>\\n      <pre>\\n        <code>checked: </code>\\n        <code className=\\\"checked-value\\\">{JSON.stringify(checked)}</code>\\n      </pre>\\n    </div>\\n  );\\n};\\n\\nDisabledUse.args = {\\n  disabled: true,\\n};\\n\\nDisabledUse.storyName = \\\"disabled use\\\";\\n\\nexport const UseWithChildren = (props: ArgsType) => {\\n  const [checked, setChecked] = useState(true);\\n\\n  return (\\n    <Switch\\n      checked={checked}\\n      onChange={() => setChecked(!checked)}\\n      aria-label=\\\"Crunchy Toasts\\\"\\n      {...props}\\n    >\\n      <span\\n        style={{\\n          padding: \\\"4px\\\",\\n          border: \\\"1px dashed purple\\\",\\n          color: \\\"purple\\\",\\n        }}\\n      >\\n        Crunchy Toasts\\n      </span>\\n    </Switch>\\n  );\\n};\\n\\nUseWithChildren.args = {};\\n\\nUseWithChildren.storyName = \\\"use with children\\\";\\n\\nexport const UseWithoutLabelOrChildren = () => {\\n  const [checked1, setChecked1] = useState(true);\\n  const [checked2, setChecked2] = useState(true);\\n\\n  return (\\n    <ul className=\\\"alt-aria-labels\\\">\\n      <li>\\n        <Switch\\n          checked={checked1}\\n          onChange={() => setChecked1(!checked1)}\\n          aria-label=\\\"No Label Switch\\\"\\n        />\\n      </li>\\n      <li>\\n        <Switch checked={checked2} onChange={() => setChecked2(!checked2)}>\\n          using children\\n        </Switch>\\n      </li>\\n    </ul>\\n  );\\n};\\n\\nUseWithoutLabelOrChildren.args = {};\\n\\nUseWithoutLabelOrChildren.storyName = \\\"use with children\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":26},\"endLoc\":{\"col\":1,\"line\":43},\"startBody\":{\"col\":24,\"line\":26},\"endBody\":{\"col\":1,\"line\":43}},\"DisabledUse\":{\"startLoc\":{\"col\":27,\"line\":52},\"endLoc\":{\"col\":1,\"line\":78},\"startBody\":{\"col\":27,\"line\":52},\"endBody\":{\"col\":1,\"line\":78}},\"UseWithChildren\":{\"startLoc\":{\"col\":31,\"line\":86},\"endLoc\":{\"col\":1,\"line\":107},\"startBody\":{\"col\":31,\"line\":86},\"endBody\":{\"col\":1,\"line\":107}},\"UseWithoutLabelOrChildren\":{\"startLoc\":{\"col\":41,\"line\":113},\"endLoc\":{\"col\":1,\"line\":133},\"startBody\":{\"col\":41,\"line\":113},\"endBody\":{\"col\":1,\"line\":133}}};\n    \nimport React, { useState } from \"react\";\n\nimport page from \"./Switch.docs.mdx\";\nimport { Switch } from \"./Switch\";\nimport { SwitchProps } from \"./types\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Primitives/Switch\",\n  component: Switch,\n  parameters: {\n    docs: { page },\n  },\n  argTypes: {\n    label: {\n      type: \"text\",\n    },\n    disabled: {\n      type: \"boolean\",\n    },\n  },\n};\n\ninterface ArgsType extends Omit<SwitchProps, \"data-testid\"> {}\n\nexport const BasicUse = (props: ArgsType) => {\n  const [checked, setChecked] = useState(true);\n\n  return (\n    <>\n      <Switch\n        checked={checked}\n        onChange={() => setChecked(!checked)}\n        data-testid=\"a-switch-to-select-in-tests\"\n        {...props}\n      />\n      <pre>\n        <code>checked: </code>\n        <code className=\"checked-value\">{JSON.stringify(checked)}</code>\n      </pre>\n    </>\n  );\n};;\n\nBasicUse.args = {\n  label: \"Two Factor Authentication\",\n  disabled: false,\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const DisabledUse = ({ disabled }) => {\n  const [checked, setChecked] = useState(true);\n\n  return (\n    <div>\n      <div>\n        <Switch\n          className=\"2fa-switch\"\n          checked={checked}\n          disabled={disabled}\n          onChange={() => setChecked(!checked)}\n          label=\"Two Factor Authentication\"\n        />\n        <Switch\n          checked={!checked}\n          disabled={disabled}\n          onChange={() => setChecked(!checked)}\n          label=\"SAML Authentication\"\n        />\n      </div>\n      <pre>\n        <code>checked: </code>\n        <code className=\"checked-value\">{JSON.stringify(checked)}</code>\n      </pre>\n    </div>\n  );\n};;\n\nDisabledUse.args = {\n  disabled: true,\n};\n\nDisabledUse.storyName = \"disabled use\";\n\nexport const UseWithChildren = (props: ArgsType) => {\n  const [checked, setChecked] = useState(true);\n\n  return (\n    <Switch\n      checked={checked}\n      onChange={() => setChecked(!checked)}\n      aria-label=\"Crunchy Toasts\"\n      {...props}\n    >\n      <span\n        style={{\n          padding: \"4px\",\n          border: \"1px dashed purple\",\n          color: \"purple\",\n        }}\n      >\n        Crunchy Toasts\n      </span>\n    </Switch>\n  );\n};;\n\nUseWithChildren.args = {};\n\nUseWithChildren.storyName = \"use with children\";\n\nexport const UseWithoutLabelOrChildren = () => {\n  const [checked1, setChecked1] = useState(true);\n  const [checked2, setChecked2] = useState(true);\n\n  return (\n    <ul className=\"alt-aria-labels\">\n      <li>\n        <Switch\n          checked={checked1}\n          onChange={() => setChecked1(!checked1)}\n          aria-label=\"No Label Switch\"\n        />\n      </li>\n      <li>\n        <Switch checked={checked2} onChange={() => setChecked2(!checked2)}>\n          using children\n        </Switch>\n      </li>\n    </ul>\n  );\n};\n\nUseWithoutLabelOrChildren.args = {};\n\nUseWithoutLabelOrChildren.storyName = \"use with children\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(props: ArgsType) => {\\n  const [checked, setChecked] = useState(true);\\n\\n  return (\\n    <>\\n      <Switch\\n        checked={checked}\\n        onChange={() => setChecked(!checked)}\\n        data-testid=\\\"a-switch-to-select-in-tests\\\"\\n        {...props}\\n      />\\n      <pre>\\n        <code>checked: </code>\\n        <code className=\\\"checked-value\\\">{JSON.stringify(checked)}</code>\\n      </pre>\\n    </>\\n  );\\n}\" }, ...BasicUse.parameters };\nDisabledUse.parameters = { storySource: { source: \"({ disabled }) => {\\n  const [checked, setChecked] = useState(true);\\n\\n  return (\\n    <div>\\n      <div>\\n        <Switch\\n          className=\\\"2fa-switch\\\"\\n          checked={checked}\\n          disabled={disabled}\\n          onChange={() => setChecked(!checked)}\\n          label=\\\"Two Factor Authentication\\\"\\n        />\\n        <Switch\\n          checked={!checked}\\n          disabled={disabled}\\n          onChange={() => setChecked(!checked)}\\n          label=\\\"SAML Authentication\\\"\\n        />\\n      </div>\\n      <pre>\\n        <code>checked: </code>\\n        <code className=\\\"checked-value\\\">{JSON.stringify(checked)}</code>\\n      </pre>\\n    </div>\\n  );\\n}\" }, ...DisabledUse.parameters };\nUseWithChildren.parameters = { storySource: { source: \"(props: ArgsType) => {\\n  const [checked, setChecked] = useState(true);\\n\\n  return (\\n    <Switch\\n      checked={checked}\\n      onChange={() => setChecked(!checked)}\\n      aria-label=\\\"Crunchy Toasts\\\"\\n      {...props}\\n    >\\n      <span\\n        style={{\\n          padding: \\\"4px\\\",\\n          border: \\\"1px dashed purple\\\",\\n          color: \\\"purple\\\",\\n        }}\\n      >\\n        Crunchy Toasts\\n      </span>\\n    </Switch>\\n  );\\n}\" }, ...UseWithChildren.parameters };\nUseWithoutLabelOrChildren.parameters = { storySource: { source: \"() => {\\n  const [checked1, setChecked1] = useState(true);\\n  const [checked2, setChecked2] = useState(true);\\n\\n  return (\\n    <ul className=\\\"alt-aria-labels\\\">\\n      <li>\\n        <Switch\\n          checked={checked1}\\n          onChange={() => setChecked1(!checked1)}\\n          aria-label=\\\"No Label Switch\\\"\\n        />\\n      </li>\\n      <li>\\n        <Switch checked={checked2} onChange={() => setChecked2(!checked2)}>\\n          using children\\n        </Switch>\\n      </li>\\n    </ul>\\n  );\\n}\" }, ...UseWithoutLabelOrChildren.parameters };","import React, { forwardRef, useRef } from \"react\";\nimport classNames from \"classnames\";\n\nimport { Flex } from \"../Flex\";\n\nimport {\n  HiddenCheckbox,\n  StyledSwitch,\n  StyledSwitchWrapper,\n} from \"./StyledSwitch\";\nimport { SwitchKnob } from \"./SwitchKnob\";\nimport { SwitchLabel } from \"./SwitchLabel\";\nimport { SwitchProps } from \"./types\";\n\nexport const Switch = forwardRef(\n  (\n    {\n      children,\n      checked = false,\n      className,\n      disabled,\n      onChange,\n      label,\n      \"data-testid\": testId,\n      ...props\n    }: SwitchProps,\n    ref: React.RefObject<HTMLInputElement>\n  ): React.ReactElement => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const activeRef = ref || inputRef;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (!disabled) {\n        onChange?.(event);\n      }\n    };\n\n    const handleClick = () => {\n      // if activeRef.current not defined, bail\n      if (!activeRef.current) {\n        return;\n      }\n\n      // grab the setter function for the `checked` value\n      const { set: nativeCheckboxCheckedSetter } =\n        Object.getOwnPropertyDescriptor(\n          window.HTMLInputElement.prototype,\n          \"checked\"\n        ) as PropertyDescriptor;\n\n      // set the checkbox `checked` to the reverse of the current\n      nativeCheckboxCheckedSetter?.call(\n        activeRef.current,\n        !activeRef.current.checked\n      );\n\n      // create an event that bubbles up\n      const e2 = new InputEvent(\"input\", { bubbles: true });\n\n      // dispatch the event\n      activeRef.current.dispatchEvent(e2);\n\n      // call the change handler\n      handleChange(e2 as unknown as React.ChangeEvent<HTMLInputElement>);\n    };\n\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === \" \" && !disabled) {\n        event.preventDefault();\n\n        handleClick();\n      }\n    };\n\n    const ariaLabel =\n      // if 'label' prop is defined, use it\n      label ||\n      // otherwise, if 'children' is a string, use that\n      (typeof children === \"string\" && children) ||\n      // otherwise use 'aria-label' or nothing\n      props[\"aria-label\"];\n\n    return (\n      <Flex\n        alignItems=\"center\"\n        className={classNames([\"bcl-switch\", className])}\n        data-testid={testId}\n      >\n        <StyledSwitchWrapper\n          disabled={disabled}\n          aria-hidden\n          className={classNames([\"bcl-simple-switch\", className])}\n        >\n          <HiddenCheckbox\n            {...props}\n            ref={activeRef}\n            aria-label={ariaLabel}\n            checked={checked}\n            disabled={disabled}\n            onChange={handleChange}\n            onKeyPress={handleKeyPress}\n          />\n          <StyledSwitch\n            className=\"bcl-styled-switch\"\n            tabIndex={0}\n            active={checked}\n            disabled={disabled}\n            onClick={handleClick}\n            onKeyPress={handleKeyPress}\n          >\n            <SwitchKnob\n              className=\"bcl-styled-switch-knob\"\n              active={checked}\n              disabled={disabled}\n            />\n          </StyledSwitch>\n        </StyledSwitchWrapper>\n\n        <SwitchLabel>{label || children}</SwitchLabel>\n      </Flex>\n    );\n  }\n);\n\nSwitch.displayName = \"Switch\";\n","import styled, { css } from \"styled-components\";\nimport { getColor } from \"@braze/beacon-styling\";\n\nimport { SwitchKnobProps } from \"../types\";\n\nconst getStyles = ({ active, disabled }: SwitchKnobProps) => {\n  if (disabled) {\n    return null;\n  }\n\n  if (active) {\n    return css`\n      box-shadow: 0px 1px 2px #025f6b;\n    `;\n  }\n\n  return css`\n    box-shadow: 0px 1px 2px ${getColor(\"gray\", 400)};\n  `;\n};\n\nexport const SwitchKnob = styled.div<SwitchKnobProps>`\n  background: ${getColor(\"gray\", 0)};\n  border-radius: 100%;\n\n  height: 16px;\n  width: 16px;\n\n  margin: 0 2px;\n\n  ${getStyles};\n`;\n","export { SwitchKnob } from \"./SwitchKnob\";\n","import styled from \"styled-components\";\nimport classNames from \"classnames\";\nimport {\n  getFontFamily,\n  getFontSize,\n  getFontWeight,\n  getSpacing,\n} from \"@braze/beacon-styling\";\n\nimport { SwitchLabelProps } from \"../types\";\n\nconst getAttrs = ({ className }: SwitchLabelProps) => ({\n  className: classNames(\"bcl-switch-label\", className),\n});\n\nexport const SwitchLabel = styled.div.attrs(getAttrs)<SwitchLabelProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  font-size: ${getFontSize(\"body\", \"md\")};\n  margin-left: ${getSpacing(\"md\")};\n`;\n\nSwitchLabel.displayName = \"SwitchLabel\";\n","export { SwitchLabel } from \"./SwitchLabel\";\n","export { Switch } from \"./Switch\";\n\nexport type { SwitchProps } from \"./types\";\n","/**\n * @fileoverview the styled tab navigational element\n */\nimport styled, { css } from \"styled-components\";\nimport {\n  getColor,\n  getIntentColor,\n  getSpacing,\n  getBorderWidth,\n  getFontFamily,\n  getFontSize,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledTabProps } from \"./types\";\n\nconst commonInteractions = css`\n  &:hover {\n    color: ${getColor(\"gray\", 900)};\n    border-bottom-color: ${getColor(\"gray\", 900)};\n  }\n\n  &:focus {\n    outline: ${getBorderWidth(\"thick\")} solid ${getIntentColor(\"primary\", 200)};\n    outline-offset: 2px;\n  }\n`;\n\nconst getTabState = ({ active, disabled }: StyledTabProps) => {\n  if (disabled) {\n    return css`\n      color: ${getColor(\"gray\", 400)};\n      border-bottom-color: ${getColor(\"gray\", 200)};\n\n      &:focus {\n        outline: none;\n      }\n    `;\n  }\n\n  if (active) {\n    return css`\n      color: ${getIntentColor(\"primary\", 500)};\n      border-bottom-color: ${getIntentColor(\"primary\", 500)};\n\n      ${commonInteractions};\n    `;\n  }\n\n  return css`\n    color: ${getColor(\"gray\", 600)};\n\n    ${commonInteractions};\n  `;\n};\n\nexport const StyledTab = styled.li<StyledTabProps>`\n  position: relative;\n  display: inline-block;\n  cursor: ${(props) => (props.disabled ? \"no-drop\" : \"pointer\")};\n  margin: 0 ${getSpacing(\"lg\")} 0 0;\n  padding: ${getSpacing(\"xs\")} ${getSpacing(\"lg\")} ${getSpacing(\"xs\")} 0;\n  text-align: left;\n  border-bottom-width: ${getBorderWidth(\"thick\")};\n  border-bottom-style: solid;\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  font-size: ${getFontSize(\"body\", \"md\")};\n  line-height: 16px;\n\n  ${getTabState};\n`;\n","/**\n * @fileoverview a navigational tab component\n */\nimport React, { useContext, ReactElement } from \"react\";\nimport classNames from \"classnames\";\n\nimport { TabsContext } from \"../TabsContext\";\n\nimport { StyledTab } from \"./StyledTab\";\nimport { TabProps } from \"./types\";\n\nexport const Tab = ({\n  active,\n  className,\n  tabId,\n  disabled,\n  onClick: onClickProp,\n  onKeyPress: onKeyPressProp,\n  ...props\n}: TabProps): ReactElement => {\n  const { handleChange, handleKeyPress } = useContext(TabsContext);\n\n  // this will preferentially use the passed onChange prop\n  const onClick = onClickProp || (() => handleChange(tabId));\n\n  // this will preferentially use the passed onKeyPress prop\n  const onKeyPress =\n    onKeyPressProp ||\n    ((event: React.KeyboardEvent) => handleKeyPress(tabId, event));\n\n  return (\n    <StyledTab\n      {...props}\n      active={active}\n      className={classNames([\n        \"bcl-tab\",\n        { \"bcl-tab-active\": active },\n        className,\n      ])}\n      disabled={disabled}\n      onClick={disabled ? undefined : onClick}\n      onKeyPress={disabled ? undefined : onKeyPress}\n      tabIndex={disabled ? -1 : 0}\n    />\n  );\n};\n","export { Tab } from \"./Tab\";\n\nexport type { TabProps } from \"./types\";\n","/**\n * @fileoverview the styled tab content container\n */\nimport classNames from \"classnames\";\nimport styled from \"styled-components\";\nimport { getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledTabContentProps } from \"./types\";\n\nexport const StyledTabContent = styled.div.attrs(({ className }) => ({\n  className: classNames(className, \"bcl-tab-content\"),\n}))<StyledTabContentProps>`\n  margin: ${getSpacing(\"xl\")} 0;\n`;\n","/**\n * @fileoverview component that handles showing/hiding tab content - as well as\ncontainer styling for tab content\n */\nimport React, { ReactElement } from \"react\";\n\nimport { TabContentProps } from \"./types\";\nimport { StyledTabContent } from \"./StyledTabContent\";\n\nexport const TabContent = ({\n  active,\n  ...props\n}: TabContentProps): ReactElement | null =>\n  active ? <StyledTabContent {...props} /> : null;\n","export { TabContent } from \"./TabContent\";\n\nexport type { TabContentProps } from \"./types\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getFontFamily,\n  getFontSize,\n  getBorderWidth,\n  getColor,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { getSizeSpacing } from \"../../services/getSizeSpacing\";\n\nimport { StyledTableProps } from \"./types\";\n\nexport const StyledTable = styled.table<StyledTableProps>`\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"regular\")};\n  font-size: ${getFontSize(\"body\", \"md\")};\n  border-collapse: collapse;\n  width: ${({ fullWidth }) => fullWidth && \"100%\"};\n  table-layout: ${({ fixed }) => (fixed ? \"fixed\" : \"auto\")};\n\n  td,\n  th {\n    box-sizing: border-box;\n    padding: ${({ size }) => getSizeSpacing(size)};\n  }\n\n  .bcl-spanned-cell:not(:last-child) {\n    padding-bottom: ${({ size }) => getSizeSpacing(size)};\n  }\n\n  ${({ interactive }) =>\n    !interactive &&\n    css`\n      .bcl-tr:hover {\n        background-color: transparent;\n      }\n    `}\n\n  td:not(:first-child) {\n    ${({ verticalRule }) =>\n      verticalRule &&\n      css`\n        border-left: ${getBorderWidth(\"thin\")} solid ${getColor(\"gray\", 100)};\n      `}\n  }\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h1>\n    <p>{`Tables are meant to display tabular data. The components presented here\nprovide you the semantic tags to do so.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`See below for some sample use cases on how the `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` component can be used\nin different ways.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` component has a set of composable children components that allow you\nto build a table.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"sorting\"\n    }}>{`Sorting`}</h3>\n    <p>{`Headers can display their current sort direction. If the\n`}<inlineCode parentName=\"p\">{`onSortColumn`}</inlineCode>{` callback is passed into a header cell, it will enter a state that\nrenders the column as clickable to enable sorting. The logic of sorting is handled externally.`}</p>\n    <p>{`When clicked, the column will call `}<inlineCode parentName=\"p\">{`onSortColumn`}</inlineCode>{` with the next sorting state as a parameter.\nThe order of sorting states is `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`\"desc\"`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`\"asc\"`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`\"desc\"`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`\"asc\"`}</inlineCode>{` -> ...\nIf a column is not currently being sorted, when clicked, it will call `}<inlineCode parentName=\"p\">{`onSortColumn`}</inlineCode>{` with the value `}<inlineCode parentName=\"p\">{`\"desc\"`}</inlineCode>{`.\nIf is it being sorted in descending order (`}<inlineCode parentName=\"p\">{`sortDirection`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`\"desc\"`}</inlineCode>{`), when clicked, it will call\n`}<inlineCode parentName=\"p\">{`onSortColumn`}</inlineCode>{` with the value `}<inlineCode parentName=\"p\">{`\"asc\"`}</inlineCode>{`. In addition, a tooltip is displayed when hovering over\na column.`}</p>\n    <p>{`The rows in a table should never be in a random/indeterminate order. Instead, when the table is loaded,\nit should be sorted by one of the columns and, whichever column is sorted should\nhave the sorting arrow icon pointing in the sort direction in its header.`}</p>\n    <p>{`The story below shows one possible way in which the sorting logic may be handled.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--sorting\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"custom-component-use\"\n    }}>{`Custom Component use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` and it's subcomponents can handle having custom components passed\nas children. As long as a valid table structure is built, custom content display\nthrough custom components is possible.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--custom-component-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"size-use\"\n    }}>{`Size use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` can display padding in several different ways. Below is an example\nof a `}<inlineCode parentName=\"p\">{`TableRow`}</inlineCode>{`, a `}<inlineCode parentName=\"p\">{`TableCell`}</inlineCode>{`, and a `}<inlineCode parentName=\"p\">{`TableHeaderCell`}</inlineCode>{` with the size overridden.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Use the knobs in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see the different padding options!`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--size-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"vertical-rule\"\n    }}>{`Vertical Rule`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` component can optionally set vertical rules on the cells.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--vertical-rule\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"cell-styling-text-alignment\"\n    }}>{`Cell styling text alignment`}</h3>\n    <p>{`Header and body cells can be aligned horizontally via the `}<inlineCode parentName=\"p\">{`textAlign`}</inlineCode>{` prop,\nas seen below.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--text-alignment\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"cell-spanning-columns\"\n    }}>{`Cell spanning columns`}</h3>\n    <p>{`Cells can span multiple columns, as seen here:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--column-span\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"cell-spanning-row\"\n    }}>{`Cell spanning row`}</h3>\n    <p>{`Cells can span multiple rows, as seen here:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--row-span\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"table-spanning-full-width\"\n    }}>{`Table spanning full width`}</h3>\n    <p>{`Tables can be configured to be full-width with respect to its parent\ncontainer using the `}<inlineCode parentName=\"p\">{`fullWidth`}</inlineCode>{` prop:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--full-width-table\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"non-interactive-use\"\n    }}>{`Non-interactive use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` can have special styling applied if the content is not interactive.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--non-interactive-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-fixed-column-widths\"\n    }}>{`With fixed column widths`}</h3>\n    <p>{`To have a more grid-like table layout, you can use the `}<inlineCode parentName=\"p\">{`fixed`}</inlineCode>{` prop. This will ensure that,\nunless otherwise specified, all columns in the table will have the same width. Per the CSS\nspec, using this prop make it such that column spacing is is determined using the first row,\nso you `}<em parentName=\"p\">{`only`}</em>{` need to modify the column widths of the first row to affect the rest of the table.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: When using this prop, it's recommended you also set the `}<inlineCode parentName=\"p\">{`fullWidth`}</inlineCode>{` prop to\nmake sure the table takes up 100% of the width of its container. Otherwise, the table will\nhorizontally stretch depending on `}<inlineCode parentName=\"p\">{`truncation`}</inlineCode>{` settings (see below).`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--with-fixed-widths\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-ellipsis-truncation\"\n    }}>{`With ellipsis truncation`}</h3>\n    <p>{`You can pass `}<inlineCode parentName=\"p\">{`truncation=\"ellipsis\"`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`TableCell`}</inlineCode>{` elements to make their contents\ntruncate using `}<inlineCode parentName=\"p\">{`...`}</inlineCode>{`.`}</p>\n    <p>{`Note that when using this feature, you `}<em parentName=\"p\">{`must`}</em>{` also specify the `}<inlineCode parentName=\"p\">{`maxWidth`}</inlineCode>{` prop for each\ncell truncated using ellipses, otherwise they will not be truncated correctly. It's also\nrecommended that you set the corresponding `}<inlineCode parentName=\"p\">{`TableHeaderCell`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` prop to the same\nvalue. To prevent buggy behavior, ensure that `}<inlineCode parentName=\"p\">{`maxWidth`}</inlineCode>{` values across a column are all\nthe same.`}</p>\n    <p>{`If you need to fine tune column widths further, you should then use the `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` prop in\nthe `}<inlineCode parentName=\"p\">{`TableHeaderCell`}</inlineCode>{` component for the remaining columns.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--with-ellipsis-truncation\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-forced-wrap\"\n    }}>{`With forced wrap`}</h3>\n    <p>{`You can pass `}<inlineCode parentName=\"p\">{`truncation=\"force-wrap\"`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`TableCell`}</inlineCode>{` elements to make their contents\nwrap around the cell regardless of space breaks.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--with-forced-wrap\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableColumn,\n  TableColumnGroup,\n  TableFooter,\n  TableHeader,\n  TableHeaderCell,\n  TableRow,\n} from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"table-1\"\n    }}><inlineCode parentName=\"h3\">{`Table`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fixed`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the table should ignore content and use fixed widths for columns`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`interactive`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates if the tables is interactive`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none, `}</inlineCode>{`compact`}<inlineCode parentName=\"td\">{`, `}</inlineCode>{`comfortable\\`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"comfortable\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacing for the cells in the table`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`verticalRule`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates if there should be a vertical rule between the cells`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablebody\"\n    }}><inlineCode parentName=\"h3\">{`TableBody`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableSectionElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablecaption\"\n    }}><inlineCode parentName=\"h3\">{`TableCaption`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<TableCaptionProps>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablecell\"\n    }}><inlineCode parentName=\"h3\">{`TableCell`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( ReactElement, HTMLElement )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`component / HTML tag to render component as instead of default`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`colSpan`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of columns spanned by the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`maxWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximum width to apply to cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableCellElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`rowSpan`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of rows spanned by the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`compact`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`comfortable`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"comfortable\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacing for the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`textAlign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text alignment within the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`truncation`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`ellipsis`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`wrap`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`force-wrap`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"wrap\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates what kind of truncation to apply to the table cell`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablecolumn\"\n    }}><inlineCode parentName=\"h3\">{`TableColumn`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableColElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablecolumngroup\"\n    }}><inlineCode parentName=\"h3\">{`TableColumnGroup`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableColElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablefooter\"\n    }}><inlineCode parentName=\"h3\">{`TableFooter`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableSectionElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tableheader\"\n    }}><inlineCode parentName=\"h3\">{`TableHeader`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableSectionElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tableheadercell\"\n    }}><inlineCode parentName=\"h3\">{`TableHeaderCell`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( ReactElement, HTMLElement )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`component / HTML tag to render component as instead of default`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`colSpan`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of columns spanned by the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`firstSortDirection`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`\"asc\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`\"desc\"`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"desc\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`direction to start with when sorting is initiated. Ignored unless onSortColumn is also passed in`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(e: React.MouseEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when column header is clicked; use for sorting (required to display sorting arrows)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTabelHeaderCellElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`rowSpan`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of rows spanned by the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`scope`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`row`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`col`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`rowgroup`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`colgroup`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates how the heading cell is being used`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none, `}</inlineCode>{`compact`}<inlineCode parentName=\"td\">{`, `}</inlineCode>{`comfortable\\`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"comfortable\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacing for the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sortDirection`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`\"asc\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`\"desc\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`sorting direction for this column. Ignored unless onSortColumn is also passed in`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sortMessages`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`SortMessages`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`aria-label properties for the 3 sort states, `}<inlineCode parentName=\"td\">{`asc`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`desc`}</inlineCode>{`, and `}<inlineCode parentName=\"td\">{`none`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sortTooltipPlacement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`auto`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bottom`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Tooltip for sorting relative to target. Ignored unless onSortColumn is also passed in`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`textAlign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text alignment within the cell`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"sortmessages-interface\"\n    }}><inlineCode parentName=\"h4\">{`SortMessages`}</inlineCode>{` interface`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SortMessages`}</inlineCode>{` interface is used to customize the `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` read for screen reader users. By default, the message is customized and localized:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const defaultAriaLabels = {\n  asc: t(\n          \"sorted-aria-label-asc\",\n          \"Sorted column { columnName } ascending. \" +\n            \"{nextSortDirection, select, desc {Select to sort descending} other {Select to remove sort}}\", ...),\n  desc: t(\n          \"sorted-aria-label-desc\",\n          \"Sorted column { columnName } descending. \" +\n            \"{nextSortDirection, select, asc {Select to sort ascending} other {Select to remove sort}}\", ...),\n  // if firstSortDirection is \"asc\"\n  none: t(\n          \"sort-aria-label-asc\",\n          \"Column { columnName }. Select to sort ascending\", ...),\n  // if firstSortDirection is \"desc\"\n  none: t(\n          \"sort-aria-label-desc\",\n          \"Column { columnName }. Select to sort descending\", ...), // if firstSortDirection is \"asc\"\n}\n`}</code></pre>\n    <p>{`To override with custom sort messages, this is the interface to pass. You are responsible for localizing as needed, and ensuring the message\nfits the pattern `}<inlineCode parentName=\"p\">{`Sorted column <column> ... Select to sort <sort info>`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface SortMessages {\n  /** message to display in aria-label for screen readers when the column is sorted in ascending order */\n  asc: string;\n  /** message to display in aria-label for screen readers when the column is sorted in descending order */\n  desc: string;\n  /** message to display in aria-label for screen readers when the column is not sorted */\n  none: string;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"tablerow\"\n    }}><inlineCode parentName=\"h3\">{`TableRow`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableRowElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none, `}</inlineCode>{`compact`}<inlineCode parentName=\"td\">{`, `}</inlineCode>{`comfortable\\`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"comfortable\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacing for the cell in the row`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useMemo, useState } from \\\"react\\\";\\nimport styled from \\\"styled-components\\\";\\nimport camelCase from \\\"lodash/camelCase\\\";\\nimport {\\n  colorSelector,\\n  getIntentColor,\\n  getSpacing,\\n} from \\\"@braze/beacon-styling\\\";\\nimport { ColorBaseType } from \\\"@braze/beacon-theme\\\";\\n\\nimport { TableHeader } from \\\"../TableHeader\\\";\\nimport { TableBody } from \\\"../TableBody\\\";\\nimport { TableHeaderCell } from \\\"../TableHeaderCell\\\";\\nimport { TableRow } from \\\"../TableRow\\\";\\nimport { TableCell } from \\\"../TableCell\\\";\\nimport { TableCaption } from \\\"../TableCaption\\\";\\nimport { TableFooter } from \\\"../TableFooter\\\";\\n\\nimport { Table } from \\\"./Table\\\";\\nimport page from \\\"./Table.docs.mdx\\\";\\n\\nconst DecoratedHeaderDot = styled.span`\\n  display: inline-block;\\n  margin-left: ${getSpacing(\\\"sm\\\")};\\n  background: ${(props: { color: ColorBaseType }) =>\\n    colorSelector(props, props.color, 300)};\\n  height: 10px;\\n  width: 10px;\\n  border-radius: 100%;\\n`;\\n\\nconst DecoratedHeader = ({ children, color }) => (\\n  <div style={{ display: \\\"flex\\\", alignItems: \\\"center\\\" }}>\\n    <span>{children}</span>\\n    <DecoratedHeaderDot color={color} />\\n  </div>\\n);\\n\\nconst OrangeRow = styled(TableRow)`\\n  background: ${getIntentColor(\\\"warning\\\", 300)};\\n  :hover {\\n    background: ${getIntentColor(\\\"warning\\\", 100)};\\n  }\\n`;\\n\\nconst ColorContent = styled.span<{ favColor: string }>`\\n  color: ${({ favColor }: { favColor: string }) => camelCase(favColor)};\\n`;\\n\\nconst DegreeContent = ({ children }) => (\\n  <React.Fragment>{children}&deg;</React.Fragment>\\n);\\n\\n\\nexport default {\\n  title: \\\"Core/Content Display/Table\\\",\\n  component: Table,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = () => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const Sorting = () => {\\n  const data = useMemo(\\n    () => [\\n      {\\n        id: \\\"1\\\",\\n        name: \\\"Sarah\\\",\\n        favoriteColor: \\\"Forest Green\\\",\\n        birthYear: 1989,\\n        favoriteLine:\\n          \\\"She puzzled over this for some time, but at last a bright thought struck her. “Why, it’s a Looking-glass book, of course! And if I hold it up to a glass, the words will all go the right way again.”\\\",\\n      },\\n      {\\n        id: \\\"2\\\",\\n        name: \\\"Jeff\\\",\\n        favoriteColor: \\\"Pink\\\",\\n        birthYear: 1998,\\n        favoriteLine: \\\"The vorpal blade went snicker-snack!\\\",\\n      },\\n      {\\n        id: \\\"3\\\",\\n        name: \\\"Hubert Blaine Wolfesch...\\\",\\n        favoriteColor: \\\"Firebrick\\\",\\n        birthYear: 2002,\\n        favoriteLine: \\\"The Jabberwock, with eyes of flame\\\",\\n      },\\n      {\\n        id: \\\"4\\\",\\n        name: \\\"April\\\",\\n        favoriteColor: \\\"Cadet Blue\\\",\\n        birthYear: 1939,\\n        favoriteLine: \\\"All mimsy were the borogoves\\\",\\n      },\\n      {\\n        id: \\\"5\\\",\\n        name: \\\"Henry\\\",\\n        favoriteColor: \\\"Dark Goldenrod\\\",\\n        birthYear: 1975,\\n        favoriteLine: \\\"Long time the manxome foe he sought\\\",\\n      },\\n    ],\\n    []\\n  );\\n  const [sortDirection, setSortDirection] = useState<{\\n    col: string | undefined;\\n    dir: \\\"asc\\\" | \\\"desc\\\" | undefined | false;\\n  }>({\\n    col: undefined,\\n    dir: undefined,\\n  });\\n  const sorted = useMemo(() => {\\n    const { col, dir } = sortDirection;\\n\\n    if (!col || !dir) {\\n      return data;\\n    }\\n\\n    return [...data].sort((a, b) => {\\n      if (dir === \\\"asc\\\") {\\n        if (a[col] > b[col]) {\\n          return 1;\\n        }\\n\\n        if (a[col] < b[col]) {\\n          return -1;\\n        }\\n      } else if (dir === \\\"desc\\\") {\\n        if (a[col] > b[col]) {\\n          return -1;\\n        }\\n\\n        if (a[col] < b[col]) {\\n          return 1;\\n        }\\n      }\\n\\n      return 0;\\n    });\\n  }, [data, sortDirection]);\\n\\n  const handleClick =\\n    (col: string, firstSortDirection: typeof sortDirection[\\\"dir\\\"] = \\\"desc\\\") =>\\n    () => {\\n      if (col === sortDirection.col) {\\n        if (sortDirection.dir === \\\"asc\\\") {\\n          setSortDirection({ col, dir: \\\"desc\\\" });\\n        }\\n\\n        if (sortDirection.dir === \\\"desc\\\") {\\n          setSortDirection({ col, dir: \\\"asc\\\" });\\n        }\\n      } else {\\n        setSortDirection({ col, dir: firstSortDirection });\\n      }\\n    };\\n\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell\\n            sortDirection={sortDirection.col === \\\"name\\\" && sortDirection.dir}\\n            onClick={handleClick(\\\"name\\\")}\\n            textAlign=\\\"left\\\"\\n          >\\n            Name\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"favoriteColor\\\" && sortDirection.dir\\n            }\\n            onClick={handleClick(\\\"favoriteColor\\\")}\\n            sortMessages={{\\n              asc: \\\"Sorting by Hue, in ascending intensity\\\",\\n              desc: \\\"Sorting by Hue, in descending intensity\\\",\\n              none: \\\"Select to sort Color by Hue in descending intensity\\\",\\n            }}\\n            textAlign=\\\"center\\\"\\n          >\\n            Favorite Color\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"birthYear\\\" && sortDirection.dir\\n            }\\n            onClick={handleClick(\\\"birthYear\\\", \\\"asc\\\")}\\n            sortMessages={{\\n              asc: \\\"Sorting by Birth Year, in ascending awesomeness\\\",\\n              desc: \\\"Sorting by Birth Year, in descending awesomeness\\\",\\n              none: \\\"Select to sort Birth Year in ascending awesomeness\\\",\\n            }}\\n            firstSortDirection=\\\"asc\\\"\\n            textAlign=\\\"right\\\"\\n            width=\\\"80px\\\"\\n          >\\n            Birth Year\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"birthYear\\\" && sortDirection.dir === \\\"asc\\\"\\n                ? \\\"desc\\\"\\n                : \\\"asc\\\"\\n            }\\n            sortTooltipPlacement=\\\"right\\\"\\n            firstSortDirection=\\\"asc\\\"\\n            textAlign=\\\"right\\\"\\n          >\\n            Age\\n          </TableHeaderCell>\\n          <TableHeaderCell textAlign=\\\"left\\\" width=\\\"400px\\\">\\n            Favorite Line\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        {sorted.map((row) => (\\n          <TableRow key={row.id}>\\n            <TableCell textAlign=\\\"left\\\">{row.name}</TableCell>\\n            <TableCell textAlign=\\\"center\\\">\\n              <ColorContent favColor={row.favoriteColor}>\\n                {row.favoriteColor}\\n              </ColorContent>\\n            </TableCell>\\n            <TableCell textAlign=\\\"right\\\">{row.birthYear}</TableCell>\\n            <TableCell textAlign=\\\"right\\\">\\n              {new Date().getFullYear() - row.birthYear}\\n            </TableCell>\\n            <TableCell textAlign=\\\"left\\\">{row.favoriteLine}</TableCell>\\n          </TableRow>\\n        ))}\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nSorting.storyName = \\\"sorting\\\";\\n\\nexport const CustomComponentUse = () => {\\n  return (\\n    <Table>\\n      <TableCaption>\\n        Description of temperatures in different scales\\n      </TableCaption>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>&nbsp;</TableHeaderCell>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"primary\\\">Celcius</DecoratedHeader>\\n          </TableHeaderCell>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"danger\\\">Farenheit</DecoratedHeader>\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>Freezing</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>0</DegreeContent>\\n          </TableCell>\\n          <TableCell width=\\\"300px\\\">\\n            <DegreeContent>32</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>\\n            <span role=\\\"img\\\" aria-label=\\\"Smiling Face with Sunglasses\\\">\\n              😎\\n            </span>\\n          </TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>24</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>75</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>Boiling</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>100</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>212</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <OrangeRow>\\n          <TableHeaderCell>Paper auto-ignition</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>233</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>451</DegreeContent>\\n          </TableCell>\\n        </OrangeRow>\\n      </TableBody>\\n      <TableFooter>\\n        <TableRow>\\n          <TableCell colSpan={3}>\\n            For more information about temperature, visit{\\\" \\\"}\\n            <a\\n              href=\\\"https://en.wikipedia.org/wiki/Scale_of_temperature\\\"\\n              target=\\\"blank\\\"\\n            >\\n              this page\\n            </a>\\n            .\\n          </TableCell>\\n        </TableRow>\\n      </TableFooter>\\n    </Table>\\n  );\\n};\\n\\nCustomComponentUse.storyName = \\\"custom component use\\\";\\n\\nexport const SizeUse = ({\\n  tableSize,\\n  rowSize,\\n  cellSize,\\n  cellSizeApril,\\n}: {\\n  tableSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  rowSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  cellSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  cellSizeApril: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n}) => {\\n  const sizeOrDefault = (\\n    size: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\"\\n  ) => (size === \\\"default\\\" ? undefined : size);\\n\\n  return (\\n    <Table size={sizeOrDefault(tableSize)}>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"primary\\\">Name</DecoratedHeader>\\n          </TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell width=\\\"100px\\\">Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"300px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell\\n            size={sizeOrDefault(cellSize)}\\n            style={{ background: \\\"cadetBlue\\\" }}\\n          >\\n            <div\\n              style={{\\n                background: \\\"pink\\\",\\n                width: \\\"100%\\\",\\n                height: \\\"100%\\\",\\n              }}\\n            >\\n              23\\n            </div>\\n          </TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow size={sizeOrDefault(rowSize)}>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell\\n            size={sizeOrDefault(cellSizeApril)}\\n            style={{ background: \\\"cadetBlue\\\" }}\\n          >\\n            <div\\n              style={{\\n                background: \\\"pink\\\",\\n                width: \\\"100%\\\",\\n                height: \\\"100%\\\",\\n              }}\\n            >\\n              82\\n            </div>\\n          </TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nSizeUse.storyName = \\\"size use\\\";\\n\\nSizeUse.argTypes = {\\n  tableSize: {\\n    control: \\\"radio\\\",\\n    name: \\\"Table Size\\\",\\n    options: [\\\"default\\\", \\\"none\\\", \\\"compact\\\", \\\"comfortable\\\"],\\n    labels: {\\n      default: \\\"default size\\\",\\n      none: \\\"no size adjustment\\\",\\n      compact: \\\"compact\\\",\\n      comfortable: \\\"comfortable\\\",\\n    },\\n  },\\n  rowSize: {\\n    control: \\\"radio\\\",\\n    name: \\\"Row Size (April)\\\",\\n    options: [\\\"default\\\", \\\"none\\\", \\\"compact\\\", \\\"comfortable\\\"],\\n    labels: {\\n      default: \\\"default size\\\",\\n      none: \\\"no size adjustment\\\",\\n      compact: \\\"compact\\\",\\n      comfortable: \\\"comfortable\\\",\\n    },\\n  },\\n  cellSize: {\\n    control: \\\"radio\\\",\\n    name: \\\"Cell Size (Jeff, Age Cell)\\\",\\n    options: [\\\"default\\\", \\\"none\\\", \\\"compact\\\", \\\"comfortable\\\"],\\n    labels: {\\n      default: \\\"default size\\\",\\n      none: \\\"no size adjustment\\\",\\n      compact: \\\"compact\\\",\\n      comfortable: \\\"comfortable\\\",\\n    },\\n  },\\n  cellSizeApril: {\\n    control: \\\"radio\\\",\\n    name: \\\"Cell Size (April, Age Cell)\\\",\\n    options: [\\\"default\\\", \\\"none\\\", \\\"compact\\\", \\\"comfortable\\\"],\\n    labels: {\\n      default: \\\"default size\\\",\\n      none: \\\"no size adjustment\\\",\\n      compact: \\\"compact\\\",\\n      comfortable: \\\"comfortable\\\",\\n    },\\n  },\\n};\\n\\nSizeUse.args = {\\n  tableSize: \\\"default\\\",\\n  cellSize: \\\"comfortable\\\",\\n  rowSize: \\\"none\\\",\\n  cellSizeApril: \\\"none\\\",\\n};\\n\\nexport const VerticalRule = () => {\\n  return (\\n    <Table verticalRule>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"40%\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nVerticalRule.storyName = \\\"vertical rule\\\";\\n\\nexport const TextAlignment = () => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"left\\\">\\n            Left\\n          </TableHeaderCell>\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"center\\\">\\n            Center\\n          </TableHeaderCell>\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"right\\\">\\n            Right\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>\\n            prop <code>textAlign</code>\\n          </TableHeaderCell>\\n          <TableCell textAlign=\\\"left\\\">\\n            <code>left</code>\\n          </TableCell>\\n          <TableCell textAlign=\\\"center\\\">\\n            <code>center</code>\\n          </TableCell>\\n          <TableCell textAlign=\\\"right\\\">\\n            <code>right</code>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>en Français</TableHeaderCell>\\n          <TableCell textAlign=\\\"left\\\">Gauche</TableCell>\\n          <TableCell textAlign=\\\"center\\\">Centre</TableCell>\\n          <TableCell textAlign=\\\"right\\\">Droit</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nTextAlignment.storyName = \\\"text alignment\\\";\\n\\nexport const ColumnSpan = () => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell colSpan={2}>Headers can span too!</TableHeaderCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>1</TableHeaderCell>\\n          <TableHeaderCell>2</TableHeaderCell>\\n          <TableHeaderCell>3</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>no</TableCell>\\n          <TableCell>\\n            <code>colSpan</code>\\n          </TableCell>\\n          <TableCell>specified</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell colSpan={2}>\\n            <code>colSpan={\\\"{2}\\\"}</code>\\n          </TableCell>\\n          <TableCell>3</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell colSpan={3}>\\n            <code>colSpan={\\\"{3}\\\"}</code>\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nColumnSpan.storyName = \\\"column span\\\";\\n\\nexport const RowSpan = () => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell rowSpan={2} />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>1</TableHeaderCell>\\n          <TableCell rowSpan={3}>\\n            <code>\\n              rowSpan={\\\"{\\\"}3{\\\"}\\\"}\\n            </code>\\n          </TableCell>\\n          <TableCell rowSpan={2}>\\n            <code>\\n              rowSpan={\\\"{\\\"}2{\\\"}\\\"}\\n            </code>\\n          </TableCell>\\n          <TableCell>no</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>2</TableHeaderCell>\\n          <TableCell>\\n            <code>rowSpan</code>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>3</TableHeaderCell>\\n          <TableCell />\\n          <TableCell>specified</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nRowSpan.storyName = \\\"row span\\\";\\n\\nexport const FullWidthTable = () => {\\n  return (\\n    <Table fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          {Array(20)\\n            .fill(null)\\n            .map((_, idx) => (\\n              <TableHeaderCell key={idx}>{idx + 1}</TableHeaderCell>\\n            ))}\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        {Array(20)\\n          .fill(null)\\n          .map((_, idx) => (\\n            <TableRow key={idx}>\\n              <TableHeaderCell>{idx + 1}</TableHeaderCell>\\n              {Array(20)\\n                .fill(null)\\n                .map((_, jdx) => (\\n                  <TableCell key={jdx}>{(idx + 1) * (jdx + 1)}</TableCell>\\n                ))}\\n            </TableRow>\\n          ))}\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nFullWidthTable.storyName = \\\"full width table\\\";\\n\\nexport const NonInteractiveUse = () => {\\n  return (\\n    <Table interactive={false}>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nNonInteractiveUse.storyName = \\\"non-interactive use\\\";\\n\\nexport const WithFixedWidths = () => {\\n  return (\\n    <Table interactive={false} fullWidth fixed>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell>Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nWithFixedWidths.storyName = \\\"with fixed widths\\\";\\n\\nexport const WithEllipsisTruncation = () => {\\n  return (\\n    <Table interactive={false} fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\" maxWidth={500}>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nWithEllipsisTruncation.storyName = \\\"with ellipsis truncation\\\";\\n\\nexport const WithForcedWrap = () => {\\n  return (\\n    <Table interactive={false} fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\" maxWidth={500}>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nWithForcedWrap.storyName = \\\"with forced wrap\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":63},\"endLoc\":{\"col\":1,\"line\":122},\"startBody\":{\"col\":24,\"line\":63},\"endBody\":{\"col\":1,\"line\":122}},\"Sorting\":{\"startLoc\":{\"col\":23,\"line\":126},\"endLoc\":{\"col\":1,\"line\":298},\"startBody\":{\"col\":23,\"line\":126},\"endBody\":{\"col\":1,\"line\":298}},\"CustomComponentUse\":{\"startLoc\":{\"col\":34,\"line\":302},\"endLoc\":{\"col\":1,\"line\":377},\"startBody\":{\"col\":34,\"line\":302},\"endBody\":{\"col\":1,\"line\":377}},\"SizeUse\":{\"startLoc\":{\"col\":23,\"line\":381},\"endLoc\":{\"col\":1,\"line\":482},\"startBody\":{\"col\":23,\"line\":381},\"endBody\":{\"col\":1,\"line\":482}},\"VerticalRule\":{\"startLoc\":{\"col\":28,\"line\":540},\"endLoc\":{\"col\":1,\"line\":599},\"startBody\":{\"col\":28,\"line\":540},\"endBody\":{\"col\":1,\"line\":599}},\"TextAlignment\":{\"startLoc\":{\"col\":29,\"line\":603},\"endLoc\":{\"col\":1,\"line\":644},\"startBody\":{\"col\":29,\"line\":603},\"endBody\":{\"col\":1,\"line\":644}},\"ColumnSpan\":{\"startLoc\":{\"col\":26,\"line\":648},\"endLoc\":{\"col\":1,\"line\":684},\"startBody\":{\"col\":26,\"line\":648},\"endBody\":{\"col\":1,\"line\":684}},\"RowSpan\":{\"startLoc\":{\"col\":23,\"line\":688},\"endLoc\":{\"col\":1,\"line\":733},\"startBody\":{\"col\":23,\"line\":688},\"endBody\":{\"col\":1,\"line\":733}},\"FullWidthTable\":{\"startLoc\":{\"col\":30,\"line\":737},\"endLoc\":{\"col\":1,\"line\":766},\"startBody\":{\"col\":30,\"line\":737},\"endBody\":{\"col\":1,\"line\":766}},\"NonInteractiveUse\":{\"startLoc\":{\"col\":33,\"line\":770},\"endLoc\":{\"col\":1,\"line\":829},\"startBody\":{\"col\":33,\"line\":770},\"endBody\":{\"col\":1,\"line\":829}},\"WithFixedWidths\":{\"startLoc\":{\"col\":31,\"line\":833},\"endLoc\":{\"col\":1,\"line\":900},\"startBody\":{\"col\":31,\"line\":833},\"endBody\":{\"col\":1,\"line\":900}},\"WithEllipsisTruncation\":{\"startLoc\":{\"col\":38,\"line\":904},\"endLoc\":{\"col\":1,\"line\":971},\"startBody\":{\"col\":38,\"line\":904},\"endBody\":{\"col\":1,\"line\":971}},\"WithForcedWrap\":{\"startLoc\":{\"col\":30,\"line\":975},\"endLoc\":{\"col\":1,\"line\":1042},\"startBody\":{\"col\":30,\"line\":975},\"endBody\":{\"col\":1,\"line\":1042}}};\n    \nimport React, { useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport camelCase from \"lodash/camelCase\";\nimport {\n  colorSelector,\n  getIntentColor,\n  getSpacing,\n} from \"@braze/beacon-styling\";\nimport { ColorBaseType } from \"@braze/beacon-theme\";\n\nimport { TableHeader } from \"../TableHeader\";\nimport { TableBody } from \"../TableBody\";\nimport { TableHeaderCell } from \"../TableHeaderCell\";\nimport { TableRow } from \"../TableRow\";\nimport { TableCell } from \"../TableCell\";\nimport { TableCaption } from \"../TableCaption\";\nimport { TableFooter } from \"../TableFooter\";\n\nimport { Table } from \"./Table\";\nimport page from \"./Table.docs.mdx\";\n\nconst DecoratedHeaderDot = styled.span`\n  display: inline-block;\n  margin-left: ${getSpacing(\"sm\")};\n  background: ${(props: { color: ColorBaseType }) =>\n    colorSelector(props, props.color, 300)};\n  height: 10px;\n  width: 10px;\n  border-radius: 100%;\n`;\n\nconst DecoratedHeader = ({ children, color }) => (\n  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n    <span>{children}</span>\n    <DecoratedHeaderDot color={color} />\n  </div>\n);\n\nconst OrangeRow = styled(TableRow)`\n  background: ${getIntentColor(\"warning\", 300)};\n  :hover {\n    background: ${getIntentColor(\"warning\", 100)};\n  }\n`;\n\nconst ColorContent = styled.span<{ favColor: string }>`\n  color: ${({ favColor }: { favColor: string }) => camelCase(favColor)};\n`;\n\nconst DegreeContent = ({ children }) => (\n  <React.Fragment>{children}&deg;</React.Fragment>\n);\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Content Display/Table\",\n  component: Table,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = () => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"500px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell>All mimsy were the borogoves</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell>Long time the manxome foe he sought</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nexport const Sorting = () => {\n  const data = useMemo(\n    () => [\n      {\n        id: \"1\",\n        name: \"Sarah\",\n        favoriteColor: \"Forest Green\",\n        birthYear: 1989,\n        favoriteLine:\n          \"She puzzled over this for some time, but at last a bright thought struck her. “Why, it’s a Looking-glass book, of course! And if I hold it up to a glass, the words will all go the right way again.”\",\n      },\n      {\n        id: \"2\",\n        name: \"Jeff\",\n        favoriteColor: \"Pink\",\n        birthYear: 1998,\n        favoriteLine: \"The vorpal blade went snicker-snack!\",\n      },\n      {\n        id: \"3\",\n        name: \"Hubert Blaine Wolfesch...\",\n        favoriteColor: \"Firebrick\",\n        birthYear: 2002,\n        favoriteLine: \"The Jabberwock, with eyes of flame\",\n      },\n      {\n        id: \"4\",\n        name: \"April\",\n        favoriteColor: \"Cadet Blue\",\n        birthYear: 1939,\n        favoriteLine: \"All mimsy were the borogoves\",\n      },\n      {\n        id: \"5\",\n        name: \"Henry\",\n        favoriteColor: \"Dark Goldenrod\",\n        birthYear: 1975,\n        favoriteLine: \"Long time the manxome foe he sought\",\n      },\n    ],\n    []\n  );\n  const [sortDirection, setSortDirection] = useState<{\n    col: string | undefined;\n    dir: \"asc\" | \"desc\" | undefined | false;\n  }>({\n    col: undefined,\n    dir: undefined,\n  });\n  const sorted = useMemo(() => {\n    const { col, dir } = sortDirection;\n\n    if (!col || !dir) {\n      return data;\n    }\n\n    return [...data].sort((a, b) => {\n      if (dir === \"asc\") {\n        if (a[col] > b[col]) {\n          return 1;\n        }\n\n        if (a[col] < b[col]) {\n          return -1;\n        }\n      } else if (dir === \"desc\") {\n        if (a[col] > b[col]) {\n          return -1;\n        }\n\n        if (a[col] < b[col]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    });\n  }, [data, sortDirection]);\n\n  const handleClick =\n    (col: string, firstSortDirection: typeof sortDirection[\"dir\"] = \"desc\") =>\n    () => {\n      if (col === sortDirection.col) {\n        if (sortDirection.dir === \"asc\") {\n          setSortDirection({ col, dir: \"desc\" });\n        }\n\n        if (sortDirection.dir === \"desc\") {\n          setSortDirection({ col, dir: \"asc\" });\n        }\n      } else {\n        setSortDirection({ col, dir: firstSortDirection });\n      }\n    };\n\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell\n            sortDirection={sortDirection.col === \"name\" && sortDirection.dir}\n            onClick={handleClick(\"name\")}\n            textAlign=\"left\"\n          >\n            Name\n          </TableHeaderCell>\n          <TableHeaderCell\n            sortDirection={\n              sortDirection.col === \"favoriteColor\" && sortDirection.dir\n            }\n            onClick={handleClick(\"favoriteColor\")}\n            sortMessages={{\n              asc: \"Sorting by Hue, in ascending intensity\",\n              desc: \"Sorting by Hue, in descending intensity\",\n              none: \"Select to sort Color by Hue in descending intensity\",\n            }}\n            textAlign=\"center\"\n          >\n            Favorite Color\n          </TableHeaderCell>\n          <TableHeaderCell\n            sortDirection={\n              sortDirection.col === \"birthYear\" && sortDirection.dir\n            }\n            onClick={handleClick(\"birthYear\", \"asc\")}\n            sortMessages={{\n              asc: \"Sorting by Birth Year, in ascending awesomeness\",\n              desc: \"Sorting by Birth Year, in descending awesomeness\",\n              none: \"Select to sort Birth Year in ascending awesomeness\",\n            }}\n            firstSortDirection=\"asc\"\n            textAlign=\"right\"\n            width=\"80px\"\n          >\n            Birth Year\n          </TableHeaderCell>\n          <TableHeaderCell\n            sortDirection={\n              sortDirection.col === \"birthYear\" && sortDirection.dir === \"asc\"\n                ? \"desc\"\n                : \"asc\"\n            }\n            sortTooltipPlacement=\"right\"\n            firstSortDirection=\"asc\"\n            textAlign=\"right\"\n          >\n            Age\n          </TableHeaderCell>\n          <TableHeaderCell textAlign=\"left\" width=\"400px\">\n            Favorite Line\n          </TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {sorted.map((row) => (\n          <TableRow key={row.id}>\n            <TableCell textAlign=\"left\">{row.name}</TableCell>\n            <TableCell textAlign=\"center\">\n              <ColorContent favColor={row.favoriteColor}>\n                {row.favoriteColor}\n              </ColorContent>\n            </TableCell>\n            <TableCell textAlign=\"right\">{row.birthYear}</TableCell>\n            <TableCell textAlign=\"right\">\n              {new Date().getFullYear() - row.birthYear}\n            </TableCell>\n            <TableCell textAlign=\"left\">{row.favoriteLine}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};;\n\nSorting.storyName = \"sorting\";\n\nexport const CustomComponentUse = () => {\n  return (\n    <Table>\n      <TableCaption>\n        Description of temperatures in different scales\n      </TableCaption>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>&nbsp;</TableHeaderCell>\n          <TableHeaderCell size=\"none\">\n            <DecoratedHeader color=\"primary\">Celcius</DecoratedHeader>\n          </TableHeaderCell>\n          <TableHeaderCell size=\"none\">\n            <DecoratedHeader color=\"danger\">Farenheit</DecoratedHeader>\n          </TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableHeaderCell>Freezing</TableHeaderCell>\n          <TableCell>\n            <DegreeContent>0</DegreeContent>\n          </TableCell>\n          <TableCell width=\"300px\">\n            <DegreeContent>32</DegreeContent>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>\n            <span role=\"img\" aria-label=\"Smiling Face with Sunglasses\">\n              😎\n            </span>\n          </TableHeaderCell>\n          <TableCell>\n            <DegreeContent>24</DegreeContent>\n          </TableCell>\n          <TableCell>\n            <DegreeContent>75</DegreeContent>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>Boiling</TableHeaderCell>\n          <TableCell>\n            <DegreeContent>100</DegreeContent>\n          </TableCell>\n          <TableCell>\n            <DegreeContent>212</DegreeContent>\n          </TableCell>\n        </TableRow>\n        <OrangeRow>\n          <TableHeaderCell>Paper auto-ignition</TableHeaderCell>\n          <TableCell>\n            <DegreeContent>233</DegreeContent>\n          </TableCell>\n          <TableCell>\n            <DegreeContent>451</DegreeContent>\n          </TableCell>\n        </OrangeRow>\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableCell colSpan={3}>\n            For more information about temperature, visit{\" \"}\n            <a\n              href=\"https://en.wikipedia.org/wiki/Scale_of_temperature\"\n              target=\"blank\"\n            >\n              this page\n            </a>\n            .\n          </TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n};;\n\nCustomComponentUse.storyName = \"custom component use\";\n\nexport const SizeUse = ({\n  tableSize,\n  rowSize,\n  cellSize,\n  cellSizeApril,\n}: {\n  tableSize: \"default\" | \"none\" | \"compact\" | \"comfortable\";\n  rowSize: \"default\" | \"none\" | \"compact\" | \"comfortable\";\n  cellSize: \"default\" | \"none\" | \"compact\" | \"comfortable\";\n  cellSizeApril: \"default\" | \"none\" | \"compact\" | \"comfortable\";\n}) => {\n  const sizeOrDefault = (\n    size: \"default\" | \"none\" | \"compact\" | \"comfortable\"\n  ) => (size === \"default\" ? undefined : size);\n\n  return (\n    <Table size={sizeOrDefault(tableSize)}>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell size=\"none\">\n            <DecoratedHeader color=\"primary\">Name</DecoratedHeader>\n          </TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell width=\"100px\">Age</TableHeaderCell>\n          <TableHeaderCell width=\"300px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell\n            size={sizeOrDefault(cellSize)}\n            style={{ background: \"cadetBlue\" }}\n          >\n            <div\n              style={{\n                background: \"pink\",\n                width: \"100%\",\n                height: \"100%\",\n              }}\n            >\n              23\n            </div>\n          </TableCell>\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\n        </TableRow>\n        <TableRow size={sizeOrDefault(rowSize)}>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell\n            size={sizeOrDefault(cellSizeApril)}\n            style={{ background: \"cadetBlue\" }}\n          >\n            <div\n              style={{\n                background: \"pink\",\n                width: \"100%\",\n                height: \"100%\",\n              }}\n            >\n              82\n            </div>\n          </TableCell>\n          <TableCell>All mimsy were the borogoves</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell>Long time the manxome foe he sought</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nSizeUse.storyName = \"size use\";\n\nSizeUse.argTypes = {\n  tableSize: {\n    control: \"radio\",\n    name: \"Table Size\",\n    options: [\"default\", \"none\", \"compact\", \"comfortable\"],\n    labels: {\n      default: \"default size\",\n      none: \"no size adjustment\",\n      compact: \"compact\",\n      comfortable: \"comfortable\",\n    },\n  },\n  rowSize: {\n    control: \"radio\",\n    name: \"Row Size (April)\",\n    options: [\"default\", \"none\", \"compact\", \"comfortable\"],\n    labels: {\n      default: \"default size\",\n      none: \"no size adjustment\",\n      compact: \"compact\",\n      comfortable: \"comfortable\",\n    },\n  },\n  cellSize: {\n    control: \"radio\",\n    name: \"Cell Size (Jeff, Age Cell)\",\n    options: [\"default\", \"none\", \"compact\", \"comfortable\"],\n    labels: {\n      default: \"default size\",\n      none: \"no size adjustment\",\n      compact: \"compact\",\n      comfortable: \"comfortable\",\n    },\n  },\n  cellSizeApril: {\n    control: \"radio\",\n    name: \"Cell Size (April, Age Cell)\",\n    options: [\"default\", \"none\", \"compact\", \"comfortable\"],\n    labels: {\n      default: \"default size\",\n      none: \"no size adjustment\",\n      compact: \"compact\",\n      comfortable: \"comfortable\",\n    },\n  },\n};\n\nSizeUse.args = {\n  tableSize: \"default\",\n  cellSize: \"comfortable\",\n  rowSize: \"none\",\n  cellSizeApril: \"none\",\n};\n\nexport const VerticalRule = () => {\n  return (\n    <Table verticalRule>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"40%\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell>All mimsy were the borogoves</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell>Long time the manxome foe he sought</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nVerticalRule.storyName = \"vertical rule\";\n\nexport const TextAlignment = () => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell />\n          <TableHeaderCell width=\"25%\" textAlign=\"left\">\n            Left\n          </TableHeaderCell>\n          <TableHeaderCell width=\"25%\" textAlign=\"center\">\n            Center\n          </TableHeaderCell>\n          <TableHeaderCell width=\"25%\" textAlign=\"right\">\n            Right\n          </TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableHeaderCell>\n            prop <code>textAlign</code>\n          </TableHeaderCell>\n          <TableCell textAlign=\"left\">\n            <code>left</code>\n          </TableCell>\n          <TableCell textAlign=\"center\">\n            <code>center</code>\n          </TableCell>\n          <TableCell textAlign=\"right\">\n            <code>right</code>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>en Français</TableHeaderCell>\n          <TableCell textAlign=\"left\">Gauche</TableCell>\n          <TableCell textAlign=\"center\">Centre</TableCell>\n          <TableCell textAlign=\"right\">Droit</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nTextAlignment.storyName = \"text alignment\";\n\nexport const ColumnSpan = () => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell />\n          <TableHeaderCell colSpan={2}>Headers can span too!</TableHeaderCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>1</TableHeaderCell>\n          <TableHeaderCell>2</TableHeaderCell>\n          <TableHeaderCell>3</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>no</TableCell>\n          <TableCell>\n            <code>colSpan</code>\n          </TableCell>\n          <TableCell>specified</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={2}>\n            <code>colSpan={\"{2}\"}</code>\n          </TableCell>\n          <TableCell>3</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={3}>\n            <code>colSpan={\"{3}\"}</code>\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nColumnSpan.storyName = \"column span\";\n\nexport const RowSpan = () => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell rowSpan={2} />\n          <TableHeaderCell />\n          <TableHeaderCell />\n          <TableHeaderCell />\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell />\n          <TableHeaderCell />\n          <TableHeaderCell />\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableHeaderCell>1</TableHeaderCell>\n          <TableCell rowSpan={3}>\n            <code>\n              rowSpan={\"{\"}3{\"}\"}\n            </code>\n          </TableCell>\n          <TableCell rowSpan={2}>\n            <code>\n              rowSpan={\"{\"}2{\"}\"}\n            </code>\n          </TableCell>\n          <TableCell>no</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>2</TableHeaderCell>\n          <TableCell>\n            <code>rowSpan</code>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>3</TableHeaderCell>\n          <TableCell />\n          <TableCell>specified</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nRowSpan.storyName = \"row span\";\n\nexport const FullWidthTable = () => {\n  return (\n    <Table fullWidth>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell />\n          {Array(20)\n            .fill(null)\n            .map((_, idx) => (\n              <TableHeaderCell key={idx}>{idx + 1}</TableHeaderCell>\n            ))}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {Array(20)\n          .fill(null)\n          .map((_, idx) => (\n            <TableRow key={idx}>\n              <TableHeaderCell>{idx + 1}</TableHeaderCell>\n              {Array(20)\n                .fill(null)\n                .map((_, jdx) => (\n                  <TableCell key={jdx}>{(idx + 1) * (jdx + 1)}</TableCell>\n                ))}\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  );\n};;\n\nFullWidthTable.storyName = \"full width table\";\n\nexport const NonInteractiveUse = () => {\n  return (\n    <Table interactive={false}>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"500px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell>All mimsy were the borogoves</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell>Long time the manxome foe he sought</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nNonInteractiveUse.storyName = \"non-interactive use\";\n\nexport const WithFixedWidths = () => {\n  return (\n    <Table interactive={false} fullWidth fixed>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell>Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            The vorpal blade went snicker-snack!\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            The Jabberwock, with eyes of flame\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            All mimsy were the borogoves\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            Long time the manxome foe he sought\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nWithFixedWidths.storyName = \"with fixed widths\";\n\nexport const WithEllipsisTruncation = () => {\n  return (\n    <Table interactive={false} fullWidth>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"500px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell truncation=\"ellipsis\" maxWidth={500}>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            The vorpal blade went snicker-snack!\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            The Jabberwock, with eyes of flame\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            All mimsy were the borogoves\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            Long time the manxome foe he sought\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nWithEllipsisTruncation.storyName = \"with ellipsis truncation\";\n\nexport const WithForcedWrap = () => {\n  return (\n    <Table interactive={false} fullWidth>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"500px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell truncation=\"force-wrap\" maxWidth={500}>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell truncation=\"force-wrap\">\n            The vorpal blade went snicker-snack!\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell truncation=\"force-wrap\">\n            The Jabberwock, with eyes of flame\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell truncation=\"force-wrap\">\n            All mimsy were the borogoves\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell truncation=\"force-wrap\">\n            Long time the manxome foe he sought\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n\nWithForcedWrap.storyName = \"with forced wrap\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...BasicUse.parameters };\nSorting.parameters = { storySource: { source: \"() => {\\n  const data = useMemo(\\n    () => [\\n      {\\n        id: \\\"1\\\",\\n        name: \\\"Sarah\\\",\\n        favoriteColor: \\\"Forest Green\\\",\\n        birthYear: 1989,\\n        favoriteLine:\\n          \\\"She puzzled over this for some time, but at last a bright thought struck her. “Why, it’s a Looking-glass book, of course! And if I hold it up to a glass, the words will all go the right way again.”\\\",\\n      },\\n      {\\n        id: \\\"2\\\",\\n        name: \\\"Jeff\\\",\\n        favoriteColor: \\\"Pink\\\",\\n        birthYear: 1998,\\n        favoriteLine: \\\"The vorpal blade went snicker-snack!\\\",\\n      },\\n      {\\n        id: \\\"3\\\",\\n        name: \\\"Hubert Blaine Wolfesch...\\\",\\n        favoriteColor: \\\"Firebrick\\\",\\n        birthYear: 2002,\\n        favoriteLine: \\\"The Jabberwock, with eyes of flame\\\",\\n      },\\n      {\\n        id: \\\"4\\\",\\n        name: \\\"April\\\",\\n        favoriteColor: \\\"Cadet Blue\\\",\\n        birthYear: 1939,\\n        favoriteLine: \\\"All mimsy were the borogoves\\\",\\n      },\\n      {\\n        id: \\\"5\\\",\\n        name: \\\"Henry\\\",\\n        favoriteColor: \\\"Dark Goldenrod\\\",\\n        birthYear: 1975,\\n        favoriteLine: \\\"Long time the manxome foe he sought\\\",\\n      },\\n    ],\\n    []\\n  );\\n  const [sortDirection, setSortDirection] = useState<{\\n    col: string | undefined;\\n    dir: \\\"asc\\\" | \\\"desc\\\" | undefined | false;\\n  }>({\\n    col: undefined,\\n    dir: undefined,\\n  });\\n  const sorted = useMemo(() => {\\n    const { col, dir } = sortDirection;\\n\\n    if (!col || !dir) {\\n      return data;\\n    }\\n\\n    return [...data].sort((a, b) => {\\n      if (dir === \\\"asc\\\") {\\n        if (a[col] > b[col]) {\\n          return 1;\\n        }\\n\\n        if (a[col] < b[col]) {\\n          return -1;\\n        }\\n      } else if (dir === \\\"desc\\\") {\\n        if (a[col] > b[col]) {\\n          return -1;\\n        }\\n\\n        if (a[col] < b[col]) {\\n          return 1;\\n        }\\n      }\\n\\n      return 0;\\n    });\\n  }, [data, sortDirection]);\\n\\n  const handleClick =\\n    (col: string, firstSortDirection: typeof sortDirection[\\\"dir\\\"] = \\\"desc\\\") =>\\n    () => {\\n      if (col === sortDirection.col) {\\n        if (sortDirection.dir === \\\"asc\\\") {\\n          setSortDirection({ col, dir: \\\"desc\\\" });\\n        }\\n\\n        if (sortDirection.dir === \\\"desc\\\") {\\n          setSortDirection({ col, dir: \\\"asc\\\" });\\n        }\\n      } else {\\n        setSortDirection({ col, dir: firstSortDirection });\\n      }\\n    };\\n\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell\\n            sortDirection={sortDirection.col === \\\"name\\\" && sortDirection.dir}\\n            onClick={handleClick(\\\"name\\\")}\\n            textAlign=\\\"left\\\"\\n          >\\n            Name\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"favoriteColor\\\" && sortDirection.dir\\n            }\\n            onClick={handleClick(\\\"favoriteColor\\\")}\\n            sortMessages={{\\n              asc: \\\"Sorting by Hue, in ascending intensity\\\",\\n              desc: \\\"Sorting by Hue, in descending intensity\\\",\\n              none: \\\"Select to sort Color by Hue in descending intensity\\\",\\n            }}\\n            textAlign=\\\"center\\\"\\n          >\\n            Favorite Color\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"birthYear\\\" && sortDirection.dir\\n            }\\n            onClick={handleClick(\\\"birthYear\\\", \\\"asc\\\")}\\n            sortMessages={{\\n              asc: \\\"Sorting by Birth Year, in ascending awesomeness\\\",\\n              desc: \\\"Sorting by Birth Year, in descending awesomeness\\\",\\n              none: \\\"Select to sort Birth Year in ascending awesomeness\\\",\\n            }}\\n            firstSortDirection=\\\"asc\\\"\\n            textAlign=\\\"right\\\"\\n            width=\\\"80px\\\"\\n          >\\n            Birth Year\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"birthYear\\\" && sortDirection.dir === \\\"asc\\\"\\n                ? \\\"desc\\\"\\n                : \\\"asc\\\"\\n            }\\n            sortTooltipPlacement=\\\"right\\\"\\n            firstSortDirection=\\\"asc\\\"\\n            textAlign=\\\"right\\\"\\n          >\\n            Age\\n          </TableHeaderCell>\\n          <TableHeaderCell textAlign=\\\"left\\\" width=\\\"400px\\\">\\n            Favorite Line\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        {sorted.map((row) => (\\n          <TableRow key={row.id}>\\n            <TableCell textAlign=\\\"left\\\">{row.name}</TableCell>\\n            <TableCell textAlign=\\\"center\\\">\\n              <ColorContent favColor={row.favoriteColor}>\\n                {row.favoriteColor}\\n              </ColorContent>\\n            </TableCell>\\n            <TableCell textAlign=\\\"right\\\">{row.birthYear}</TableCell>\\n            <TableCell textAlign=\\\"right\\\">\\n              {new Date().getFullYear() - row.birthYear}\\n            </TableCell>\\n            <TableCell textAlign=\\\"left\\\">{row.favoriteLine}</TableCell>\\n          </TableRow>\\n        ))}\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...Sorting.parameters };\nCustomComponentUse.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableCaption>\\n        Description of temperatures in different scales\\n      </TableCaption>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>&nbsp;</TableHeaderCell>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"primary\\\">Celcius</DecoratedHeader>\\n          </TableHeaderCell>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"danger\\\">Farenheit</DecoratedHeader>\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>Freezing</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>0</DegreeContent>\\n          </TableCell>\\n          <TableCell width=\\\"300px\\\">\\n            <DegreeContent>32</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>\\n            <span role=\\\"img\\\" aria-label=\\\"Smiling Face with Sunglasses\\\">\\n              😎\\n            </span>\\n          </TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>24</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>75</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>Boiling</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>100</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>212</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <OrangeRow>\\n          <TableHeaderCell>Paper auto-ignition</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>233</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>451</DegreeContent>\\n          </TableCell>\\n        </OrangeRow>\\n      </TableBody>\\n      <TableFooter>\\n        <TableRow>\\n          <TableCell colSpan={3}>\\n            For more information about temperature, visit{\\\" \\\"}\\n            <a\\n              href=\\\"https://en.wikipedia.org/wiki/Scale_of_temperature\\\"\\n              target=\\\"blank\\\"\\n            >\\n              this page\\n            </a>\\n            .\\n          </TableCell>\\n        </TableRow>\\n      </TableFooter>\\n    </Table>\\n  );\\n}\" }, ...CustomComponentUse.parameters };\nSizeUse.parameters = { storySource: { source: \"({\\n  tableSize,\\n  rowSize,\\n  cellSize,\\n  cellSizeApril,\\n}: {\\n  tableSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  rowSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  cellSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  cellSizeApril: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n}) => {\\n  const sizeOrDefault = (\\n    size: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\"\\n  ) => (size === \\\"default\\\" ? undefined : size);\\n\\n  return (\\n    <Table size={sizeOrDefault(tableSize)}>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"primary\\\">Name</DecoratedHeader>\\n          </TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell width=\\\"100px\\\">Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"300px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell\\n            size={sizeOrDefault(cellSize)}\\n            style={{ background: \\\"cadetBlue\\\" }}\\n          >\\n            <div\\n              style={{\\n                background: \\\"pink\\\",\\n                width: \\\"100%\\\",\\n                height: \\\"100%\\\",\\n              }}\\n            >\\n              23\\n            </div>\\n          </TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow size={sizeOrDefault(rowSize)}>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell\\n            size={sizeOrDefault(cellSizeApril)}\\n            style={{ background: \\\"cadetBlue\\\" }}\\n          >\\n            <div\\n              style={{\\n                background: \\\"pink\\\",\\n                width: \\\"100%\\\",\\n                height: \\\"100%\\\",\\n              }}\\n            >\\n              82\\n            </div>\\n          </TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...SizeUse.parameters };\nVerticalRule.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table verticalRule>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"40%\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...VerticalRule.parameters };\nTextAlignment.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"left\\\">\\n            Left\\n          </TableHeaderCell>\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"center\\\">\\n            Center\\n          </TableHeaderCell>\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"right\\\">\\n            Right\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>\\n            prop <code>textAlign</code>\\n          </TableHeaderCell>\\n          <TableCell textAlign=\\\"left\\\">\\n            <code>left</code>\\n          </TableCell>\\n          <TableCell textAlign=\\\"center\\\">\\n            <code>center</code>\\n          </TableCell>\\n          <TableCell textAlign=\\\"right\\\">\\n            <code>right</code>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>en Français</TableHeaderCell>\\n          <TableCell textAlign=\\\"left\\\">Gauche</TableCell>\\n          <TableCell textAlign=\\\"center\\\">Centre</TableCell>\\n          <TableCell textAlign=\\\"right\\\">Droit</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...TextAlignment.parameters };\nColumnSpan.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell colSpan={2}>Headers can span too!</TableHeaderCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>1</TableHeaderCell>\\n          <TableHeaderCell>2</TableHeaderCell>\\n          <TableHeaderCell>3</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>no</TableCell>\\n          <TableCell>\\n            <code>colSpan</code>\\n          </TableCell>\\n          <TableCell>specified</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell colSpan={2}>\\n            <code>colSpan={\\\"{2}\\\"}</code>\\n          </TableCell>\\n          <TableCell>3</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell colSpan={3}>\\n            <code>colSpan={\\\"{3}\\\"}</code>\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...ColumnSpan.parameters };\nRowSpan.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell rowSpan={2} />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>1</TableHeaderCell>\\n          <TableCell rowSpan={3}>\\n            <code>\\n              rowSpan={\\\"{\\\"}3{\\\"}\\\"}\\n            </code>\\n          </TableCell>\\n          <TableCell rowSpan={2}>\\n            <code>\\n              rowSpan={\\\"{\\\"}2{\\\"}\\\"}\\n            </code>\\n          </TableCell>\\n          <TableCell>no</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>2</TableHeaderCell>\\n          <TableCell>\\n            <code>rowSpan</code>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>3</TableHeaderCell>\\n          <TableCell />\\n          <TableCell>specified</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...RowSpan.parameters };\nFullWidthTable.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          {Array(20)\\n            .fill(null)\\n            .map((_, idx) => (\\n              <TableHeaderCell key={idx}>{idx + 1}</TableHeaderCell>\\n            ))}\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        {Array(20)\\n          .fill(null)\\n          .map((_, idx) => (\\n            <TableRow key={idx}>\\n              <TableHeaderCell>{idx + 1}</TableHeaderCell>\\n              {Array(20)\\n                .fill(null)\\n                .map((_, jdx) => (\\n                  <TableCell key={jdx}>{(idx + 1) * (jdx + 1)}</TableCell>\\n                ))}\\n            </TableRow>\\n          ))}\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...FullWidthTable.parameters };\nNonInteractiveUse.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table interactive={false}>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...NonInteractiveUse.parameters };\nWithFixedWidths.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table interactive={false} fullWidth fixed>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell>Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...WithFixedWidths.parameters };\nWithEllipsisTruncation.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table interactive={false} fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\" maxWidth={500}>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...WithEllipsisTruncation.parameters };\nWithForcedWrap.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table interactive={false} fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\" maxWidth={500}>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...WithForcedWrap.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { TableProps } from \"./types\";\nimport { StyledTable } from \"./StyledTable\";\n\nexport const Table = React.forwardRef(\n  (\n    { className, interactive = true, ...props }: TableProps,\n    ref: React.RefObject<HTMLTableElement>\n  ) => (\n    <StyledTable\n      {...props}\n      ref={ref}\n      interactive={interactive}\n      className={classNames([\"bcl-Table\", \"bcl-table\", className])}\n    />\n  )\n);\n\nTable.displayName = \"Table\";\n","export { Table } from \"./Table\";\n\nexport type { TableProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\n\nimport { TableBodyProps } from \"./types\";\n\nconst getAttrs = ({ className }: TableBodyProps) => ({\n  className: classNames([\"bcl-tbody\", className]),\n});\n\nexport const TableBody = styled.tbody.attrs(getAttrs)<TableBodyProps>``;\n\nTableBody.displayName = \"TableBody\";\n","export { TableBody } from \"./TableBody\";\n\nexport type { TableBodyProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\n\nimport { TableCaptionProps } from \"./types\";\n\nconst getAttrs = ({ className }: TableCaptionProps) => ({\n  className: classNames([\"bcl-ta-caption\", className]),\n});\n\nexport const TableCaption = styled.caption.attrs(getAttrs)<TableCaptionProps>``;\n\nTableCaption.displayName = \"TableCaption\";\n","export { TableCaption } from \"./TableCaption\";\n\nexport type { TableCaptionProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled, { css } from \"styled-components\";\n\nimport { getSizeSpacing } from \"../../services/getSizeSpacing\";\n\nimport { StyledTableCellProps } from \"./types\";\n\nconst getTruncation = ({ truncation }: StyledTableCellProps) => {\n  if (truncation === \"ellipsis\") {\n    return css`\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      overflow: hidden;\n    `;\n  }\n\n  if (truncation === \"force-wrap\") {\n    return css`\n      overflow-wrap: anywhere;\n    `;\n  }\n\n  return null;\n};\n\nexport const StyledTableCell = styled.td.attrs(({ className, ...props }) => ({\n  ...props,\n  className: classNames([\"bcl-td\", className]),\n}))<StyledTableCellProps>`\n  text-align: ${(props) => props.textAlign};\n  position: relative;\n\n  ${({ size }) =>\n    size &&\n    css`\n      && {\n        padding: ${getSizeSpacing(size)};\n      }\n    `}\n\n  ${getTruncation};\n`;\n","import React from \"react\";\n\nimport { TableCellProps } from \"./types\";\nimport { StyledTableCell } from \"./StyledTableCell\";\n\nexport const TableCell = React.forwardRef(\n  (\n    {\n      textAlign = \"left\",\n      truncation = \"wrap\",\n      maxWidth,\n      style,\n      ...props\n    }: TableCellProps,\n    ref: React.RefObject<HTMLTableCellElement>\n  ) => (\n    <StyledTableCell\n      {...props}\n      ref={ref}\n      textAlign={textAlign}\n      truncation={truncation}\n      style={{ ...style, ...(maxWidth !== undefined && { maxWidth }) }}\n    />\n  )\n);\n\nTableCell.displayName = \"TableCell\";\n","export { TableCell } from \"./TableCell\";\n\nexport { StyledTableCell } from \"./StyledTableCell\";\n\nexport type { TableCellProps } from \"./types\";\n","import classNames from \"classnames\";\nimport styled from \"styled-components\";\n\nimport { TableFooterProps } from \"./types\";\n\nconst getAttrs = ({ className }: TableFooterProps) => ({\n  className: classNames([\"bcl-tfoot\", className]),\n});\n\nexport const TableFooter = styled.tfoot.attrs(getAttrs)<TableFooterProps>``;\n\nTableFooter.displayName = \"TableFooter\";\n","export { TableFooter } from \"./TableFooter\";\n\nexport type { TableFooterProps } from \"./types\";\n","import styled from \"styled-components\";\nimport { getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledTableHeaderCell } from \"../TableHeaderCell/StyledTableHeaderCell\";\nimport { StyledTableRow } from \"../TableRow/StyledTableRow\";\n\nimport { StyledTableHeaderProps } from \"./types\";\n\nexport const StyledTableHeader = styled.thead<StyledTableHeaderProps>`\n  ${StyledTableHeaderCell} {\n    padding-top: ${getSpacing(\"xl\")};\n  }\n\n  /* \n   * NOTE: added .bcl-tr temporarily to also cover 'TableRow' in beacon-labs without needing to \n   * further complicate things. when 'TableRow' in beacon-labs is merged here, the explicit \n   * class reference should be removed. -Hal\n   */\n  ${StyledTableRow}, .bcl-tr {\n    border-top: none;\n\n    :hover {\n      background: none;\n    }\n  }\n`;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { TableHeaderProps } from \"./types\";\nimport { StyledTableHeader } from \"./StyledTableHeader\";\n\nexport const TableHeader = React.forwardRef(\n  (\n    { className, ...props }: TableHeaderProps,\n    ref: React.RefObject<HTMLTableSectionElement>\n  ) => (\n    <StyledTableHeader\n      {...props}\n      ref={ref}\n      className={classNames([\"bcl-thead\", className])}\n    />\n  )\n);\n\nTableHeader.displayName = \"TableHeader\";\n","export { TableHeader } from \"./TableHeader\";\n\nexport type { TableHeaderProps } from \"./types\";\n","import { getColor, getFontSize } from \"@braze/beacon-styling\";\nimport styled, { css } from \"styled-components\";\nimport classNames from \"classnames\";\n\nimport { Icon } from \"../Icon\";\n\nimport { SortIconProps } from \"./types\";\n\nexport const SortIcon = styled(Icon).attrs(\n  ({ className, sortDirection, ...props }: SortIconProps) => ({\n    ...props,\n    className: classNames([\"bcl-sort-icon\", className]),\n    ...(sortDirection && { \"data-sort\": sortDirection }),\n  })\n)`\n  font-size: ${getFontSize(\"body\", \"sm\")};\n  ${({ inactive }: SortIconProps) =>\n    inactive &&\n    css`\n      color: ${getColor(\"gray\", 200)};\n    `}\n`;\n\nSortIcon.displayName = \"StyledSortIcon\";\n","import classNames from \"classnames\";\nimport styled, { css } from \"styled-components\";\nimport {\n  getFontSize,\n  getColor,\n  getFontFamily,\n  getFontWeight,\n  getSpacing,\n} from \"@braze/beacon-styling\";\n\nimport { getSizeSpacing } from \"../../services/getSizeSpacing\";\nimport { TableCell } from \"../TableCell\";\n\nimport { SortIcon } from \"./SortIcon\";\nimport { StyledTableHeaderCellProps } from \"./types\";\n\nexport const StyledTableHeaderCell = styled(TableCell).attrs(\n  ({ className, ...props }) => ({\n    ...props,\n    className: classNames([\"bcl-th\", className]),\n  })\n)<StyledTableHeaderCellProps>`\n  ${({ size }) =>\n    size &&\n    css`\n      &&& {\n        padding-top: ${getSizeSpacing(size)};\n      }\n    `}\n\n  cursor: default;\n  line-height: normal;\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  font-size: ${getFontSize(\"body\", \"sm\")};\n  color: ${getColor(\"gray\", 800)};\n  &[data-sortable] {\n    padding-right: 30px;\n  }\n\n  & ${SortIcon} {\n    color: ${getColor(\"gray\", 200)};\n    position: absolute;\n    padding-left: ${getSpacing(\"sm\")};\n    top: 40%;\n  }\n\n  &[data-sortable]:hover,\n  & > button:hover,\n  &[data-sortable]:focus-within {\n    background-color: ${getColor(\"gray\", 50)};\n    & ${SortIcon} {\n      color: ${getColor(\"gray\", 300)};\n    }\n  }\n\n  & > button {\n    font-family: ${getFontFamily(\"base\")};\n    font-weight: ${getFontWeight(\"bold\")};\n    font-size: ${getFontSize(\"body\", \"sm\")};\n    color: ${getColor(\"gray\", 800)};\n    width: 100%;\n    height: 100%;\n    position: relative;\n    text-align: ${(props) => props.textAlign || \"center\"};\n    &:focus,\n    &:hover {\n      // edge 79+ supports :focus-within, so for users with older edge, put a background color on the button only\n      background-color: ${getColor(\"gray\", 50)};\n    }\n  }\n\n  &[aria-sort],\n  &[aria-sort]:hover {\n    & ${SortIcon} {\n      color: ${getColor(\"gray\", 700)};\n    }\n  }\n`;\n","import React, { forwardRef, useCallback, useRef, useState } from \"react\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\nimport { useId } from \"@braze/beacon-hooks\";\n\nimport { Tooltip, useTooltip } from \"../Tooltip\";\n\nimport { SortIcon } from \"./SortIcon\";\nimport { StyledTableHeaderCell } from \"./StyledTableHeaderCell\";\nimport { getSortByMessages } from \"./utils/tooltipText\";\nimport { TableHeaderCellProps, SortDirection } from \"./types\";\n\n/**\n * Given the current sort direction, return what the next one would be\n * @param sortDirection \"asc\", \"desc\" or undefined for no sort\n * @param order whether desc or asc should be first when transitioning from unsorted to sorted, represented as [\"desc\", \"asc\"] or [\"asc\", \"desc\"]\n */\nconst nextDirection = (\n  sortDirection: SortDirection,\n  firstSortDirection: \"desc\" | \"asc\"\n): SortDirection => {\n  if (!sortDirection) {\n    return firstSortDirection;\n  }\n\n  if (sortDirection === firstSortDirection) {\n    return firstSortDirection === \"desc\" ? \"asc\" : \"desc\";\n  }\n\n  return firstSortDirection;\n};\n\nconst sortDirectionIcons = {\n  asc: \"sort-up\",\n  desc: \"sort-down\",\n} as const;\n\nconst getIconName = (\n  sortDirection: SortDirection,\n  nextSortDirection: SortDirection,\n  hovering: boolean\n): typeof sortDirectionIcons[keyof typeof sortDirectionIcons] | \"sort\" => {\n  if (sortDirection) {\n    return sortDirectionIcons[sortDirection];\n  }\n\n  // we are unsorted, let's return the next sort direction on hover\n  if (hovering) {\n    if (nextSortDirection) {\n      return sortDirectionIcons[nextSortDirection];\n    }\n  }\n\n  // unsorted, not hovering, return the generic \"unsorted\" icon\n  return \"sort\";\n};\n\nconst ariaSort = {\n  asc: \"ascending\",\n  desc: \"descending\",\n  none: undefined,\n} as const;\n\nexport const TableHeaderCell = forwardRef(\n  (\n    {\n      sortDirection,\n      children,\n      sortTooltipPlacement = \"auto\",\n      firstSortDirection = \"desc\",\n      columnName,\n      sortMessages,\n      onClick,\n      ...props\n    }: TableHeaderCellProps,\n    ref: React.RefObject<HTMLTableCellElement>\n  ): React.ReactElement => {\n    const [hovering, setHovering] = useState(false);\n    const nextSortDirection = nextDirection(sortDirection, firstSortDirection);\n    const tooltipId = useId(\"header-tooltip\");\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const headerRef = useRef<HTMLTableCellElement>(null);\n    const [tooltipState, targetRef] = useTooltip<HTMLTableCellElement>(\n      ref || headerRef\n    );\n\n    const { t } = useI18nNamespace(\"beacon-table\");\n\n    const sortBy = getSortByMessages(\n      t,\n      typeof children === \"string\" ? children : columnName || \"\",\n      sortDirection,\n      nextSortDirection,\n      sortMessages\n    );\n\n    const handleMouseUp = useCallback(() => {\n      buttonRef.current?.blur();\n    }, []);\n\n    // TODO: based on https://adrianroselli.com/2021/04/sortable-table-columns.html choose a way to implement\n    // full screen reader compatibility. First step is bringing <ScreenReaderText> to beacon\n    return (\n      <StyledTableHeaderCell\n        {...props}\n        onClick={onClick}\n        forwardedAs=\"th\"\n        ref={targetRef}\n        aria-sort={onClick ? ariaSort[sortDirection || \"none\"] : undefined}\n        data-sortable={onClick ? true : undefined}\n        onMouseEnter={() => setHovering(true)}\n        onMouseLeave={() => setHovering(false)}\n      >\n        {onClick ? (\n          <>\n            <button\n              type=\"button\"\n              onMouseUp={handleMouseUp}\n              // onKeyUp={handleBlurAfter}\n              ref={buttonRef}\n              aria-label={sortBy.ariaLabel}\n              aria-live=\"polite\"\n            >\n              {children}\n            </button>\n\n            <SortIcon\n              sortDirection={sortDirection}\n              aria-hidden\n              inactive={sortDirection && true}\n              name={getIconName(sortDirection, nextSortDirection, hovering)}\n            />\n            <Tooltip\n              {...tooltipState}\n              targetRef={targetRef}\n              placement={sortTooltipPlacement}\n              id={tooltipId}\n            >\n              {sortBy.tooltip}\n            </Tooltip>\n          </>\n        ) : (\n          children\n        )}\n      </StyledTableHeaderCell>\n    );\n  }\n);\n\nTableHeaderCell.displayName = \"TableHeaderCell\";\n","export * from \"./TableHeaderCell\";\n\nexport * from \"./StyledTableHeaderCell\";\n\nexport * from \"./types\";\n","import { I18nT } from \"@braze/beacon-translations\";\n\nimport { SortDirection, SortMessages } from \"../types\";\n\n/**\n * Based on sorting state, retrieve the tooltip and aria-label for a header cell\n * @param t\n * @param columnName The column name to display in the tooltip and aria-label\n * @param sortDirection the current sort direction or `undefined` if unsorted\n * @param nextSortDirection the next sort direction that would happen if the header cell is selected\n * @param sortMessages customized messages for aria-label\n * @returns\n */\nexport const getSortByMessages = (\n  t: I18nT<\"beacon-table\">,\n  columnName: string,\n  sortDirection: SortDirection,\n  nextSortDirection: SortDirection,\n  sortMessages?: SortMessages\n): { tooltip: string; ariaLabel: string } => {\n  if (sortMessages) {\n    switch (sortDirection) {\n      case \"asc\":\n        return {\n          tooltip: t(\"sorted-tooltip-asc\", \"Sorted ascending\"),\n          ariaLabel: sortMessages.asc,\n        };\n      case \"desc\":\n        return {\n          tooltip: t(\"sorted-tooltip-desc\", \"Sorted descending\"),\n          ariaLabel: sortMessages.desc,\n        };\n      default: {\n        if (nextSortDirection === \"asc\") {\n          return {\n            tooltip: t(\"sort-tooltip-asc\", \"Unsorted, Sort ascending\"),\n            ariaLabel: sortMessages.none,\n          };\n        }\n\n        return {\n          tooltip: t(\"sort-tooltip-desc\", \"Unsorted, Sort descending\"),\n          ariaLabel: sortMessages.none,\n        };\n      }\n    }\n  }\n\n  switch (sortDirection) {\n    case \"asc\":\n      return {\n        tooltip: t(\"sorted-tooltip-asc\", \"Sorted ascending\"),\n        ariaLabel: t(\n          \"sorted-aria-label-asc\",\n          \"Sorted column { columnName } ascending. \" +\n            \"{nextSortDirection, select, desc {Select to sort descending} asc {Select to remove sort} other {Select to remove sort}}\",\n          {\n            columnName,\n            nextSortDirection: nextSortDirection as \"desc\" | \"asc\",\n          }\n        ),\n      };\n    case \"desc\":\n      return {\n        tooltip: t(\"sorted-tooltip-desc\", \"Sorted descending\"),\n        ariaLabel: t(\n          \"sorted-aria-label-desc\",\n          \"Sorted column { columnName } descending. \" +\n            \"{nextSortDirection, select, asc {Select to sort ascending} desc {Select to remove sort} other {Select to remove sort}}\",\n          {\n            columnName,\n            nextSortDirection: nextSortDirection as \"desc\" | \"asc\",\n          }\n        ),\n      };\n    default:\n      if (nextSortDirection === \"asc\") {\n        return {\n          tooltip: t(\"sort-tooltip-asc\", \"Unsorted, Sort ascending\"),\n          ariaLabel: t(\n            \"sort-aria-label-asc\",\n            \"Column { columnName }. Select to sort ascending\",\n            { columnName }\n          ),\n        };\n      }\n\n      return {\n        tooltip: t(\"sort-tooltip-desc\", \"Unsorted, Sort descending\"),\n        ariaLabel: t(\n          \"sort-aria-label-desc\",\n          \"Column { columnName }. Select to sort descending\",\n          { columnName }\n        ),\n      };\n  }\n};\n","import classNames from \"classnames\";\nimport styled, { css } from \"styled-components\";\nimport { getBorderWidth, getColor } from \"@braze/beacon-styling\";\n\nimport { getSizeSpacing } from \"../../services/getSizeSpacing\";\n\nimport { StyledTableRowProps } from \"./types\";\n\nexport const StyledTableRow = styled.tr.attrs(({ className, ...props }) => ({\n  ...props,\n  className: classNames([\"bcl-tr\", className]),\n}))<StyledTableRowProps>`\n  border-top: ${getBorderWidth(\"thin\")} solid ${getColor(\"gray\", 100)};\n\n  :last-child {\n    border-bottom: ${getBorderWidth(\"thin\")} solid ${getColor(\"gray\", 100)};\n  }\n\n  :hover {\n    background-color: ${getColor(\"gray\", 50)};\n  }\n\n  ${({ size }) =>\n    size &&\n    css`\n      & td,\n      & th {\n        padding: ${getSizeSpacing(size)};\n      }\n    `}\n`;\n\nStyledTableRow.displayName = \"StyledTableRow\";\n","import React from \"react\";\n\nimport { TableRowProps } from \"./types\";\nimport { StyledTableRow } from \"./StyledTableRow\";\n\nexport const TableRow = React.forwardRef(\n  (props: TableRowProps, ref: React.RefObject<HTMLTableRowElement>) => (\n    <StyledTableRow {...props} ref={ref} />\n  )\n);\n\nTableRow.displayName = \"TableRow\";\n","export { TableRow } from \"./TableRow\";\n\nexport type { TableRowProps } from \"./types\";\n","/**\n * @fileoverview the styled container component for the tab navigational components\n */\nimport classNames from \"classnames\";\nimport styled from \"styled-components\";\n\nimport { TabNavigatorProps } from \"../types\";\n\nexport const TabNavigator = styled.ul.attrs(({ className, ...props }) => ({\n  className: classNames([\"bcl-tab-navigator\", className]),\n  ...props,\n}))<TabNavigatorProps>`\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n`;\n","export { TabNavigator } from \"./TabNavigator\";\n\nexport type { TabNavigatorProps } from \"../types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { select, withKnobs } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { IconButton } from \"../IconButton\";\nimport { BodyText } from \"../BodyText\";\nimport { Box } from \"../Box\";\nimport { Flex } from \"../Flex\";\nimport { BannerAlert } from \"../BannerAlert\";\nimport { BannerAlertTitle } from \"../BannerAlertTitle\";\nimport { BannerAlertDescription } from \"../BannerAlertDescription\";\nimport { BannerAlertDescriptionText } from \"../BannerAlertDescriptionText\";\nimport { BannerAlertBody } from \"../BannerAlertBody\";\nimport { TabContent } from \"../TabContent\";\nimport { Tab } from \"../Tab\";\nimport { Tabs } from \"./Tabs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"tabs\"\n    }}>{`Tabs`}</h1>\n    <Meta title=\"Core/Content Display/Tabs\" component={Tabs} mdxType=\"Meta\" />\n    <p><inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` allow users to see multiple different sections of content grouped by labels.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p><inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` are used to create fixed, navigable sections of a page. The `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` component\nis a navigational label, and the `}<inlineCode parentName=\"p\">{`TabContent`}</inlineCode>{` component is content for a specific `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [activeTab, setActiveTab] = React.useState(1);\n          return <Box mdxType=\"Box\">\n          <Tabs onChange={setActiveTab} mdxType=\"Tabs\">\n            <Tab tabId={1} active={activeTab === 1} mdxType=\"Tab\">\n              Section 1\n            </Tab>\n            <Tab tabId={2} active={activeTab === 2} mdxType=\"Tab\">\n              Section 2\n            </Tab>\n            <Tab tabId={3} active={activeTab === 3} mdxType=\"Tab\">\n              Section 3\n            </Tab>\n          </Tabs>\n          <TabContent active={activeTab === 1} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 2} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 3} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\n                sapien. Pellentesque habitant morbi tristique senectus et netus\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\n                Orci varius natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\n                condimentum, vulputate nulla quis, mattis magna.\n              </BodyText>\n            </Box>\n          </TabContent>\n        </Box>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`Sections can be disabled.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled use\" mdxType=\"Story\">\n    {() => {\n          const [activeTab, setActiveTab] = React.useState(1);\n          return <Box mdxType=\"Box\">\n          <Tabs onChange={setActiveTab} mdxType=\"Tabs\">\n            <Tab tabId={1} active={activeTab === 1} mdxType=\"Tab\">\n              Section 1\n            </Tab>\n            <Tab tabId={2} disabled active={activeTab === 2} mdxType=\"Tab\">\n              Section 2\n            </Tab>\n            <Tab tabId={3} active={activeTab === 3} mdxType=\"Tab\">\n              Section 3\n            </Tab>\n          </Tabs>\n          <TabContent active={activeTab === 1} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 2} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 3} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\n                sapien. Pellentesque habitant morbi tristique senectus et netus\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\n                Orci varius natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\n                condimentum, vulputate nulla quis, mattis magna.\n              </BodyText>\n            </Box>\n          </TabContent>\n        </Box>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"custom-tab-click-use\"\n    }}>{`Custom Tab Click use`}</h3>\n    <p>{`Each `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` can have it's own custom onClick and onKeyPress handler.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: custom key press handlers will need to determine which keys it calls during.\nThe `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` will call custom key press handlers for ALL key presses.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"custom tab click use\" mdxType=\"Story\">\n    {() => {\n          const [activeTab, setActiveTab] = React.useState(1);\n\n          const handleSectionThreeClick = () => {\n            action(\"clicked on 3!\")();\n            setActiveTab(3);\n          };\n\n          const handleSectionThreeKeyPress = ({\n            key,\n            charCode\n          }) => {\n            // if 'Space' or 'Enter'\n            if (key === \" \" || charCode === 13) {\n              action(\"keypress on 3!\")();\n              handleSectionThreeClick();\n            }\n          };\n\n          return <Box mdxType=\"Box\">\n          <Tabs onChange={setActiveTab} mdxType=\"Tabs\">\n            <Tab tabId={1} active={activeTab === 1} mdxType=\"Tab\">\n              Section 1\n            </Tab>\n            <Tab tabId={2} active={activeTab === 2} mdxType=\"Tab\">\n              Section 2\n            </Tab>\n            <Tab tabId={3} active={activeTab === 3} onClick={handleSectionThreeClick} onKeyPress={handleSectionThreeKeyPress} mdxType=\"Tab\">\n              Section 3\n            </Tab>\n          </Tabs>\n          <TabContent active={activeTab === 1} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 2} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 3} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\n                sapien. Pellentesque habitant morbi tristique senectus et netus\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\n                Orci varius natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\n                condimentum, vulputate nulla quis, mattis magna.\n              </BodyText>\n            </Box>\n          </TabContent>\n        </Box>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"extra-content-use\"\n    }}>{`Extra Content use`}</h3>\n    <p>{`The tabs navigational level can have other content added inline. However, adding\nextra content must be done manually, along with manual styling.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"extra content use\" mdxType=\"Story\">\n    {() => {\n          const [activeTab, setActiveTab] = React.useState(1);\n          return <Box mdxType=\"Box\">\n          <Flex alignItems=\"center\" mdxType=\"Flex\">\n            <Tabs onChange={setActiveTab} mdxType=\"Tabs\">\n              <Tab tabId={1} active={activeTab === 1} mdxType=\"Tab\">\n                Section 1\n              </Tab>\n              <Tab tabId={2} active={activeTab === 2} mdxType=\"Tab\">\n                Section 2\n              </Tab>\n              <Tab tabId={3} active={activeTab === 3} mdxType=\"Tab\">\n                Section 3\n              </Tab>\n            </Tabs>\n            <IconButton name=\"bars\" mdxType=\"IconButton\">More!</IconButton>\n          </Flex>\n          <TabContent active={activeTab === 1} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 2} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 3} mdxType=\"TabContent\">\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n                bottom: \"sm\"\n              }} mdxType=\"Box\">\n              <BodyText mdxType=\"BodyText\">\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\n                sapien. Pellentesque habitant morbi tristique senectus et netus\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\n                Orci varius natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\n                condimentum, vulputate nulla quis, mattis magna.\n              </BodyText>\n            </Box>\n          </TabContent>\n        </Box>;\n        }}\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Tabs, Tab, TabContent } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties-for-tabs\"\n    }}>{`Properties for `}<inlineCode parentName=\"h2\">{`Tabs`}</inlineCode></h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(id: number) => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to be invoked when a user selects a tab`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(ReactNode, ReactNodeArray)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"properties-for-tab\"\n    }}>{`Properties for `}<inlineCode parentName=\"h2\">{`Tab`}</inlineCode></h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`active`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the tab is currently active`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(ReactNode, ReactNodeArray)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the tab is disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`() => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function for click on this specific tab`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onKeyPress`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(event: React.KeyboardEvent) => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function for keypress on this specific tab`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"properties-for-tabcontent\"\n    }}>{`Properties for `}<inlineCode parentName=\"h2\">{`TabContent`}</inlineCode></h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`active`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the tab is currently active`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(ReactNode, ReactNodeArray)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [activeTab, setActiveTab] = React.useState(1);\n  return <Box>\n          <Tabs onChange={setActiveTab}>\n            <Tab tabId={1} active={activeTab === 1}>\n              Section 1\n            </Tab>\n            <Tab tabId={2} active={activeTab === 2}>\n              Section 2\n            </Tab>\n            <Tab tabId={3} active={activeTab === 3}>\n              Section 3\n            </Tab>\n          </Tabs>\n          <TabContent active={activeTab === 1}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 2}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 3}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\n                sapien. Pellentesque habitant morbi tristique senectus et netus\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\n                Orci varius natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\n                condimentum, vulputate nulla quis, mattis magna.\n              </BodyText>\n            </Box>\n          </TabContent>\n        </Box>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [activeTab, setActiveTab] = React.useState(1);\\n  return <Box>\\n          <Tabs onChange={setActiveTab}>\\n            <Tab tabId={1} active={activeTab === 1}>\\n              Section 1\\n            </Tab>\\n            <Tab tabId={2} active={activeTab === 2}>\\n              Section 2\\n            </Tab>\\n            <Tab tabId={3} active={activeTab === 3}>\\n              Section 3\\n            </Tab>\\n          </Tabs>\\n          <TabContent active={activeTab === 1}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n          <TabContent active={activeTab === 2}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n          <TabContent active={activeTab === 3}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\\n                sapien. Pellentesque habitant morbi tristique senectus et netus\\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\\n                Orci varius natoque penatibus et magnis dis parturient montes,\\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\\n                condimentum, vulputate nulla quis, mattis magna.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n        </Box>;\\n}' } };\n\nexport const disabledUse = (() => {\n  const [activeTab, setActiveTab] = React.useState(1);\n  return <Box>\n          <Tabs onChange={setActiveTab}>\n            <Tab tabId={1} active={activeTab === 1}>\n              Section 1\n            </Tab>\n            <Tab tabId={2} disabled active={activeTab === 2}>\n              Section 2\n            </Tab>\n            <Tab tabId={3} active={activeTab === 3}>\n              Section 3\n            </Tab>\n          </Tabs>\n          <TabContent active={activeTab === 1}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 2}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 3}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\n                sapien. Pellentesque habitant morbi tristique senectus et netus\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\n                Orci varius natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\n                condimentum, vulputate nulla quis, mattis magna.\n              </BodyText>\n            </Box>\n          </TabContent>\n        </Box>;\n});\ndisabledUse.storyName = 'disabled use';\ndisabledUse.parameters = { storySource: { source: '() => {\\n  const [activeTab, setActiveTab] = React.useState(1);\\n  return <Box>\\n          <Tabs onChange={setActiveTab}>\\n            <Tab tabId={1} active={activeTab === 1}>\\n              Section 1\\n            </Tab>\\n            <Tab tabId={2} disabled active={activeTab === 2}>\\n              Section 2\\n            </Tab>\\n            <Tab tabId={3} active={activeTab === 3}>\\n              Section 3\\n            </Tab>\\n          </Tabs>\\n          <TabContent active={activeTab === 1}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n          <TabContent active={activeTab === 2}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n          <TabContent active={activeTab === 3}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\\n                sapien. Pellentesque habitant morbi tristique senectus et netus\\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\\n                Orci varius natoque penatibus et magnis dis parturient montes,\\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\\n                condimentum, vulputate nulla quis, mattis magna.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n        </Box>;\\n}' } };\n\nexport const customTabClickUse = (() => {\n  const [activeTab, setActiveTab] = React.useState(1);\n\n  const handleSectionThreeClick = () => {\n    action(\"clicked on 3!\")();\n    setActiveTab(3);\n  };\n\n  const handleSectionThreeKeyPress = ({\n    key,\n    charCode\n  }) => {\n    // if 'Space' or 'Enter'\n    if (key === \" \" || charCode === 13) {\n      action(\"keypress on 3!\")();\n      handleSectionThreeClick();\n    }\n  };\n\n  return <Box>\n          <Tabs onChange={setActiveTab}>\n            <Tab tabId={1} active={activeTab === 1}>\n              Section 1\n            </Tab>\n            <Tab tabId={2} active={activeTab === 2}>\n              Section 2\n            </Tab>\n            <Tab tabId={3} active={activeTab === 3} onClick={handleSectionThreeClick} onKeyPress={handleSectionThreeKeyPress}>\n              Section 3\n            </Tab>\n          </Tabs>\n          <TabContent active={activeTab === 1}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 2}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 3}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\n                sapien. Pellentesque habitant morbi tristique senectus et netus\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\n                Orci varius natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\n                condimentum, vulputate nulla quis, mattis magna.\n              </BodyText>\n            </Box>\n          </TabContent>\n        </Box>;\n});\ncustomTabClickUse.storyName = 'custom tab click use';\ncustomTabClickUse.parameters = { storySource: { source: '() => {\\n  const [activeTab, setActiveTab] = React.useState(1);\\n\\n  const handleSectionThreeClick = () => {\\n    action(\\\"clicked on 3!\\\")();\\n    setActiveTab(3);\\n  };\\n\\n  const handleSectionThreeKeyPress = ({\\n    key,\\n    charCode\\n  }) => {\\n    // if \\'Space\\' or \\'Enter\\'\\n    if (key === \\\" \\\" || charCode === 13) {\\n      action(\\\"keypress on 3!\\\")();\\n      handleSectionThreeClick();\\n    }\\n  };\\n\\n  return <Box>\\n          <Tabs onChange={setActiveTab}>\\n            <Tab tabId={1} active={activeTab === 1}>\\n              Section 1\\n            </Tab>\\n            <Tab tabId={2} active={activeTab === 2}>\\n              Section 2\\n            </Tab>\\n            <Tab tabId={3} active={activeTab === 3} onClick={handleSectionThreeClick} onKeyPress={handleSectionThreeKeyPress}>\\n              Section 3\\n            </Tab>\\n          </Tabs>\\n          <TabContent active={activeTab === 1}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n          <TabContent active={activeTab === 2}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n          <TabContent active={activeTab === 3}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\\n                sapien. Pellentesque habitant morbi tristique senectus et netus\\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\\n                Orci varius natoque penatibus et magnis dis parturient montes,\\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\\n                condimentum, vulputate nulla quis, mattis magna.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n        </Box>;\\n}' } };\n\nexport const extraContentUse = (() => {\n  const [activeTab, setActiveTab] = React.useState(1);\n  return <Box>\n          <Flex alignItems=\"center\">\n            <Tabs onChange={setActiveTab}>\n              <Tab tabId={1} active={activeTab === 1}>\n                Section 1\n              </Tab>\n              <Tab tabId={2} active={activeTab === 2}>\n                Section 2\n              </Tab>\n              <Tab tabId={3} active={activeTab === 3}>\n                Section 3\n              </Tab>\n            </Tabs>\n            <IconButton name=\"bars\">More!</IconButton>\n          </Flex>\n          <TabContent active={activeTab === 1}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 2}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n          </TabContent>\n          <TabContent active={activeTab === 3}>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\n                condimentum orci, ac finibus urna sodales ac.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\n              </BodyText>\n            </Box>\n            <Box boxMargin={{\n        bottom: \"sm\"\n      }}>\n              <BodyText>\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\n                sapien. Pellentesque habitant morbi tristique senectus et netus\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\n                Orci varius natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\n                condimentum, vulputate nulla quis, mattis magna.\n              </BodyText>\n            </Box>\n          </TabContent>\n        </Box>;\n});\nextraContentUse.storyName = 'extra content use';\nextraContentUse.parameters = { storySource: { source: '() => {\\n  const [activeTab, setActiveTab] = React.useState(1);\\n  return <Box>\\n          <Flex alignItems=\\\"center\\\">\\n            <Tabs onChange={setActiveTab}>\\n              <Tab tabId={1} active={activeTab === 1}>\\n                Section 1\\n              </Tab>\\n              <Tab tabId={2} active={activeTab === 2}>\\n                Section 2\\n              </Tab>\\n              <Tab tabId={3} active={activeTab === 3}>\\n                Section 3\\n              </Tab>\\n            </Tabs>\\n            <IconButton name=\\\"bars\\\">More!</IconButton>\\n          </Flex>\\n          <TabContent active={activeTab === 1}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n          <TabContent active={activeTab === 2}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n          <TabContent active={activeTab === 3}>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\\n                metus magna, elementum ac scelerisque et, aliquam sit amet mi.\\n                Sed semper diam ac tortor commodo vehicula. Phasellus mi velit,\\n                sollicitudin nec rhoncus nec, ullamcorper in risus. Quisque nec\\n                orci in neque egestas porta. Vivamus dui urna, vestibulum et\\n                erat et, luctus imperdiet dolor. Ut mollis tortor sed sem\\n                suscipit, porttitor dignissim dolor aliquam. Vivamus at mi\\n                feugiat, dapibus metus in, volutpat neque. Sed egestas\\n                condimentum orci, ac finibus urna sodales ac.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Nullam turpis nisi, luctus in augue at, suscipit posuere mauris.\\n                In ut efficitur nunc. Proin orci odio, pretium vitae augue a,\\n                maximus porta tellus. Sed tincidunt quam orci. Cras elementum\\n                luctus turpis, eget tincidunt arcu luctus consequat. Etiam\\n                fringilla ultrices ipsum vel placerat. Maecenas odio nibh,\\n                commodo non mi eu, vehicula vulputate orci. Curabitur pretium\\n                nisl non vehicula mattis. Fusce a dui nec ex imperdiet pretium.\\n                Sed tempor nulla ac egestas vestibulum. Praesent venenatis\\n                gravida dolor quis fermentum. Vestibulum vestibulum eu urna eget\\n                elementum. Nullam rhoncus orci a diam euismod iaculis.\\n              </BodyText>\\n            </Box>\\n            <Box boxMargin={{\\n        bottom: \\\"sm\\\"\\n      }}>\\n              <BodyText>\\n                Cras arcu velit, aliquet at odio vitae, volutpat lobortis\\n                sapien. Pellentesque habitant morbi tristique senectus et netus\\n                et malesuada fames ac turpis egestas. Curabitur mollis mi non\\n                ante vestibulum maximus. Suspendisse potenti. Quisque sagittis,\\n                tellus ut interdum rutrum, ex ligula vehicula dui, eget volutpat\\n                eros nulla at nunc. Morbi interdum in elit consequat volutpat.\\n                Sed at augue in arcu interdum luctus. Nunc pretium neque et\\n                bibendum malesuada. Aliquam et enim a enim dictum porta non\\n                vitae sem. Nullam sit amet placerat mauris, sed pretium arcu.\\n                Nunc finibus neque ac velit euismod, non fermentum nibh auctor.\\n                Suspendisse vitae arcu molestie, dapibus dui vel, varius quam.\\n                Orci varius natoque penatibus et magnis dis parturient montes,\\n                nascetur ridiculus mus. Donec sit amet lorem vitae dolor\\n                ullamcorper feugiat imperdiet in tellus. Sed et risus\\n                condimentum, vulputate nulla quis, mattis magna.\\n              </BodyText>\\n            </Box>\\n          </TabContent>\\n        </Box>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Content Display/Tabs', component: Tabs, includeStories: [\"basicUse\",\"disabledUse\",\"customTabClickUse\",\"extraContentUse\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"disabled use\":\"disabledUse\",\"custom tab click use\":\"customTabClickUse\",\"extra content use\":\"extraContentUse\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","/**\n * @fileoverview a component that renders a list of navigational tabs\n */\nimport React from \"react\";\nimport classNames from \"classnames\";\n\nimport { TabsContextProvider } from \"../TabsContext\";\n\nimport { TabsProps } from \"./types\";\nimport { TabNavigator } from \"./TabNavigator\";\n\nexport const Tabs = ({\n  className,\n  children,\n  onChange,\n  ...props\n}: TabsProps): React.ReactElement => (\n  <div {...props} className={classNames([\"bcl-tabs\", className])}>\n    <nav>\n      <TabsContextProvider onChange={onChange}>\n        <TabNavigator>{children}</TabNavigator>\n      </TabsContextProvider>\n    </nav>\n  </div>\n);\n","export { Tabs } from \"./Tabs\";\n\nexport type { TabsProps } from \"./types\";\n","/**\n * @fileoverview context and a context provider for tabs info\n */\nimport React, { createContext } from \"react\";\nimport noop from \"lodash/noop\";\n\nimport { TabsContextProviderProps, TabsContextInterface } from \"./types\";\n\nexport const TabsContext = createContext<TabsContextInterface>({\n  handleChange: noop,\n  handleKeyPress: noop,\n});\n\nexport const TabsContextProvider = ({\n  children,\n  onChange,\n}: TabsContextProviderProps): React.ReactElement => {\n  const handleKeyPress = (\n    id: string | number,\n    { key, charCode }: React.KeyboardEvent\n  ) => {\n    // if 'Space' or 'Enter'\n    if (key === \" \" || charCode === 13) {\n      onChange(id);\n    }\n  };\n\n  return (\n    <TabsContext.Provider value={{ handleChange: onChange, handleKeyPress }}>\n      {children}\n    </TabsContext.Provider>\n  );\n};\n","export { TabsContext, TabsContextProvider } from \"./TabsContext\";\n\nexport type { TabsContextInterface, TabsContextProviderProps } from \"./types\";\n","import styled from \"styled-components\";\n\nimport { Input } from \"../Input\";\n\nimport { StyledTextareaProps } from \"./types\";\n\nconst styledTextarea = styled(Input) as typeof styled.textarea;\n\nconst getMinHeight = ({ bclSize, vSize }: StyledTextareaProps) => {\n  const combinedSize = vSize ?? (bclSize === \"md\" ? \"xl\" : \"lg\");\n\n  switch (combinedSize) {\n    case \"lg\":\n      return \"60px\";\n    case \"xl\":\n      return \"120px\";\n    case \"md\":\n    default:\n      return \"40px\";\n  }\n};\n\nexport const StyledTextarea = styledTextarea<StyledTextareaProps>`\n  resize: vertical;\n  padding: 9px 12px 5px;\n  min-height: ${getMinHeight};\n  line-height: normal;\n\n  &:focus:not(:disabled),\n  &:active:not(:disabled) {\n    padding: 8px 11px 4px;\n  }\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { text } from \"@storybook/addon-knobs\";\nimport { FieldLabel } from \"../FieldLabel\";\nimport { Textarea } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Forms/Textarea\" component={Textarea} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"textarea\"\n    }}>{`Textarea`}</h1>\n    <p>{`Similar to an `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component, `}<inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{` lets the user input free alphanumeric\nstrings. Unlike `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{` allows for multiline content and is ideal\nfor longer text.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Like the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component, `}<inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{` can be used very simply like so.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [value, setState] = React.useState(\"\");\n\n          const handleChange = event => {\n            setState(event.target.value);\n          };\n\n          return <>\n          <Textarea placeholder=\"Enter text in me!\" value={value} onChange={handleChange} mdxType=\"Textarea\" />\n          <pre>\n            <code>value: </code>\n            <code className=\"textarea-value\">{value}</code>\n          </pre>\n        </>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h3>\n    <p><inlineCode parentName=\"p\">{`TextArea`}</inlineCode>{` comes in three sizes controlled by the `}<inlineCode parentName=\"p\">{`vSize`}</inlineCode>{` prop:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"md\"`}</inlineCode>{` for one-line `}<inlineCode parentName=\"li\">{`TextAreas`}</inlineCode>{` that are the same size as other `}<inlineCode parentName=\"li\">{`vSize={\"md\"}`}</inlineCode>{` Beacon fields`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"lg\"`}</inlineCode>{` for a typlically sized `}<inlineCode parentName=\"li\">{`TextArea`}</inlineCode>{` (default)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"xl\"`}</inlineCode>{` for a larger `}<inlineCode parentName=\"li\">{`TextArea`}</inlineCode></li>\n    </ul>\n    <p>{`See all three sizes below`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"different sizes\" mdxType=\"Story\">\n    <FieldLabel label=\"Size &quot;md&quot;\" htmlFor=\"md-size\" mdxType=\"FieldLabel\">\n      <Textarea id=\"md-size\" vSize=\"md\" placeholder=\"Enter text in me!\" mdxType=\"Textarea\" />\n    </FieldLabel>\n    <FieldLabel label=\"Size &quot;lg&quot;\" htmlFor=\"lg-size\" mdxType=\"FieldLabel\">\n      <Textarea id=\"lg-size\" vSize=\"lg\" placeholder=\"Enter text in me!\" mdxType=\"Textarea\" />\n    </FieldLabel>\n    <FieldLabel label=\"Size &quot;xl&quot;\" htmlFor=\"xl-size\" mdxType=\"FieldLabel\">\n      <Textarea id=\"xl-size\" vSize=\"xl\" placeholder=\"Enter text in me!\" mdxType=\"Textarea\" />\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h3>\n    <p><inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{` can be disabled to prevent user input/changing existing\ncontent.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled\" mdxType=\"Story\">\n    {() => {\n          const [value, setState] = React.useState(\"\");\n\n          const handleChange = event => {\n            setState(event.target.value);\n          };\n\n          return <>\n          <Textarea placeholder=\"Enter text in me!\" value={value} onChange={handleChange} disabled mdxType=\"Textarea\" />\n          <pre>\n            <code>value: </code>\n            <code className=\"textarea-value\">{value}</code>\n          </pre>\n        </>;\n        }}\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid\"\n    }}>{`Invalid`}</h3>\n    <p>{`If the content entered (or not entered) is invalid, you can pass\nan `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop into `}<inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{` to display a red box.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Add a descriptive error message to the field's label to tell your user what went wrong.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"invalid\" mdxType=\"Story\">\n    <FieldLabel label=\"Field Label\" htmlFor=\"invalidInput\" status=\"danger\" statusText={text(\"Error Message\", \"Please enter a valid value in this field\")} mdxType=\"FieldLabel\">\n      <Textarea placeholder=\"Enter text in me!\" invalid mdxType=\"Textarea\" />\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"full-width\"\n    }}>{`Full width`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`fullWidth`}</inlineCode>{` to make the textarea span the full\nwidth of its parent container:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"full width\" mdxType=\"Story\">\n    <Textarea placeholder=\"Enter text in me!\" fullWidth mdxType=\"Textarea\" />\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Textarea } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bclSize`}</inlineCode>{` (deprecated)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sm`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size of the textarea component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`vSize`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`xl`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`lg`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size of the textarea component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fullWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`takes up 100% of the width of the container`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the currently inputted value is invalid`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTextAreaElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( string, number, string[] )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be rendered in the textarea field`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [value, setState] = React.useState(\"\");\n\n  const handleChange = event => {\n    setState(event.target.value);\n  };\n\n  return <>\n          <Textarea placeholder=\"Enter text in me!\" value={value} onChange={handleChange} />\n          <pre>\n            <code>value: </code>\n            <code className=\"textarea-value\">{value}</code>\n          </pre>\n        </>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [value, setState] = React.useState(\\\"\\\");\\n\\n  const handleChange = event => {\\n    setState(event.target.value);\\n  };\\n\\n  return <>\\n          <Textarea placeholder=\\\"Enter text in me!\\\" value={value} onChange={handleChange} />\\n          <pre>\\n            <code>value: </code>\\n            <code className=\\\"textarea-value\\\">{value}</code>\\n          </pre>\\n        </>;\\n}' } };\n\nexport const differentSizes = () => (\n        <>\n<FieldLabel label=\"Size &quot;md&quot;\" htmlFor=\"md-size\">\n      <Textarea id=\"md-size\" vSize=\"md\" placeholder=\"Enter text in me!\" />\n    </FieldLabel>\n<FieldLabel label=\"Size &quot;lg&quot;\" htmlFor=\"lg-size\">\n      <Textarea id=\"lg-size\" vSize=\"lg\" placeholder=\"Enter text in me!\" />\n    </FieldLabel>\n<FieldLabel label=\"Size &quot;xl&quot;\" htmlFor=\"xl-size\">\n      <Textarea id=\"xl-size\" vSize=\"xl\" placeholder=\"Enter text in me!\" />\n    </FieldLabel>\n</>\n      );\ndifferentSizes.storyName = 'different sizes';\ndifferentSizes.parameters = { storySource: { source: '<FieldLabel label=\\\"Size &quot;md&quot;\\\" htmlFor=\\\"md-size\\\">\\n      <Textarea id=\\\"md-size\\\" vSize=\\\"md\\\" placeholder=\\\"Enter text in me!\\\" />\\n    </FieldLabel>\\n<FieldLabel label=\\\"Size &quot;lg&quot;\\\" htmlFor=\\\"lg-size\\\">\\n      <Textarea id=\\\"lg-size\\\" vSize=\\\"lg\\\" placeholder=\\\"Enter text in me!\\\" />\\n    </FieldLabel>\\n<FieldLabel label=\\\"Size &quot;xl&quot;\\\" htmlFor=\\\"xl-size\\\">\\n      <Textarea id=\\\"xl-size\\\" vSize=\\\"xl\\\" placeholder=\\\"Enter text in me!\\\" />\\n    </FieldLabel>' } };\n\nexport const disabled = (() => {\n  const [value, setState] = React.useState(\"\");\n\n  const handleChange = event => {\n    setState(event.target.value);\n  };\n\n  return <>\n          <Textarea placeholder=\"Enter text in me!\" value={value} onChange={handleChange} disabled />\n          <pre>\n            <code>value: </code>\n            <code className=\"textarea-value\">{value}</code>\n          </pre>\n        </>;\n});\ndisabled.storyName = 'disabled';\ndisabled.parameters = { storySource: { source: '() => {\\n  const [value, setState] = React.useState(\\\"\\\");\\n\\n  const handleChange = event => {\\n    setState(event.target.value);\\n  };\\n\\n  return <>\\n          <Textarea placeholder=\\\"Enter text in me!\\\" value={value} onChange={handleChange} disabled />\\n          <pre>\\n            <code>value: </code>\\n            <code className=\\\"textarea-value\\\">{value}</code>\\n          </pre>\\n        </>;\\n}' } };\n\nexport const invalid = () => (\n          <FieldLabel label=\"Field Label\" htmlFor=\"invalidInput\" status=\"danger\" statusText={text(\"Error Message\", \"Please enter a valid value in this field\")}>\n      <Textarea placeholder=\"Enter text in me!\" invalid />\n    </FieldLabel>\n        );\ninvalid.storyName = 'invalid';\ninvalid.parameters = { storySource: { source: '<FieldLabel label=\\\"Field Label\\\" htmlFor=\\\"invalidInput\\\" status=\\\"danger\\\" statusText={text(\\\"Error Message\\\", \\\"Please enter a valid value in this field\\\")}>\\n      <Textarea placeholder=\\\"Enter text in me!\\\" invalid />\\n    </FieldLabel>' } };\n\nexport const fullWidth = () => (\n          <Textarea placeholder=\"Enter text in me!\" fullWidth />\n        );\nfullWidth.storyName = 'full width';\nfullWidth.parameters = { storySource: { source: '<Textarea placeholder=\\\"Enter text in me!\\\" fullWidth />' } };\n\nconst componentMeta = { title: 'Core/Forms/Textarea', component: Textarea, includeStories: [\"basicUse\",\"differentSizes\",\"disabled\",\"invalid\",\"fullWidth\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"different sizes\":\"differentSizes\",\"disabled\":\"disabled\",\"invalid\":\"invalid\",\"full width\":\"fullWidth\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React from \"react\";\nimport classNames from \"classnames\";\nimport { useIME } from \"@braze/beacon-hooks\";\n\nimport { StyledTextarea } from \"./StyledTextarea\";\nimport { TextareaProps } from \"./types\";\n\nexport const Textarea = React.forwardRef(\n  (\n    { vSize = \"md\", className, ...props }: TextareaProps,\n    ref: React.RefObject<HTMLTextAreaElement>\n  ) => {\n    const imeProps = useIME<HTMLTextAreaElement>({\n      onChange: props.onChange,\n      value: props.value,\n      defaultValue: props.defaultValue,\n      ref,\n    });\n\n    return (\n      <StyledTextarea\n        {...props}\n        {...imeProps}\n        forwardedAs=\"textarea\"\n        className={classNames([\"bcl-textarea\", className])}\n        vSize={vSize}\n      />\n    );\n  }\n);\n\nTextarea.displayName = \"Textarea\";\n","export { Textarea } from \"./Textarea\";\n\nexport { StyledTextarea } from \"./StyledTextarea\";\n\nexport type { TextareaProps, StyledTextareaProps } from \"./types\";\n","import styled, { css } from \"styled-components\";\nimport {\n  getColor,\n  getIntentColor,\n  getBorderRadius,\n  getFontFamily,\n  getFontSize,\n  getSpacing,\n  getFontWeight,\n  IntentColorType,\n} from \"@braze/beacon-styling\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport { StyledToasterProps } from \"./types\";\nimport { StyledToastCloseButton } from \"./ToastCloseButton\";\n\nconst getToastIntentStyle = (intent: IntentColorType) => css`\n  border: 1px solid ${getIntentColor(intent, 400)};\n  border-left: 0.5rem solid ${getIntentColor(intent, 400)};\n\n  ${StyledToastCloseButton} {\n    &:hover,\n    &:focus {\n      background: ${getIntentColor(intent, 50)};\n    }\n  }\n`;\n\nexport const StyledToaster = styled(ToastContainer)<StyledToasterProps>`\n  box-sizing: border-box;\n\n  @media (min-width: 481px) {\n    width: 328px;\n  }\n\n  .Toastify__toast {\n    padding: 0;\n    background: ${getColor(\"gray\", 0)};\n    box-shadow: 0px 3px 7px rgba(46, 60, 71, 0.1);\n    border-radius: ${getBorderRadius(\"md\")};\n    transition: all 100ms ease-in-out;\n\n    &:hover {\n      box-shadow: 0px 9px 7px rgba(46, 60, 71, 0.1);\n    }\n\n    @media (max-width: 480px) {\n      margin-bottom: ${getSpacing(\"md\")};\n    }\n  }\n\n  .Toastify__toast--error {\n    ${getToastIntentStyle(\"danger\")};\n  }\n\n  .Toastify__toast--info {\n    ${getToastIntentStyle(\"primary\")};\n  }\n\n  .Toastify__toast--success {\n    ${getToastIntentStyle(\"success\")};\n  }\n\n  .Toastify__toast--warning {\n    ${getToastIntentStyle(\"warning\")};\n  }\n\n  .Toastify__toast-body {\n    color: ${getColor(\"gray\", 800)};\n    font-family: ${getFontFamily(\"base\")};\n    font-weight: ${getFontWeight(\"bold\")};\n    font-size: ${getFontSize(\"body\", \"sm\")};\n    margin: 0;\n  }\n`;\n","import styled from \"styled-components\";\nimport {\n  getColor,\n  getFontFamily,\n  getFontSize,\n  intentColorSelector,\n  getSpacing,\n  getFontWeight,\n} from \"@braze/beacon-styling\";\n\nimport { StyledToastProps } from \"../types\";\nimport { StyledIcon } from \"../../Icon\";\nimport { StyledLink as Link } from \"../../Link\";\n\nexport const StyledToast = styled.div<StyledToastProps>`\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  color: ${getColor(\"gray\", 800)};\n  font-family: ${getFontFamily(\"base\")};\n  font-weight: ${getFontWeight(\"bold\")};\n  font-size: ${getFontSize(\"body\", \"sm\")};\n  margin: ${getSpacing(\"md\")} 0;\n\n  ${StyledIcon} {\n    min-height: 28px;\n    min-width: 28px;\n    border-radius: 50%;\n    font-size: 10px;\n    margin: 0 ${getSpacing(\"md\")};\n    color: ${(props) => intentColorSelector(props, props.intent, 500)};\n    background: ${(props) => intentColorSelector(props, props.intent, 100)};\n  }\n\n  ${Link}, .bcl-button-quaternary {\n    font-size: ${getFontSize(\"body\", \"sm\")};\n    color: ${(props) => intentColorSelector(props, props.intent, 500)};\n\n    &:hover {\n      color: ${(props) => intentColorSelector(props, props.intent, 400)};\n    }\n  }\n\n  .bcl-button-quaternary {\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n`;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { ToastProps } from \"../types\";\nimport { Flex } from \"../../Flex\";\nimport { Icon } from \"../../Icon\";\n\nimport { StyledToast } from \"./StyledToast\";\n\nconst mapIntentToIcon = (intent: ToastProps[\"intent\"]) => {\n  switch (intent) {\n    case \"danger\":\n      return \"times\";\n    case \"success\":\n      return \"check\";\n    case \"warning\":\n      return \"exclamation\";\n    case \"info\":\n    default:\n      return \"info\";\n  }\n};\n\nexport const Toast = ({\n  children,\n  className,\n  intent,\n  ...props\n}: ToastProps): React.ReactElement | null => {\n  const name = mapIntentToIcon(intent);\n\n  return (\n    <Flex alignItems=\"center\" style={{ height: \"100%\" }}>\n      <StyledToast\n        {...props}\n        className={classNames([\"bcl-toast\", className])}\n        intent={intent}\n      >\n        {name && <Icon name={name} />}\n        {children}\n      </StyledToast>\n    </Flex>\n  );\n};\n\nToast.displayName = \"Toast\";\n","export { Toast } from \"./Toast\";\n\nexport type { ToastProps } from \"../types\";\n","import styled from \"styled-components\";\nimport { getSpacing } from \"@braze/beacon-styling\";\n\nimport { StyledCloseButton } from \"../../CloseButton\";\n\nexport const StyledToastCloseButton = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0 ${getSpacing(\"md\")};\n\n  ${StyledCloseButton} {\n    height: inherit;\n    width: inherit;\n\n    &,\n    &:hover {\n      background: none;\n    }\n  }\n`;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { ToastCloseButtonProps } from \"../types\";\nimport { CloseButton } from \"../../CloseButton\";\n\nimport { StyledToastCloseButton } from \"./StyledToastCloseButton\";\n\nexport const ToastCloseButton = ({\n  className,\n  closeToast,\n  ...props\n}: ToastCloseButtonProps): React.ReactElement => {\n  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    event.stopPropagation();\n\n    closeToast(event);\n  };\n\n  return (\n    <StyledToastCloseButton\n      {...props}\n      className={classNames(\"bcl-toast-close-button\", className)}\n      onClick={handleClick}\n    >\n      <CloseButton />\n    </StyledToastCloseButton>\n  );\n};\n","export { ToastCloseButton } from \"./ToastCloseButton\";\n\nexport { StyledToastCloseButton } from \"./StyledToastCloseButton\";\n\nexport type {\n  ToastCloseButtonProps,\n  StyledToastCloseButtonProps,\n} from \"../types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { number } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Box } from \"../Box\";\nimport { Button } from \"../Button\";\nimport { FieldLabel } from \"../FieldLabel\";\nimport { Input } from \"../Input\";\nimport { Link } from \"../Link\";\nimport { Toaster, makeToast } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Alerts/Toaster\" component={Toaster} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"toaster\"\n    }}>{`Toaster`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Toaster`}</inlineCode>{` component is used to display \"notification\"-like alert messages\nthat are added on top of the main content, with the goal of not displacing the\nprimary page content and avoiding being too disruptive.`}</p>\n    <p>{`Since individual `}<inlineCode parentName=\"p\">{`Toast`}</inlineCode>{`s are short-lived and may happen with high frequency,\nthe `}<inlineCode parentName=\"p\">{`Toaster`}</inlineCode>{` component also exposes a `}<inlineCode parentName=\"p\">{`makeToast`}</inlineCode>{` function that automatically\ncreates new `}<inlineCode parentName=\"p\">{`Toasts`}</inlineCode>{` rather than requiring the user to keep track of their\nrendering as React components directly.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Toaster`}</inlineCode>{` component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: Because of the way Storybook renders stories, a more representative\nuse of the `}<inlineCode parentName=\"p\">{`Toaster`}</inlineCode>{` component can be seen via the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`To use the `}<inlineCode parentName=\"p\">{`Toaster`}</inlineCode>{`, simply place it somewhere near the root of your React\ntree. Once that is available, you can then use the `}<inlineCode parentName=\"p\">{`makeToast`}</inlineCode>{` function to\ndisplay individual toasts programmatically within your app. Click the\n`}<inlineCode parentName=\"p\">{`Make toast`}</inlineCode>{` button in the story below to see how it works in practice.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-toaster--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-no-auto-close\"\n    }}>{`With no auto-close`}</h3>\n    <p>{`If you need toasts to remain open until the user dismisses them, you can\nturn off auto-close functionality by setting `}<inlineCode parentName=\"p\">{`autoClose`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-toaster--no-auto-close\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-onclick\"\n    }}>{`With onClick`}</h3>\n    <p>{`Toasts support click behavior via the `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` object passed as the last\nargument of the `}<inlineCode parentName=\"p\">{`makeToast`}</inlineCode>{` function. As shown in the story below, you can\nadd an `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` listener in `}<inlineCode parentName=\"p\">{`Toasts`}</inlineCode>{` to listen to when a user clicks into\nit and perform an action.`}</p>\n    <p>{`See the Properties section below for more info on the usage of the\n`}<inlineCode parentName=\"p\">{`makeToast`}</inlineCode>{` function.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-toaster--with-onclick\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-link\"\n    }}>{`With link`}</h3>\n    <p>{`Toasts also supports `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{`s inside a toast when the user\nshould be redirected to a different page upon clicking.\nAny links must use the `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` component exported from\n`}<inlineCode parentName=\"p\">{`@braze/beacon-core`}</inlineCode>{` to correctly get the visual\nstyles within the `}<inlineCode parentName=\"p\">{`Toast`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-toaster--with-link\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-quaternary-button\"\n    }}>{`With quaternary button`}</h3>\n    <p>{`Toasts also supports `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`s inside a toast when the user\ncan perform an action by clicking on the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` in the\n`}<inlineCode parentName=\"p\">{`Toast`}</inlineCode>{`. Any buttons must use the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component exported\nfrom `}<inlineCode parentName=\"p\">{`@braze/beacon-core`}</inlineCode>{` with the `}<inlineCode parentName=\"p\">{`quaternary`}</inlineCode>{` prop to correctly\nget the visual styles within the `}<inlineCode parentName=\"p\">{`Toast`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-toaster--with-quaternary-button\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-programmatic-dismissal\"\n    }}>{`With programmatic dismissal`}</h3>\n    <p>{`In certain cases, we may not want the toast to automatically\nclose itself after a certian period and only allow it to be\ndismissed programmatically (e.g. loading state). The example\nbelow shows how this can be achieved with the use of `}<inlineCode parentName=\"p\">{`dismissToast`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-alerts-toaster--with-programmatic-dismissal\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Toaster, makeToast } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"toaster-1\"\n    }}><inlineCode parentName=\"h3\">{`Toaster`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`autoClose`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of seconds to wait before automatically closing the Toast; in miliseconds`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`limit`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`3`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Limit the number of toast displayed at the same time`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"maketoast\"\n    }}><inlineCode parentName=\"h3\">{`makeToast`}</inlineCode></h3>\n    <p>{`Creates and immediately displays a new `}<inlineCode parentName=\"p\">{`Toast`}</inlineCode>{` component on invocation. A `}<inlineCode parentName=\"p\">{`Toaster`}</inlineCode>{`\ncomponent `}<em parentName=\"p\">{`MUST`}</em>{` already be rendered on the page for this function to work properly.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`intent`}</inlineCode>{`: required; must be one of `}<inlineCode parentName=\"li\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`info`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`success`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`warning`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`content`}</inlineCode>{`: required; can be a string or a React component`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options`}</inlineCode>{`: optional; an object that can contain any of the following props:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onClick`}</inlineCode>{`: called when the `}<inlineCode parentName=\"li\">{`Toast`}</inlineCode>{` is clicked on`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onOpen`}</inlineCode>{`: called when the notification appears`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onClose`}</inlineCode>{`: called when the notification appears`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toastId`}</inlineCode>{`: sets a custom id for the `}<inlineCode parentName=\"li\">{`Toast`}</inlineCode>{` rendered`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`containerId`}</inlineCode>{`: container to render `}<inlineCode parentName=\"li\">{`Toast`}</inlineCode>{` inside`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autoClose`}</inlineCode>{`: indicates whether the toast should close automatically after a defined period of time (`}<inlineCode parentName=\"li\">{`number`}</inlineCode>{` in ms); `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` if toast should only close programmatically`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Example usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const handleClick = () => {\n  makeToast(\"info\", \"Your request has been received.\");\n};\n`}</code></pre>\n    <p>{`Example usage 2:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const handleClick = () => {\n  makeToast(\n    \"info\",\n    <span>\n      Your request has been received. <a>Click me</a>\n    </span>\n  );\n};\n`}</code></pre>\n    <p>{`Example usage 3:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const handleClick = () => {\n  makeToast(\"info\", <span>Your request has been received.</span>, {\n    onClick: () => history.push(\"/request-statuses\"),\n  });\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dismisstoast\"\n    }}><inlineCode parentName=\"h3\">{`dismissToast`}</inlineCode></h3>\n    <p>{`Dismisses either one or all currently displayed `}<inlineCode parentName=\"p\">{`Toast`}</inlineCode>{`s. This behavior\nis controlled by whether or not the function is called with a `}<inlineCode parentName=\"p\">{`toastId`}</inlineCode>{`\nreturned by `}<inlineCode parentName=\"p\">{`makeToast`}</inlineCode>{`.`}</p>\n    <p>{`Example usage 1:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const toastId = useRef<string | number | null>(null);\n\nconst handleToast = () => {\n  toastId.current = makeToast(\n    \"info\",\n    <span>Your request has been received.</span>,\n    {\n      onClick: () => history.push(\"/request-statuses\"),\n    }\n  );\n};\n\nconst handleDismiss = () => {\n  if (toastId.current) {\n    dismissToast(toastId);\n\n    toastId.current = null;\n  }\n};\n`}</code></pre>\n    <p>{`Example usage 2:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const handleToast = () => {\n  makeToast(\"info\", <span>Your request has been received.</span>, {\n    onClick: () => history.push(\"/request-statuses\"),\n  });\n};\n\nconst handleDismissAllToasts = () => {\n  dismissToast();\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef, useState } from \\\"react\\\";\\nimport { ComponentMeta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport { Box } from \\\"../Box\\\";\\nimport { Button } from \\\"../Button\\\";\\nimport { ButtonGroup } from \\\"../ButtonGroup\\\";\\nimport { FieldLabel } from \\\"../FieldLabel\\\";\\nimport { Input } from \\\"../Input\\\";\\nimport { Link } from \\\"../Link\\\";\\n\\nimport page from \\\"./Toaster.docs.mdx\\\";\\n\\nimport { ToasterProps, Toaster, makeToast, dismissToast } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Alerts/Toaster\\\",\\n  component: Toaster,\\n  parameters: {\\n    docs: { page },\\n  },\\n} as ComponentMeta<typeof Toaster>;\\n\\nconst options = [\\n  { id: \\\"1\\\", label: \\\"danger\\\" as const },\\n  { id: \\\"2\\\", label: \\\"success\\\" as const },\\n  { id: \\\"3\\\", label: \\\"info\\\" as const },\\n  { id: \\\"4\\\", label: \\\"warning\\\" as const },\\n];\\n\\nexport const BasicUse = (args: ToasterProps): React.ReactElement => {\\n  const [content, setContent] = useState(\\n    \\\"This is meant to be some sort of helpful message.\\\"\\n  );\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleChange = (event) => {\\n    setContent(event.target.value);\\n  };\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster {...args} />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel htmlFor=\\\"basic-use-input\\\" label=\\\"Toast content\\\">\\n          <Input id=\\\"basic-use-input\\\" value={content} onChange={handleChange} />\\n        </FieldLabel>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(selectedOption.label, content, {\\n            containerId: \\\"toaster-1\\\",\\n          })\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n};\\n\\nBasicUse.args = { id: \\\"toaster-1\\\", limit: 3, autoClose: 5000 };\\n\\nexport const NoAutoClose = (): React.ReactElement => {\\n  const [content, setContent] = useState(\\n    \\\"This is meant to be some sort of helpful message.\\\"\\n  );\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleChange = (event) => {\\n    setContent(event.target.value);\\n  };\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-1\\\" autoClose={false} />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel htmlFor=\\\"basic-use-input\\\" label=\\\"Toast content\\\">\\n          <Input id=\\\"basic-use-input\\\" value={content} onChange={handleChange} />\\n        </FieldLabel>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(selectedOption.label, content, {\\n            containerId: \\\"toaster-1\\\",\\n          })\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n};\\n\\nexport const WithOnClick = (): React.ReactElement => {\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-2\\\" />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select onBlur={handleSelect} style={{ maxWidth: 300 }}>\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(\\n            selectedOption.label,\\n            <div>\\n              <span>Some informative message. </span>\\n              <Link href=\\\"#\\\">Your link here</Link>\\n            </div>,\\n            { onClick: action(\\\"Toast clicked\\\"), containerId: \\\"toaster-2\\\" }\\n          )\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n};\\n\\nWithOnClick.storyName = \\\"With onClick\\\";\\n\\nexport const WithLink = (): React.ReactElement => {\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-3\\\" />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(\\n            selectedOption.label,\\n            <div>\\n              <span>Some informative message. </span>\\n              <Link href=\\\"#\\\">Your link here</Link>\\n            </div>,\\n            {\\n              containerId: \\\"toaster-3\\\",\\n            }\\n          )\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n};\\n\\nexport const WithQuaternaryButton = (): React.ReactElement => {\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-4\\\" />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(\\n            selectedOption.label,\\n            <div>\\n              <span>Some informative message. </span>\\n              <Button variant=\\\"quaternary\\\">Your link here</Button>\\n            </div>,\\n            {\\n              containerId: \\\"toaster-4\\\",\\n            }\\n          )\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n};\\n\\nexport const WithProgrammaticDismissal = () => {\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const toastId = useRef<string | number | null>(null);\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-4\\\" />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <ButtonGroup>\\n        <Button\\n          className=\\\"make-toast\\\"\\n          onClick={() => {\\n            toastId.current = makeToast(\\n              selectedOption.label,\\n              <div>Loading...</div>,\\n              {\\n                containerId: \\\"toaster-4\\\",\\n                autoClose: false,\\n              }\\n            );\\n          }}\\n        >\\n          Make toast\\n        </Button>\\n        <Button\\n          variant=\\\"secondary\\\"\\n          className=\\\"dismiss-toast\\\"\\n          onClick={() => {\\n            if (toastId.current) {\\n              dismissToast(toastId.current);\\n\\n              toastId.current = null;\\n            }\\n          }}\\n        >\\n          Dismiss most recent toast\\n        </Button>\\n        <Button\\n          variant=\\\"secondary\\\"\\n          className=\\\"dismiss-all-toasts\\\"\\n          onClick={() => dismissToast()}\\n        >\\n          Dismiss all toasts\\n        </Button>\\n      </ButtonGroup>\\n    </>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":32},\"endLoc\":{\"col\":1,\"line\":81},\"startBody\":{\"col\":24,\"line\":32},\"endBody\":{\"col\":1,\"line\":81}},\"NoAutoClose\":{\"startLoc\":{\"col\":27,\"line\":85},\"endLoc\":{\"col\":1,\"line\":134},\"startBody\":{\"col\":27,\"line\":85},\"endBody\":{\"col\":1,\"line\":134}},\"WithOnClick\":{\"startLoc\":{\"col\":27,\"line\":136},\"endLoc\":{\"col\":1,\"line\":176},\"startBody\":{\"col\":27,\"line\":136},\"endBody\":{\"col\":1,\"line\":176}},\"WithLink\":{\"startLoc\":{\"col\":24,\"line\":180},\"endLoc\":{\"col\":1,\"line\":226},\"startBody\":{\"col\":24,\"line\":180},\"endBody\":{\"col\":1,\"line\":226}},\"WithQuaternaryButton\":{\"startLoc\":{\"col\":36,\"line\":228},\"endLoc\":{\"col\":1,\"line\":274},\"startBody\":{\"col\":36,\"line\":228},\"endBody\":{\"col\":1,\"line\":274}},\"WithProgrammaticDismissal\":{\"startLoc\":{\"col\":41,\"line\":276},\"endLoc\":{\"col\":1,\"line\":344},\"startBody\":{\"col\":41,\"line\":276},\"endBody\":{\"col\":1,\"line\":344}}};\n    \nimport React, { useRef, useState } from \"react\";\nimport { ComponentMeta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport { Box } from \"../Box\";\nimport { Button } from \"../Button\";\nimport { ButtonGroup } from \"../ButtonGroup\";\nimport { FieldLabel } from \"../FieldLabel\";\nimport { Input } from \"../Input\";\nimport { Link } from \"../Link\";\n\nimport page from \"./Toaster.docs.mdx\";\n\nimport { ToasterProps, Toaster, makeToast, dismissToast } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Alerts/Toaster\",\n  component: Toaster,\n  parameters: {\n    docs: { page },\n  },\n} as ComponentMeta<typeof Toaster>;\n\nconst options = [\n  { id: \"1\", label: \"danger\" as const },\n  { id: \"2\", label: \"success\" as const },\n  { id: \"3\", label: \"info\" as const },\n  { id: \"4\", label: \"warning\" as const },\n];\n\nexport const BasicUse = (args: ToasterProps): React.ReactElement => {\n  const [content, setContent] = useState(\n    \"This is meant to be some sort of helpful message.\"\n  );\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  const handleChange = (event) => {\n    setContent(event.target.value);\n  };\n\n  const handleSelect = (event) => {\n    setSelectedOption(\n      options.find(({ id }) => event.target.value === id) as any\n    );\n  };\n\n  return (\n    <>\n      <Toaster {...args} />\n      <Box boxMargin={{ bottom: \"md\" }}>\n        <FieldLabel htmlFor=\"basic-use-input\" label=\"Toast content\">\n          <Input id=\"basic-use-input\" value={content} onChange={handleChange} />\n        </FieldLabel>\n        <FieldLabel label=\"Toast type\">\n          <select\n            className=\"toast-type-select\"\n            onBlur={handleSelect}\n            style={{ maxWidth: 300 }}\n          >\n            {options.map((option) => (\n              <option key={option.id} value={option.id}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </FieldLabel>\n      </Box>\n      <Button\n        className=\"make-toast\"\n        onClick={() =>\n          makeToast(selectedOption.label, content, {\n            containerId: \"toaster-1\",\n          })\n        }\n      >\n        Make toast\n      </Button>\n    </>\n  );\n};;\n\nBasicUse.args = { id: \"toaster-1\", limit: 3, autoClose: 5000 };\n\nexport const NoAutoClose = (): React.ReactElement => {\n  const [content, setContent] = useState(\n    \"This is meant to be some sort of helpful message.\"\n  );\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  const handleChange = (event) => {\n    setContent(event.target.value);\n  };\n\n  const handleSelect = (event) => {\n    setSelectedOption(\n      options.find(({ id }) => event.target.value === id) as any\n    );\n  };\n\n  return (\n    <>\n      <Toaster id=\"toaster-1\" autoClose={false} />\n      <Box boxMargin={{ bottom: \"md\" }}>\n        <FieldLabel htmlFor=\"basic-use-input\" label=\"Toast content\">\n          <Input id=\"basic-use-input\" value={content} onChange={handleChange} />\n        </FieldLabel>\n        <FieldLabel label=\"Toast type\">\n          <select\n            className=\"toast-type-select\"\n            onBlur={handleSelect}\n            style={{ maxWidth: 300 }}\n          >\n            {options.map((option) => (\n              <option key={option.id} value={option.id}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </FieldLabel>\n      </Box>\n      <Button\n        className=\"make-toast\"\n        onClick={() =>\n          makeToast(selectedOption.label, content, {\n            containerId: \"toaster-1\",\n          })\n        }\n      >\n        Make toast\n      </Button>\n    </>\n  );\n};;\n\nexport const WithOnClick = (): React.ReactElement => {\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  const handleSelect = (event) => {\n    setSelectedOption(\n      options.find(({ id }) => event.target.value === id) as any\n    );\n  };\n\n  return (\n    <>\n      <Toaster id=\"toaster-2\" />\n      <Box boxMargin={{ bottom: \"md\" }}>\n        <FieldLabel label=\"Toast type\">\n          <select onBlur={handleSelect} style={{ maxWidth: 300 }}>\n            {options.map((option) => (\n              <option key={option.id} value={option.id}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </FieldLabel>\n      </Box>\n      <Button\n        className=\"make-toast\"\n        onClick={() =>\n          makeToast(\n            selectedOption.label,\n            <div>\n              <span>Some informative message. </span>\n              <Link href=\"#\">Your link here</Link>\n            </div>,\n            { onClick: action(\"Toast clicked\"), containerId: \"toaster-2\" }\n          )\n        }\n      >\n        Make toast\n      </Button>\n    </>\n  );\n};;\n\nWithOnClick.storyName = \"With onClick\";\n\nexport const WithLink = (): React.ReactElement => {\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  const handleSelect = (event) => {\n    setSelectedOption(\n      options.find(({ id }) => event.target.value === id) as any\n    );\n  };\n\n  return (\n    <>\n      <Toaster id=\"toaster-3\" />\n      <Box boxMargin={{ bottom: \"md\" }}>\n        <FieldLabel label=\"Toast type\">\n          <select\n            className=\"toast-type-select\"\n            onBlur={handleSelect}\n            style={{ maxWidth: 300 }}\n          >\n            {options.map((option) => (\n              <option key={option.id} value={option.id}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </FieldLabel>\n      </Box>\n      <Button\n        className=\"make-toast\"\n        onClick={() =>\n          makeToast(\n            selectedOption.label,\n            <div>\n              <span>Some informative message. </span>\n              <Link href=\"#\">Your link here</Link>\n            </div>,\n            {\n              containerId: \"toaster-3\",\n            }\n          )\n        }\n      >\n        Make toast\n      </Button>\n    </>\n  );\n};;\n\nexport const WithQuaternaryButton = (): React.ReactElement => {\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  const handleSelect = (event) => {\n    setSelectedOption(\n      options.find(({ id }) => event.target.value === id) as any\n    );\n  };\n\n  return (\n    <>\n      <Toaster id=\"toaster-4\" />\n      <Box boxMargin={{ bottom: \"md\" }}>\n        <FieldLabel label=\"Toast type\">\n          <select\n            className=\"toast-type-select\"\n            onBlur={handleSelect}\n            style={{ maxWidth: 300 }}\n          >\n            {options.map((option) => (\n              <option key={option.id} value={option.id}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </FieldLabel>\n      </Box>\n      <Button\n        className=\"make-toast\"\n        onClick={() =>\n          makeToast(\n            selectedOption.label,\n            <div>\n              <span>Some informative message. </span>\n              <Button variant=\"quaternary\">Your link here</Button>\n            </div>,\n            {\n              containerId: \"toaster-4\",\n            }\n          )\n        }\n      >\n        Make toast\n      </Button>\n    </>\n  );\n};;\n\nexport const WithProgrammaticDismissal = () => {\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  const toastId = useRef<string | number | null>(null);\n\n  const handleSelect = (event) => {\n    setSelectedOption(\n      options.find(({ id }) => event.target.value === id) as any\n    );\n  };\n\n  return (\n    <>\n      <Toaster id=\"toaster-4\" />\n      <Box boxMargin={{ bottom: \"md\" }}>\n        <FieldLabel label=\"Toast type\">\n          <select\n            className=\"toast-type-select\"\n            onBlur={handleSelect}\n            style={{ maxWidth: 300 }}\n          >\n            {options.map((option) => (\n              <option key={option.id} value={option.id}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </FieldLabel>\n      </Box>\n      <ButtonGroup>\n        <Button\n          className=\"make-toast\"\n          onClick={() => {\n            toastId.current = makeToast(\n              selectedOption.label,\n              <div>Loading...</div>,\n              {\n                containerId: \"toaster-4\",\n                autoClose: false,\n              }\n            );\n          }}\n        >\n          Make toast\n        </Button>\n        <Button\n          variant=\"secondary\"\n          className=\"dismiss-toast\"\n          onClick={() => {\n            if (toastId.current) {\n              dismissToast(toastId.current);\n\n              toastId.current = null;\n            }\n          }}\n        >\n          Dismiss most recent toast\n        </Button>\n        <Button\n          variant=\"secondary\"\n          className=\"dismiss-all-toasts\"\n          onClick={() => dismissToast()}\n        >\n          Dismiss all toasts\n        </Button>\n      </ButtonGroup>\n    </>\n  );\n};\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: ToasterProps): React.ReactElement => {\\n  const [content, setContent] = useState(\\n    \\\"This is meant to be some sort of helpful message.\\\"\\n  );\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleChange = (event) => {\\n    setContent(event.target.value);\\n  };\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster {...args} />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel htmlFor=\\\"basic-use-input\\\" label=\\\"Toast content\\\">\\n          <Input id=\\\"basic-use-input\\\" value={content} onChange={handleChange} />\\n        </FieldLabel>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(selectedOption.label, content, {\\n            containerId: \\\"toaster-1\\\",\\n          })\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n}\" }, ...BasicUse.parameters };\nNoAutoClose.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [content, setContent] = useState(\\n    \\\"This is meant to be some sort of helpful message.\\\"\\n  );\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleChange = (event) => {\\n    setContent(event.target.value);\\n  };\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-1\\\" autoClose={false} />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel htmlFor=\\\"basic-use-input\\\" label=\\\"Toast content\\\">\\n          <Input id=\\\"basic-use-input\\\" value={content} onChange={handleChange} />\\n        </FieldLabel>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(selectedOption.label, content, {\\n            containerId: \\\"toaster-1\\\",\\n          })\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n}\" }, ...NoAutoClose.parameters };\nWithOnClick.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-2\\\" />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select onBlur={handleSelect} style={{ maxWidth: 300 }}>\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(\\n            selectedOption.label,\\n            <div>\\n              <span>Some informative message. </span>\\n              <Link href=\\\"#\\\">Your link here</Link>\\n            </div>,\\n            { onClick: action(\\\"Toast clicked\\\"), containerId: \\\"toaster-2\\\" }\\n          )\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n}\" }, ...WithOnClick.parameters };\nWithLink.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-3\\\" />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(\\n            selectedOption.label,\\n            <div>\\n              <span>Some informative message. </span>\\n              <Link href=\\\"#\\\">Your link here</Link>\\n            </div>,\\n            {\\n              containerId: \\\"toaster-3\\\",\\n            }\\n          )\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n}\" }, ...WithLink.parameters };\nWithQuaternaryButton.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-4\\\" />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <Button\\n        className=\\\"make-toast\\\"\\n        onClick={() =>\\n          makeToast(\\n            selectedOption.label,\\n            <div>\\n              <span>Some informative message. </span>\\n              <Button variant=\\\"quaternary\\\">Your link here</Button>\\n            </div>,\\n            {\\n              containerId: \\\"toaster-4\\\",\\n            }\\n          )\\n        }\\n      >\\n        Make toast\\n      </Button>\\n    </>\\n  );\\n}\" }, ...WithQuaternaryButton.parameters };\nWithProgrammaticDismissal.parameters = { storySource: { source: \"() => {\\n  const [selectedOption, setSelectedOption] = useState(options[0]);\\n\\n  const toastId = useRef<string | number | null>(null);\\n\\n  const handleSelect = (event) => {\\n    setSelectedOption(\\n      options.find(({ id }) => event.target.value === id) as any\\n    );\\n  };\\n\\n  return (\\n    <>\\n      <Toaster id=\\\"toaster-4\\\" />\\n      <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n        <FieldLabel label=\\\"Toast type\\\">\\n          <select\\n            className=\\\"toast-type-select\\\"\\n            onBlur={handleSelect}\\n            style={{ maxWidth: 300 }}\\n          >\\n            {options.map((option) => (\\n              <option key={option.id} value={option.id}>\\n                {option.label}\\n              </option>\\n            ))}\\n          </select>\\n        </FieldLabel>\\n      </Box>\\n      <ButtonGroup>\\n        <Button\\n          className=\\\"make-toast\\\"\\n          onClick={() => {\\n            toastId.current = makeToast(\\n              selectedOption.label,\\n              <div>Loading...</div>,\\n              {\\n                containerId: \\\"toaster-4\\\",\\n                autoClose: false,\\n              }\\n            );\\n          }}\\n        >\\n          Make toast\\n        </Button>\\n        <Button\\n          variant=\\\"secondary\\\"\\n          className=\\\"dismiss-toast\\\"\\n          onClick={() => {\\n            if (toastId.current) {\\n              dismissToast(toastId.current);\\n\\n              toastId.current = null;\\n            }\\n          }}\\n        >\\n          Dismiss most recent toast\\n        </Button>\\n        <Button\\n          variant=\\\"secondary\\\"\\n          className=\\\"dismiss-all-toasts\\\"\\n          onClick={() => dismissToast()}\\n        >\\n          Dismiss all toasts\\n        </Button>\\n      </ButtonGroup>\\n    </>\\n  );\\n}\" }, ...WithProgrammaticDismissal.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\nimport { toast, ToastContent, Slide, Id } from \"react-toastify\";\n\nimport { ToastOptions, ToastProps, ToasterProps } from \"./types\";\nimport { Toast } from \"./Toast\";\nimport { StyledToaster } from \"./StyledToaster\";\nimport { ToastCloseButton } from \"./ToastCloseButton\";\n\nexport const makeToast = (\n  intent: ToastProps[\"intent\"],\n  content: ToastContent,\n  options?: ToastOptions\n): Id | null => {\n  switch (intent) {\n    case \"danger\":\n      return toast.error(<Toast intent={intent}>{content}</Toast>, options);\n    case \"success\":\n      return toast.success(<Toast intent={intent}>{content}</Toast>, options);\n    case \"warning\":\n      return toast.warn(<Toast intent={intent}>{content}</Toast>, options);\n    case \"info\":\n    default:\n      return toast.info(<Toast intent={intent}>{content}</Toast>, options);\n  }\n};\n\nexport const dismissToast = (toastId?: string | number | undefined) => {\n  return toast.dismiss(toastId);\n};\n\nexport const Toaster = ({\n  autoClose = 5000,\n  className,\n  id,\n  limit = 3,\n  ...props\n}: ToasterProps): React.ReactElement | null => (\n  <StyledToaster\n    {...props}\n    className={classNames([\"bcl-toaster\", className])}\n    closeOnClick={false}\n    containerId={id}\n    draggable={false}\n    enableMultiContainer\n    hideProgressBar\n    closeButton={ToastCloseButton}\n    newestOnTop\n    limit={limit}\n    autoClose={autoClose}\n    transition={Slide}\n  />\n);\n\nToaster.displayName = \"Toaster\";\n","export { Toaster, makeToast, dismissToast } from \"./Toaster\";\n\nexport type { ToasterProps, ToastOptions } from \"./types\";\n","import styled from \"styled-components\";\nimport { getColor, getFontSize, getBorderRadius } from \"@braze/beacon-styling\";\n\nimport { StyledTooltipProps } from \"./types\";\n\nexport const StyledTooltip = styled.div<StyledTooltipProps>`\n  padding: 0.5rem 0.75rem 0.25rem;\n  opacity: 0.95;\n  color: ${getColor(\"gray\", 0)};\n  background-color: ${getColor(\"gray\", 900)};\n  text-align: center;\n  min-width: 60px;\n  max-width: 200px;\n  font-size: ${getFontSize(\"body\", \"xs\")};\n  border-radius: ${getBorderRadius(\"sm\")};\n  box-shadow: 0px 10px 15px rgba(46, 60, 71, 0.1);\n\n  & > div {\n    transform: translateY(-1px);\n  }\n\n  ${(props) => props.styledCss};\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Canvas, Story } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tooltip\"\n    }}>{`Tooltip`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` component opens a box that overlays other content to provide\ncontextual help to a user. `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` provides brief contextual information\nor functionality as the user hovers over the related element. Use for icon\nand button descriptions.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you need to provide longer context or interactivity, please use\nthe `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: If you need to implement a basic use case of the tooltip, please\nuse `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{` instead, as that component has the open/close\nhandlers built-in and is built to be used in a more declarative way.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`By default, the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` will appear when the target element is either\nfocused on or hovered over. Similarly, the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` will disappear when\nthe the target element is blurred or left with a mouse, whichever happens\nfirst.`}</p>\n    <p>{`To facilitate usage, we also export a `}<inlineCode parentName=\"p\">{`useTooltip`}</inlineCode>{` hook that manages\nthe `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{`s state for you. Simply invoke the hook, assign it to a\nvariable, and use the object spread notation in `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` to use it,\nas shown below!`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-tooltip--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"trigger-on-click\"\n    }}>{`Trigger on click`}</h3>\n    <p>{`By setting the `}<inlineCode parentName=\"p\">{`triggers`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`[\"click\"]`}</inlineCode>{`, you can make the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` open\nand close only when the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` is clicked.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-tooltip--trigger-only-on-click\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"trigger-on-focus\"\n    }}>{`Trigger on focus`}</h3>\n    <p>{`By setting the `}<inlineCode parentName=\"p\">{`triggers`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`[\"focus\"]`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`untriggers`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`[\"blur\"]`}</inlineCode>{`,\nyou can make the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` open when the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` is focused and close\nwhen it is blurred.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-tooltip--trigger-only-on-focus\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"trigger-on-hover\"\n    }}>{`Trigger on hover`}</h3>\n    <p>{`By setting the `}<inlineCode parentName=\"p\">{`triggers`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`[\"mouseenter\"]`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`untriggers`}</inlineCode>{`\nto `}<inlineCode parentName=\"p\">{`[\"mouseleave\"]`}</inlineCode>{`, you can make the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` open when\nthe `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` is hovered and close when it is no longer hovered.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-tooltip--trigger-only-on-hover\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"use-with-target-dom-id\"\n    }}>{`Use with target DOM id`}</h3>\n    <p>{`Depending on your target component, it may not always be possible to use refs\nto get access to the DOM node. In such cases, the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` prop is provided as\nan escape hatch. The `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` prop must correspond to the DOM id of the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{`\nelement. Note that this requires that no two DOM ids are the same.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-tooltip--use-with-dom-id\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"modal-use\"\n    }}>{`Modal Use`}</h3>\n    <p><inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` will automatically calculate the z-index needed to display over a\n`}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` it is inside of. Note that the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` z-index is well above the\n`}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{`'s base z-index, but the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` still renders above it.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-tooltip--modal-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"tooltips-and-scrolling\"\n    }}>{`Tooltips and scrolling`}</h3>\n    <p><inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` closes automatically by default when the document scrolls, or any parent element scrolls.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-tooltip--closing-on-scroll\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Tooltip, useTooltip } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"tooltip-1\"\n    }}><inlineCode parentName=\"h3\">{`Tooltip`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickOutside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the popper should be closed when a user clicks outside the target or the popper (if interactive)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`delay`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( `}<inlineCode parentName=\"td\">{`[number OR null, number OR null]`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the amount of time, if any, to delay opening and/or closing the popper by`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ignoreCloseOnClickOutsideClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bcl-popper-ignore-click`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the className that should cause an element containing it to be ignored when determining whether to close popper`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isIgnoreCloseOnClickOutsideEnabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the ignore close on outside click behavior using specific classNames is enabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`determines if the component should be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`distance`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`8`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from bottom of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`skidding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from left of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be opened`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClose`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be closed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`placement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`auto`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`auto`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Popper relative to target`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed to the parent popper element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM id to be passed to the parent popper element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperStyle`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object override to be passed to the parent popper component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperStyledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop passed to popper to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`portalRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref of Portal inside which Popover will be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`target`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired target component's ID`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`targetRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to pass down to the target object`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`triggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseenter`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`focus`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['focus', 'mouseenter']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for popper on behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`untriggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseleave`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`blur`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`scroll`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['blur', 'mouseleave', 'scroll']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for popper off behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`1031`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index for the component and its sub-components`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"usetooltip\"\n    }}><inlineCode parentName=\"h3\">{`useTooltip`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`useTooltip`}</inlineCode>{` is a utility hook that aims to simplify your life when using\na `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` in your project. The function conveniently manages the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{`\nstate and the necessary refs for you, making getting started with a `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{`\na breeze.`}</p>\n    <p>{`The following are arguments accepted by `}<inlineCode parentName=\"p\">{`useTooltip`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`targetRef`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`React.RefObject`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`optional`}</li>\n          <li parentName=\"ul\">{`ref object to be passed to both the target component via its `}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{` and the `}<inlineCode parentName=\"li\">{`Tooltip`}</inlineCode>{` via its `}<inlineCode parentName=\"li\">{`targetRef`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`boolean`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`optional; `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` by default`}</li>\n          <li parentName=\"ul\">{`sets the initial state of the `}<inlineCode parentName=\"li\">{`Tooltip`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`useTooltip`}</inlineCode>{` returns the an array that can be destructured to reveal the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`state`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`object`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`exposes the state of the `}<inlineCode parentName=\"li\">{`Tooltip`}</inlineCode>{` and handlers`}</li>\n          <li parentName=\"ul\">{`can be passed into the `}<inlineCode parentName=\"li\">{`Tooltip`}</inlineCode>{` via object destructuring (e.g. `}<inlineCode parentName=\"li\">{`{...state}`}</inlineCode>{`)`}</li>\n          <li parentName=\"ul\">{`contains the following:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isOpen`}</inlineCode>{`: boolean; indicates current state of the `}<inlineCode parentName=\"li\">{`Tooltip`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onOpen`}</inlineCode>{`: func; changes `}<inlineCode parentName=\"li\">{`isOpen`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` when called`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onClose`}</inlineCode>{`: func; changes `}<inlineCode parentName=\"li\">{`isOpen`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` when called`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ref`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`React.RefObject`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`if an argument was passed to `}<inlineCode parentName=\"li\">{`targetRef`}</inlineCode>{`, then this is identical to that argument`}</li>\n          <li parentName=\"ul\">{`if an argument was NOT passed to `}<inlineCode parentName=\"li\">{`targetRef`}</inlineCode>{`, this will be a newly instantiated ref object to be passed to both the target component via its `}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{` and the `}<inlineCode parentName=\"li\">{`Tooltip`}</inlineCode>{` via its `}<inlineCode parentName=\"li\">{`targetRef`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"// note: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-onchange.md says this rule is invalid except for IE 10/11\\n\\nimport React, { useState } from \\\"react\\\";\\n\\nimport { Button } from \\\"../Button\\\";\\nimport { Modal } from \\\"../Modal\\\";\\nimport { ModalHeading } from \\\"../ModalHeading\\\";\\nimport { ModalBody } from \\\"../ModalBody\\\";\\nimport { placementTypes, PlacementType } from \\\"../Popper\\\";\\nimport { LoremIpsum } from \\\"../LoremIpsum\\\";\\n\\nimport page from \\\"./Tooltip.docs.mdx\\\";\\n\\nimport { Tooltip, useTooltip, TooltipProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Overlay/Tooltip\\\",\\n  component: Tooltip,\\n  parameters: { docs: { page } },\\n};\\n\\nconst noop = () => {\\n  // do nothing\\n};\\n\\nconst defaultProps: TooltipProps<HTMLButtonElement> = {\\n  onOpen: noop,\\n  onClose: noop,\\n};\\n\\nexport const BasicUse = (args: TooltipProps<HTMLButtonElement>) => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n  const [placement, setPlacement] = useState<PlacementType>(\\\"bottom\\\");\\n\\n  return (\\n    <>\\n      <select\\n        className=\\\"placement-select\\\"\\n        value={placement}\\n        onChange={(e) => setPlacement(e.target.value as PlacementType)}\\n      >\\n        {placementTypes.map((type) => (\\n          <option key={type} value={type}>\\n            {type}\\n          </option>\\n        ))}\\n      </select>\\n      <div\\n        style={{\\n          display: \\\"flex\\\",\\n          alignItems: \\\"center\\\",\\n          justifyContent: \\\"center\\\",\\n          height: \\\"25vh\\\",\\n        }}\\n      >\\n        <Button className=\\\"tooltip-focus\\\" ref={targetRef}>\\n          Focus/hover to open\\n        </Button>\\n        <Tooltip\\n          {...args}\\n          {...tooltipState}\\n          targetRef={targetRef}\\n          placement={placement}\\n        >\\n          Tooltip\\n        </Tooltip>\\n      </div>\\n    </>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nconst BasicUseArgs: TooltipProps<HTMLButtonElement> = {\\n  ...defaultProps,\\n  distance: 8,\\n  skidding: 0,\\n  interactive: false,\\n};\\n\\nBasicUse.args = BasicUseArgs;\\n\\nexport const TriggerOnlyOnClick = () => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Click to open/close</Button>\\n      <Tooltip\\n        targetRef={targetRef}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"click\\\"]}\\n        placement=\\\"bottom\\\"\\n        {...tooltipState}\\n      >\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  );\\n};\\n\\nTriggerOnlyOnClick.storyName = \\\"trigger only on click\\\";\\n\\nexport const TriggerOnlyOnFocus = () => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Focus to open</Button>\\n      <Tooltip\\n        targetRef={targetRef}\\n        triggers={[\\\"focus\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n        placement=\\\"bottom\\\"\\n        {...tooltipState}\\n      >\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  );\\n};\\n\\nTriggerOnlyOnFocus.storyName = \\\"trigger only on focus\\\";\\n\\nexport const TriggerOnlyOnHover = () => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Hover to open</Button>\\n      <Tooltip\\n        targetRef={targetRef}\\n        triggers={[\\\"mouseenter\\\"]}\\n        untriggers={[\\\"mouseleave\\\"]}\\n        placement=\\\"bottom\\\"\\n        {...tooltipState}\\n      >\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  );\\n};\\n\\nTriggerOnlyOnHover.storyName = \\\"trigger only on hover\\\";\\n\\nexport const UseWithDomId = () => {\\n  const [tooltipState] = useTooltip();\\n\\n  return (\\n    <div>\\n      <Button id=\\\"default-button\\\">Focus/hover to open</Button>\\n      <Tooltip {...tooltipState} target=\\\"default-button\\\" placement=\\\"bottom\\\">\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  );\\n};\\n\\nUseWithDomId.storyName = \\\"use with DOM id\\\";\\n\\nexport const ModalUse = () => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  return (\\n    <div>\\n      <Button onClick={() => setIsOpen(true)}>Click to Open</Button>\\n      <Modal zIndex={3200} isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\\n        <ModalHeading>See a Tooltip!</ModalHeading>\\n        <ModalBody>\\n          <Button ref={targetRef}>Hover to open</Button>\\n          <Tooltip\\n            targetRef={targetRef}\\n            triggers={[\\\"mouseenter\\\"]}\\n            untriggers={[\\\"mouseleave\\\"]}\\n            placement=\\\"right\\\"\\n            {...tooltipState}\\n          >\\n            Tooltip\\n          </Tooltip>\\n        </ModalBody>\\n      </Modal>\\n    </div>\\n  );\\n};\\n\\nModalUse.storyName = \\\"modal use\\\";\\n\\nexport const ClosingOnScroll = () => {\\n  const [tooltipState1, targetRef1] = useTooltip<HTMLButtonElement>();\\n  const [tooltipState2, targetRef2] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <LoremIpsum paragraphs={5} />\\n      <Button ref={targetRef1}>Hover to open</Button>\\n      <Tooltip targetRef={targetRef1} {...tooltipState1}>\\n        Tooltip 1\\n      </Tooltip>\\n      <div\\n        style={{\\n          height: 300,\\n          width: \\\"100vw\\\",\\n          margin: 50,\\n          overflow: \\\"auto\\\",\\n        }}\\n        id=\\\"internal-scroll\\\"\\n      >\\n        <div\\n          style={{\\n            height: 500,\\n            width: \\\"100vw\\\",\\n          }}\\n        >\\n          <Button ref={targetRef2}>Hover to open 2</Button>\\n          <Tooltip targetRef={targetRef2} {...tooltipState2}>\\n            Tooltip 2\\n          </Tooltip>\\n        </div>\\n      </div>\\n      <LoremIpsum paragraphs={5} />\\n    </div>\\n  );\\n};\\n\\nClosingOnScroll.storyName = \\\"closing on scroll\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":32},\"endLoc\":{\"col\":1,\"line\":71},\"startBody\":{\"col\":24,\"line\":32},\"endBody\":{\"col\":1,\"line\":71}},\"TriggerOnlyOnClick\":{\"startLoc\":{\"col\":34,\"line\":84},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":34,\"line\":84},\"endBody\":{\"col\":1,\"line\":101}},\"TriggerOnlyOnFocus\":{\"startLoc\":{\"col\":34,\"line\":105},\"endLoc\":{\"col\":1,\"line\":122},\"startBody\":{\"col\":34,\"line\":105},\"endBody\":{\"col\":1,\"line\":122}},\"TriggerOnlyOnHover\":{\"startLoc\":{\"col\":34,\"line\":126},\"endLoc\":{\"col\":1,\"line\":143},\"startBody\":{\"col\":34,\"line\":126},\"endBody\":{\"col\":1,\"line\":143}},\"UseWithDomId\":{\"startLoc\":{\"col\":28,\"line\":147},\"endLoc\":{\"col\":1,\"line\":158},\"startBody\":{\"col\":28,\"line\":147},\"endBody\":{\"col\":1,\"line\":158}},\"ModalUse\":{\"startLoc\":{\"col\":24,\"line\":162},\"endLoc\":{\"col\":1,\"line\":186},\"startBody\":{\"col\":24,\"line\":162},\"endBody\":{\"col\":1,\"line\":186}},\"ClosingOnScroll\":{\"startLoc\":{\"col\":31,\"line\":190},\"endLoc\":{\"col\":1,\"line\":225},\"startBody\":{\"col\":31,\"line\":190},\"endBody\":{\"col\":1,\"line\":225}}};\n    \n// note: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-onchange.md says this rule is invalid except for IE 10/11\n/* eslint-disable jsx-a11y/no-onchange */\nimport React, { useState } from \"react\";\n\nimport { Button } from \"../Button\";\nimport { Modal } from \"../Modal\";\nimport { ModalHeading } from \"../ModalHeading\";\nimport { ModalBody } from \"../ModalBody\";\nimport { placementTypes, PlacementType } from \"../Popper\";\nimport { LoremIpsum } from \"../LoremIpsum\";\n\nimport page from \"./Tooltip.docs.mdx\";\n\nimport { Tooltip, useTooltip, TooltipProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Overlay/Tooltip\",\n  component: Tooltip,\n  parameters: { docs: { page } },\n};\n\nconst noop = () => {\n  // do nothing\n};\n\nconst defaultProps: TooltipProps<HTMLButtonElement> = {\n  onOpen: noop,\n  onClose: noop,\n};\n\nexport const BasicUse = (args: TooltipProps<HTMLButtonElement>) => {\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\n  const [placement, setPlacement] = useState<PlacementType>(\"bottom\");\n\n  return (\n    <>\n      <select\n        className=\"placement-select\"\n        value={placement}\n        onChange={(e) => setPlacement(e.target.value as PlacementType)}\n      >\n        {placementTypes.map((type) => (\n          <option key={type} value={type}>\n            {type}\n          </option>\n        ))}\n      </select>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"25vh\",\n        }}\n      >\n        <Button className=\"tooltip-focus\" ref={targetRef}>\n          Focus/hover to open\n        </Button>\n        <Tooltip\n          {...args}\n          {...tooltipState}\n          targetRef={targetRef}\n          placement={placement}\n        >\n          Tooltip\n        </Tooltip>\n      </div>\n    </>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nconst BasicUseArgs: TooltipProps<HTMLButtonElement> = {\n  ...defaultProps,\n  distance: 8,\n  skidding: 0,\n  interactive: false,\n};\n\nBasicUse.args = BasicUseArgs;\n\nexport const TriggerOnlyOnClick = () => {\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>Click to open/close</Button>\n      <Tooltip\n        targetRef={targetRef}\n        triggers={[\"click\"]}\n        untriggers={[\"click\"]}\n        placement=\"bottom\"\n        {...tooltipState}\n      >\n        Tooltip\n      </Tooltip>\n    </div>\n  );\n};;\n\nTriggerOnlyOnClick.storyName = \"trigger only on click\";\n\nexport const TriggerOnlyOnFocus = () => {\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>Focus to open</Button>\n      <Tooltip\n        targetRef={targetRef}\n        triggers={[\"focus\"]}\n        untriggers={[\"blur\"]}\n        placement=\"bottom\"\n        {...tooltipState}\n      >\n        Tooltip\n      </Tooltip>\n    </div>\n  );\n};;\n\nTriggerOnlyOnFocus.storyName = \"trigger only on focus\";\n\nexport const TriggerOnlyOnHover = () => {\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\n\n  return (\n    <div>\n      <Button ref={targetRef}>Hover to open</Button>\n      <Tooltip\n        targetRef={targetRef}\n        triggers={[\"mouseenter\"]}\n        untriggers={[\"mouseleave\"]}\n        placement=\"bottom\"\n        {...tooltipState}\n      >\n        Tooltip\n      </Tooltip>\n    </div>\n  );\n};;\n\nTriggerOnlyOnHover.storyName = \"trigger only on hover\";\n\nexport const UseWithDomId = () => {\n  const [tooltipState] = useTooltip();\n\n  return (\n    <div>\n      <Button id=\"default-button\">Focus/hover to open</Button>\n      <Tooltip {...tooltipState} target=\"default-button\" placement=\"bottom\">\n        Tooltip\n      </Tooltip>\n    </div>\n  );\n};;\n\nUseWithDomId.storyName = \"use with DOM id\";\n\nexport const ModalUse = () => {\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>Click to Open</Button>\n      <Modal zIndex={3200} isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\n        <ModalHeading>See a Tooltip!</ModalHeading>\n        <ModalBody>\n          <Button ref={targetRef}>Hover to open</Button>\n          <Tooltip\n            targetRef={targetRef}\n            triggers={[\"mouseenter\"]}\n            untriggers={[\"mouseleave\"]}\n            placement=\"right\"\n            {...tooltipState}\n          >\n            Tooltip\n          </Tooltip>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};;\n\nModalUse.storyName = \"modal use\";\n\nexport const ClosingOnScroll = () => {\n  const [tooltipState1, targetRef1] = useTooltip<HTMLButtonElement>();\n  const [tooltipState2, targetRef2] = useTooltip<HTMLButtonElement>();\n\n  return (\n    <div>\n      <LoremIpsum paragraphs={5} />\n      <Button ref={targetRef1}>Hover to open</Button>\n      <Tooltip targetRef={targetRef1} {...tooltipState1}>\n        Tooltip 1\n      </Tooltip>\n      <div\n        style={{\n          height: 300,\n          width: \"100vw\",\n          margin: 50,\n          overflow: \"auto\",\n        }}\n        id=\"internal-scroll\"\n      >\n        <div\n          style={{\n            height: 500,\n            width: \"100vw\",\n          }}\n        >\n          <Button ref={targetRef2}>Hover to open 2</Button>\n          <Tooltip targetRef={targetRef2} {...tooltipState2}>\n            Tooltip 2\n          </Tooltip>\n        </div>\n      </div>\n      <LoremIpsum paragraphs={5} />\n    </div>\n  );\n};\n\nClosingOnScroll.storyName = \"closing on scroll\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(args: TooltipProps<HTMLButtonElement>) => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n  const [placement, setPlacement] = useState<PlacementType>(\\\"bottom\\\");\\n\\n  return (\\n    <>\\n      <select\\n        className=\\\"placement-select\\\"\\n        value={placement}\\n        onChange={(e) => setPlacement(e.target.value as PlacementType)}\\n      >\\n        {placementTypes.map((type) => (\\n          <option key={type} value={type}>\\n            {type}\\n          </option>\\n        ))}\\n      </select>\\n      <div\\n        style={{\\n          display: \\\"flex\\\",\\n          alignItems: \\\"center\\\",\\n          justifyContent: \\\"center\\\",\\n          height: \\\"25vh\\\",\\n        }}\\n      >\\n        <Button className=\\\"tooltip-focus\\\" ref={targetRef}>\\n          Focus/hover to open\\n        </Button>\\n        <Tooltip\\n          {...args}\\n          {...tooltipState}\\n          targetRef={targetRef}\\n          placement={placement}\\n        >\\n          Tooltip\\n        </Tooltip>\\n      </div>\\n    </>\\n  );\\n}\" }, ...BasicUse.parameters };\nTriggerOnlyOnClick.parameters = { storySource: { source: \"() => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Click to open/close</Button>\\n      <Tooltip\\n        targetRef={targetRef}\\n        triggers={[\\\"click\\\"]}\\n        untriggers={[\\\"click\\\"]}\\n        placement=\\\"bottom\\\"\\n        {...tooltipState}\\n      >\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  );\\n}\" }, ...TriggerOnlyOnClick.parameters };\nTriggerOnlyOnFocus.parameters = { storySource: { source: \"() => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Focus to open</Button>\\n      <Tooltip\\n        targetRef={targetRef}\\n        triggers={[\\\"focus\\\"]}\\n        untriggers={[\\\"blur\\\"]}\\n        placement=\\\"bottom\\\"\\n        {...tooltipState}\\n      >\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  );\\n}\" }, ...TriggerOnlyOnFocus.parameters };\nTriggerOnlyOnHover.parameters = { storySource: { source: \"() => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <Button ref={targetRef}>Hover to open</Button>\\n      <Tooltip\\n        targetRef={targetRef}\\n        triggers={[\\\"mouseenter\\\"]}\\n        untriggers={[\\\"mouseleave\\\"]}\\n        placement=\\\"bottom\\\"\\n        {...tooltipState}\\n      >\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  );\\n}\" }, ...TriggerOnlyOnHover.parameters };\nUseWithDomId.parameters = { storySource: { source: \"() => {\\n  const [tooltipState] = useTooltip();\\n\\n  return (\\n    <div>\\n      <Button id=\\\"default-button\\\">Focus/hover to open</Button>\\n      <Tooltip {...tooltipState} target=\\\"default-button\\\" placement=\\\"bottom\\\">\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  );\\n}\" }, ...UseWithDomId.parameters };\nModalUse.parameters = { storySource: { source: \"() => {\\n  const [tooltipState, targetRef] = useTooltip<HTMLButtonElement>();\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  return (\\n    <div>\\n      <Button onClick={() => setIsOpen(true)}>Click to Open</Button>\\n      <Modal zIndex={3200} isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\\n        <ModalHeading>See a Tooltip!</ModalHeading>\\n        <ModalBody>\\n          <Button ref={targetRef}>Hover to open</Button>\\n          <Tooltip\\n            targetRef={targetRef}\\n            triggers={[\\\"mouseenter\\\"]}\\n            untriggers={[\\\"mouseleave\\\"]}\\n            placement=\\\"right\\\"\\n            {...tooltipState}\\n          >\\n            Tooltip\\n          </Tooltip>\\n        </ModalBody>\\n      </Modal>\\n    </div>\\n  );\\n}\" }, ...ModalUse.parameters };\nClosingOnScroll.parameters = { storySource: { source: \"() => {\\n  const [tooltipState1, targetRef1] = useTooltip<HTMLButtonElement>();\\n  const [tooltipState2, targetRef2] = useTooltip<HTMLButtonElement>();\\n\\n  return (\\n    <div>\\n      <LoremIpsum paragraphs={5} />\\n      <Button ref={targetRef1}>Hover to open</Button>\\n      <Tooltip targetRef={targetRef1} {...tooltipState1}>\\n        Tooltip 1\\n      </Tooltip>\\n      <div\\n        style={{\\n          height: 300,\\n          width: \\\"100vw\\\",\\n          margin: 50,\\n          overflow: \\\"auto\\\",\\n        }}\\n        id=\\\"internal-scroll\\\"\\n      >\\n        <div\\n          style={{\\n            height: 500,\\n            width: \\\"100vw\\\",\\n          }}\\n        >\\n          <Button ref={targetRef2}>Hover to open 2</Button>\\n          <Tooltip targetRef={targetRef2} {...tooltipState2}>\\n            Tooltip 2\\n          </Tooltip>\\n        </div>\\n      </div>\\n      <LoremIpsum paragraphs={5} />\\n    </div>\\n  );\\n}\" }, ...ClosingOnScroll.parameters };","import React from \"react\";\n\nimport { Popper, usePopper } from \"../Popper\";\n\nimport { TooltipProps } from \"./types\";\nimport { StyledTooltip } from \"./StyledTooltip\";\n\n/**\n * A function that abstracts the open/close logic of a tooltip component\n * @param targetRef an optional ref object that should be used instead of initializing a new one\n * @param initialState an optional initial state for the handler\n * @returns an array containing state management props for the tooltip as its first element and the ref object to be passed to both the target and the tooltip\n * @note this function renames usePopper to provide a consistent point of entry and simplify the cognitive overhead for the developer\n */\nexport const useTooltip = usePopper;\n\nexport const Tooltip = ({\n  className,\n  children,\n  id,\n  placement = \"bottom\",\n  style,\n  styledCss,\n  popperClassName,\n  popperId,\n  untriggers = [\"mouseleave\", \"blur\", \"scroll\"],\n  ...props\n}: TooltipProps): React.ReactElement => {\n  return (\n    <Popper\n      {...props}\n      className={popperClassName}\n      id={popperId}\n      placement={placement}\n      tipVariant=\"dark\"\n      role=\"tooltip\"\n      untriggers={untriggers}\n    >\n      <StyledTooltip\n        className={className}\n        id={id}\n        style={style}\n        styledCss={styledCss}\n      >\n        <div>{children}</div>\n      </StyledTooltip>\n    </Popper>\n  );\n};\n","export { Tooltip } from \"./Tooltip\";\n\nexport { useTooltip } from \"./Tooltip\";\n\nexport type { TooltipProps } from \"./types\";\n","/**\n * @fileoverview an uncontrolled version of `Tab`\n */\nimport React, { useContext, ReactElement } from \"react\";\n\nimport { Tab } from \"../Tab\";\nimport { UncontrolledTabsContext } from \"../UncontrolledTabsContext\";\n\nimport { UncontrolledTabProps } from \"./types\";\n\nexport const UncontrolledTab = ({\n  tabId,\n  ...props\n}: UncontrolledTabProps): ReactElement => {\n  const { activeTab } = useContext(UncontrolledTabsContext);\n\n  return <Tab tabId={tabId} active={activeTab === tabId} {...props} />;\n};\n","export { UncontrolledTab } from \"./UncontrolledTab\";\n\nexport type { UncontrolledTabProps } from \"./types\";\n","/**\n * @fileoverview an uncontrolled version of `TabContentProps`\n */\nimport React, { useContext, ReactElement } from \"react\";\n\nimport { TabContent } from \"../TabContent\";\nimport { UncontrolledTabsContext } from \"../UncontrolledTabsContext\";\n\nimport { UncontrolledTabContentProps } from \"./types\";\n\nexport const UncontrolledTabContent = ({\n  tabId,\n  ...props\n}: UncontrolledTabContentProps): ReactElement => {\n  const { activeTab } = useContext(UncontrolledTabsContext);\n\n  return <TabContent active={activeTab === tabId} {...props} />;\n};\n","export { UncontrolledTabContent } from \"./UncontrolledTabContent\";\n\nexport type { UncontrolledTabContentProps } from \"./types\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { select, withKnobs } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { BodyText } from \"../BodyText\";\nimport { Box } from \"../Box\";\nimport { UncontrolledTabsContextProvider } from \"../UncontrolledTabsContext\";\nimport { UncontrolledTabContent } from \"../UncontrolledTabContent\";\nimport { UncontrolledTab } from \"../UncontrolledTab\";\nimport { UncontrolledTabs } from \"./UncontrolledTabs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"uncontrolledtabs\"\n    }}>{`UncontrolledTabs`}</h1>\n    <Meta title=\"Commons/Content Display/UncontrolledTabs\" component={UncontrolledTabs} mdxType=\"Meta\" />\n    <p><inlineCode parentName=\"p\">{`UncontrolledTabs`}</inlineCode>{` allow users to see multiple different sections of content grouped by labels.\nIt handles the state for the `}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` component`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`UncontrolledTabs`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p><inlineCode parentName=\"p\">{`UncontrolledTabs`}</inlineCode>{` are used to create fixed, navigable sections of a page.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The `}<inlineCode parentName=\"p\">{`UncontrolledTabsContextProvider`}</inlineCode>{` is required`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    <UncontrolledTabsContextProvider defaultTab={2} onChange={action(\"click\")} mdxType=\"UncontrolledTabsContextProvider\">\n      <UncontrolledTabs mdxType=\"UncontrolledTabs\">\n        <UncontrolledTab tabId={1} mdxType=\"UncontrolledTab\">Section 1</UncontrolledTab>\n        <UncontrolledTab tabId={2} mdxType=\"UncontrolledTab\">Section 2</UncontrolledTab>\n        <UncontrolledTab tabId={3} mdxType=\"UncontrolledTab\">Section 3</UncontrolledTab>\n      </UncontrolledTabs>\n      <UncontrolledTabContent tabId={1} mdxType=\"UncontrolledTabContent\">\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\n            diam euismod iaculis.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n      <UncontrolledTabContent tabId={2} mdxType=\"UncontrolledTabContent\">\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n      <UncontrolledTabContent tabId={3} mdxType=\"UncontrolledTabContent\">\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\n            diam euismod iaculis.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Cras arcu velit, aliquet at odio vitae, volutpat lobortis sapien.\n            Pellentesque habitant morbi tristique senectus et netus et malesuada\n            fames ac turpis egestas. Curabitur mollis mi non ante vestibulum\n            maximus. Suspendisse potenti. Quisque sagittis, tellus ut interdum\n            rutrum, ex ligula vehicula dui, eget volutpat eros nulla at nunc.\n            Morbi interdum in elit consequat volutpat. Sed at augue in arcu\n            interdum luctus. Nunc pretium neque et bibendum malesuada. Aliquam\n            et enim a enim dictum porta non vitae sem. Nullam sit amet placerat\n            mauris, sed pretium arcu. Nunc finibus neque ac velit euismod, non\n            fermentum nibh auctor. Suspendisse vitae arcu molestie, dapibus dui\n            vel, varius quam. Orci varius natoque penatibus et magnis dis\n            parturient montes, nascetur ridiculus mus. Donec sit amet lorem\n            vitae dolor ullamcorper feugiat imperdiet in tellus. Sed et risus\n            condimentum, vulputate nulla quis, mattis magna.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n    </UncontrolledTabsContextProvider>\n  </Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <p>{`Sections can be disabled.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled use\" mdxType=\"Story\">\n    <UncontrolledTabsContextProvider defaultTab={1} onChange={action(\"click\")} mdxType=\"UncontrolledTabsContextProvider\">\n      <UncontrolledTabs mdxType=\"UncontrolledTabs\">\n        <UncontrolledTab tabId={1} mdxType=\"UncontrolledTab\">Section 1</UncontrolledTab>\n        <UncontrolledTab disabled tabId={2} mdxType=\"UncontrolledTab\">Section 2</UncontrolledTab>\n        <UncontrolledTab tabId={3} mdxType=\"UncontrolledTab\">Section 3</UncontrolledTab>\n      </UncontrolledTabs>\n      <UncontrolledTabContent tabId={1} mdxType=\"UncontrolledTabContent\">\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\n            diam euismod iaculis.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n      <UncontrolledTabContent tabId={2} mdxType=\"UncontrolledTabContent\">\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n      <UncontrolledTabContent tabId={3} mdxType=\"UncontrolledTabContent\">\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\n            diam euismod iaculis.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n              bottom: \"sm\"\n            }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">\n            Cras arcu velit, aliquet at odio vitae, volutpat lobortis sapien.\n            Pellentesque habitant morbi tristique senectus et netus et malesuada\n            fames ac turpis egestas. Curabitur mollis mi non ante vestibulum\n            maximus. Suspendisse potenti. Quisque sagittis, tellus ut interdum\n            rutrum, ex ligula vehicula dui, eget volutpat eros nulla at nunc.\n            Morbi interdum in elit consequat volutpat. Sed at augue in arcu\n            interdum luctus. Nunc pretium neque et bibendum malesuada. Aliquam\n            et enim a enim dictum porta non vitae sem. Nullam sit amet placerat\n            mauris, sed pretium arcu. Nunc finibus neque ac velit euismod, non\n            fermentum nibh auctor. Suspendisse vitae arcu molestie, dapibus dui\n            vel, varius quam. Orci varius natoque penatibus et magnis dis\n            parturient montes, nascetur ridiculus mus. Donec sit amet lorem\n            vitae dolor ullamcorper feugiat imperdiet in tellus. Sed et risus\n            condimentum, vulputate nulla quis, mattis magna.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n    </UncontrolledTabsContextProvider>\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  UncontrolledTabs,\n  UncontrolledTab,\n  UncontrolledTabContent,\n  UncontrolledTabsContextProvider,\n} from \"@braze/beacon-lab-commons-uncontrolled-tabs\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties-for-uncontrolledtabs\"\n    }}>{`Properties for `}<inlineCode parentName=\"h2\">{`UncontrolledTabs`}</inlineCode></h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(ReactNode, ReactNodeArray)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"properties-for-uncontrolledtab\"\n    }}>{`Properties for `}<inlineCode parentName=\"h2\">{`UncontrolledTab`}</inlineCode></h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(ReactNode, ReactNodeArray)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the tab is disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"properties-for-uncontrolledtabcontent\"\n    }}>{`Properties for `}<inlineCode parentName=\"h2\">{`UncontrolledTabContent`}</inlineCode></h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(ReactNode, ReactNodeArray)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"properties-for-uncontrolledtabscontextprovider\"\n    }}>{`Properties for `}<inlineCode parentName=\"h2\">{`UncontrolledTabsContextProvider`}</inlineCode></h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(ReactNode, ReactNodeArray)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`defaultTab`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(string, number)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the default active tab`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(id: number) => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback on active tab change`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = () => (\n          <UncontrolledTabsContextProvider defaultTab={2} onChange={action(\"click\")}>\n      <UncontrolledTabs>\n        <UncontrolledTab tabId={1}>Section 1</UncontrolledTab>\n        <UncontrolledTab tabId={2}>Section 2</UncontrolledTab>\n        <UncontrolledTab tabId={3}>Section 3</UncontrolledTab>\n      </UncontrolledTabs>\n      <UncontrolledTabContent tabId={1}>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\n            diam euismod iaculis.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n      <UncontrolledTabContent tabId={2}>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n      <UncontrolledTabContent tabId={3}>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\n            diam euismod iaculis.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Cras arcu velit, aliquet at odio vitae, volutpat lobortis sapien.\n            Pellentesque habitant morbi tristique senectus et netus et malesuada\n            fames ac turpis egestas. Curabitur mollis mi non ante vestibulum\n            maximus. Suspendisse potenti. Quisque sagittis, tellus ut interdum\n            rutrum, ex ligula vehicula dui, eget volutpat eros nulla at nunc.\n            Morbi interdum in elit consequat volutpat. Sed at augue in arcu\n            interdum luctus. Nunc pretium neque et bibendum malesuada. Aliquam\n            et enim a enim dictum porta non vitae sem. Nullam sit amet placerat\n            mauris, sed pretium arcu. Nunc finibus neque ac velit euismod, non\n            fermentum nibh auctor. Suspendisse vitae arcu molestie, dapibus dui\n            vel, varius quam. Orci varius natoque penatibus et magnis dis\n            parturient montes, nascetur ridiculus mus. Donec sit amet lorem\n            vitae dolor ullamcorper feugiat imperdiet in tellus. Sed et risus\n            condimentum, vulputate nulla quis, mattis magna.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n    </UncontrolledTabsContextProvider>\n        );\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '<UncontrolledTabsContextProvider defaultTab={2} onChange={action(\\\"click\\\")}>\\n      <UncontrolledTabs>\\n        <UncontrolledTab tabId={1}>Section 1</UncontrolledTab>\\n        <UncontrolledTab tabId={2}>Section 2</UncontrolledTab>\\n        <UncontrolledTab tabId={3}>Section 3</UncontrolledTab>\\n      </UncontrolledTabs>\\n      <UncontrolledTabContent tabId={1}>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\\n            sodales ac.\\n          </BodyText>\\n        </Box>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\\n            diam euismod iaculis.\\n          </BodyText>\\n        </Box>\\n      </UncontrolledTabContent>\\n      <UncontrolledTabContent tabId={2}>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\\n            sodales ac.\\n          </BodyText>\\n        </Box>\\n      </UncontrolledTabContent>\\n      <UncontrolledTabContent tabId={3}>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\\n            sodales ac.\\n          </BodyText>\\n        </Box>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\\n            diam euismod iaculis.\\n          </BodyText>\\n        </Box>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Cras arcu velit, aliquet at odio vitae, volutpat lobortis sapien.\\n            Pellentesque habitant morbi tristique senectus et netus et malesuada\\n            fames ac turpis egestas. Curabitur mollis mi non ante vestibulum\\n            maximus. Suspendisse potenti. Quisque sagittis, tellus ut interdum\\n            rutrum, ex ligula vehicula dui, eget volutpat eros nulla at nunc.\\n            Morbi interdum in elit consequat volutpat. Sed at augue in arcu\\n            interdum luctus. Nunc pretium neque et bibendum malesuada. Aliquam\\n            et enim a enim dictum porta non vitae sem. Nullam sit amet placerat\\n            mauris, sed pretium arcu. Nunc finibus neque ac velit euismod, non\\n            fermentum nibh auctor. Suspendisse vitae arcu molestie, dapibus dui\\n            vel, varius quam. Orci varius natoque penatibus et magnis dis\\n            parturient montes, nascetur ridiculus mus. Donec sit amet lorem\\n            vitae dolor ullamcorper feugiat imperdiet in tellus. Sed et risus\\n            condimentum, vulputate nulla quis, mattis magna.\\n          </BodyText>\\n        </Box>\\n      </UncontrolledTabContent>\\n    </UncontrolledTabsContextProvider>' } };\n\nexport const disabledUse = () => (\n          <UncontrolledTabsContextProvider defaultTab={1} onChange={action(\"click\")}>\n      <UncontrolledTabs>\n        <UncontrolledTab tabId={1}>Section 1</UncontrolledTab>\n        <UncontrolledTab disabled tabId={2}>Section 2</UncontrolledTab>\n        <UncontrolledTab tabId={3}>Section 3</UncontrolledTab>\n      </UncontrolledTabs>\n      <UncontrolledTabContent tabId={1}>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\n            diam euismod iaculis.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n      <UncontrolledTabContent tabId={2}>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n      <UncontrolledTabContent tabId={3}>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\n            sodales ac.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\n            diam euismod iaculis.\n          </BodyText>\n        </Box>\n        <Box boxMargin={{\n      bottom: \"sm\"\n    }}>\n          <BodyText>\n            Cras arcu velit, aliquet at odio vitae, volutpat lobortis sapien.\n            Pellentesque habitant morbi tristique senectus et netus et malesuada\n            fames ac turpis egestas. Curabitur mollis mi non ante vestibulum\n            maximus. Suspendisse potenti. Quisque sagittis, tellus ut interdum\n            rutrum, ex ligula vehicula dui, eget volutpat eros nulla at nunc.\n            Morbi interdum in elit consequat volutpat. Sed at augue in arcu\n            interdum luctus. Nunc pretium neque et bibendum malesuada. Aliquam\n            et enim a enim dictum porta non vitae sem. Nullam sit amet placerat\n            mauris, sed pretium arcu. Nunc finibus neque ac velit euismod, non\n            fermentum nibh auctor. Suspendisse vitae arcu molestie, dapibus dui\n            vel, varius quam. Orci varius natoque penatibus et magnis dis\n            parturient montes, nascetur ridiculus mus. Donec sit amet lorem\n            vitae dolor ullamcorper feugiat imperdiet in tellus. Sed et risus\n            condimentum, vulputate nulla quis, mattis magna.\n          </BodyText>\n        </Box>\n      </UncontrolledTabContent>\n    </UncontrolledTabsContextProvider>\n        );\ndisabledUse.storyName = 'disabled use';\ndisabledUse.parameters = { storySource: { source: '<UncontrolledTabsContextProvider defaultTab={1} onChange={action(\\\"click\\\")}>\\n      <UncontrolledTabs>\\n        <UncontrolledTab tabId={1}>Section 1</UncontrolledTab>\\n        <UncontrolledTab disabled tabId={2}>Section 2</UncontrolledTab>\\n        <UncontrolledTab tabId={3}>Section 3</UncontrolledTab>\\n      </UncontrolledTabs>\\n      <UncontrolledTabContent tabId={1}>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\\n            sodales ac.\\n          </BodyText>\\n        </Box>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\\n            diam euismod iaculis.\\n          </BodyText>\\n        </Box>\\n      </UncontrolledTabContent>\\n      <UncontrolledTabContent tabId={2}>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\\n            sodales ac.\\n          </BodyText>\\n        </Box>\\n      </UncontrolledTabContent>\\n      <UncontrolledTabContent tabId={3}>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin metus\\n            magna, elementum ac scelerisque et, aliquam sit amet mi. Sed semper\\n            diam ac tortor commodo vehicula. Phasellus mi velit, sollicitudin\\n            nec rhoncus nec, ullamcorper in risus. Quisque nec orci in neque\\n            egestas porta. Vivamus dui urna, vestibulum et erat et, luctus\\n            imperdiet dolor. Ut mollis tortor sed sem suscipit, porttitor\\n            dignissim dolor aliquam. Vivamus at mi feugiat, dapibus metus in,\\n            volutpat neque. Sed egestas condimentum orci, ac finibus urna\\n            sodales ac.\\n          </BodyText>\\n        </Box>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Nullam turpis nisi, luctus in augue at, suscipit posuere mauris. In\\n            ut efficitur nunc. Proin orci odio, pretium vitae augue a, maximus\\n            porta tellus. Sed tincidunt quam orci. Cras elementum luctus turpis,\\n            eget tincidunt arcu luctus consequat. Etiam fringilla ultrices ipsum\\n            vel placerat. Maecenas odio nibh, commodo non mi eu, vehicula\\n            vulputate orci. Curabitur pretium nisl non vehicula mattis. Fusce a\\n            dui nec ex imperdiet pretium. Sed tempor nulla ac egestas\\n            vestibulum. Praesent venenatis gravida dolor quis fermentum.\\n            Vestibulum vestibulum eu urna eget elementum. Nullam rhoncus orci a\\n            diam euismod iaculis.\\n          </BodyText>\\n        </Box>\\n        <Box boxMargin={{\\n      bottom: \\\"sm\\\"\\n    }}>\\n          <BodyText>\\n            Cras arcu velit, aliquet at odio vitae, volutpat lobortis sapien.\\n            Pellentesque habitant morbi tristique senectus et netus et malesuada\\n            fames ac turpis egestas. Curabitur mollis mi non ante vestibulum\\n            maximus. Suspendisse potenti. Quisque sagittis, tellus ut interdum\\n            rutrum, ex ligula vehicula dui, eget volutpat eros nulla at nunc.\\n            Morbi interdum in elit consequat volutpat. Sed at augue in arcu\\n            interdum luctus. Nunc pretium neque et bibendum malesuada. Aliquam\\n            et enim a enim dictum porta non vitae sem. Nullam sit amet placerat\\n            mauris, sed pretium arcu. Nunc finibus neque ac velit euismod, non\\n            fermentum nibh auctor. Suspendisse vitae arcu molestie, dapibus dui\\n            vel, varius quam. Orci varius natoque penatibus et magnis dis\\n            parturient montes, nascetur ridiculus mus. Donec sit amet lorem\\n            vitae dolor ullamcorper feugiat imperdiet in tellus. Sed et risus\\n            condimentum, vulputate nulla quis, mattis magna.\\n          </BodyText>\\n        </Box>\\n      </UncontrolledTabContent>\\n    </UncontrolledTabsContextProvider>' } };\n\nconst componentMeta = { title: 'Commons/Content Display/UncontrolledTabs', component: UncontrolledTabs, includeStories: [\"basicUse\",\"disabledUse\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"disabled use\":\"disabledUse\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","/**\n * @fileoverview an uncontrolled version of `Tabs`\n */\nimport React, { useContext, ReactElement } from \"react\";\n\nimport { Tabs } from \"../Tabs\";\nimport { UncontrolledTabsContext } from \"../UncontrolledTabsContext\";\n\nimport { UncontrolledTabsProps } from \"./types\";\n\nexport const UncontrolledTabs = (\n  props: UncontrolledTabsProps\n): ReactElement => {\n  const { onTabChange } = useContext(UncontrolledTabsContext);\n\n  return <Tabs onChange={onTabChange} {...props} />;\n};\n","export { UncontrolledTabs } from \"./UncontrolledTabs\";\n\nexport type { UncontrolledTabsProps } from \"./types\";\n","/**\n * @fileoverview context for handling the active tab + a pre-built provider\n */\nimport React, { createContext, ReactElement } from \"react\";\n\nimport { useActiveTab } from \"./useActiveTab\";\nimport { onChangeDefault } from \"./onChangeDefault\";\nimport {\n  UncontrolledTabsContextProviderProps,\n  UncontrolledTabsContextType,\n} from \"./types\";\n\nexport const UncontrolledTabsContext =\n  createContext<UncontrolledTabsContextType>({\n    activeTab: \"\",\n    onTabChange: onChangeDefault,\n  });\n\nexport const UncontrolledTabsContextProvider = ({\n  defaultTab,\n  onChange,\n  children,\n}: UncontrolledTabsContextProviderProps): ReactElement => {\n  const { activeTab, onTabChange } = useActiveTab(defaultTab, onChange);\n\n  return (\n    <UncontrolledTabsContext.Provider value={{ activeTab, onTabChange }}>\n      {children}\n    </UncontrolledTabsContext.Provider>\n  );\n};\n","export {\n  UncontrolledTabsContext,\n  UncontrolledTabsContextProvider,\n} from \"./UncontrolledTabsContext\";\n\nexport type { UncontrolledTabsContextProviderProps } from \"./types\";\n","export { onChangeDefault } from \"./onChangeDefault\";\n","/**\n * @fileoverview default onTabChange - this is mostly done for ease-of-testing\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const onChangeDefault = (): void => {};\n","export { useActiveTab } from \"./useActiveTab\";\n","/**\n * @fileoverview hook to handle active tab state\n */\nimport { useState } from \"react\";\n\n/**\n * hook to handle active tab state\n *\n * @param defaultTab - the id of the \"first\" tab that is active\n * @param onChange [optional] - callback on active tab change\n */\nexport const useActiveTab = (\n  defaultTab: string | number = \"\",\n  onChange?: (tabId: string | number) => void\n): {\n  activeTab: number | string;\n  onTabChange: (tabId: number | string) => void;\n} => {\n  const [activeTab, setActiveTab] = useState<number | string>(defaultTab);\n\n  const onTabChange = (tabId: number | string) => {\n    setActiveTab(tabId);\n\n    if (onChange) {\n      onChange(tabId);\n    }\n  };\n\n  return { activeTab, onTabChange };\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"uncontrolledtooltip\"\n    }}>{`UncontrolledTooltip`}</h1>\n    <p>{`Like the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{` component opens a box that\noverlays other content to provide contextual help to a user.\n`}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{` provides brief contextual information or\nfunctionality as the user hovers over the related element. Use for icon\nand button descriptions.`}</p>\n    <p><strong parentName=\"p\">{`Unlike the `}<inlineCode parentName=\"strong\">{`Tooltip`}</inlineCode>{`, the `}<inlineCode parentName=\"strong\">{`UncontrolledTooltip`}</inlineCode>{` is meant to offer a\nsimpler interface with less configuration for basic use cases. For your\nday-to-day \"hover-or-focus-to-show-tooltip\" tasks, we recommend using\nthis component instead.`}</strong></p>\n    <p>{`The differences can be seen below in two implementations that operate\nidentically:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyTooltipComp = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const handleOpen = () => setIsOpen(true);\n  const handleClose = () => setIsOpen(false);\n\n  return (\n    <>\n      <Button id=\"some-id\">My component</Button>\n      <Tooltip\n        target=\"some-id\"\n        isOpen={isOpen}\n        onOpen={handleOpen}\n        onClose={handleClose}\n      >\n        Label\n      </Tooltip>\n    </>\n  );\n};\n`}</code></pre>\n    <p>{`vs the `}<inlineCode parentName=\"p\">{`Uncontrolled`}</inlineCode>{` setup:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyUncontrolledTooltipComp = () => {\n  return (\n    <UncontrolledTooltip label=\"Label\">\n      <Button id=\"some-id\">My component</Button>\n    </UncontrolledTooltip>\n  );\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: If you need to implement a more complex use case of the tooltip,\nplease use `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` instead, as that component is much more flexible\nin its configuration and accepts event handlers for custom open/close\nbehavior.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"important-note-regarding-usage\"\n    }}>{`Important note regarding Usage`}</h3>\n    <p>{`This component relies on `}<inlineCode parentName=\"p\">{`refs`}</inlineCode>{` internally to manage the tooltip behavior.\nAs a result, the component passed as a `}<inlineCode parentName=\"p\">{`child`}</inlineCode>{` into the `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{`\n`}<em parentName=\"p\">{`must`}</em>{` accept refs and forward them to the DOM node.`}</p>\n    <p>{`If the component you're attempting to target does not support `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{`\nforwarding, please use the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` component with the `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` prop,\nwhich must correspond to the target component's DOM id.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`By default, the the `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{` will appear when the target\nelement is either focused on or hovered over. Similarly, the\n`}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{` will disappear when the the target element is\nblurred or left with a mouse, whichever happens first.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-uncontrolledtooltip--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"trigger-on-click\"\n    }}>{`Trigger on click`}</h3>\n    <p>{`By setting the `}<inlineCode parentName=\"p\">{`triggers`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`untriggers`}</inlineCode>{` props to `}<inlineCode parentName=\"p\">{`[\"click\"]`}</inlineCode>{`,\nyou can make the `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{` open and close only when\nthe children is clicked.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-uncontrolledtooltip--trigger-only-on-click\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"trigger-on-focus\"\n    }}>{`Trigger on focus`}</h3>\n    <p>{`By setting the `}<inlineCode parentName=\"p\">{`triggers`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`[\"focus\"]`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`untriggers`}</inlineCode>{`\nto `}<inlineCode parentName=\"p\">{`[\"blur\"]`}</inlineCode>{`, you can make the `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{` open when\nits children is focused and close when it is blurred.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-uncontrolledtooltip--trigger-only-on-focus\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"trigger-on-hover\"\n    }}>{`Trigger on hover`}</h3>\n    <p>{`By setting the `}<inlineCode parentName=\"p\">{`triggers`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`[\"mouseenter\"]`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`untriggers`}</inlineCode>{`\nto `}<inlineCode parentName=\"p\">{`[\"mouseleave\"]`}</inlineCode>{`, you can make the `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{`\nopen when the children is hovered and close when it is no\nlonger hovered.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-overlay-uncontrolledtooltip--trigger-only-on-hover\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { UncontrolledTooltip } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component; must be a single child or will throw error`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`delay`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( `}<inlineCode parentName=\"td\">{`[number OR null, number OR null]`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the amount of time, if any, to delay opening and/or closing the popper by`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be displayed inside the tooltip`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`distance`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`8`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from bottom of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`skidding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from left of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`placement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`,`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bottom`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Tooltip relative to target`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperStyle`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object override to be passed to the parent popper component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperStyledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop passed to popper to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`portalRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref of Portal inside which Tooltip will be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`targetRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`func`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to pass down to the target object`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`triggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseenter`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`focus`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['focus', 'mouseenter']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for popper on behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`untriggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseleave`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`blur`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['blur', 'mouseleave']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for popper off behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index for the component and its sub-components`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Button } from \\\"../Button\\\";\\n\\nimport page from \\\"./UncontrolledTooltip.docs.mdx\\\";\\n\\nimport { UncontrolledTooltip } from \\\".\\\";\\n\\n// this is used to allow cypress tests to focus away from the popper without using realPress(\\\"Tab\\\")\\n// it's invisible because it doesn't affect the story at all from an enduser perspective\\nconst InvisibleButton = (): React.ReactElement => {\\n  return <button style={{ color: \\\"transparent\\\" }}>invisible button</button>;\\n};\\n\\n\\nexport default {\\n  title: \\\"Core/Overlay/UncontrolledTooltip\\\",\\n  component: UncontrolledTooltip,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = (): React.ReactElement => {\\n  return (\\n    <>\\n      <UncontrolledTooltip placement=\\\"bottom\\\" label=\\\"Tooltip\\\">\\n        <Button className=\\\"focus-button\\\">Focus/hover to open</Button>\\n      </UncontrolledTooltip>\\n      <InvisibleButton />\\n    </>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const TriggerOnlyOnClick = (): React.ReactElement => {\\n  return (\\n    <UncontrolledTooltip\\n      triggers={[\\\"click\\\"]}\\n      untriggers={[\\\"click\\\"]}\\n      placement=\\\"bottom\\\"\\n      label=\\\"Tooltip\\\"\\n    >\\n      <Button>Click to open/close</Button>\\n    </UncontrolledTooltip>\\n  );\\n};\\n\\nTriggerOnlyOnClick.storyName = \\\"trigger only on click\\\";\\n\\nexport const TriggerOnlyOnFocus = (): React.ReactElement => {\\n  return (\\n    <UncontrolledTooltip\\n      triggers={[\\\"focus\\\"]}\\n      untriggers={[\\\"blur\\\"]}\\n      placement=\\\"bottom\\\"\\n      label=\\\"Tooltip\\\"\\n    >\\n      <Button>Click to focus</Button>\\n    </UncontrolledTooltip>\\n  );\\n};\\n\\nTriggerOnlyOnFocus.storyName = \\\"trigger only on focus\\\";\\n\\nexport const TriggerOnlyOnHover = (): React.ReactElement => {\\n  return (\\n    <UncontrolledTooltip\\n      triggers={[\\\"mouseenter\\\"]}\\n      placement=\\\"bottom\\\"\\n      label=\\\"Tooltip\\\"\\n    >\\n      <Button>Hover to open</Button>\\n    </UncontrolledTooltip>\\n  );\\n};\\n\\nTriggerOnlyOnHover.storyName = \\\"trigger only on hover\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":24},\"endLoc\":{\"col\":1,\"line\":33},\"startBody\":{\"col\":24,\"line\":24},\"endBody\":{\"col\":1,\"line\":33}},\"TriggerOnlyOnClick\":{\"startLoc\":{\"col\":34,\"line\":37},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":34,\"line\":37},\"endBody\":{\"col\":1,\"line\":48}},\"TriggerOnlyOnFocus\":{\"startLoc\":{\"col\":34,\"line\":52},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":34,\"line\":52},\"endBody\":{\"col\":1,\"line\":63}},\"TriggerOnlyOnHover\":{\"startLoc\":{\"col\":34,\"line\":67},\"endLoc\":{\"col\":1,\"line\":77},\"startBody\":{\"col\":34,\"line\":67},\"endBody\":{\"col\":1,\"line\":77}}};\n    \nimport React from \"react\";\n\nimport { Button } from \"../Button\";\n\nimport page from \"./UncontrolledTooltip.docs.mdx\";\n\nimport { UncontrolledTooltip } from \".\";\n\n// this is used to allow cypress tests to focus away from the popper without using realPress(\"Tab\")\n// it's invisible because it doesn't affect the story at all from an enduser perspective\nconst InvisibleButton = (): React.ReactElement => {\n  return <button style={{ color: \"transparent\" }}>invisible button</button>;\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Overlay/UncontrolledTooltip\",\n  component: UncontrolledTooltip,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = (): React.ReactElement => {\n  return (\n    <>\n      <UncontrolledTooltip placement=\"bottom\" label=\"Tooltip\">\n        <Button className=\"focus-button\">Focus/hover to open</Button>\n      </UncontrolledTooltip>\n      <InvisibleButton />\n    </>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nexport const TriggerOnlyOnClick = (): React.ReactElement => {\n  return (\n    <UncontrolledTooltip\n      triggers={[\"click\"]}\n      untriggers={[\"click\"]}\n      placement=\"bottom\"\n      label=\"Tooltip\"\n    >\n      <Button>Click to open/close</Button>\n    </UncontrolledTooltip>\n  );\n};;\n\nTriggerOnlyOnClick.storyName = \"trigger only on click\";\n\nexport const TriggerOnlyOnFocus = (): React.ReactElement => {\n  return (\n    <UncontrolledTooltip\n      triggers={[\"focus\"]}\n      untriggers={[\"blur\"]}\n      placement=\"bottom\"\n      label=\"Tooltip\"\n    >\n      <Button>Click to focus</Button>\n    </UncontrolledTooltip>\n  );\n};;\n\nTriggerOnlyOnFocus.storyName = \"trigger only on focus\";\n\nexport const TriggerOnlyOnHover = (): React.ReactElement => {\n  return (\n    <UncontrolledTooltip\n      triggers={[\"mouseenter\"]}\n      placement=\"bottom\"\n      label=\"Tooltip\"\n    >\n      <Button>Hover to open</Button>\n    </UncontrolledTooltip>\n  );\n};\n\nTriggerOnlyOnHover.storyName = \"trigger only on hover\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <>\\n      <UncontrolledTooltip placement=\\\"bottom\\\" label=\\\"Tooltip\\\">\\n        <Button className=\\\"focus-button\\\">Focus/hover to open</Button>\\n      </UncontrolledTooltip>\\n      <InvisibleButton />\\n    </>\\n  );\\n}\" }, ...BasicUse.parameters };\nTriggerOnlyOnClick.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <UncontrolledTooltip\\n      triggers={[\\\"click\\\"]}\\n      untriggers={[\\\"click\\\"]}\\n      placement=\\\"bottom\\\"\\n      label=\\\"Tooltip\\\"\\n    >\\n      <Button>Click to open/close</Button>\\n    </UncontrolledTooltip>\\n  );\\n}\" }, ...TriggerOnlyOnClick.parameters };\nTriggerOnlyOnFocus.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <UncontrolledTooltip\\n      triggers={[\\\"focus\\\"]}\\n      untriggers={[\\\"blur\\\"]}\\n      placement=\\\"bottom\\\"\\n      label=\\\"Tooltip\\\"\\n    >\\n      <Button>Click to focus</Button>\\n    </UncontrolledTooltip>\\n  );\\n}\" }, ...TriggerOnlyOnFocus.parameters };\nTriggerOnlyOnHover.parameters = { storySource: { source: \"(): React.ReactElement => {\\n  return (\\n    <UncontrolledTooltip\\n      triggers={[\\\"mouseenter\\\"]}\\n      placement=\\\"bottom\\\"\\n      label=\\\"Tooltip\\\"\\n    >\\n      <Button>Hover to open</Button>\\n    </UncontrolledTooltip>\\n  );\\n}\" }, ...TriggerOnlyOnHover.parameters };","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { Tooltip, useTooltip } from \"../Tooltip\";\n\nimport { UncontrolledTooltipProps } from \"./types\";\n\nexport const UncontrolledTooltip = ({\n  children,\n  targetRef,\n  className,\n  label,\n  ...props\n}: UncontrolledTooltipProps): React.ReactElement => {\n  // tooltip controls\n  const [state, ref] = useTooltip(targetRef);\n\n  // throw error if more than one child found\n  if (React.Children.count(children) > 1) {\n    throw new Error(\n      \"ERROR: You can only use `UncontrolledTooltip` with a single child. If you need multiple child elements to be present, please wrap them all in a single HTML element.\"\n    );\n  }\n\n  return (\n    <>\n      {React.Children.map(children, (child: React.ReactElement) => {\n        return React.cloneElement(child, {\n          ref,\n        });\n      })}\n      <Tooltip\n        {...props}\n        {...state}\n        targetRef={ref}\n        className={classNames([\"bcl-uncontrolled-tooltip\", className])}\n      >\n        {label}\n      </Tooltip>\n    </>\n  );\n};\n","export { UncontrolledTooltip } from \"./UncontrolledTooltip\";\n\nexport type { UncontrolledTooltipProps } from \"./types\";\n","import styled from \"styled-components\";\n\nexport const StyledBannerContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { SimpleBannerAlert } from \"../SimpleBannerAlert\";\nimport { IntentContextProvider } from \"../BannerAlert/IntentContext\";\n\nimport { UntransitionedBannerAlertProps } from \"./types\";\nimport { StyledBannerContent } from \"./StyledBannerContent\";\n\nexport const UntransitionedBannerAlert = ({\n  intent,\n  children,\n  className,\n}: UntransitionedBannerAlertProps): React.ReactElement => (\n  <IntentContextProvider intent={intent}>\n    <SimpleBannerAlert\n      className={classNames(\"bcl-banner-alert-untransitioned\", className)}\n    >\n      <StyledBannerContent>{children}</StyledBannerContent>\n    </SimpleBannerAlert>\n  </IntentContextProvider>\n);\n\nUntransitionedBannerAlert.displayName = \"UntransitionedBannerAlert\";\n","export { UntransitionedBannerAlert } from \"./UntransitionedBannerAlert\";\n\nexport type { UntransitionedBannerAlertProps } from \"./types\";\n","/* eslint-disable padding-line-between-statements */\n// export all components\nexport * from \"./components/Annotation\";\nexport * from \"./components/BannerAlert\";\nexport * from \"./components/BannerAlertAccordion\";\nexport * from \"./components/BannerAlertAccordionBody\";\nexport * from \"./components/BannerAlertAccordionFooter\";\nexport * from \"./components/BannerAlertAccordionHeader\";\nexport * from \"./components/BannerAlertAction\";\nexport * from \"./components/BannerAlertBody\";\nexport * from \"./components/BannerAlertClose\";\nexport * from \"./components/BannerAlertDescription\";\nexport * from \"./components/BannerAlertDescriptionText\";\nexport * from \"./components/BannerAlertIcon\";\nexport * from \"./components/BannerAlertLink\";\nexport * from \"./components/BannerAlertTitle\";\nexport * from \"./components/BodyText\";\nexport * from \"./components/Box\";\nexport * from \"./components/BrazeIcon\";\nexport * from \"./components/Button\";\nexport * from \"./components/ButtonGroup\";\nexport * from \"./components/Checkbox\";\nexport * from \"./components/CloseButton\";\nexport * from \"./components/Collapsible\";\nexport * from \"./components/CollapsibleBody\";\nexport * from \"./components/CollapsibleButton\";\nexport * from \"./components/CollapsibleContext\";\nexport * from \"./components/CollapsibleHeader\";\nexport * from \"./components/CollapsibleHeaderText\";\nexport * from \"./components/CollapsibleIconButton\";\nexport * from \"./components/CollapsibleList\";\nexport * from \"./components/CollapsibleListItem\";\nexport * from \"./components/CopyField\";\nexport * from \"./components/EmptyState\";\nexport * from \"./components/EmptyStateButtonGroup\";\nexport * from \"./components/EmptyStateHeading\";\nexport * from \"./components/EmptyStateIcon\";\nexport * from \"./components/EmptyStateText\";\nexport * from \"./components/FieldLabel\";\nexport * from \"./components/Flex\";\nexport * from \"./components/FlexBox\";\nexport * from \"./components/FormGroup\";\nexport * from \"./components/FormGroupLegend\";\nexport * from \"./components/Heading\";\nexport * from \"./components/HelpText\";\nexport * from \"./components/Icon\";\nexport * from \"./components/IconButton\";\nexport * from \"./components/InlineInput\";\nexport * from \"./components/Input\";\nexport * from \"./components/InputGroup\";\nexport * from \"./components/InputGroupAddon\";\nexport * from \"./components/InputGroupContext\";\nexport * from \"./components/Label\";\nexport * from \"./components/LevelsContext\";\nexport * from \"./components/Link\";\nexport * from \"./components/LoremIpsum\";\nexport * from \"./components/Menu\";\nexport * from \"./components/MenuActionButton\";\nexport * from \"./components/MenuButton\";\nexport * from \"./components/MenuCategoryButton\";\nexport * from \"./components/MenuGroup\";\nexport * from \"./components/Modal\";\nexport * from \"./components/ModalBody\";\nexport * from \"./components/ModalContext\";\nexport * from \"./components/ModalFooter\";\nexport * from \"./components/ModalHeading\";\nexport * from \"./components/NumberInput\";\nexport * from \"./components/Panel\";\nexport * from \"./components/PanelBody\";\nexport * from \"./components/PanelHeader\";\nexport * from \"./components/Popover\";\nexport * from \"./components/PopoverBody\";\nexport * from \"./components/PopoverHeading\";\nexport * from \"./components/Popper\";\nexport * from \"./components/Portal\";\nexport * from \"./components/RadioButton\";\nexport * from \"./components/RadioButtonGroup\";\nexport * from \"./components/ScreenReaderText\";\nexport * from \"./components/SimpleBannerAlert\";\nexport * from \"./components/SkeletonLoader\";\nexport * from \"./components/StatusText\";\nexport * from \"./components/Switch\";\nexport * from \"./components/Tab\";\nexport * from \"./components/TabContent\";\nexport * from \"./components/Table\";\nexport * from \"./components/TableBody\";\nexport * from \"./components/TableCaption\";\nexport * from \"./components/TableCell\";\nexport * from \"./components/TableFooter\";\nexport * from \"./components/TableHeader\";\nexport * from \"./components/TableHeaderCell\";\nexport * from \"./components/TableRow\";\nexport * from \"./components/Tabs\";\nexport * from \"./components/TabsContext\";\nexport * from \"./components/Textarea\";\nexport * from \"./components/Toaster\";\nexport * from \"./components/Tooltip\";\nexport * from \"./components/UncontrolledTab\";\nexport * from \"./components/UncontrolledTabContent\";\nexport * from \"./components/UncontrolledTabs\";\nexport * from \"./components/UncontrolledTabsContext\";\nexport * from \"./components/UncontrolledTooltip\";\nexport * from \"./components/UntransitionedBannerAlert\";\n\n// export all services\nexport * from \"./services/getSizeSpacing\";\n","/**\n * gets the spacing size given the text amount\n *\n * @argument size - the size to fetch\n * @returns string - the spacing amount in px\n */\nexport const getSizeSpacing = (\n  size: undefined | \"none\" | \"compact\" | \"comfortable\"\n): string => {\n  switch (size) {\n    case \"none\":\n      return \"0\";\n    case \"compact\":\n      return \"8px\";\n    case \"comfortable\":\n    default:\n      return \"16px\";\n  }\n};\n","export { getSizeSpacing } from \"./getSizeSpacing\";\n\nexport * from \"./types\";\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/cjs.js??ref--11-1!../../../node_modules/@storybook/builder-webpack4/node_modules/postcss-loader/dist/cjs.js??ref--11-2!./styles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/cjs.js??ref--11-1!../../../node_modules/@storybook/builder-webpack4/node_modules/postcss-loader/dist/cjs.js??ref--11-2!./styles.css\",\n      function () {\n        content = require(\"!!../../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/cjs.js??ref--11-1!../../../node_modules/@storybook/builder-webpack4/node_modules/postcss-loader/dist/cjs.js??ref--11-2!./styles.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};","export * from \"./useIME\";\n\nexport * from \"./types\";\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { UseIMEProps, UseIMEReturn } from \"./types\";\n\n/**\n * Handle both standard character input and IME character input transparently for any input element\n *\n * This can be used for both inputs and textareas.\n *\n * @example\n * const imeProps = useIME<HTMLInputElement>({ onChange: userSuppliedOnChange, value: userSuppliedValue, ref });\n * return (\n *   <input {...props} {...imeProps} />\n * )\n */\nexport function useIME<El extends HTMLInputElement | HTMLTextAreaElement>({\n  onChange: userOnChange,\n  value,\n  defaultValue,\n  ref: userRef,\n}: UseIMEProps<El>): UseIMEReturn<El> {\n  const valueString = value === undefined ? defaultValue || \"\" : value;\n  const composing = useRef(false);\n  const cursor = useRef<number | null>(null);\n  const [text, setText] = useState(valueString);\n  const inputRef = useRef<El>();\n  const ref = userRef || inputRef;\n  // these next 2 refs are solely to ensure we can use these values without triggering the effect to update value\n  // unless the user explicitly changes the value passed in.\n  const onChangeRef = useRef(userOnChange);\n  const currentInputRef = useRef(ref.current);\n\n  // store the last change event object. This is needed because\n  // input method editors trigger \"compositionend\" after \"change\"\n  // and getting a new \"change\" event by dispatching on the native\n  // input does not trigger a new change event. Creating a new\n  // SyntheticEvent requires using undocumented APIs.\n  // Fortunately, since the change event does not store any state\n  // except for the target, which is the input element, we can\n  // safely \"re-trigger\" it by passing it to the onChange handler\n  // the user passed in.\n  const fakedChangeEvent = useRef<React.ChangeEvent<El>>();\n\n  // ensure this is always up-to-date in the useEffect below\n  onChangeRef.current = userOnChange;\n\n  // ensure this is always up-to-date in the useEffect below\n  currentInputRef.current = ref.current;\n\n  useEffect(() => {\n    setText(valueString);\n\n    if (currentInputRef.current) {\n      // force the input to have the new value\n      currentInputRef.current.value = valueString as unknown as string;\n\n      // force the input to persist selection\n      try {\n        currentInputRef.current.setSelectionRange(\n          cursor.current,\n          cursor.current\n        );\n      } catch (err) {\n        // Browsers such as safari support `setSelectionRange` for all\n        // input types while others like chrome do not.\n        if (\n          !(err instanceof DOMException) ||\n          err.name !== \"InvalidStateError\"\n        ) {\n          throw err;\n        }\n      }\n\n      if (fakedChangeEvent.current) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onChangeRef.current?.(fakedChangeEvent.current as any);\n      }\n    }\n  }, [valueString]);\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<El>) => {\n      setText(event.target.value);\n\n      cursor.current = event.target.selectionStart;\n\n      if (!composing.current) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        userOnChange?.(event as any);\n      } else {\n        fakedChangeEvent.current = event;\n\n        event.persist();\n      }\n    },\n    [userOnChange]\n  );\n\n  const onCompositionStart = useCallback(() => {\n    composing.current = true;\n  }, []);\n  const onCompositionEnd = useCallback(() => {\n    composing.current = false;\n\n    if (fakedChangeEvent.current) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      userOnChange?.(fakedChangeEvent.current as any);\n    }\n  }, [userOnChange]);\n\n  return {\n    value: text,\n    defaultValue,\n    ref: ref as React.RefObject<El> | React.MutableRefObject<El>,\n    onCompositionEnd,\n    onChange,\n    onCompositionStart,\n  };\n}\n","export { useId } from \"./useId\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"useid-hook\"\n    }}>{`useId Hook`}</h1>\n    <p>{`The useId hook is used to auto-generate ids for an element that is not provided as a prop.\nThe id will remain consistent the entire time that the calling component remains mounted,\nbut if the component unmounded and remounted, then there will be a new id.\nYou can pass in a prefix to make the id easier to human identify, and reduce the chance of collision.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Portal`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-hooks-useid--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"no-prefix\"\n    }}>{`no prefix`}</h3>\n    <p>{`It is recommended to always use a prefix when generating an id. However, you can generate an id without a prefix by not passing a parameter to useId().`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-hooks-useid--no-prefix\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`prefix`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`null`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`no`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`a prefix to prepend to the generated id`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport docs from \\\"./useId.docs.mdx\\\";\\n\\nimport { useId } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Hooks/useId\\\",\\n  parameters: {\\n    docs: {\\n      page: docs,\\n    },\\n  },\\n};\\n\\ninterface StoryProps {\\n  prefix?: string;\\n}\\n\\nexport const BasicUse = ({ prefix }: StoryProps) => {\\n  const generatedId = useId(prefix);\\n\\n  return (\\n    <div id={generatedId} className=\\\"id-location\\\">\\n      Generated id: <span id=\\\"generated-id\\\">{generatedId}</span>\\n    </div>\\n  );\\n};\\n\\nBasicUse.argTypes = {\\n  prefix: {\\n    control: { type: \\\"text\\\" },\\n  },\\n};\\n\\nBasicUse.args = {\\n  prefix: \\\"demo-prefix\\\",\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const NoPrefix = () => {\\n  const generatedId = useId(undefined);\\n\\n  return (\\n    <div id={generatedId} className=\\\"id-location\\\">\\n      Generated id: <span id=\\\"generated-id\\\">{generatedId}</span>\\n    </div>\\n  );\\n};\\n\\nNoPrefix.storyName = \\\"no prefix\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":21},\"endLoc\":{\"col\":1,\"line\":29},\"startBody\":{\"col\":24,\"line\":21},\"endBody\":{\"col\":1,\"line\":29}},\"NoPrefix\":{\"startLoc\":{\"col\":24,\"line\":43},\"endLoc\":{\"col\":1,\"line\":51},\"startBody\":{\"col\":24,\"line\":43},\"endBody\":{\"col\":1,\"line\":51}}};\n    \nimport React from \"react\";\n\nimport docs from \"./useId.docs.mdx\";\n\nimport { useId } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Hooks/useId\",\n  parameters: {\n    docs: {\n      page: docs,\n    },\n  },\n};\n\ninterface StoryProps {\n  prefix?: string;\n}\n\nexport const BasicUse = ({ prefix }: StoryProps) => {\n  const generatedId = useId(prefix);\n\n  return (\n    <div id={generatedId} className=\"id-location\">\n      Generated id: <span id=\"generated-id\">{generatedId}</span>\n    </div>\n  );\n};;\n\nBasicUse.argTypes = {\n  prefix: {\n    control: { type: \"text\" },\n  },\n};\n\nBasicUse.args = {\n  prefix: \"demo-prefix\",\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const NoPrefix = () => {\n  const generatedId = useId(undefined);\n\n  return (\n    <div id={generatedId} className=\"id-location\">\n      Generated id: <span id=\"generated-id\">{generatedId}</span>\n    </div>\n  );\n};\n\nNoPrefix.storyName = \"no prefix\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"({ prefix }: StoryProps) => {\\n  const generatedId = useId(prefix);\\n\\n  return (\\n    <div id={generatedId} className=\\\"id-location\\\">\\n      Generated id: <span id=\\\"generated-id\\\">{generatedId}</span>\\n    </div>\\n  );\\n}\" }, ...BasicUse.parameters };\nNoPrefix.parameters = { storySource: { source: \"() => {\\n  const generatedId = useId(undefined);\\n\\n  return (\\n    <div id={generatedId} className=\\\"id-location\\\">\\n      Generated id: <span id=\\\"generated-id\\\">{generatedId}</span>\\n    </div>\\n  );\\n}\" }, ...NoPrefix.parameters };","import { useRef } from \"react\";\n\n/**\n * Generate an almost-definitely unique id for an element.\n * Prefix is very important for ensuring uniqueness across a document.\n * The probability that all ids generated for a given prefix are unique drops to 99.9% by ~450 instances\n * @param prefix a string to prepend the id with so it can be identified by css selectors or manual inspection\n */\nexport const useId = (prefix: string | undefined): string => {\n  const randomPart = useRef<number>(Math.ceil(Math.random() * 10e8));\n\n  return prefix\n    ? `${prefix}-${randomPart.current}`\n    : randomPart.current.toString();\n};\n","export { useLoadingButton } from \"./useLoadingButton\";\n\nexport type {\n  ButtonLoadingState,\n  UseLoadingOptions,\n  UseLoadingButtonResult,\n} from \"./types\";\n","import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\nimport {\n  ButtonLoadingState,\n  UseLoadingButtonResult,\n  UseLoadingOptions,\n} from \"./types\";\n\n/**\n * Hook that acts as a state machine for a `Button` component via user supplied values\n *\n * @param status indicates that the resource triggered by the button click is currently loading\n * @param options additional options to help configure hook behavior\n */\nexport const useLoadingButton = (\n  status: ButtonLoadingState,\n  { ref, resetOnError, timeout }: UseLoadingOptions = { timeout: 3000 }\n): [UseLoadingButtonResult, () => void] => {\n  // manage loading state\n  const [loadingState, setLoadingState] = useState<ButtonLoadingState>(\"idle\");\n\n  // state to manage the min width of the button to prevent jerkiness\n  const [minWidth, setMinWidth] = useState<number | undefined>(undefined);\n\n  // create a ref to use in case user hasn't provided one\n  const innerRef = useRef<HTMLButtonElement>(null);\n\n  // use user provided ref, if it exists; otherwise default to innerRef\n  const activeRef = ref ?? innerRef;\n\n  // effectively turn the loading state into a quasi-state machine\n  useEffect(() => {\n    // if loading state is currently idle and the user provided status value is \"loading\"\n    // then switch state to \"loading\"\n    if (loadingState === \"idle\" && status === \"loading\") {\n      return setLoadingState(\"loading\");\n    }\n\n    // if loading state is currently loading and the user provided status value is \"success\"\n    // then switch state to \"success\"\n    if (loadingState === \"loading\" && status === \"success\") {\n      return setLoadingState(\"success\");\n    }\n\n    // if loading state is currently loading and the user provided status value is \"error\"\n    // then switch state to \"error\"\n    if (loadingState === \"loading\" && status === \"error\") {\n      return setLoadingState(\"error\");\n    }\n  }, [loadingState, status]);\n\n  // effectively turn the loading state into a quasi-state machine (continued)\n  useEffect(() => {\n    // if loading outcome is not defined, then bail\n    if (loadingState === \"idle\" || loadingState === \"loading\") {\n      return;\n    }\n\n    // if loading state is error but reset on error is disabled, then do not auto-reset back to idle\n    if (loadingState === \"error\" && !resetOnError) {\n      return;\n    }\n\n    // set a timeout to return loading state back to idle after timeout elapsed\n    const timeoutRef = setTimeout(() => {\n      setLoadingState(\"idle\");\n    }, timeout);\n\n    // clear timeout on unmount to prevent memory leaks\n    return () => {\n      clearTimeout(timeoutRef);\n    };\n  }, [loadingState, resetOnError, status, timeout]);\n\n  const observer = useRef(\n    new ResizeObserver((entries) => {\n      // extract resize observer target\n      const { target } = entries[0];\n\n      // grab the loading state from the DOM (the most currently up-to-date relative to min-width)\n      const loadingState = target.getAttribute(\"data-loading-state\");\n\n      // if the DOM loading state is NOT 'idle', bail\n      if (loadingState !== \"idle\") {\n        return;\n      }\n\n      // otherwise, get the bounding client rect of the target element\n      const { width } = target.getBoundingClientRect();\n\n      // use it to set min-width\n      setMinWidth(width);\n    })\n  );\n\n  useEffect(() => {\n    // if no button element found, then bail\n    if (!activeRef.current) {\n      return;\n    }\n\n    // save refs into local values to prevent unexpected errors\n    const elem = activeRef.current;\n    const obs = observer.current;\n\n    // observe resize changes to the button element\n    obs.observe(elem);\n\n    // cleanup resize observer on unmount\n    return () => {\n      obs.unobserve(elem);\n    };\n  }, [activeRef]);\n\n  // props to be passed directly into the button to manage its loading state\n  const buttonProps = useMemo(\n    () => ({ loadingState, ref: activeRef, minWidth }),\n    [activeRef, loadingState, minWidth]\n  );\n\n  // reset function to imperatively reset loading state to 'idle'\n  const handleReset = useCallback(() => {\n    setLoadingState(\"idle\");\n  }, []);\n\n  return [buttonProps, handleReset];\n};\n","// export hooks\nexport * from \"./hooks/useId\";\n\nexport * from \"./hooks/useIME\";\n\nexport * from \"./hooks/useLoadingButton\";\n","import React, { useState } from \"react\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\n\n/**\n * For storybook, demonstrate basic usage of useI18nNamespace\n */\nexport const MockUsage = (): React.ReactElement => {\n  const [name, setName] = useState(\"\");\n  const { t, k } = useI18nNamespace(\"beacon-examples\");\n\n  return (\n    <div id=\"component\">\n      <h1>Using useI18nNamespace in a component</h1>\n      <ol>\n        <li>\n          translating{\" \"}\n          <code>\n            Hello {`{ place }`} number {`{num, number, ::currency/USD}`}\n          </code>{\" \"}\n          with &quot;5.234&quot;\n        </li>\n        <li>\n          <input\n            className=\"bare-input\"\n            placeholder=\"enter your name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </li>\n      </ol>\n      <ul>\n        <li>\n          Translation{\" \"}\n          <code className=\"translation\">\n            {t(\n              \"hello-world\",\n              \"Hello { place } number {num, number, ::currency/USD}\",\n              { place: name, num: 5.234 }\n            )}\n          </code>\n        </li>\n        <li>\n          Key <code className=\"key\">{k(\"hello-world\")}</code>\n        </li>\n      </ul>\n      <ul>\n        <li>\n          translating <code>This is a simple translation</code>\n        </li>\n        <li className=\"simple-translation\">\n          {t(\"simple\", \"This is a is simple translation\")}\n        </li>\n        <li>\n          Key: <code className=\"simple-key\">{k(\"simple\")}</code>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","export * from \"./setupI18n\";\n","import path from \"path\";\n\nimport { loadConfig, I18nConfig } from \"@braze/i18n-scripts\";\nimport { setupI18n } from \"@braze/i18n-core\";\nimport { setupDevI18n } from \"@braze/i18n-dev\";\nimport { translations, BeaconTranslations } from \"@braze/beacon-translations\";\n\nfunction getConfig() {\n  const configArgument =\n    process.env.NODE_ENV === \"test\"\n      ? path.resolve(__dirname, \"..\", \"..\", \"..\", \".i18nConfig.json\")\n      : // eslint-disable-next-line @typescript-eslint/no-var-requires\n        (require(\"./.i18nConfig.json\") as I18nConfig);\n\n  return loadConfig(configArgument);\n}\n\nconst config = getConfig();\n\nconst i18n = setupI18n<typeof translations>(translations, config);\n\nconst { cypressTranslate, storybookParameters, withAllLocales, locales } =\n  setupDevI18n<BeaconTranslations, typeof translations>(\n    i18n,\n    translations,\n    config\n  );\n\nexport { i18n, cypressTranslate, storybookParameters, withAllLocales, locales };\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { useState } from \"react\";\nimport { Meta, Story, Preview } from \"@storybook/addon-docs\";\nimport LinkTo from \"@storybook/addon-links/react\";\nimport { Input } from \"@braze/beacon-core\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\nimport { name, version } from \"@braze/beacon-i18n-dev/../package.json\";\nimport { MockUsage } from \"./components/MockUsage\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core Developers/I18n/useI18nNamespace\" component={Input} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"usei18nnamespace\"\n    }}>{`useI18nNamespace`}</h1>\n    <a href={`https://www.npmjs.com/package/${name}`} target=\"_blank\">\n  <img alt=\"npm\" src={`https://img.shields.io/badge/npm-v${version.replace(\"-\", \"--\")}-blue`} />\n    </a>\n    <p>{`The `}<inlineCode parentName=\"p\">{`useI18nNamespace`}</inlineCode>{` hook exported from `}<inlineCode parentName=\"p\">{`\"@braze/beacon-translations\"`}</inlineCode>{` is an alias\nto the `}<code><LinkTo kind=\"lab-i18n-usei18nnamespace--usage\" mdxType=\"LinkTo\">{`useI18nNamespace`}</LinkTo></code>{`\nhook that is typed for usage inside Beacon components.`}</p>\n    <Preview mdxType=\"Preview\">\n  <Story name=\"usage\" mdxType=\"Story\">\n    {() => {\n          const [name, setName] = useState(\"\");\n          const {\n            t,\n            k\n          } = useI18nNamespace(\"beacon-examples\");\n          return <div>\n          <p>\n            useI18nNamespace can be used in 2 separate contexts: a storybook\n            story or in a component. This story demonstrates both use cases, and\n            can be used as a reference for developing beacon-labs components.\n          </p>\n          <div id=\"storybook\">\n            <h1>Using useI18nNamespace in a storybook story</h1>\n            <ol>\n              <li>\n                translating{\" \"}\n                <code>\n                  Hello {`{ place }`} number {`{num, number, ::currency/USD}`}\n                </code>{\" \"}\n                with &quot;5.234&quot;\n              </li>\n              <li>\n                <Input placeholder=\"enter your name\" value={name} onChange={e => setName(e.target.value)} mdxType=\"Input\" />\n              </li>\n            </ol>\n            <ul>\n              <li>\n                Translation{\" \"}\n                <code className=\"translation\">\n                  {t(\"hello-world\", \"Hello { place } number {num, number, ::currency/USD}\", {\n                      place: name,\n                      num: 5.234\n                    })}\n                </code>\n              </li>\n              <li>\n                Key <code className=\"key\">{k(\"hello-world\")}</code>\n              </li>\n            </ul>\n            <ul>\n              <li>\n                translating <code>This is a simple translation</code>\n              </li>\n              <li className=\"simple-translation\">\n                {t(\"simple\", \"This is a is simple translation\")}\n              </li>\n              <li>\n                Key: <code className=\"simple-key\">{k(\"simple\")}</code>\n              </li>\n            </ul>\n          </div>\n          <MockUsage mdxType=\"MockUsage\" />\n        </div>;\n        }}\n  </Story>\n    </Preview>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const usage = (() => {\n  const [name, setName] = useState(\"\");\n  const {\n    t,\n    k\n  } = useI18nNamespace(\"beacon-examples\");\n  return <div>\n          <p>\n            useI18nNamespace can be used in 2 separate contexts: a storybook\n            story or in a component. This story demonstrates both use cases, and\n            can be used as a reference for developing beacon-labs components.\n          </p>\n          <div id=\"storybook\">\n            <h1>Using useI18nNamespace in a storybook story</h1>\n            <ol>\n              <li>\n                translating{\" \"}\n                <code>\n                  Hello {`{ place }`} number {`{num, number, ::currency/USD}`}\n                </code>{\" \"}\n                with &quot;5.234&quot;\n              </li>\n              <li>\n                <Input placeholder=\"enter your name\" value={name} onChange={e => setName(e.target.value)} />\n              </li>\n            </ol>\n            <ul>\n              <li>\n                Translation{\" \"}\n                <code className=\"translation\">\n                  {t(\"hello-world\", \"Hello { place } number {num, number, ::currency/USD}\", {\n              place: name,\n              num: 5.234\n            })}\n                </code>\n              </li>\n              <li>\n                Key <code className=\"key\">{k(\"hello-world\")}</code>\n              </li>\n            </ul>\n            <ul>\n              <li>\n                translating <code>This is a simple translation</code>\n              </li>\n              <li className=\"simple-translation\">\n                {t(\"simple\", \"This is a is simple translation\")}\n              </li>\n              <li>\n                Key: <code className=\"simple-key\">{k(\"simple\")}</code>\n              </li>\n            </ul>\n          </div>\n          <MockUsage />\n        </div>;\n});\nusage.storyName = 'usage';\nusage.parameters = { storySource: { source: '() => {\\n  const [name, setName] = useState(\\\"\\\");\\n  const {\\n    t,\\n    k\\n  } = useI18nNamespace(\\\"beacon-examples\\\");\\n  return <div>\\n          <p>\\n            useI18nNamespace can be used in 2 separate contexts: a storybook\\n            story or in a component. This story demonstrates both use cases, and\\n            can be used as a reference for developing beacon-labs components.\\n          </p>\\n          <div id=\\\"storybook\\\">\\n            <h1>Using useI18nNamespace in a storybook story</h1>\\n            <ol>\\n              <li>\\n                translating{\\\" \\\"}\\n                <code>\\n                  Hello {`{ place }`} number {`{num, number, ::currency/USD}`}\\n                </code>{\\\" \\\"}\\n                with &quot;5.234&quot;\\n              </li>\\n              <li>\\n                <Input placeholder=\\\"enter your name\\\" value={name} onChange={e => setName(e.target.value)} />\\n              </li>\\n            </ol>\\n            <ul>\\n              <li>\\n                Translation{\\\" \\\"}\\n                <code className=\\\"translation\\\">\\n                  {t(\\\"hello-world\\\", \\\"Hello { place } number {num, number, ::currency/USD}\\\", {\\n              place: name,\\n              num: 5.234\\n            })}\\n                </code>\\n              </li>\\n              <li>\\n                Key <code className=\\\"key\\\">{k(\\\"hello-world\\\")}</code>\\n              </li>\\n            </ul>\\n            <ul>\\n              <li>\\n                translating <code>This is a simple translation</code>\\n              </li>\\n              <li className=\\\"simple-translation\\\">\\n                {t(\\\"simple\\\", \\\"This is a is simple translation\\\")}\\n              </li>\\n              <li>\\n                Key: <code className=\\\"simple-key\\\">{k(\\\"simple\\\")}</code>\\n              </li>\\n            </ul>\\n          </div>\\n          <MockUsage />\\n        </div>;\\n}' } };\n\nconst componentMeta = { title: 'Core Developers/I18n/useI18nNamespace', component: Input, includeStories: [\"usage\"],  };\n\nconst mdxStoryNameToKey = {\"usage\":\"usage\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","// index.ts for webpack environment\nimport translations from \"./translations.braze.json\";\n\nexport { useCoreI18nNamespace as useI18nNamespace } from \"./useCoreI18nNamespace\";\n\nexport type { I18nT } from \"./useCoreI18nNamespace\";\n\nexport type { BeaconTranslations } from \"./types\";\n\nexport type Translations = typeof translations;\n\nexport { translations };\n","import {\n  useI18nNamespace,\n  UseI18nNamespace,\n  NamespaceKeys,\n  UseI18nNamespaceTranslate,\n} from \"@braze/i18n-core\";\n\nimport type { BeaconTranslations } from \"./types\";\n\nexport const useCoreI18nNamespace: UseI18nNamespace<BeaconTranslations> =\n  useI18nNamespace;\n\n/**\n * Type to use when passing t into a function\n */\nexport type I18nT<Namespace extends NamespaceKeys<BeaconTranslations>> =\n  UseI18nNamespaceTranslate<BeaconTranslations, Namespace>;\n","var map = {\n\t\"./commons/src/components/AlertModal/AlertModal.stories.tsx\": \"../commons/src/components/AlertModal/AlertModal.stories.tsx\",\n\t\"./commons/src/components/IconCircle/IconCircle.stories.tsx\": \"../commons/src/components/IconCircle/IconCircle.stories.tsx\",\n\t\"./commons/src/components/InfoIcon/InfoIcon.stories.mdx\": \"../commons/src/components/InfoIcon/InfoIcon.stories.mdx\",\n\t\"./core/src/components/Annotation/Annotation.stories.tsx\": \"../core/src/components/Annotation/Annotation.stories.tsx\",\n\t\"./core/src/components/BannerAlert/BannerAlert.stories.tsx\": \"../core/src/components/BannerAlert/BannerAlert.stories.tsx\",\n\t\"./core/src/components/BodyText/BodyText.stories.mdx\": \"../core/src/components/BodyText/BodyText.stories.mdx\",\n\t\"./core/src/components/BodyText/BodyText.stories.tsx\": \"../core/src/components/BodyText/BodyText.stories.tsx\",\n\t\"./core/src/components/Box/Box.stories.tsx\": \"../core/src/components/Box/Box.stories.tsx\",\n\t\"./core/src/components/BrazeIcon/BrazeIcon.stories.tsx\": \"../core/src/components/BrazeIcon/BrazeIcon.stories.tsx\",\n\t\"./core/src/components/Button/Button.stories.tsx\": \"../core/src/components/Button/Button.stories.tsx\",\n\t\"./core/src/components/ButtonGroup/ButtonGroup.stories.tsx\": \"../core/src/components/ButtonGroup/ButtonGroup.stories.tsx\",\n\t\"./core/src/components/Checkbox/Checkbox.stories.tsx\": \"../core/src/components/Checkbox/Checkbox.stories.tsx\",\n\t\"./core/src/components/CloseButton/CloseButton.stories.tsx\": \"../core/src/components/CloseButton/CloseButton.stories.tsx\",\n\t\"./core/src/components/Collapsible/Collapsible.stories.mdx\": \"../core/src/components/Collapsible/Collapsible.stories.mdx\",\n\t\"./core/src/components/CopyField/CopyField.stories.tsx\": \"../core/src/components/CopyField/CopyField.stories.tsx\",\n\t\"./core/src/components/EmptyState/EmptyState.stories.mdx\": \"../core/src/components/EmptyState/EmptyState.stories.mdx\",\n\t\"./core/src/components/FieldLabel/FieldLabel.stories.tsx\": \"../core/src/components/FieldLabel/FieldLabel.stories.tsx\",\n\t\"./core/src/components/Flex/Flex.stories.tsx\": \"../core/src/components/Flex/Flex.stories.tsx\",\n\t\"./core/src/components/FlexBox/FlexBox.stories.tsx\": \"../core/src/components/FlexBox/FlexBox.stories.tsx\",\n\t\"./core/src/components/FormGroup/FormGroup.stories.mdx\": \"../core/src/components/FormGroup/FormGroup.stories.mdx\",\n\t\"./core/src/components/Heading/Heading.stories.tsx\": \"../core/src/components/Heading/Heading.stories.tsx\",\n\t\"./core/src/components/Icon/Icon.stories.tsx\": \"../core/src/components/Icon/Icon.stories.tsx\",\n\t\"./core/src/components/IconButton/IconButton.stories.tsx\": \"../core/src/components/IconButton/IconButton.stories.tsx\",\n\t\"./core/src/components/InlineInput/InlineInput.stories.mdx\": \"../core/src/components/InlineInput/InlineInput.stories.mdx\",\n\t\"./core/src/components/Input/Input.stories.tsx\": \"../core/src/components/Input/Input.stories.tsx\",\n\t\"./core/src/components/InputGroup/InputGroup.stories.mdx\": \"../core/src/components/InputGroup/InputGroup.stories.mdx\",\n\t\"./core/src/components/Label/Label.stories.tsx\": \"../core/src/components/Label/Label.stories.tsx\",\n\t\"./core/src/components/Link/Link.stories.tsx\": \"../core/src/components/Link/Link.stories.tsx\",\n\t\"./core/src/components/LoremIpsum/LoremIpsum.stories.tsx\": \"../core/src/components/LoremIpsum/LoremIpsum.stories.tsx\",\n\t\"./core/src/components/Menu/Menu.stories.tsx\": \"../core/src/components/Menu/Menu.stories.tsx\",\n\t\"./core/src/components/Modal/Modal.stories.tsx\": \"../core/src/components/Modal/Modal.stories.tsx\",\n\t\"./core/src/components/NumberInput/NumberInput.stories.mdx\": \"../core/src/components/NumberInput/NumberInput.stories.mdx\",\n\t\"./core/src/components/Panel/Panel.stories.tsx\": \"../core/src/components/Panel/Panel.stories.tsx\",\n\t\"./core/src/components/Popover/Popover.stories.tsx\": \"../core/src/components/Popover/Popover.stories.tsx\",\n\t\"./core/src/components/Popper/Popper.stories.tsx\": \"../core/src/components/Popper/Popper.stories.tsx\",\n\t\"./core/src/components/Portal/Portal.stories.tsx\": \"../core/src/components/Portal/Portal.stories.tsx\",\n\t\"./core/src/components/RadioButton/RadioButton.stories.tsx\": \"../core/src/components/RadioButton/RadioButton.stories.tsx\",\n\t\"./core/src/components/RadioButtonGroup/RadioButtonGroup.stories.mdx\": \"../core/src/components/RadioButtonGroup/RadioButtonGroup.stories.mdx\",\n\t\"./core/src/components/ScreenReaderText/ScreenReaderText.stories.mdx\": \"../core/src/components/ScreenReaderText/ScreenReaderText.stories.mdx\",\n\t\"./core/src/components/SkeletonLoader/SkeletonLoader.stories.mdx\": \"../core/src/components/SkeletonLoader/SkeletonLoader.stories.mdx\",\n\t\"./core/src/components/Switch/Switch.stories.tsx\": \"../core/src/components/Switch/Switch.stories.tsx\",\n\t\"./core/src/components/Table/Table.stories.tsx\": \"../core/src/components/Table/Table.stories.tsx\",\n\t\"./core/src/components/Tabs/Tabs.stories.mdx\": \"../core/src/components/Tabs/Tabs.stories.mdx\",\n\t\"./core/src/components/Textarea/Textarea.stories.mdx\": \"../core/src/components/Textarea/Textarea.stories.mdx\",\n\t\"./core/src/components/Toaster/Toaster.stories.tsx\": \"../core/src/components/Toaster/Toaster.stories.tsx\",\n\t\"./core/src/components/Tooltip/Tooltip.stories.tsx\": \"../core/src/components/Tooltip/Tooltip.stories.tsx\",\n\t\"./core/src/components/UncontrolledTabs/UncontrolledTabs.stories.mdx\": \"../core/src/components/UncontrolledTabs/UncontrolledTabs.stories.mdx\",\n\t\"./core/src/components/UncontrolledTooltip/UncontrolledTooltip.stories.tsx\": \"../core/src/components/UncontrolledTooltip/UncontrolledTooltip.stories.tsx\",\n\t\"./hooks/src/hooks/useId/useId.stories.tsx\": \"../hooks/src/hooks/useId/useId.stories.tsx\",\n\t\"./i18n-dev/src/useI18nNamespace.stories.mdx\": \"../i18n-dev/src/useI18nNamespace.stories.mdx\",\n\t\"./storybook/stories/ContentStrategy.stories.mdx\": \"./stories/ContentStrategy.stories.mdx\",\n\t\"./storybook/stories/Contributing/Code.stories.mdx\": \"./stories/Contributing/Code.stories.mdx\",\n\t\"./storybook/stories/Contributing/ComponentStyling.stories.mdx\": \"./stories/Contributing/ComponentStyling.stories.mdx\",\n\t\"./storybook/stories/Contributing/Design.stories.mdx\": \"./stories/Contributing/Design.stories.mdx\",\n\t\"./storybook/stories/Contributing/Documentation.stories.mdx\": \"./stories/Contributing/Documentation.stories.mdx\",\n\t\"./storybook/stories/Contributing/Overview.stories.mdx\": \"./stories/Contributing/Overview.stories.mdx\",\n\t\"./storybook/stories/FAQs.stories.mdx\": \"./stories/FAQs.stories.mdx\",\n\t\"./storybook/stories/GettingStarted.stories.mdx\": \"./stories/GettingStarted.stories.mdx\",\n\t\"./storybook/stories/Releases.stories.mdx\": \"./stories/Releases.stories.mdx\",\n\t\"./storybook/stories/StatusAndRoadmap.stories.mdx\": \"./stories/StatusAndRoadmap.stories.mdx\",\n\t\"./storybook/stories/Support.stories.mdx\": \"./stories/Support.stories.mdx\",\n\t\"./storybook/stories/accessibility/A11yBestPractice.stories.mdx\": \"./stories/accessibility/A11yBestPractice.stories.mdx\",\n\t\"./storybook/stories/accessibility/Accessibility.stories.mdx\": \"./stories/accessibility/Accessibility.stories.mdx\",\n\t\"./storybook/stories/accessibility/AccessibilityChecklist.stories.mdx\": \"./stories/accessibility/AccessibilityChecklist.stories.mdx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./.. sync recursive ^\\\\.(?:(?:^|\\\\/|(?:(?:(?!(?:^|\\\\/)\\\\.).)*?)\\\\/)(?!\\\\.)(?=.)[^/]*?\\\\.stories\\\\.(mdx|tsx))$\";","import React from \"react\";\nimport BeaconThemeProvider from \"@braze/beacon-styling\";\nimport { DocsPage, DocsContainer } from \"@storybook/addon-docs\";\nimport { storybookParameters } from \"@braze/beacon-i18n-dev\";\nimport { WithI18n } from \"@braze/i18n-storybook\";\nimport \"@braze/beacon-fonts/Sailec.css\";\nimport \"../../core/src/styles.css\";\n\nconst Container = ({ context, children }) => {\n  return (\n    <BeaconThemeProvider>\n      <DocsContainer context={context}>{children}</DocsContainer>\n    </BeaconThemeProvider>\n  );\n};\n\nexport const parameters = {\n  docs: {\n    container: Container,\n    page: DocsPage,\n  },\n  options: {\n    storySort: {\n      order: [\n        \"Welcome\",\n        [\n          \"Getting Started\",\n          \"Contributing\",\n          [\"Overview\", \"Code\", \"Component Styling\", \"Design\", \"Documentation\"],\n          \"Status and Roadmap\",\n          \"Releases\",\n          \"Support\",\n          \"FAQs\",\n          \"Content Strategy\",\n          \"Accessibility\",\n          [\"Overview\", \"a11y Best Practices\", \"Checklists & Tools\"],\n        ],\n        \"Core\",\n        \"Commons\",\n        \"Core Developers\",\n      ],\n      method: \"alphabetical\",\n    },\n  },\n};\n\nexport const globals = {\n  ...storybookParameters\n};\n\nexport const decorators = [\n  WithI18n,\n  (S) => (\n    <BeaconThemeProvider>\n      <S />\n    </BeaconThemeProvider>\n  ),\n];\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgs, addArgTypes, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/Volumes/macData/Projects/Braze/beacon/node_modules/@storybook/client-api';\nimport * as config from '/Volumes/macData/Projects/Braze/beacon/packages/storybook/.storybook/preview.js';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n      {\n        return addArgs(value);\n      }\n\n    case 'argTypes':\n      {\n        return addArgTypes(value);\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    case '__namedExportsOrder':\n    case 'decorateStory':\n    case 'renderToDOM':\n      {\n        return null; // This key is not handled directly in v6 mode.\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('..', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(mdx|tsx))$/)], module, false);","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport {\n  BodyText,\n  Box,\n  Button,\n  Heading,\n  Flex,\n  FlexBox,\n} from \"@braze/beacon-core\";\nimport styled from \"styled-components\";\nexport const HeaderRow = styled.div`\n  display: grid;\n  margin: 1rem 0;\n  padding: 1rem;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  gap: 0;\n  background: #2e3c47;\n  & > div:not(:last-of-type) {\n    padding-right: 1.5rem;\n    margin-right: 1.5rem;\n    border-right: 1px solid lightgrey;\n  }\n`;\nexport const LeftSideRow = styled.div`\n  display: grid;\n  margin: 1rem 0;\n  padding: 1rem;\n  grid-template-columns: 1fr 3fr;\n`;\nexport const HeaderItem = ({\n  title,\n  children\n}) => {\n  return <div>\n      <Heading level={4} style={{\n      color: \"white\"\n    }} mdxType=\"Heading\">\n        {title}\n      </Heading>\n      <Box boxMargin={{\n      top: \"sm\"\n    }} mdxType=\"Box\">\n        <BodyText style={{\n        color: \"white\"\n      }} mdxType=\"BodyText\">{children}</BodyText>\n      </Box>\n    </div>;\n};\nexport const LeftSideDesc = ({\n  title,\n  subtitle,\n  children\n}) => {\n  return <LeftSideRow mdxType=\"LeftSideRow\">\n      <Box boxPadding={{\n      right: \"xxl\"\n    }} boxMargin={{\n      right: \"xxl\"\n    }} style={{\n      borderRight: \"1px solid lightgrey\",\n      marginRight: \"1.5rem\"\n    }} mdxType=\"Box\">\n        <Heading level={4} mdxType=\"Heading\">{title}</Heading>\n        <Box boxMargin={{\n        top: \"sm\"\n      }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">{subtitle}</BodyText>\n        </Box>\n      </Box>\n      <div style={{\n      marginLeft: \"1.5rem\"\n    }}>{children}</div>\n    </LeftSideRow>;\n};\nexport const DoDont = ({\n  children,\n  helpText,\n  isDo\n}) => {\n  return <div style={{\n    width: \"47.5%\"\n  }}>\n      <div style={{\n      border: \"1px solid black\",\n      padding: \"1rem\",\n      marginBottom: \"1rem\"\n    }}>\n        {children}\n      </div>\n      <div style={{\n      borderTop: `3px solid ${isDo ? \"green\" : \"red\"}`,\n      marginTop: \"0.25rem\",\n      paddingTop: \"0.25rem\"\n    }}>\n        <BodyText fontWeight=\"bold\" style={{\n        color: isDo ? \"green\" : \"red\",\n        marginRight: \"0.25rem\"\n      }} mdxType=\"BodyText\">\n          {isDo ? \"Do\" : \"Don't\"}\n        </BodyText>\n        <BodyText variant=\"hint\" mdxType=\"BodyText\">{helpText}</BodyText>\n      </div>\n    </div>;\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  HeaderRow,\nLeftSideRow,\nHeaderItem,\nLeftSideDesc,\nDoDont\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/Content Strategy\" mdxType=\"Meta\" />\n\n\n\n\n\n    <h2 {...{\n      \"id\": \"content-strategy-differentiators\"\n    }}>{`Content Strategy Differentiators`}</h2>\n    <br />\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Brand & Content`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Documentation`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Product Copy`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Suited for marketing material, Braze brand & content copy paints the strengths of the company to prospective and existing customers.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Meant to be as informative as possible, documentation copy explains how the platform works from a holistic POV. Think of a patient and informative professor.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Similar to documentation copy, product copy is meant to be as informative as possible. Unlike documentation copy, product copy is localized to the platform area in question with an extra emphasis on conciseness. Think of traffic signs.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"`}<em parentName=\"td\">{`Build dynamic audiences in minutes (or less) and deploy personalized customer journeys with our intuitive drag-and-drop interface.`}</em>{`\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"`}<em parentName=\"td\">{`When a user profile is first recognized via the SDK, an ‘anonymous’ user profile is created with an associated `}<inlineCode parentName=\"em\">{`braze_id`}</inlineCode>{`: a unique user identifier that is set by Braze. This identifier can be used to delete users through the REST API.`}</em>{`\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"`}<em parentName=\"td\">{`Select at least one Content Test Group or individual user to receive this test message. Messages will be customized with recipients' attributes by default.`}</em>{`\"`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <br />\n    <h2 {...{\n      \"id\": \"product-copy-principles\"\n    }}>{`Product Copy Principles`}</h2>\n    <p>{`Principles are the high-level goals we’re hoping to achieve with product copy. These help establish the “tone” of product copy.`}</p>\n    <HeaderRow mdxType=\"HeaderRow\">\n  <HeaderItem title=\"Empower\" mdxType=\"HeaderItem\">\n    Give readers the tools they need to use the Braze platform by using language\n    that informs them and leaves them feeling confident in their ability to use\n    our products.\n  </HeaderItem>\n  <HeaderItem title=\"Educate\" mdxType=\"HeaderItem\">\n    Give readers the information that they need in the immediate.\n  </HeaderItem>\n  <HeaderItem title=\"Guide\" mdxType=\"HeaderItem\">\n    Help your readers navigate the platform in a way that’s informative and\n    friendly.\n  </HeaderItem>\n  <HeaderItem title=\"Respect\" mdxType=\"HeaderItem\">\n    Meet readers where they are and assume best intent. Put yourselves in their\n    position and communicate appropriately. Be inclusive and considerate of\n    their time and effort.\n  </HeaderItem>\n    </HeaderRow>\n    <LeftSideDesc title=\"Empower\" subtitle=\"Here we anticipate the question “can I add campaigns to this report after it’s created?” to **empower** users in their decision making.\" mdxType=\"LeftSideDesc\">\n  <img src=\"/content-strategy/Empower.png\" alt=\"Empower example screenshot\" />\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Educate\" subtitle=\"Here we use placeholder copy to **educate** users on examples of acceptable form inputs.\" mdxType=\"LeftSideDesc\">\n  <img src=\"/content-strategy/Educate.png\" alt=\"Educate example screenshot\" />\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Guide\" subtitle=\"Here we use an empty state to **guide** users to create a Global Control Group—a prerequisite to viewing this report.\" mdxType=\"LeftSideDesc\">\n  <img src=\"/content-strategy/Guide.png\" alt=\"Guide example screenshot\" />\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Respect\" subtitle=\"Here we give the user a heads up that this action might not work as expected with their current user count, but **respect** their decision to create it anyways.\" mdxType=\"LeftSideDesc\">\n  <img src=\"/content-strategy/Respect.png\" alt=\"Respect example screenshot\" />\n    </LeftSideDesc>\n    <h2 {...{\n      \"id\": \"guidelines\"\n    }}>{`Guidelines`}</h2>\n    <p>{`Guidelines are the boxes to check off when writing any product copy. If a piece of copy adheres to the following guidelines, it will help achieve our goals:`}</p>\n    <HeaderRow mdxType=\"HeaderRow\">\n  <HeaderItem title=\"Clear\" mdxType=\"HeaderItem\">\n    Use simple words and sentences to communicate the topic you’re writing\n    about. Avoid jargon and excessive use of acronyms.\n  </HeaderItem>\n  <HeaderItem title=\"Concise\" mdxType=\"HeaderItem\">\n    Keep your writing short and sweet. Try and use as small an amount of words\n    as you can to get your point across.\n  </HeaderItem>\n  <HeaderItem title=\"Useful\" mdxType=\"HeaderItem\">\n    Make sure you know what the purpose of your content is before writing. What\n    problem are you trying to solve and how does this content help?\n  </HeaderItem>\n  <HeaderItem title=\"Human\" mdxType=\"HeaderItem\">\n    Talk to the user like a human. Try and strike an optimistic and\n    conversational tone—imagine yourself explaining something to a friend. The\n    only exceptions are for error messages and financial transactions.\n  </HeaderItem>\n    </HeaderRow>\n    <LeftSideDesc title=\"Clear\" subtitle=\"Use simple words and sentences to communicate the topic you’re writing about. Avoid jargon and excessive use of acronyms.\" mdxType=\"LeftSideDesc\">\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"use button verbs that reinforce the action the user is taking.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Deactivate this campaign?</BodyText>\n      <FlexBox boxMargin={{\n            top: \"lg\"\n          }} mdxType=\"FlexBox\">\n        <Button style={{\n              marginLeft: \"auto\",\n              marginRight: \"0.5rem\"\n            }} variant=\"secondary\" size=\"sm\" mdxType=\"Button\">\n          Cancel\n        </Button>\n        <Button size=\"sm\" mdxType=\"Button\">Deactivate</Button>\n      </FlexBox>\n    </DoDont>\n    <DoDont helpText=\"use words and phrases that don't directly connect to the action.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Deactivate this campaign?</BodyText>\n      <FlexBox boxMargin={{\n            top: \"lg\"\n          }} mdxType=\"FlexBox\">\n        <Button style={{\n              marginLeft: \"auto\",\n              marginRight: \"0.5rem\"\n            }} variant=\"secondary\" size=\"sm\" mdxType=\"Button\">\n          Cancel\n        </Button>\n        <Button size=\"sm\" mdxType=\"Button\">OK</Button>\n      </FlexBox>\n    </DoDont>\n  </FlexBox>\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Concise\" subtitle=\"Keep your writing short and sweet. Try and use as small an amount of words as you can to get your point across.\" mdxType=\"LeftSideDesc\">\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"keep UI text short.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Archive News Feed card?</BodyText>\n    </DoDont>\n    <DoDont helpText=\"use filter introductions in confirmations, like 'Are you sure?'.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        Are you sure you want to archive this Archive News Feed card?\n      </BodyText>\n    </DoDont>\n  </FlexBox>\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"get to the point.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Leaving this page will delete all unsaved changes.</BodyText>\n    </DoDont>\n    <DoDont helpText=\"write instructions that are longer than necessary.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        If you leave this page, all unsaved changes will be lost. Are you sure\n        you want to leave this page?\n      </BodyText>\n    </DoDont>\n  </FlexBox>\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Useful\" subtitle=\"Make sure you know what the purpose of your content is before writing. What problem are you trying to solve and how does this content help?\" mdxType=\"LeftSideDesc\">\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"communicate essential details needed to understand a state or action.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        Track user behavior (sessions, purchases, custom events) by segment for\n        up to 25 segments.\n      </BodyText>\n    </DoDont>\n    <DoDont helpText=\"sacrifice clarity for brevity.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Track user behavior by segment.</BodyText>\n    </DoDont>\n  </FlexBox>\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Human\" subtitle=\"Talk to the user like a human. Try and strike an optimistic and conversational tone—imagine yourself explaining something to a friend. The only exceptions are for error messages and financial transactions.\" mdxType=\"LeftSideDesc\">\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"give the user solutions instead of problems.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Adjust your filters to continue.</BodyText>\n    </DoDont>\n    <DoDont helpText=\"blame the user for an error (especially if they really did do something wrong).\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">You need to adjust your filters.</BodyText>\n    </DoDont>\n  </FlexBox>\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"speak directly to the user in the second person.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        As an Admin, you have full access to everything on the Dashboard.\n      </BodyText>\n    </DoDont>\n    <DoDont helpText=\"refer to the user in the third person.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        This is an Admin account. Admins have full access to everything on the\n        Dashboard.\n      </BodyText>\n    </DoDont>\n  </FlexBox>\n    </LeftSideDesc>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Content Strategy', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from \"@storybook/addon-links/react\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/Contributing/Code\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"contributing-code-to-beacon\"\n    }}>{`Contributing code to Beacon`}</h1>\n    <p>{`Beacon's code lives in 4 repositories on GitHub:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/beacon\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/beacon`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/beacon-labs\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/beacon-labs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/beacon-styling\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/beacon-styling`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/beacon-charts\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/beacon-charts`}</a></li>\n    </ul>\n    <p>{`Helper scripts for internal use can be found here:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/beacon-scripts\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/beacon-scripts`}</a></li>\n    </ul>\n    <p>{`The internationalization (i18n) libraries and scripts used across Braze, including Beacon, live here:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/i18n\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/i18n`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"setting-up-a-development-environment\"\n    }}>{`Setting up a development environment`}</h2>\n    <p>{`Beacon's code is written in `}<a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">{`Typescript`}</a>{`, and\ncomponents are authored using the `}<a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">{`React`}</a>{` framework. CSS\nstyling is handled by `}<a href=\"https://styled-components.com/\" target=\"_blank\" rel=\"noopener noreferrer\">{`Styled components`}</a>{`. To\nget started, we recommend using `}<a href=\"https://github.com/nvm-sh/nvm/blob/master/README.md#about\" target=\"_blank\" rel=\"noopener noreferrer\">{`nvm`}</a>{`\nto manage your node version, and `}<a href=\"https://yvm.js.org/docs/overview\" target=\"_blank\" rel=\"noopener noreferrer\">{`yvm`}</a>{` to manage your\nversion of yarn. With these two tools installed, the beacon repository will automatically select the supported version of node and of yarn.`}</p>\n    <h3 {...{\n      \"id\": \"installing-nvm-yvm-and-lerna\"\n    }}>{`Installing nvm, yvm, and lerna`}</h3>\n    <p>{`To get started, clone the Beacon repo if you have not already:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clone git@github.com:braze-inc/beacon.git\n`}</code></pre>\n    <p>{`Once cloned, set up your development environment (installs node, yarn, lerna) by `}<inlineCode parentName=\"p\">{`cd`}</inlineCode>{`ing into the `}<inlineCode parentName=\"p\">{`/beacon`}</inlineCode>{` directory and running:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`scripts/dev-env-setup.sh\n`}</code></pre>\n    <p>{`Or you can install `}<inlineCode parentName=\"p\">{`nvm`}</inlineCode>{` manually via:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://github.com/nvm-sh/nvm/blob/master/README.md#about\" target=\"_blank\" rel=\"noopener noreferrer\">\n  nvm\n        </a>\n      </li>\n    </ul>\n    <p>{`To enable auto-install of the pinned version of `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{`, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`corepack enable\n`}</code></pre>\n    <p>{`To install `}<inlineCode parentName=\"p\">{`lerna`}</inlineCode>{` manually, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn global add lerna\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"getting-storybook-up-locally\"\n    }}>{`Getting storybook up locally`}</h3>\n    <p>{`After the two tools are installed, clone these additional repo(es) if you need them:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clone git@github.com:braze-inc/beacon-labs.git\ngit clone git@github.com:braze-inc/beacon-charts.git\ngit clone git@github.com:braze-inc/beacon-styling.git\ngit clone git@github.com:braze-inc/beacon-scripts.git\ngit clone git@github.com:braze-inc/i18n.git\n`}</code></pre>\n    <p>{`Next, get the lastest version of branch `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` (we recommend pulling the lastest\ndown before creating any new branches):`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`Note:`}</em>{` we use `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` as our default branch as the historical terminology\nuses, frankly, racist terms. While the tech community uses this\nterminology widely, we thought it best to change it to be more inclusive.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git checkout main\ngit pull origin main\n`}</code></pre>\n    <p>{`To finish, close your shell and open a new one or run `}<inlineCode parentName=\"p\">{`source ~/.zshrc`}</inlineCode>{`. Next,\ninstall the project dependencies and compile:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn setup\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: If you get 404s when running this command, you need to ensure that you have\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://confluence.braze.com/display/DASHINFRA/NPM+at+Braze\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`access to the Beacon NPM repo`}</a>{` and are logged in on the\nCLI via `}<inlineCode parentName=\"p\">{`npm login`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <p>{`Finally, run our Storybook to see the library in action. We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://storybook.js.org/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Storybook`}</a>{`\nas an environment to both actively develop and demonstrate the compoents of this component library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn storybook\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: This command is the same across all Beacon libraries and can also be used in the\n`}<inlineCode parentName=\"p\">{`beacon-labs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`beacon-charts`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`beacon-styling`}</inlineCode>{` repos.`}</p>\n    </blockquote>\n    <p>{`This will serve a Storybook instance at `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:6006\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`http://localhost:6006`}</a>{`.\nThis will allow viewing the components that already exist, and also the storybook story\nof components you are contributing as you author them. Making changes to components or\nstory files will hot-reload the page, so you can see those changes without having to refresh it.`}</p>\n    <h3 {...{\n      \"id\": \"optional-steps\"\n    }}>{`Optional steps`}</h3>\n    <p>{`You may also want to install the following Chrome extensions if this is your browser of choice:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`React Developer Tools`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://chrome.google.com/webstore/detail/axe/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`axe`}</a></li>\n    </ul>\n    <p>{`To style your components, you will write tagged template literals with css in them. For ease of use, we recommend installing one of the following plugins, based on your IDE:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`VSCode`}</strong>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`vscode-style-components`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`JetBrains`}</strong>{` (WebStorm, RubyMine, et al.): `}<a parentName=\"li\" {...{\n          \"href\": \"https://plugins.jetbrains.com/plugin/9997-styled-components\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`Styled Components plugin`}</a></li>\n    </ul>\n    <p>{`Additional extensions recommended for VSCode:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Linting: `}<a parentName=\"li\" {...{\n          \"href\": \"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`ESLint`}</a></li>\n      <li parentName=\"ul\">{`Code formatting: `}<a parentName=\"li\" {...{\n          \"href\": \"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`Prettier - Code Formatter`}</a></li>\n      <li parentName=\"ul\">{`MDX code highlighting: `}<a parentName=\"li\" {...{\n          \"href\": \"https://marketplace.visualstudio.com/items?itemName=silvenon.mdx\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`MDX`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"running-tests\"\n    }}>{`Running tests`}</h3>\n    <p>{`Beacon supports 3 different testing systems:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\n  Jest\n        </a> unit tests\n      </li>\n      <li parentName=\"ul\">\n        <a href=\"https://docs.cypress.io/guides/overview/why-cypress\" target=\"_blank\" rel=\"noopener noreferrer\">\n  Cypress integration tests\n        </a>\n      </li>\n      <li parentName=\"ul\">\n        <a href=\"https://docs.cypress.io/guides/component-testing/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n  Cypress component unit tests\n        </a> <b>(EXPERIMENTAL)</b>\n      </li>\n    </ul>\n    <p>{`The three different testing systems can be executed with 3 distinct commands:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn test`}</inlineCode>{` for Jest testing (note: you can use `}<inlineCode parentName=\"li\">{`yarn workspace @braze/&lt;packagename&gt; test`}</inlineCode>{` like `}<inlineCode parentName=\"li\">{`yarn workspace @braze/beacon-core test`}</inlineCode>{` to run tests for a single package at a time). These snapshots can be updated by running `}<inlineCode parentName=\"li\">{`yarn test -- -- -u`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn cypress`}</inlineCode>{` for Cypress integration tests. Note: `}<inlineCode parentName=\"li\">{`storybook`}</inlineCode>{` must be running for integration tests to pass.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn cypress:unit`}</inlineCode>{` for Cypress unit tests `}<strong parentName=\"li\">{`(EXPERIMENTAL)`}</strong></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"source-control-conventions\"\n    }}>{`Source control conventions`}</h2>\n    <p>{`Please be mindful of the following git conventions for this repo - we strive to make changes easy to track and much of it is used for automatic versioning and changelog generation (more on this below).`}</p>\n    <h3 {...{\n      \"id\": \"branch-scope\"\n    }}>{`Branch scope`}</h3>\n    <p>{`Please commit related work to separate branches. Unrelated changes should not be grouped on a single branch; conversely, highly-related changes should not span multiple, non-sequential branches. In short, your commits as a whole should be atomic.`}</p>\n    <p>{`Avoid refactoring commits when working on a specific component or patch that are outside the scope of that component. Instead, file a separate pull request for that refactor `}<em parentName=\"p\">{`before`}</em>{` committing changes for that component.`}</p>\n    <h3 {...{\n      \"id\": \"branch-naming\"\n    }}>{`Branch naming`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Generally speaking, all branches for new components should be prefixed the key of the JIRA ticket they're addressing, if applicable (e.g. `}<inlineCode parentName=\"li\">{`DASHI-1`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`The remaining part of your branch should be pithy but descriptive of the thing you are adding or changing:`}</li>\n    </ul>\n    <p>{`Example: if you are adding a `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` component for the `}<inlineCode parentName=\"p\">{`DASHI-1`}</inlineCode>{` issue:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`git checkout -b DASHI-1-add-dialog\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"local-dependency-management\"\n    }}>{`Local dependency management`}</h3>\n    <p>{`Beacon is a monorepo that contains many packages that are separately published to NPM and that depend on each other either via devDependencies or runtime dependencies. To keep things loosely coupled, all the packages that are runtime dependencies should be added as both `}<inlineCode parentName=\"p\">{`peerDependencies`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`devDependencies`}</inlineCode>{`. If you are unfamiliar with what `}<inlineCode parentName=\"p\">{`peerDependencies`}</inlineCode>{` are and how they work, please\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://nodejs.org/es/blog/npm/peer-dependencies/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`read this`}</a>{` before continuing.`}</p>\n    <p>{`To ensure that our dependencies not become a bottleneck for development on platform, the following rules should be followed:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`All dependencies that are within the monorepo should be `}<inlineCode parentName=\"li\">{`devDependencies`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`peerDependencies`}</inlineCode>{` instead of `}<inlineCode parentName=\"li\">{`dependencies`}</inlineCode>{`, because:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`peerDependencies`}</inlineCode>{` allow npm/yarn to not install multiple versions of the same package, which is especially important given beacons multitude of independent packages`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`peerDependencies`}</inlineCode>{` are not used when lerna resolves local dependencies, so it's important to keep `}<inlineCode parentName=\"li\">{`devDependencies`}</inlineCode>{` to make sure that the packages are built in the correct order`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`peerDependencies`}</inlineCode>{` `}<strong parentName=\"li\">{`won't`}</strong>{` be synced on every version bump, but `}<strong parentName=\"li\">{`should`}</strong>{` be synced manually when there's a MAJOR version bump and always point to ^x.0.0 for a given local package`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`devDependencies`}</inlineCode>{` will be used wherever local `}<inlineCode parentName=\"li\">{`peerDependencies`}</inlineCode>{` are used to ensure that the dependency graph can be generated correctly (which matters primarily when we do `}<inlineCode parentName=\"li\">{`yarn build`}</inlineCode>{`)`}</li>\n    </ul>\n    <p>{`The above guidelines are meant to ensure that we:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`keep the impact of version reconciliation on day-to-day changes to a minimum (ie no headaches), while also preserving the important aspects of local dependency management`}</li>\n      <li parentName=\"ul\">{`are able to liberally change versions of individual packages in platform, etc. without running into the issue of possibly conflicting dependencies (i.e. loose coupling)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"pull-requests\"\n    }}>{`Pull requests`}</h3>\n    <p>{`Please open a pull request if you wish to merge your changes on your branch for general availability. You cannot merge your commits directly to `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` without at least a single approval. Make judicious use of the PR description/summary field and annotate your commits after opening the PR if needed.`}</p>\n    <h3 {...{\n      \"id\": \"versioning-and-changelog\"\n    }}>{`Versioning and Changelog`}</h3>\n    <p>{`The Beacon CHANGELOG.md files are generated automatically as part of our versioning process\nwithin each directory inside `}<inlineCode parentName=\"p\">{`/packages`}</inlineCode>{`. To generate our changelogs and determine which version\nto upgrade `}<inlineCode parentName=\"p\">{`Beacon`}</inlineCode>{` to, we use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.conventionalcommits.org/en/v1.0.0/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Conventional Commits`}</a>{`\nstandard. This means that `}<em parentName=\"p\">{`EVERY`}</em>{` commit `}<strong parentName=\"p\">{`MUST`}</strong>{` adhere to this standard, otherwise it'll be\nrejected by the linter.`}</p>\n    <p>{`We recommend going to the link above and familiarizing yourself with the way conventional\ncommits work, but here's a quick summary to get you started.`}</p>\n    <p>{`The commit message is structured as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<type>[optional scope]: <description>\n[optional body]\n[optional footer]\n`}</code></pre>\n    <p>{`Rules:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Commits that include substantial new features should use the `}<inlineCode parentName=\"li\">{`feat:`}</inlineCode>{` type; this will trigger a feature version increase, like version `}<inlineCode parentName=\"li\">{`1.2.2`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`1.3.0`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Commits that include bug fixes should use the `}<inlineCode parentName=\"li\">{`fix:`}</inlineCode>{` type; this will trigger a minor version increase, like version `}<inlineCode parentName=\"li\">{`1.2.2`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`1.2.3`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`If a commit breaks backwards compatibility, it should have an exclamation point in its prefix before the colon (e.g. `}<inlineCode parentName=\"li\">{`feat!:`}</inlineCode>{`) and the commit description should include a line `}<inlineCode parentName=\"li\">{`BREAKING CHANGE:`}</inlineCode>{`\nthat describes the break and how to upgrade to the new major version. This will trigger a major version bump `}<inlineCode parentName=\"li\">{`1.2.2`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`2.0.0`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Commits that are not consequential enough to be mentioned in the CHANGELOG in and of themselves should use the `}<inlineCode parentName=\"li\">{`chore:`}</inlineCode>{` type, this will have no effect on the version`}</li>\n      <li parentName=\"ul\">{`All other commits may use one of the `}<inlineCode parentName=\"li\">{`build:`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`ci:`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`docs:`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`style:`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`refactor:`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`perf:`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`test:`}</inlineCode>{` types, these will have no effect on the version`}</li>\n      <li parentName=\"ul\">{`Every PR should include at least 1 commit that uses the `}<inlineCode parentName=\"li\">{`feat:`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`fix:`}</inlineCode>{` type to correctly capture the impact of the changes in versioning`}</li>\n      <li parentName=\"ul\">{`If the optional scope is used, it should mention the specific package within Beacon that is being impacted by the change(s)-- for example, `}<inlineCode parentName=\"li\">{`feat(core): new component`}</inlineCode></li>\n    </ul>\n    <p>{`Your commit messages should therefore look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-markdown\"\n      }}>{`### Changed\n\n- feat: add a 'bar' prop to the Foo component\n- fix: fix the value of the \\`bps-baz-spacing\\` token\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"before-merging\"\n    }}>{`Before merging`}</h3>\n    <p>{`When the PR is finalized, pull down the latest from `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` and then merge `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` into your feature branch. Address all conflicts, and take special care merging conflicts with `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`; there might have been PRs that were created and merged after you created yours.`}</p>\n    <h3 {...{\n      \"id\": \"tags\"\n    }}>{`Tags`}</h3>\n    <p>{`We primarly use Git tags to denote versions for release; these tags follow `}<a parentName=\"p\" {...{\n        \"href\": \"https://semver.org/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`semver`}</a>{`. Tagging for a version release is done as an atomic commit that bumps up the `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` version.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-work-on-this-library\"\n    }}>{`How to work on this library`}</h2>\n    <p>{`To contribute your code to Beacon, you will need to open a pull request against one of the Beacon repos. All new components start in\n`}<inlineCode parentName=\"p\">{`beacon-labs`}</inlineCode>{`. When they reach API maturity, components are moved to `}<inlineCode parentName=\"p\">{`beacon`}</inlineCode>{` by members of the DASHI team.`}</p>\n    <p>{`Please reach out on slack before you begin development, DASHI can be reached\non `}<a href=\"https://brazetechnology.slack.com/archives/CBDKVUF2P\" target=\"_blank\" rel=\"noopener noreferrer\">{`#beacon-product-system`}</a>{`.`}</p>\n    <p>{`If you are contributing to this library, you are doing one of a few category of tasks. The following sections describe these at a high level:`}</p>\n    <h3 {...{\n      \"id\": \"add-a-new-component\"\n    }}>{`Add a new component`}</h3>\n    <p>{`We have written a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/braze-inc/scaffold\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`scaffolding tool`}</a>{` to set up the required directory structure, component files,\nand pull in the necessary dependencies for your new component. We keep this updated based on current conventions with helpful annotations\nto get you started.`}</p>\n    <p>{`There are certain conventions that must be followed when creating new components:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`All types must go into the `}<inlineCode parentName=\"li\">{`{ComponentName}/types.ts`}</inlineCode>{` file or `}<inlineCode parentName=\"li\">{`{ComponentName}/types/*.ts`}</inlineCode></li>\n      <li parentName=\"ol\">{`All exports must be named (default exports are not allowed)`}</li>\n      <li parentName=\"ol\">{`Styled components must be in their own files alongside the component and follow the naming convention `}<inlineCode parentName=\"li\">{`Styled{ComponentName}`}</inlineCode></li>\n      <li parentName=\"ol\">{`Every component must have a props interface that follows the naming convention `}<inlineCode parentName=\"li\">{`{ComponentName}Props`}</inlineCode></li>\n      <li parentName=\"ol\">{`All hooks must live in `}<inlineCode parentName=\"li\">{`{ComponentName}/hooks/useHookName`}</inlineCode></li>\n      <li parentName=\"ol\">{`All services must live in `}<inlineCode parentName=\"li\">{`{ComponentName}/services/serviceName`}</inlineCode></li>\n      <li parentName=\"ol\">{`Additional utility functions should live in `}<inlineCode parentName=\"li\">{`{ComponentName}/utils/*`}</inlineCode></li>\n    </ol>\n    <p>{`New beacon components must be created in the `}<inlineCode parentName=\"p\">{`beacon-labs`}</inlineCode>{` repository and concordantly, the following command will only work there. All\nReact components use `}<inlineCode parentName=\"p\">{`PascalCase`}</inlineCode>{` for their naming convention, so given `}<inlineCode parentName=\"p\">{`MyComp`}</inlineCode>{`, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn new-component MyComp\n`}</code></pre>\n    <p>{`which will create:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Ⱶ package.json\nⱵ .eslintrc\nⱵ .npmignore\nⱵ tsconfig.json\nⱵ README.md\nⱵ src/\n  Ⱶ index.ts\n  Ⱶ components/\n    Ⱶ MyComp/\n      Ⱶ index.ts\n      Ⱶ types.ts\n      Ⱶ MyComp.tsx\n      Ⱶ MyComp.test.tsx\n      Ⱶ MyComp.stories.mdx\n      Ⱶ StyledMyComp.ts\n      Ⱶ StyledMyComp.test.tsx\n      Ⱶ hooks/\n      Ⱶ services/\n      Ⱶ utils/\n`}</code></pre>\n    <p>{`inside the `}<inlineCode parentName=\"p\">{`packages/`}</inlineCode>{` directory of `}<inlineCode parentName=\"p\">{`beacon-labs`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"adding-a-component-to-an-existing-package\"\n    }}>{`Adding a component to an existing package`}</h4>\n    <p>{`If you wish to create a sub-component used by the main component (for example, `}<inlineCode parentName=\"p\">{`PivotTableRow`}</inlineCode>{`), run the command\n`}<inlineCode parentName=\"p\">{`yarn new-inner-component <SubComponentName>`}</inlineCode>{`, as in `}<inlineCode parentName=\"p\">{`yarn new-inner-component PivotTableRow`}</inlineCode>{`. This command can\nbe used in both `}<inlineCode parentName=\"p\">{`beacon`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`beacon-labs`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"develop-new-or-existing-components\"\n    }}>{`Develop new or existing components`}</h3>\n    <p>{`Follow the instructions in `}<a parentName=\"p\" {...{\n        \"href\": \"#getting-started\"\n      }}>{`Getting Started`}</a>{` to run Storybook. As mentioned there, we use this to actively develop components in a context-free environment that reloads on any change. Because of the highly visual nature of component development, we recommend tiling a browser window and your IDE side-by-side in your display.`}</p>\n    <p>{`Each component has a corresponding `}<inlineCode parentName=\"p\">{`.stories.mdx`}</inlineCode>{` file that is displayed via Storybook. Each story in that file will look something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Preview>\n  <Story name=\"basic use\">\n    <Component prop={value} />\n  </Story>\n</Preview>\n`}</code></pre>\n    <p>{`How you write each story depends on what you are attempting to demonstrate. As a guideline, each distinct component use case should have its own story of how it addresses that use case, like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`<Preview>\n  <Story name=\"basic use\">\n    <Button />\n  </Story>\n</Preview>\n\n<Preview>\n  <Story name=\"disabled\">\n    <Button disabled />\n  </Story>\n</Preview>\n`}</code></pre>\n    <p>{`Because a story can mount any arbitrary React component(s), it is possible to wrap your target component in, or mount it adjcent to, other components that help you demonstrate what it does. Moreover, you can make the component stories interactive with stateful logic:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const TooltipDemonstrator = () => {\n  const [text, setText] = React.useState(\"content\");\n  return (\n    <>\n      <TextField value={text} onChange={setText} />\n      <Tooltip>{text}</Tooltip>\n    </>\n  );\n};\n\n<Preview>\n  <Story name=\"story name\">\n    <TooltipDemonstrator />\n  </Story>\n</Preview>;\n`}</code></pre>\n    <p>{`We describe this experience as \"Storybook-driven development\" and reiterate that all component functionality should be encoded in its `}<inlineCode parentName=\"p\">{`.stories.mdx`}</inlineCode>{` files.`}</p>\n    <h3 {...{\n      \"id\": \"work-with-styling-tokens\"\n    }}>{`Work with styling tokens`}</h3>\n    <p>{`Styling tokens are basic key-value pairs that drive the mainuct system. They are exported from a single file and are meant to be imported\ninto the `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` files. For more information on this, see `}<LinkTo kind=\"welcome-contributing-component-styling\" mdxType=\"LinkTo\">{`the documentation`}</LinkTo>{`.`}</p>\n    <h3 {...{\n      \"id\": \"writing-tests\"\n    }}>{`Writing tests`}</h3>\n    <p>{`In Beacon, there are 2 kinds of tests: functional tests and visual tests. Functional tests verify the correctness of a component's behavior\nover time in response to external input, which includes both props and events. Visual tests verify the appearance of a component in relation\nto a baseline as defined by previous tests.`}</p>\n    <p>{`When writing functional tests, use this basic decision tree to decide what kind of test to write:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Is it a React component?`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Does it have a public storybook story?`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`yes ✅ -> write a Cypress integration test`}</li>\n              <li parentName=\"ul\">{`no 🛑 -> write a Cypress component test`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Is it a React hook?`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Does it have a public storybook story?`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`yes ✅ -> write a Cypress integration test`}</li>\n              <li parentName=\"ul\">{`no 🛑 -> write a Cypress component test`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Is it a pure utility function? -> write a Jest test`}</li>\n      <li parentName=\"ol\">{`Is it a utility function that interacts with external side effects (setTimeout is one example)?`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`prefer Cypress component test, use Jest test if it makes more sense. This is a gray area!`}</li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`When writing visual tests, we have a couple of choices. The first is jest snapshot tests using enzyme, and the other is true visual snapshot\ntesting using Applitools. Applitools testing is new to Braze, and is experimental. DASHI engineers currently are the only developers with access\nto the Applitools dashboard. If you are not a DASHI engineer, you should write Jest snapshot tests. DASHI engineers should add visual testing\nto Cypress tests.`}</p>\n    <h3 {...{\n      \"id\": \"ensure-the-code-quality-of-your-contributions\"\n    }}>{`Ensure the code quality of your contributions`}</h3>\n    <p>{`We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`eslint`}</a>{` to lint our code and `}<a parentName=\"p\" {...{\n        \"href\": \"https://prettier.io/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`prettier`}</a>{` to format it. Although both are run as a pre-commit\nhook, it is helpful to run these manually if you wish to clean up between commits:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn lint\nyarn lint:fix\n`}</code></pre>\n    <p>{`Style rules are enforced on the CI step programmatically, so please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \".eslintrc\"\n      }}>{`eslint config`}</a>{` for the current ruleset. We encourage\nyou to write eslint rules specific to this repo.`}</p>\n    <p>{`After running cypress tests, you can verify the code coverage exceeds 95% by viewing the code coverage report. `}<inlineCode parentName=\"p\">{`yarn coverage:view:cypress`}</inlineCode>{` will\nopen the report in your default web browser, and then you can click through the directory hierarchy to find the component you are working on.\nNote that coverage will not reflect all tests, unless you execute them on the command line using `}<inlineCode parentName=\"p\">{`yarn cypress:cli`}</inlineCode>{`, but you can mentally extrapolate\nto ensure lines are covered between tests.`}</p>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <p>{`Storybook creates a publishable artifact that serves as documentation for this library. This can be done by running `}<inlineCode parentName=\"p\">{`yarn build-storybook`}</inlineCode>{` and\ninspecting the contents of `}<inlineCode parentName=\"p\">{`/storybook-static`}</inlineCode>{`. This directory `}<em parentName=\"p\">{`can`}</em>{` be published to any number of static hosting sites, however, doing this\nby hand is not recommended.`}</p>\n    <p>{`A publically-available Storybook will automatically be published by a Heroku CI job for each pull request. All subsequent changes after the PR\nis cut will also be published. The link is exposed on the pull request conversation page:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`look for the item in the conversation stream with the header `}<inlineCode parentName=\"li\">{`This branch was successfully deployed`}</inlineCode>{`. This will not appear until the build\nis finished, which might take a few minutes`}</li>\n      <li parentName=\"ol\">{`click on the `}<inlineCode parentName=\"li\">{`Show environments`}</inlineCode>{` link`}</li>\n      <li parentName=\"ol\">{`then click on `}<inlineCode parentName=\"li\">{`View deployment`}</inlineCode></li>\n    </ol>\n    <p>{`Share this link with any interested stakeholders to communicate the changes you have made.`}</p>\n    <h3 {...{\n      \"id\": \"beacon-storybookbrazecom\"\n    }}><inlineCode parentName=\"h3\">{`beacon-storybook.braze.com`}</inlineCode></h3>\n    <p>{`The storybook at `}<a parentName=\"p\" {...{\n        \"href\": \"https://beacon-storybook.braze.com\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`beacon-storybook.braze.com`}</a>{` is built by the same CI job that publishes branches; this job tracks the `}<inlineCode parentName=\"p\">{`HEAD`}</inlineCode>{`\nof `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{`. `}<strong parentName=\"p\">{`Note`}</strong>{` that `}<inlineCode parentName=\"p\">{`HEAD`}</inlineCode>{` is not necessarily the latest tagged version of the library.`}</p>\n    <h2 {...{\n      \"id\": \"packaging-and-releasing\"\n    }}>{`Packaging and releasing`}</h2>\n    <p>{`This is done automatically with our CI. If, for whatever reason, a manual\nrelease is needed, the steps below outline what is needed. `}<strong parentName=\"p\">{`This should only be\ndone by the admin with the privileges to push directly to main.`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Run `}<inlineCode parentName=\"li\">{`yarn build`}</inlineCode>{` in the root directory to build all packages`}</li>\n      <li parentName=\"ul\">{`Study the `}<inlineCode parentName=\"li\">{`CHANGELOG.md`}</inlineCode>{` to determine if the change to communicate is `}<inlineCode parentName=\"li\">{`patch`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`minor`}</inlineCode>{`. This will determine the next semver version:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`patch`}</inlineCode>{` versions bump the third part, like `}<inlineCode parentName=\"li\">{`3.0.1 -> 3.0.2`}</inlineCode>{`. These include bug fixes, changes to token values, etc.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minor`}</inlineCode>{` versions bump the second part, like `}<inlineCode parentName=\"li\">{`3.2.5 -> 3.3.0`}</inlineCode>{`. The addition of any new components between versions are considered `}<inlineCode parentName=\"li\">{`minor`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`major`}</inlineCode>{` version bumps connote a breaking change. These look like `}<inlineCode parentName=\"li\">{`3.6.17 -> 4.0.0`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`based on your observation, run one of:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn version-patch`}</inlineCode>{` or`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn version-minor`}</inlineCode></li>\n          <li parentName=\"ul\">{`we have not yet added `}<inlineCode parentName=\"li\">{`version-major`}</inlineCode>{` because of the nature of major changes. These should be discussed widely and vetted carefully.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"updating-theme\"\n    }}>{`Updating theme`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@braze/beacon-theme`}</inlineCode>{` library is used to maintain our global theme for the Beacon component library. The goal of the theme library is to\nmaintain a centralized repository that can easily be updated to globally change design tokens without significant engineering effort.`}</p>\n    <p>{`An important piece of keeping the theme library maintainable and prevent it from turning a JS version of `}<inlineCode parentName=\"p\">{`styles.css`}</inlineCode>{` that micro-manages every\naspect of styling is to keep it lean. To that end, we only want to introduce new tokens when the two following conditions have been met:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A specific CSS attribute is used in more than ~3 different components and is not included in the theme (e.g. `}<inlineCode parentName=\"li\">{`border-radius: 5px`}</inlineCode>{` when only\n`}<inlineCode parentName=\"li\">{`2px`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`3px`}</inlineCode>{` currently exist)`}</li>\n      <li parentName=\"ul\">{`Obvious or non-specific attributes should generally NOT be included in theme, since they are less likely to need to be globally maintained\n(e.g. `}<inlineCode parentName=\"li\">{`width: 100%`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`display: flex`}</inlineCode>{`, etc.)`}</li>\n      <li parentName=\"ul\">{`A discussion takes place among the DASHI engineers and designers to determine if that attribute will continue to appear in more places or\nif it was just a one-off`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If the attribute was a one-off OR if there are no clear plans to use it elsewhere, then it should NOT be included in the theme`}</li>\n          <li parentName=\"ul\">{`If the attribute is likely to be needed elsewhere and is a specific value, then it should be given a name that accurately portrays how\nit fits into the larger scope of its sibling tokens and established token naming conventions throughout the theme (e.g. if we have\n`}<inlineCode parentName=\"li\">{`xs: \"2px\"`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sm: \"3px\"`}</inlineCode>{` and want to add a `}<inlineCode parentName=\"li\">{`\"4px\"`}</inlineCode>{` token, then its name should probably be `}<inlineCode parentName=\"li\">{`md`}</inlineCode>{`)`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`If an update to the theme file is determined to be appropriate, a corresponding update should also be made to the design tokens in Figma such\nthat the new token(s) is/(are) accessible to designers.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Contributing/Code', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Meta title=\"Welcome/Contributing/Component Styling\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"component-styling\"\n    }}>{`Component Styling`}</h1>\n    <p>{`One of the ultimate goals of Beacon is to to create an environment for application development that seldom relies on custom styling. To enable\nthis, we need to make sure that not only do the Beacon components are styled according to brand and design guidelines, but that they also\ninteroperate in a way that minimizes the need for additional styling on the part of the end user.`}</p>\n    <p>{`To take full advantage of the power of JavaScript and SASS-like CSS, Beacon uses the `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` library.`}</p>\n    <h2 {...{\n      \"id\": \"styled-components\"\n    }}><inlineCode parentName=\"h2\">{`styled-components`}</inlineCode></h2>\n    <p>{`The approach of `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` is known as 'CSS-in-JS'. As the name suggests, there is some form of runtime evaluation to actually provide\nstyling to your elements - and you can join any arbitrary logic with your styling.`}</p>\n    <p>{`The main advantage of `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` is that it eliminates the indirection of using DOM classes for styling only. In other words, you can\nwrite styles that are driven by `}<em parentName=\"p\">{`props`}</em>{`, as demonstrated below.`}</p>\n    <p>{`Another important benefit of styled-components is that it automatically creates vendor prefixing for style attributes wherever necessary. For\ninstance, writing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`display: inline-flex;\n`}</code></pre>\n    <p>{`gets transpiled to:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`display: -webkit-inline-box;\ndisplay: -webkit-inline-flex;\ndisplay: -ms-inline-flexbox;\ndisplay: inline-flex;\n`}</code></pre>\n    <p>{`For these reasons and more, `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` is the preferred method of styling components in Beacon and should be the preferred method for\napplications that use Beacon.`}</p>\n    <h3 {...{\n      \"id\": \"basic-mechanics\"\n    }}>{`Basic mechanics`}</h3>\n    <p><inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{`' API uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.styled-components.com/docs/api#styled\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`tagged template literals`}</a>{` to write SASS-like CSS. The two\nprimary exports are `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{`. These, respectively, return a base React element and encapsulate arbitrary styling that can be reused:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import styled, { css } from \"styled-components\";\n\nconst border = css\\`\n  border: 1px solid black;\n\\`;\n\nexport const StyledContainer = styled.div\\`\n  margin: 0.5rem 0;\n\n  /* tagged templates let you specify functions where you have access to components' props */\n  padding: \\${(props) => (props.hasInset ? \"5px\" : 0)};\n\n  /* you can include css snippets in this way */\n  \\${(props) => props.hasBorder && border};\n\\`;\n`}</code></pre>\n    <p>{`And in your component file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = () => (\n  <StyledContainer hasInset hasBorder={false}>\n    Lorem Ipsum Componentum Examplum\n  </StyledContainer>\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"referencing-other-styled-components\"\n    }}>{`Referencing other `}<inlineCode parentName=\"h3\">{`styled-components`}</inlineCode></h3>\n    <p>{`As you build more and more complex components, it is likely and encouraged that you will reuse existing components to put them together.\nWhile you should always build components with composability and interoperability in mind, it is possible that certain component\ncombinations require specific styling adjustments.`}</p>\n    <p>{`One way of doing this is by simply extending another component when building your new `}<inlineCode parentName=\"p\">{`styled-component`}</inlineCode>{`, like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import Component from \"../Component\";\n\nconst MyDerivedComponent = styled(Component)\\`\n  position: absolute;\n\\`;\n`}</code></pre>\n    <p>{`Alternatively, if the component you're creating `}<em parentName=\"p\">{`contains`}</em>{` the `}<inlineCode parentName=\"p\">{`styled-component`}</inlineCode>{` you want to reference, you can also do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { StyledComponent } from \"../Component\";\n\nconst MyContainerComponent = styled.div\\`\n  \\${StyledComponent} {\n    position: absolute;\n  }\n\\`;\n`}</code></pre>\n    <p>{`Note above that the component being referenced this way must be the `}<inlineCode parentName=\"p\">{`styled-component`}</inlineCode>{` export, NOT the main component that uses it.\nThis is a common gotcha among beginners of `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"theme--styling-tokens\"\n    }}>{`Theme / styling tokens`}</h3>\n    <p>{`Styling tokens are basic key-value pairs that drive the product system. They are defined within the `}<a parentName=\"p\" {...{\n        \"href\": \"../packages/theme/README.md\"\n      }}><inlineCode parentName=\"a\">{`theme`}</inlineCode>{` library`}</a>{` and handled via the `}<a parentName=\"p\" {...{\n        \"href\": \"../packages/styling/README.md\"\n      }}><inlineCode parentName=\"a\">{`styling`}</inlineCode>{` library`}</a>{` functions. The theme is meant to be imported into the `}<inlineCode parentName=\"p\">{`styled-component`}</inlineCode>{`s wherever applicable. Please seek guidance from your design partner about what these key-value pairs should be.`}</p>\n    <p>{`For instance, a `}<inlineCode parentName=\"p\">{`styled-component`}</inlineCode>{` using our theme may look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { getBorderWidth, getColor } from \"@braze/beacon-styling\";\n\nconst borderCSS = css\\`\n  border: \\${getBorderWidth(\"thin\")} solid \\${getColor(\"gray\", 900)};\n\\`;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"organization\"\n    }}>{`Organization`}</h3>\n    <p>{`Every component that has its own styles has a nested `}<inlineCode parentName=\"p\">{`StyledComponent`}</inlineCode>{` directory that accompanies it (this directory and its contents\nare produced by the `}<a parentName=\"p\" {...{\n        \"href\": \"https://beacon-storybook.braze.com/?path=/story/welcome-contributing-contributing-code--page#creating-a-new-component\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`scaffolding tool`}</a>{`).\nThis is where all styling information should reside.`}</p>\n    <h2 {...{\n      \"id\": \"about-the-other-approaches-to-styling\"\n    }}>{`About the other approaches to styling`}</h2>\n    <p>{`While `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` is the preferred method for styling components, there are alternatives that may be used sparingly for\nescape-hatch situations or simple style overrides where creating an entirely new `}<inlineCode parentName=\"p\">{`styled-component`}</inlineCode>{` may create undesirable overhead.`}</p>\n    <h3 {...{\n      \"id\": \"inline\"\n    }}>{`Inline`}</h3>\n    <p>{`It is entirely possible to not write a single line of CSS in routine React development using inline styles. If you `}<em parentName=\"p\">{`do`}</em>{` wish to\nuse them however, you may note that all DOM-level React elements have a `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` prop, which let you do things like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const ColorfulText = ({ color, children }) => (\n  <p style={{ fontColor: color }}>{children}</p>\n);\n`}</code></pre>\n    <p>{`You will notice that a `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` prop is an object keyed by strings corresponding to object-safe tokens (think `}<inlineCode parentName=\"p\">{`fontColor`}</inlineCode>{` instead\nof `}<inlineCode parentName=\"p\">{`font-color`}</inlineCode>{`) and whose values are also strings. Although this works, it does not allow you to take advantage of the other\nfeatures of CSS, like state pseudoselectors, animations, cascades, vendor prefixing, etc.`}</p>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` props can also be used with `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` for inline overrides, should the need arise.`}</p>\n    <p>{`Although there is a place for inline styling, this is not desirable in much the same way that you would not prefer writing inline\nstyles in HTML.`}</p>\n    <h3 {...{\n      \"id\": \"external-cssless\"\n    }}>{`External CSS/LESS`}</h3>\n    <p>{`In a platonic form of CSS, styles are contained in well-named classes that are organized for minimal conflict and high specificity.\nTaking this approach, any visual changes to a component are brokered through the addition and removal of `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{`s, like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Select = ({ options, disabled }) => (\n  <ul className={\\`bcl-Select \\${disabled ? \"bcl-Select__disabled\" : \"\"}\\`}>\n    {/* snip */}\n  </ul>\n);\n`}</code></pre>\n    <p>{`and in the resulting less file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-less\"\n      }}>{`.bcl-Select {\n  &.bcl-Select__disabled {\n    color: gray;\n    cursor: not-allowed;\n  }\n}\n`}</code></pre>\n    <p>{`This is sufficient, and given a build process, outputs some built CSS that you will need to include in your web application's `}<inlineCode parentName=\"p\">{`<head>`}</inlineCode>{`.\nConsequently your job now includes maintaining `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{`s and ensuring cascades and class conventions are correct. To that end,\ncustom CSS/LESS files should generally be avoided in favor of `}<inlineCode parentName=\"p\">{`styled-component`}</inlineCode>{` implementations.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Contributing/Component Styling', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from \"@storybook/addon-links/react\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/Contributing/Design\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"contributing-to-design-at-beacon\"\n    }}>{`Contributing to Design at Beacon`}</h1>\n    <p>{`When designing a new component, there are a few areas to consider.`}</p>\n    <h3 {...{\n      \"id\": \"component-name\"\n    }}>{`Component Name`}</h3>\n    <p>{`Keep it short and recognizable. Look into the naming patterns used in the industry.`}</p>\n    <h3 {...{\n      \"id\": \"states-and-behavior\"\n    }}>{`States and Behavior`}</h3>\n    <p>{`States are visual representations used to communicate the status of a component or interactive element.\nMake sure you’re taking into account any applicable states. Check the `}<a href=\"https://docs.google.com/document/d/10XDI10BLe-VWARIzirvxIh3WczB3be36MV_OWDEM6iY/edit\" target=\"_blank\" rel=\"noopener noreferrer\">{`Component Documentation Template`}</a>{`\nto see the complete list.`}</p>\n    <p>{`Other things to consider if applicable:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`How does this component appear?`}</li>\n      <li parentName=\"ul\">{`Can this be dismissed or removed, how?`}</li>\n      <li parentName=\"ul\">{`Can this expand, how?`}</li>\n      <li parentName=\"ul\">{`Does the component scroll with the page, off the page, or remain sticky?`}</li>\n      <li parentName=\"ul\">{`Can you scroll content within?`}</li>\n      <li parentName=\"ul\">{`Will the component trigger feedback once it has been interacted, how?`}</li>\n      <li parentName=\"ul\">{`What is the appropriate mouse cursor to use based on the event or state of the component?|`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"variants-and-properties\"\n    }}>{`Variants and Properties`}</h3>\n    <p>{`Some components may require additional properties like sizing or color variations to name a few in order to\nhave more flexibility. Keep in mind the primary use cases the product needs in order to decide what needs to be supported.`}</p>\n    <h3 {...{\n      \"id\": \"responsiveness\"\n    }}>{`Responsiveness`}</h3>\n    <p>{`Consider or showcase how a component scales in various viewports`}</p>\n    <h3 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h3>\n    <p>{`In order to build our product for the widest audience possible,\nincorporate `}<LinkTo kind=\"welcome-accessibility-a11y-best-practices--page\" mdxType=\"LinkTo\">{`a11y best practices`}</LinkTo>{` when appropriate.`}</p>\n    <p>{`Example of things to keep in mind when designing:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Colors`}</li>\n      <li parentName=\"ul\">{`Ensure proper color contrast`}</li>\n      <li parentName=\"ul\">{`Do not rely on color alone to convey information`}</li>\n      <li parentName=\"ul\">{`Typography`}</li>\n      <li parentName=\"ul\">{`Allow ample spacing around texts to make them easy to distinguish and read`}</li>\n      <li parentName=\"ul\">{`Longer lines of text can be hard to follow and make readers lose their place in the text, so aim for shorter lines`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><em parentName=\"li\">{`TBD: Need to define what the suggested text length is for both English and Japanese characters`}</em></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Do not justify text to both the right and left because it creates gaps and uneven spacing.`}</li>\n      <li parentName=\"ul\">{`See `}<a href=\"https://en.wikipedia.org/wiki/River_(typography\" target=\"_blank\" rel=\"noopener noreferrer\">{`\"Rivers of White.\"`}</a></li>\n    </ul>\n    <p>{`Example of things to keep in mind when developing:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Using proper and well-structured HTML semantics so the application is understandable and usable with CSS disabled (or when read by screen readers)`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><em parentName=\"li\">{`TIP: Use the built-in screen reader \"VoiceOver\" for Mac OS X to test your component's accessibility`}</em></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Any text in ALL CAPS should be typed in its proper casing and capitalization should be achieved using CSS`}</li>\n      <li parentName=\"ul\">{`All non-text content such as photo, icons, illustrations, and so on, need to have alternative text`}</li>\n      <li parentName=\"ul\">{`All component functionality should be accessible by keyboard`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"design-tokens\"\n    }}>{`Design tokens`}</h3>\n    <p>{`Leverage existing `}<a href=\"https://www.figma.com/file/5aPJgeJi365Xunlps00NbE/2-UI-Component-Library?node-id=2010%3A144\" target=\"_blank\" rel=\"noopener noreferrer\">{`design tokens`}</a>{`\nwhen designing the components. Should you need to propose a new design token, make\nsure they can be used across multiple use cases a handful of times`}</p>\n    <h3 {...{\n      \"id\": \"internationalization\"\n    }}>{`Internationalization`}</h3>\n    <p>{`Make sure the component works properly across various locales supported by Braze.`}</p>\n    <h4 {...{\n      \"id\": \"example-of-things-to-keep-in-mind-when-designing\"\n    }}>{`Example of things to keep in mind when designing`}</h4>\n    <p>{`Keep copy short and succinct as character counts or length of the string can impact component layouts when translated\nWhen designing complex components, make sure to allow enough space for longer translations to avoid text being cut off`}</p>\n    <h4 {...{\n      \"id\": \"example-of-things-to-keep-in-mind-when-developing\"\n    }}>{`Example of things to keep in mind when developing`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Using typography like `}<inlineCode parentName=\"li\">{`[this]`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`+`}</inlineCode>{` to express emphasis or iconography. Instead, use graphical icons with aria attributes\nfor icons, and surround visually emphasized text with html tags with aria attributes styled with CSS to visually indicate emphasis.\nSome of this overlaps with accessibility.`}</li>\n      <li parentName=\"ul\">{`Interspersing interactive form elements inside sentences, or other design that locks visual elements to English grammar.`}</li>\n      <li parentName=\"ul\">{`If the component represents dynamic lists, ensure the list is visually separate from other textual elements. Translating\nsentences with dynamic lists is dramatically more complex.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"usage-guidelines\"\n    }}>{`Usage Guidelines`}</h3>\n    <p>{`In order for Beacon users to learn how best to apply components to their specific use case, bringing in context through\ndocumentation is vital.`}</p>\n    <p>{`For designers, use this `}<a href=\"https://docs.google.com/document/d/10XDI10BLe-VWARIzirvxIh3WczB3be36MV_OWDEM6iY/edit?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\">{`template`}</a>{`\nto showcase decisions and recommendations.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Contributing/Design', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from \"@storybook/addon-links/react\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/Contributing/Documentation\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"contributing-documentation-to-beacon\"\n    }}>{`Contributing documentation to Beacon`}</h1>\n    <p>{`Documentation for beacon-storybook.braze.com is hosted in several different repositories.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`core beacon documentation is written in storybook format, and hosted at `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/beacon\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/beacon`}</a></li>\n      <li parentName=\"ul\">{`styling documentation is written in storybook format, and hosted at `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/beacon-styling\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/beacon-styling`}</a></li>\n      <li parentName=\"ul\">{`beacon labs documentation is written in storybook format, and hosted at `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/braze-inc/beacon-labs\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`https://github.com/braze-inc/beacon-labs`}</a></li>\n    </ul>\n    <p>{`Follow the processes outlines in `}<LinkTo kind=\"welcome-contributing-contributing-code\" mdxType=\"LinkTo\">{`Contributing Code`}</LinkTo>{` to\nopen a pull request with documentation changes. Please include a screenshot of storybook with the changes in the pull\nrequest description to expedite approval of the changes.`}</p>\n    <p>{`please reach out on slack before you begin work, DASHI can be reached\non `}<a href=\"https://brazetechnology.slack.com/archives/CBDKVUF2P\" target=\"_blank\" rel=\"noopener noreferrer\">{`#beacon-product-system`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Contributing/Documentation', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from \"@storybook/addon-links/react\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/Contributing/Overview\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"contributing-to-the-beacon-product-system\"\n    }}>{`Contributing to the Beacon Product System`}</h1>\n    <p>{`We encourage community contributions to help improve the Braze product.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <LinkTo kind=\"welcome-contributing-code\" mdxType=\"LinkTo\">Contributing code</LinkTo>\n      </li>\n      <li parentName=\"ul\">\n        <LinkTo kind=\"welcome-contributing-component-styling\" mdxType=\"LinkTo\">Contributing component styling</LinkTo>\n      </li>\n      <li parentName=\"ul\">\n        <LinkTo kind=\"welcome-contributing-design\" mdxType=\"LinkTo\">Contributing design</LinkTo>\n      </li>\n      <li parentName=\"ul\">\n        <LinkTo kind=\"welcome-contributing-documentation\" mdxType=\"LinkTo\">\n  Contributing documentation\n        </LinkTo>\n      </li>\n    </ul>\n    <br />\n    <h2 {...{\n      \"id\": \"ways-to-contribute\"\n    }}>{`Ways to contribute`}</h2>\n    <br />\n    <h3 {...{\n      \"id\": \"suggest-a-design-change-to-an-existing-component\"\n    }}>{`Suggest a design change to an existing component`}</h3>\n    <p>{`If you’d like to request a design change or addition to an existing component, let us know by filing\na `}<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSf8Akr8eY8UyjX6v5R1wI0zLhBjtVdNGQTEJxEcYw0YnVAkaw/viewform\" target=\"_blank\" rel=\"noopener noreferrer\">{`Beacon request`}</a>{`\nand we’ll determine how to best address your concern.`}</p>\n    <p>{`Kindly check `}<a href=\"https://jira.braze.com/secure/RapidBoard.jspa?rapidView=188&projectKey=DASHI&view=planning.nodetail&issueLimit=100\" target=\"_blank\" rel=\"noopener noreferrer\">{`DASHI's backlog`}</a>{`\nand see if your suggestion has already been captured before filing a request.`}</p>\n    <br />\n    <h3 {...{\n      \"id\": \"propose-a-component-pattern-workflow-or-guidelines\"\n    }}>{`Propose a component, pattern, workflow, or guidelines`}</h3>\n    <p>{`We will be looking at component candidates to work on regularly. If you have suggestions for new or existing ones to add to Beacon, let us know\nby `}<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSf8Akr8eY8UyjX6v5R1wI0zLhBjtVdNGQTEJxEcYw0YnVAkaw/viewform\" target=\"_blank\" rel=\"noopener noreferrer\">{`filing a Beacon request`}</a>{`.\nWe want to ensure that we’re always supporting your use cases, so we welcome any suggestions that you may have.`}</p>\n    <br />\n    <h3 {...{\n      \"id\": \"volunteer-to-work-on-beacon\"\n    }}>{`Volunteer to work on Beacon`}</h3>\n    <p>{`We always have an open invitation for anyone that has interest in shaping up Beacon by either designing or developing components, patterns,\nworkflows, and guidelines. Reach out to us in our `}<a href=\"https://brazetechnology.slack.com/archives/CBDKVUF2P\" target=\"_blank\" rel=\"noopener noreferrer\">{`#beacon-product-system`}</a>{`\nSlack channel and we will guide you on how to get started and drive your contribution to completion.`}</p>\n    <br />\n    <h3 {...{\n      \"id\": \"submit-a-beacon-component-bug\"\n    }}>{`Submit a Beacon component bug`}</h3>\n    <p>{`If you notice a bug on an existing Beacon component, please use\nthe `}<a href=\"https://pbug.braze.com\" target=\"_blank\" rel=\"noopener noreferrer\">{`PBUG reporter`}</a>{`.`}</p>\n    <br />\n    <h2 {...{\n      \"id\": \"contribution-criteria\"\n    }}>{`Contribution Criteria`}</h2>\n    <p>{`To ensure Beacon continues to be purposefully suited to best help our product scale, and serve our teams to create great user experiences with consistency and efficiency, we created a criteria that new components, patterns, or workflows need to embody.`}</p>\n    <br />\n    <h3 {...{\n      \"id\": \"criteria-to-consider-when-proposing-a-component-pattern-or-workflow\"\n    }}>{`Criteria to consider when proposing a component, pattern, or workflow`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Uniqueness`}</strong>{` Does not replicate components already in our design system`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Reusability`}</strong>{` Solves common user needs that can be used in many instances`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Agnostic to the Product`}</strong>{` Self-contained and does not rely on specific business logic`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Evidence-based`}</strong>{` Proven through user research or data that this is a common unmet need`}</li>\n    </ul>\n    <br />\n    <h3 {...{\n      \"id\": \"criteria-we-consider-when-creating-a-component-pattern-or-workflow\"\n    }}>{`Criteria we consider when creating a component, pattern, or workflow`}</h3>\n    <p>{`Once we have agreed on the need for a new component, pattern, or workflow, we have a secondary quality criteria that we use to assess as we create.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Intentionally Flexible`}</strong>{` Component flexibility considers and addresses its multiple use cases`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Composable`}</strong>{` Where applicable, it can be combined to create new components`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Solving the Right Problem`}</strong>{` The identified need for the component is an appropriate solution to the problem being solved while still being\nflexible and extensible`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Accessible`}</strong>{` - Is usable, accessible, and follows W3C standards, and is inclusive to as many people as possible`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Appropriate to level of maturity`}</strong>{` Takes the design system in a useful direction we are ready for`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Contributing/Overview', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from \"@storybook/addon-links/react\";\nimport { Link } from \"@braze/beacon-core\";\nexport const TableOfContents = () => {\n  const [toc, setTOC] = React.useState([]);\n  React.useEffect(() => {\n    const headerIds = Array.from(document.getElementsByTagName(\"h2\")).map(elem => ({\n      id: elem.id,\n      children: elem.textContent\n    }));\n    setTOC(headerIds);\n  }, []);\n\n  if (toc.length === 0) {\n    return <>\n        <br />\n        <div>Loading Table of Contents...</div>\n      </>;\n  }\n\n  return <ul>\n      {toc.map(elem => <li key={elem.id}>\n          <LinkTo kind={`welcome-faqs--page#${elem.id}`} mdxType=\"LinkTo\">\n            <Link onClick={() => location.hash = \"#\" + elem.id} mdxType=\"Link\">\n              {elem.children}\n            </Link>\n          </LinkTo>\n        </li>)}\n    </ul>;\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  TableOfContents\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/FAQs\" mdxType=\"Meta\" />\n\n    <h1 {...{\n      \"id\": \"frequently-asked-questions-faqs\"\n    }}>{`Frequently Asked Questions (FAQs)`}</h1>\n    <TableOfContents mdxType=\"TableOfContents\" />\n    <br />\n    <h2 {...{\n      \"id\": \"1-why-do-i-have-to-use-npm-login-instead-of-yarn-login\"\n    }}>{`1. Why do I have to use `}<inlineCode parentName=\"h2\">{`npm login`}</inlineCode>{` instead of `}<inlineCode parentName=\"h2\">{`yarn login`}</inlineCode>{`?`}</h2>\n    <p>{`Per the `}<a parentName=\"p\" {...{\n        \"href\": \"https://classic.yarnpkg.com/en/docs/cli/login/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}><inlineCode parentName=\"a\">{`yarn login`}</inlineCode>{` documentation`}</a>{`:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Running this command will prompt you for your username and email for the npm registry. It will `}<strong parentName=\"p\">{`not`}</strong>{` ask for your password.\nLater when you run a command that requires authentication such as yarn publish, you will have to enter your password to do so.`}</p>\n    </blockquote>\n    <p>{`However, our use case requires the password to be entered when logging in to gain access to private repositories, which is a\nfeature `}<inlineCode parentName=\"p\">{`NPM`}</inlineCode>{` offers. As a result, the login step must be performed via `}<inlineCode parentName=\"p\">{`npm login`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` later uses this login information\nwhen you run commands like `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"2-why-did-you-choose-yarn-over-npm\"\n    }}>{`2. Why did you choose `}<inlineCode parentName=\"h2\">{`yarn`}</inlineCode>{` over `}<inlineCode parentName=\"h2\">{`npm`}</inlineCode>{`?`}</h2>\n    <p>{`There are many benefits of `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` over `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{` that specifically work for the Beacon repository use case and more generally.`}</p>\n    <p>{`The most significant reason we chose `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` was because it offers a feature called `}<a parentName=\"p\" {...{\n        \"href\": \"https://classic.yarnpkg.com/en/docs/workspaces/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}><inlineCode parentName=\"a\">{`workspaces`}</inlineCode></a>{`,\nwhich allows projects with multiple packages (like Beacon, which is a monorepo that uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/lerna/lerna\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`lerna`}</a>{`)\nto link and install all the dependencies together at the root level of the project. This allows `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` to better optimize\ndependency management, generate a single `}<inlineCode parentName=\"p\">{`yarn.lock`}</inlineCode>{` file at the root, install most external dependencies at a root-level\n`}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{`, and allow developers to make changes to the various packages and immediately have access to those changes\nwithout having to muck around with things like `}<inlineCode parentName=\"p\">{`yarn link`}</inlineCode>{`.`}</p>\n    <p>{`Additionally, `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` has other smaller benefits over `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{`, such as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Better caching that results in faster reinstalls (try running `}<inlineCode parentName=\"li\">{`npm install`}</inlineCode>{` 3 times; now do `}<inlineCode parentName=\"li\">{`yarn`}</inlineCode>{` 3 times-- sweet, right?),\nwhich is useful when switching between branches with different dependencies`}</li>\n      <li parentName=\"ul\">{`Autocleaning that allows for the automatic deletion of sub-dependencies you may not `}<em parentName=\"li\">{`actually`}</em>{` need via the `}<inlineCode parentName=\"li\">{`.yarnclean`}</inlineCode>{`\nfile (case in point: `}<inlineCode parentName=\"li\">{`@types/react-native`}</inlineCode>{` is a dependency of `}<inlineCode parentName=\"li\">{`@types/styled-components`}</inlineCode>{` but is known to cause issues in\nweb React projects; so `}<inlineCode parentName=\"li\">{`.yarnclean`}</inlineCode>{` allows us to automatically get rid of it after every installation)`}</li>\n      <li parentName=\"ul\">{`Pinned version resolutions, which can make working with sub-dependencies easier, especially if certain dependencies are not\nmaintained as frequently`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"3-how-can-i-contribute-andor-propose-new-components-or-ideas\"\n    }}>{`3. How can I contribute and/or propose new components or ideas?`}</h2>\n    <p>{`Check out our `}<LinkTo kind=\"welcome-contributing-overview--page\" mdxType=\"LinkTo\">{`contribution overview`}</LinkTo>{` to learn all about the\ndifferent ways to contribute.`}</p>\n    <h2 {...{\n      \"id\": \"4-when-do-lab-components-move-to-the-core-library\"\n    }}>{`4. When do lab components move to the core library?`}</h2>\n    <p>{`When Dashboard Infrastructure engineers feel confident on the state and performance of Lab components, they are then moved\nto Core.`}</p>\n    <h2 {...{\n      \"id\": \"5-how-does-beacon-handle-versioning\"\n    }}>{`5. How does Beacon handle versioning?`}</h2>\n    <p>{`Beacon uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://semver.org/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`SemVer`}</a>{`, which is a standard used to communicate what kinds of changes are in a release.`}</p>\n    <p>{`When changes are made to Platform by DASHI engineers, teams who are impacted are tagged to review the pull request.`}</p>\n    <p>{`Changes made outside of Platform (e.g. Beacon) must be manually pulled into Platform via package upgrades through NPM so\nthat Engineers and teams can decide when to upgrade to the new version. We encourage teams to stay as up-to-date as possible.`}</p>\n    <h2 {...{\n      \"id\": \"6-how-often-do-you-review-component-pattern-or-workflow-requests\"\n    }}>{`6. How often do you review component, pattern, or workflow requests?`}</h2>\n    <p>{`We review new Beacon requests and move them into a Jira backlog once a month. At that point they will go through a\nresearch process to gather more information and be vetted.`}</p>\n    <h2 {...{\n      \"id\": \"7-how-can-i-track-the-status-of-a-request\"\n    }}>{`7. How can I track the status of a request?`}</h2>\n    <p>{`If you have submitted a request, we will tag you on the Jira ticket so you can be notified of updates to your request.`}</p>\n    <h2 {...{\n      \"id\": \"8-how-does-beacon-handle-breaking-changes-and-deprecation\"\n    }}>{`8. How does Beacon handle breaking changes and deprecation?`}</h2>\n    <p>{`Beacon uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://semver.org/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`SemVer`}</a>{`, which is a standard used to communicate what kinds of changes are in a release.\nIf any Beacon component has a breaking change, it increases the major version of affected package(s) so that an Eng team\ncan see if it might break their code. The changelog for the package that had a major version bump will also specifically\nreflect the nature of the breaking change and how to address it. This practice is followed in all DASHI-owned repositories,\nincluding Beacon and Beacon Labs.`}</p>\n    <p>{`If a Beacon update does NOT include a major version bump, then you can be sure the new version of Beacon is compatible with\nthe version currently installed in your project.`}</p>\n    <h2 {...{\n      \"id\": \"9-who-works-on-the-beacon-product-system\"\n    }}>{`9. Who works on the Beacon Product System?`}</h2>\n    <p>{`Beacon has a core team of designers and developers who are dedicated to building and supporting the system.`}</p>\n    <p>{`The core team includes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Nick Willett-Jeffries - Director of Engineering`}</li>\n      <li parentName=\"ul\">{`Bill Abresch - Engineering Manager`}</li>\n      <li parentName=\"ul\">{`Dan Garrett - Senior Software Engineer`}</li>\n      <li parentName=\"ul\">{`Greg Beaver - Senior Software Engineer`}</li>\n      <li parentName=\"ul\">{`Hal Anil - Senior Software Engineer`}</li>\n      <li parentName=\"ul\">{`Samantha Abbott - Senior Software Engineer`}</li>\n      <li parentName=\"ul\">{`Nick Robin - Interim Product Manager`}</li>\n      <li parentName=\"ul\">{`Melissa Haworth - Senior Product Design Manager`}</li>\n      <li parentName=\"ul\">{`Jucelle Lim - Senior Product Designer`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"10-whats-on-the-roadmap\"\n    }}>{`10. What’s on the roadmap?`}</h2>\n    <p>{`See the `}<LinkTo kind=\"welcome-status-and-roadmap\" mdxType=\"LinkTo\">{`Roadmap`}</LinkTo>{` page for up to date plans.`}</p>\n    <h2 {...{\n      \"id\": \"11-what-browsers-are-supported\"\n    }}>{`11. What browsers are supported?`}</h2>\n    <p>{`Beacon components are supported in all of the browsers Braze’s officially supports as noted on\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://confluence.braze.com/display/DASHINFRA/Dashboard+Browser+Support+Guidelines\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Confluence here`}</a>{`\nand which include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Chrome (version 58 or newer)`}</li>\n      <li parentName=\"ul\">{`Firefox (version 54 or newer)`}</li>\n      <li parentName=\"ul\">{`Safari (version 10.1 or newer)`}</li>\n      <li parentName=\"ul\">{`Edge (any version)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"12-whats-the-best-way-to-confirm-if-beacon-issues-are-known-bugs-or-not\"\n    }}>{`12. What’s the best way to confirm if Beacon issues are known bugs or not?`}</h2>\n    <p>{`To check if a bug is known, view the `}<a parentName=\"p\" {...{\n        \"href\": \"https://jira.braze.com/browse/DASHI-1085?jql=project%20%3D%20%22Dashboard%20Infrastructure%22%20AND%20type%20%3D%20Bug%20\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Beacon Jira bug backlog`}</a>{`.`}</p>\n    <p>{`If you have a bug to report or are not sure, please submit it to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://pbug.braze.com\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`PBUG reporter`}</a>{`.`}</p>\n    <p>{`You can also reach out to us on `}<a parentName=\"p\" {...{\n        \"href\": \"https://brazetechnology.slack.com/archives/C01145XABT9\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`#product-dash-infra-team`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"13-when-does-beacon-release-merged-code\"\n    }}>{`13. When does Beacon release merged code?`}</h2>\n    <p>{`Beacon has a build time of ~30-45 minutes and is released to NPM immediately after the code is merged.\nAny changes are also simultaneously reflected on the Beacon Storybook.`}</p>\n    <h2 {...{\n      \"id\": \"14-why-build-our-own-design-system-instead-of-utilizing-existing-libraries-like-material-ui\"\n    }}>{`14. Why build our own Design System instead of utilizing existing libraries like Material UI?`}</h2>\n    <p>{`The ability to customize components to our needs and cater to the complexity of the Braze product is the primary\nreason we decided to build our own design system. Furthermore, whitelabeling an existing library can cause maintenance\nand scalability issues especially as we evolve the components and mold them to our specific use cases.`}</p>\n    <h2 {...{\n      \"id\": \"15-what-goes-into-beacons-component-library-vs-platforms-component-library\"\n    }}>{`15. What goes into Beacon’s component library vs Platform’s component library?`}</h2>\n    <p>{`Beacon’s component library follows our Beacon Criteria `}{`[Link to our Contribution page]`}{` and is unique, reusable, and agnostic\nto the product. These are self contained components that do not contain any business logic which you would find on the Platform’s\ncomponent library.`}</p>\n    <p>{`While the largest user of Beacon is Platform, Beacon can and is also used in various projects across Braze, including PBUG,\nWebinole, and more!`}</p>\n    <h2 {...{\n      \"id\": \"16-how-do-i-get-started\"\n    }}>{`16. How do I get started?`}</h2>\n    <p>{`Visit our `}<LinkTo kind=\"welcome-getting-started\" mdxType=\"LinkTo\">{`Getting Started Page`}</LinkTo>{` for both Engineering and Design guidance.`}</p>\n    <br />\n    <br />\n    <hr />\n    <p><strong parentName=\"p\">{`Didn’t see what you need here? Reach out to us on our `}<a parentName=\"strong\" {...{\n          \"href\": \"https://brazetechnology.slack.com/archives/CBDKVUF2P\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`Slack Channel (#beacon-product-system)`}</a></strong></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/FAQs', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from \"@storybook/addon-links/react\";\nimport corePkgJson from \"@braze/beacon-core/../package.json\";\nimport commonsPkgJson from \"@braze/beacon-commons/../package.json\";\nimport hooksPkgJson from \"@braze/beacon-hooks/../package.json\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Welcome/Getting Started\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"beacon-product-system\"\n    }}>{`Beacon Product System`}</h1>\n    <div>\n  <a href=\"https://buildkite.com/braze/branch-beacon\" target=\"_blank\" style={{\n        marginRight: \"0.5rem\"\n      }}>\n    <img alt=\"Build status\" src=\"https://badge.buildkite.com/f5c8f03f23bd44c4122f4f754f1db91b75471ab7f2e280bd50.svg?branch=main\" />\n  </a>\n  <a href={`https://www.npmjs.com/package/${corePkgJson.name}`} target=\"_blank\" style={{\n        marginRight: \"0.5rem\"\n      }}>\n    <img alt=\"npm\" src={`https://img.shields.io/badge/${encodeURIComponent(corePkgJson.name + \"@latest\").replace(\"-\", \"--\")}-v${corePkgJson.version.replace(\"-\", \"--\")}-blue`} />\n  </a>\n  <a href={`https://www.npmjs.com/package/${commonsPkgJson.name}`} target=\"_blank\" style={{\n        marginRight: \"0.5rem\"\n      }}>\n    <img alt=\"npm\" src={`https://img.shields.io/badge/${encodeURIComponent(commonsPkgJson.name + \"@latest\").replace(\"-\", \"--\")}-v${commonsPkgJson.version.replace(\"-\", \"--\")}-blue`} />\n  </a>\n  <a href={`https://www.npmjs.com/package/${hooksPkgJson.name}`} target=\"_blank\" style={{\n        marginRight: \"0.5rem\"\n      }}>\n    <img alt=\"npm\" src={`https://img.shields.io/badge/${encodeURIComponent(hooksPkgJson.name + \"@latest\").replace(\"-\", \"--\")}-v${hooksPkgJson.version.replace(\"-\", \"--\")}-blue`} />\n  </a>\n    </div>\n    <p>{`Welcome to Beacon, Braze's product design system! The system serves as a foundation and curation of components, guidelines, and tools to enable autonomy, efficiency, and cohesion across product teams. It aims to resolve repetitive challenges or solutions in the product in order to create a uniform and accessible product experience.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started-\"\n    }}>{`Getting started ✨`}</h2>\n    <h3 {...{\n      \"id\": \"first-time-users-read-this-\"\n    }}>{`First-time users read this 👇`}</h3>\n    <p>{`If you have not done so already, you must gain access to the `}<inlineCode parentName=\"p\">{`@braze`}</inlineCode>{` private scope on NPM. The steps to do can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://confluence.braze.com/display/DASHINFRA/NPM+at+Braze\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`Once you are able to see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@braze/beacon-core\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}><inlineCode parentName=\"a\">{`@braze/beacon-core`}</inlineCode>{` package via the NPM website`}</a>{`, you will be able to install the dependencies locally. To do so, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm login\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note that this is the `}<strong parentName=\"p\">{`ONLY`}</strong>{` time you should be running any `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{` commands via the CLI when working with Beacon (`}<a parentName=\"p\" {...{\n          \"href\": \"#why-do-i-have-to-use-npm-login-instead-of-yarn-login\"\n        }}>{`why?`}</a>{`); after you are logged in successfully, you `}<strong parentName=\"p\">{`MUST`}</strong>{` use `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` for all future actions to avoid having compatibility issues.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"adding-the-beacon-library-to-your-project-dependencies-\"\n    }}>{`Adding the Beacon library to your project dependencies 📚`}</h3>\n    <p>{`The following command will add the latest version of the library to your application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @braze/beacon-core\n`}</code></pre>\n    <p>{`Note that you will also need the following peer dependencies if you don't have them installed already:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @braze/beacon-theme @braze/beacon-styling @braze/beacon-hooks @braze/beacon-translations @braze/i18n-core react-i18next i18next pseudo-localization\n`}</code></pre>\n    <p>{`Additionally, you may choose to install/upgrade the following to get access to more of what Beacon has to offer to simplify your dev workflow:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @braze/beacon-commons\n`}</code></pre>\n    <p>{`You will also need to add styled-components to your application, since it is a peer dependency of the library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add styled-components\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"to-use-components-from-the-library-\"\n    }}>{`To use components from the library 🚀`}</h3>\n    <p>{`In your React components:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Component } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"what-is-going-on-in-this-library-\"\n    }}>{`What is going on in this library? 🤔`}</h2>\n    <p>{`For a statement of values and purpose, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/braze-inc/beacon/blob/main/PHILOSOPHY.md\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`project philosophy page`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"to-contribute-\"\n    }}>{`To contribute 🛠`}</h2>\n    <p>{`Please read the `}<LinkTo kind=\"welcome-contributing-overview--page\" mdxType=\"LinkTo\">{`contribution guidelines`}</LinkTo>{` before proceeding.`}</p>\n    <h2 {...{\n      \"id\": \"faqs-\"\n    }}>{`FAQs ❓`}</h2>\n    <p>{`See `}<LinkTo kind=\"welcome-faqs\" mdxType=\"LinkTo\">{`FAQs page`}</LinkTo>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Getting Started', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Meta title=\"Welcome/Releases\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"release-notes\"\n    }}>{`Release Notes`}</h1>\n    <p>{`Coming soon - a summary of releases which includes high-level release notes and migration guides.`}</p>\n    <h2 {...{\n      \"id\": \"detailed-changelogs\"\n    }}>{`Detailed Changelogs`}</h2>\n    <p>{`Development work on Beacon follows the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.conventionalcommits.org/en/v1.0.0/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Conventional Commits specification`}</a>{`, which allows for generation of a detailed changelog based on the project's commit history.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/braze-inc/beacon/blob/main/packages/core/CHANGELOG.md\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`here`}</a>{` for the Beacon Core changelog. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/braze-inc/beacon/tree/main/packages\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`here`}</a>{` for a list of folders that each contain the changelog for a specific component.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Releases', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from \"@storybook/addon-links/react\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/Status and Roadmap\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"status-and-roadmap\"\n    }}>{`Status and Roadmap`}</h1>\n    <p>{`This page details the status of various components within the Beacon ecosystem and the broader roadmap of new work to be done.`}</p>\n    <h2 {...{\n      \"id\": \"current-state-for-beacon\"\n    }}>{`Current State for Beacon`}</h2>\n    <p>{`The table below displays the current state of components that exist within Beacon Core, Commons, and Labs.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Used With`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Current Library`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Status`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-alerts-alertmodal--basic-use\" mdxType=\"LinkTo\">{`AlertModal`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-alerts-alertmodal--basic-use\" mdxType=\"LinkTo\">{`AlertModalBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`AlertModal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-alerts-alertmodal--basic-use\" mdxType=\"LinkTo\">{`AlertModalButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`AlertModal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-alerts-alertmodal--basic-use\" mdxType=\"LinkTo\">{`AlertModalFooter`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`AlertModal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-alerts-alertmodal--basic-use\" mdxType=\"LinkTo\">{`AlertModalHeading`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`AlertModal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-alerts-alertmodal--basic-use\" mdxType=\"LinkTo\">{`AlertModalIntentContext`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`AlertModal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-annotation--basic-use\" mdxType=\"LinkTo\">{`Annotation`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-primitives-badge--basic-use\" mdxType=\"LinkTo\">{`Badge`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-tag`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlert`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertAccordion`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertAccordionBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertAccordionFooter`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertAccordionHeader`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertAction`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertClose`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertDescription`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertDescriptionText`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertIcon`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertLink`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`BannerAlertTitle`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BannerAlert`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-text-bodytext--default-case\" mdxType=\"LinkTo\">{`BodyText`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-layout-box--basic-use\" mdxType=\"LinkTo\">{`Box`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-icons-brazeicon--basic-use\" mdxType=\"LinkTo\">{`BrazeIcon`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-primitives-button--basic-use\" mdxType=\"LinkTo\">{`Button`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-primitives-buttongroup--left-aligned-2-buttons\" mdxType=\"LinkTo\">{`ButtonGroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ButtonGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-checkbox--basic-use\" mdxType=\"LinkTo\">{`Checkbox`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-checkboxgroup--basic-use\" mdxType=\"LinkTo\">{`CheckboxGroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Checkbox`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-checkbox-group`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-checkboxgroup--basic-use\" mdxType=\"LinkTo\">{`CheckboxSubgroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Checkbox`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-checkbox-group`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-primitives-closebutton--basic-use\" mdxType=\"LinkTo\">{`CloseButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`Collapsible`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`CollapsibleBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Collapsible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`CollapsibleButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Collapsible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`CollapsibleContext`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Collapsible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`CollapsibleHeader`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Collapsible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`CollapsibleHeaderText`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Collapsible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`CollapsibleIconButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Collapsible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`CollapsibleList`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Collapsible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-collapsible--basic-use\" mdxType=\"LinkTo\">{`CollapsibleListItem`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Collapsible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-datatable--basic-use\" mdxType=\"LinkTo\">{`Column`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DataTable`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-data-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-copyfield--basic-use\" mdxType=\"LinkTo\">{`CopyField`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-primitives-copybutton--basic-use\" mdxType=\"LinkTo\">{`CopyButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-copy-button`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-datatable--basic-use\" mdxType=\"LinkTo\">{`DataTable`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-data-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-datepickerrange--basic-use\" mdxType=\"LinkTo\">{`DatePickerRange`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-date-picker`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-datepickersingle--basic-use\" mdxType=\"LinkTo\">{`DatePickerSingle`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-date-picker`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-commons-content-display-emptystate--basic-use\" mdxType=\"LinkTo\">{`EmptyState`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-empty-state`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-commons-content-display-emptystate--basic-use\" mdxType=\"LinkTo\">{`EmptyStateButtonGroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`EmptyState`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-empty-state`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-commons-content-display-emptystate--basic-use\" mdxType=\"LinkTo\">{`EmptyStateHeading`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`EmptyState`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-empty-state`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-commons-content-display-emptystate--basic-use\" mdxType=\"LinkTo\">{`EmptyStateIcon`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`EmptyState`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-empty-state`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-commons-content-display-emptystate--basic-use\" mdxType=\"LinkTo\">{`EmptyStateText`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`EmptyState`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-empty-state`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-fieldlabel--basic-use\" mdxType=\"LinkTo\">{`FieldLabel`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-layout-flex--basic-use\" mdxType=\"LinkTo\">{`Flex`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-layout-flexbox--basic-use\" mdxType=\"LinkTo\">{`FlexBox`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Flex, Box`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-formgroup--basic-use\" mdxType=\"LinkTo\">{`FormGroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-formgroup--basic-use\" mdxType=\"LinkTo\">{`FormGroupLegend`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-text-heading--example\" mdxType=\"LinkTo\">{`Heading`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-fieldlabel--helper-text\" mdxType=\"LinkTo\">{`HelpText`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-primitives-icon--basic-use\" mdxType=\"LinkTo\">{`Icon`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-primitives-iconbutton--basic-use\" mdxType=\"LinkTo\">{`IconButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Icon`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-icons-iconcircle--basic-use\" mdxType=\"LinkTo\">{`IconCircle`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Icon`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-primitives-iconcopybutton--basic-use\" mdxType=\"LinkTo\">{`IconCopyButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Icon`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-copy-button`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-icons-infoicon--regular-use\" mdxType=\"LinkTo\">{`InfoIcon`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Icon`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-inlineinput--basic-use\" mdxType=\"LinkTo\">{`InlineInput`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-input--basic-use\" mdxType=\"LinkTo\">{`Input`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-inputgroup--basic-use\" mdxType=\"LinkTo\">{`InputGroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-inputgroup--basic-use\" mdxType=\"LinkTo\">{`InputGroupAddon`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-inputgroup--basic-use\" mdxType=\"LinkTo\">{`InputGroupContext`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-text-label--basic-use\" mdxType=\"LinkTo\">{`Label`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-primitives-link--basic-use\" mdxType=\"LinkTo\">{`Link`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-primitives-loadingspinner--basic-use\" mdxType=\"LinkTo\">{`LoadingSpinner`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-spinner`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-overlay-menu--basic-use-w-action-buttons\" mdxType=\"LinkTo\">{`Menu`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-menu`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-overlay-menu--basic-use-w-action-buttons\" mdxType=\"LinkTo\">{`MenuActionButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Menu`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-menu`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-overlay-menu--basic-use-w-action-buttons\" mdxType=\"LinkTo\">{`MenuCategoryButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Menu`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-menu`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-overlay-menu--basic-use-w-action-buttons\" mdxType=\"LinkTo\">{`MenuGroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Menu`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-menu`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-modal--size-small-wo-icon\" mdxType=\"LinkTo\">{`Modal`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-modal--size-small-wo-icon\" mdxType=\"LinkTo\">{`ModalBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-modal--size-small-wo-icon\" mdxType=\"LinkTo\">{`ModalContext`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-modal--size-small-wo-icon\" mdxType=\"LinkTo\">{`ModalFooter`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-modal--size-small-wo-icon\" mdxType=\"LinkTo\">{`ModalHeading`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-multilinecopyfield--basic-use\" mdxType=\"LinkTo\">{`MultilineCopyField`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-multiline-copy-field`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-numberinput--basic-use\" mdxType=\"LinkTo\">{`NumberInput`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-pagination--basic-use\" mdxType=\"LinkTo\">{`Pagination`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-pagination`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-paginationfooter--basic-use\" mdxType=\"LinkTo\">{`PaginationFooter`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-pagination-footer`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-panel--basic-use\" mdxType=\"LinkTo\">{`Panel`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-panel--basic-use\" mdxType=\"LinkTo\">{`PanelBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-panel--basic-use\" mdxType=\"LinkTo\">{`PanelHeader`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-picker--basic-use\" mdxType=\"LinkTo\">{`Picker`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-date-picker`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-overlay-pickerpopover--basic-use\" mdxType=\"LinkTo\">{`PickerPopover`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-date-picker`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-popover--basic-use\" mdxType=\"LinkTo\">{`Popover`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-popover--basic-use\" mdxType=\"LinkTo\">{`PopoverBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Popover`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-popover--basic-use\" mdxType=\"LinkTo\">{`PopoverHeading`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Popover`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-popper--advanced-example\" mdxType=\"LinkTo\">{`Popper`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-portal--basic-use\" mdxType=\"LinkTo\">{`Portal`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-primitives-progressspinner--basic-use\" mdxType=\"LinkTo\">{`ProgressSpinner`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-spinner`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-progresstracker--basic-use-with-knobs\" mdxType=\"LinkTo\">{`ProgressTracker`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-progress-tracker`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-radiobutton--basic-use\" mdxType=\"LinkTo\">{`RadioButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-radiobuttongroup--basic-use\" mdxType=\"LinkTo\">{`RadioButtonGroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`RadioButton`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-screenreadertext--basic-use\" mdxType=\"LinkTo\">{`ScreenReaderText`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-screen-reader-text`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-searchinput--basic-use\" mdxType=\"LinkTo\">{`SearchInput`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-search-input`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-select--basic-use\" mdxType=\"LinkTo\">{`Select`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-select`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-select--async-use\" mdxType=\"LinkTo\">{`SelectAsync`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-select`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-select--async-creatable\" mdxType=\"LinkTo\">{`SelectAsyncCreatable`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-select`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-select--creatable\" mdxType=\"LinkTo\">{`SelectCreatable`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-select`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--basic-use\" mdxType=\"LinkTo\">{`SimpleBannerAlert`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-primitives-skeletonloader--basic-use\" mdxType=\"LinkTo\">{`SkeletonLoader`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-skeleton-loader`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-fieldlabel--basic-use\" mdxType=\"LinkTo\">{`StatusText`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-primitives-switch--basic-use\" mdxType=\"LinkTo\">{`Switch`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-tabs--basic-use\" mdxType=\"LinkTo\">{`Tab`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tabs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-tabs--basic-use\" mdxType=\"LinkTo\">{`TabContent`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tabs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-table--basic-use\" mdxType=\"LinkTo\">{`Table`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-table--basic-use\" mdxType=\"LinkTo\">{`TableBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableBulkActionsSection`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-table--basic-use\" mdxType=\"LinkTo\">{`TableCaption`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-table--basic-use\" mdxType=\"LinkTo\">{`TableCell`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tableemptybody--basic-use\" mdxType=\"LinkTo\">{`TableEmptyBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableFilterSection`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableFilterSectionOverflowPopover`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-table--basic-use\" mdxType=\"LinkTo\">{`TableFooter`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablegroupingheaderrow--basic-use\" mdxType=\"LinkTo\">{`TableGroupingHeaderRow`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-table--basic-use\" mdxType=\"LinkTo\">{`TableHeader`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-table--basic-use\" mdxType=\"LinkTo\">{`TableHeaderCell`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableLayout`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tableloadingbody--basic-use\" mdxType=\"LinkTo\">{`TableLoadingBody`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TablePaginationSection`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableResultsSection`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-table--basic-use\" mdxType=\"LinkTo\">{`TableRow`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablerowhoveractioncell--basic-use\" mdxType=\"LinkTo\">{`TableRow`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablerowhoveractioncell--basic-use\" mdxType=\"LinkTo\">{`TableRowHoverActionCell`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablerowhoveractioncell--basic-use\" mdxType=\"LinkTo\">{`TableRowHoverActionCellIconButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablerowhoveractioncell--basic-use\" mdxType=\"LinkTo\">{`TableRowHoverActionCellOverflowMenu`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablerowhoveractioncell--basic-use\" mdxType=\"LinkTo\">{`TableRowHoverActionCellOverflowMenuButton`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablerowspanner--basic-use\" mdxType=\"LinkTo\">{`TableRowSpanner`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Table`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableSearchSection`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableSection`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableSelectedFiltersSection`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-content-display-tablelayout--basic-use\" mdxType=\"LinkTo\">{`TableTitleSection`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TableLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-table-layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-tabs--basic-use\" mdxType=\"LinkTo\">{`Tabs`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-content-display-tabs--basic-use\" mdxType=\"LinkTo\">{`TabsContext`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tab`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-primitives-tag--basic-use\" mdxType=\"LinkTo\">{`Tag`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-tag`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-primitives-tag--basic-use\" mdxType=\"LinkTo\">{`TagGroup`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tag`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-lab-tag`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-taginput--basic-use\" mdxType=\"LinkTo\">{`TagInput`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-tag-input`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-forms-textarea--basic-use\" mdxType=\"LinkTo\">{`Textarea`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"labs_lab-forms-timepicker--basic-use\" mdxType=\"LinkTo\">{`TimePicker`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-labs-time-picker`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`🔬 Experimental`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-toaster--basic-use\" mdxType=\"LinkTo\">{`Toaster`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-tooltip--basic-use\" mdxType=\"LinkTo\">{`Tooltip`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-content-display-uncontrolledtabs--basic-use\" mdxType=\"LinkTo\">{`UncontrolledTab`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`UncontrolledTabs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-content-display-uncontrolledtabs--basic-use\" mdxType=\"LinkTo\">{`UncontrolledTabContent`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`UncontrolledTabs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-content-display-uncontrolledtabs--basic-use\" mdxType=\"LinkTo\">{`UncontrolledTabs`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"commons-content-display-uncontrolledtabs--basic-use\" mdxType=\"LinkTo\">{`UncontrolledTabsContext`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`UncontrolledTabs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-overlay-uncontrolledtooltip--basic-use\" mdxType=\"LinkTo\">{`UncontrolledTooltip`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"core-alerts-banneralert--without-transition\" mdxType=\"LinkTo\">{`UntransitionedBannerAlert`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Stable`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"future-work-for-beacon\"\n    }}>{`Future Work for Beacon`}</h2>\n    <p>{`TBD`}</p>\n    <h2 {...{\n      \"id\": \"note-on-core-vs-commons-vs-labs\"\n    }}>{`Note on Core vs. Commons vs. Labs`}</h2>\n    <p>{`Please note that this Storybook contains references to components that exist in Core, Commons, and Labs. The primary motivation between separating these repos is to allow for rapid and atomic development of new components in labs without affecting the stability of components that are considered to be complete in Core and/or Commons.`}</p>\n    <p>{`The table below summarizes the differences between the two types of components side-by-side:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Core`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Commons`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Labs`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Primary Purpose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Core aims to assemble components that make up the \"core\" of a design system (e.g. buttons, modals, dropdowns, etc.)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Commons aims to create a secondary library that uses core components to address common use cases (e.g. info icon, accept/reject modal, etc.)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Labs aims to create a sandbox environment for new components currently being worked on, allowing individual components to be installed and upgraded separately in various Braze projects.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Safe for use in platform`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`✅ Yes, breaking changes are always major version upgrades`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Stability`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`Components in Core are considered stable`}</strong>{` and will not have frequent breaking changes. We may add new features and bug fixes from time to time, however, most components here have been in use across the dashboard for a while, making them much more battle-tested.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`Components in Commons are considered stable`}</strong>{` and will not have frequent breaking changes. We may add new features and bug fixes from time to time, however, most components here have been in use across the dashboard for a while, making them much more battle-tested.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`Components in Labs are considered unstable`}</strong>{` and are subject to frequent breaking changes. Features may be added and removed without prior notice, though breaking changes will always be noted in versioning and changelogs.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Long-term support`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All components in Core are intended to be supported long-term by DASHI.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All components in Commons are intended to be supported long-term by DASHI.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Components in labs may not be supported long-term, with some deprecated and deleted if testing reveals that there is no long-term use case for them. Once a component is deemed stable, it will be moved from Labs to Core or Commons.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modularity`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Components in core cannot be installed individually and must be installed as a single `}<inlineCode parentName=\"td\">{`@braze/beacon-core`}</inlineCode>{` library.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Components in core cannot be installed individually and must be installed as a single `}<inlineCode parentName=\"td\">{`@braze/beacon-commons`}</inlineCode>{` library.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Components in labs can be installed individually (with some restrictions) and may be upgraded separately from one another.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Dependencies`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Core has dependencies on styling and hooks libraries.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Commons has dependencies on Core, as well as styling and hooks libraries.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Components in labs typically have dependencies on Core, styling, and hooks libraries. They may also have dependencies on Commons if the intended destination of a component is commons AND it expands upon an existing Commons component(s). Finally, components in Labs may have dependencies on one another.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Status and Roadmap', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Meta title=\"Welcome/Support\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"support\"\n    }}>{`Support`}</h1>\n    <h2 {...{\n      \"id\": \"reporting-an-issue\"\n    }}>{`Reporting an issue`}</h2>\n    <p>{`To report an issue, use the PBUG reporter at `}<a parentName=\"p\" {...{\n        \"href\": \"https://pbug.braze.com\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`https://pbug.braze.com`}</a></p>\n    <h2 {...{\n      \"id\": \"requesting-a-new-feature\"\n    }}>{`Requesting a new feature`}</h2>\n    <p>{`Features may be requested via DASHI's `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.google.com/forms/d/e/1FAIpQLSf8Akr8eY8UyjX6v5R1wI0zLhBjtVdNGQTEJxEcYw0YnVAkaw/viewform\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`intake form`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"seeking-direct-support\"\n    }}>{`Seeking direct support`}</h2>\n    <p>{`Dashboard Infrastructure team members are available on Slack for direct support.`}</p>\n    <h3 {...{\n      \"id\": \"beacon-support\"\n    }}>{`Beacon support:`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://brazetechnology.slack.com/archives/CBDKVUF2P\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`#beacon-product-system`}</a></p>\n    <h3 {...{\n      \"id\": \"internationalization-support\"\n    }}>{`Internationalization support:`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://brazetechnology.slack.com/archives/C01145XABT9\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`#dashboard-product-localization`}</a></p>\n    <h3 {...{\n      \"id\": \"interaction-with-dashboard-infrastructure-team-members\"\n    }}>{`Interaction with Dashboard Infrastructure team members:`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://brazetechnology.slack.com/archives/C01145XABT9\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`#product-dash-infra-team`}</a></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Support', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Meta title=\"Welcome/Accessibility/a11y Best Practices\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"a11y-best-practices\"\n    }}>{`A11y Best Practices`}</h1>\n    <p>{`There are broad best practices to keep in mind while designing and developing for different a11y user types that can go a long way towards creating accessible products listed below.`}</p>\n    <p>{`For a more in-depth checklist to reference, we recommend using the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.a11yproject.com/checklist/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`A11y Project Checklist`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"blind\"\n    }}>{`Blind`}</h3>\n    <p>{`Blind individuals have loss of vision in both eyes that is uncorrectable. With blindness, vision impairment is significant enough that one cannot function without personal or technological assistance due to the extreme loss of visible clarity.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An estimated .6 % of the world’s population are blind, ~49 million`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"hurdles\"\n    }}>{`Hurdles`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Cannot use a pointer or a mouse`}</li>\n      <li parentName=\"ul\">{`Rely on screen readers to take in content`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"best-practices\"\n    }}>{`Best Practices`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Use accessible heading styles`}</li>\n      <li parentName=\"ul\">{`Use descriptive hyperlinks and buttons`}</li>\n      <li parentName=\"ul\">{`Ensure visual information translates into text and use alt text for images`}</li>\n      <li parentName=\"ul\">{`Clearly define information in metadata for screen readers`}</li>\n      <li parentName=\"ul\">{`Use a linear logical layout`}</li>\n      <li parentName=\"ul\">{`Follow `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.nngroup.com/articles/keyboard-accessibility/\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`keyboard guidelines`}</a></li>\n    </ul>\n    <br />\n    <h3 {...{\n      \"id\": \"low-vision\"\n    }}>{`Low Vision`}</h3>\n    <p>{`Low vision individuals have the ability to see colors, but may struggle with the following: tunnel vision; central field loss; clouded vision; ability to only see the middle or only the edge of the field of vision.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An estimated 2.8% of the world’s population have low vision, ~221 million`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"hurdles-1\"\n    }}>{`Hurdles`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Designs may break when browser font size is increased too much`}</li>\n      <li parentName=\"ul\">{`Often need access to high-contrast modes`}</li>\n      <li parentName=\"ul\">{`Often need to use monochrome displays`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"best-practices-1\"\n    }}>{`Best Practices`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Maximize readability and clarity of content`}</li>\n      <li parentName=\"ul\">{`Allow manual font size adjustments`}</li>\n      <li parentName=\"ul\">{`Ensure there is enough color contrast between text/background`}</li>\n      <li parentName=\"ul\">{`Use a readable font size`}</li>\n      <li parentName=\"ul\">{`Limit and prioritize color in the interface`}</li>\n      <li parentName=\"ul\">{`Don’t rely on color alone to communicate important information`}</li>\n      <li parentName=\"ul\">{`Consider using texture to help with contrast`}</li>\n      <li parentName=\"ul\">{`Use a linear logical layout that can be easily magnified`}</li>\n      <li parentName=\"ul\">{`Follow `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.nngroup.com/articles/keyboard-accessibility/\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`keyboard guidelines`}</a></li>\n    </ul>\n    <br />\n    <h3 {...{\n      \"id\": \"color-blind\"\n    }}>{`Color Blind`}</h3>\n    <p>{`Color blind individuals have difficulty distinguishing between colors such as red and green or yellow and blue, and sometimes don’t have the ability to perceive any color whatsoever.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An estimated 3.8% of the world’s population are color blind. ~300 million`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"hurdles-2\"\n    }}>{`Hurdles`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Cannot differentiate between some colors`}</li>\n      <li parentName=\"ul\">{`Rely on non-color information to use interface`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"best-practices-2\"\n    }}>{`Best Practices`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Avoid relying on color alone to convey information`}</li>\n      <li parentName=\"ul\">{`Use colors with symbols and text explanations`}</li>\n      <li parentName=\"ul\">{`Limit the color palette`}</li>\n      <li parentName=\"ul\">{`Consider using texture in addition to color to show emphasis`}</li>\n    </ul>\n    <br />\n    <h3 {...{\n      \"id\": \"deaf--hard-of-hearing\"\n    }}>{`Deaf & Hard-of-Hearing`}</h3>\n    <p>{`Deaf individuals have little or no functional hearing. Hard of hearing individuals have hearing loss where there is residual hearing that can be assisted by an auditory device such as a hearing aid or FM system to help process speech.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An estimated 6% of the world’s population have disabling hearing loss. ~466 million`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"hurdles-3\"\n    }}>{`Hurdles`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Rely on closed captioning and other audio representation`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"best-practices-3\"\n    }}>{`Best Practices`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Display information as text as well as audio`}</li>\n      <li parentName=\"ul\">{`Transcribe and caption all videos`}</li>\n      <li parentName=\"ul\">{`Synchronize captions`}</li>\n      <li parentName=\"ul\">{`Provide a summary of audio and video content`}</li>\n      <li parentName=\"ul\">{`Simplify navigation`}</li>\n      <li parentName=\"ul\">{`Use clear to the point copy`}</li>\n      <li parentName=\"ul\">{`Use a linear logical layout`}</li>\n    </ul>\n    <br />\n    <h3 {...{\n      \"id\": \"physical\"\n    }}>{`Physical`}</h3>\n    <p>{`Physically impaired individuals have weakness and limitations of muscular control. Examples include: involuntary movements (tremors), lack of coordination, paralysis, limitations of sensation, joint disorders such as arthritis, pain that impedes movement, and missing limbs.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An estimated 15% of the world's population have a significant physical or mental disability. ~785 million`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"hurdles-4\"\n    }}>{`Hurdles`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`May not be able to use a keyboard, mouse or pointer`}</li>\n      <li parentName=\"ul\">{`May rely on voice recognition software`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"best-practices-4\"\n    }}>{`Best Practices`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Design for keyboard interaction`}</li>\n      <li parentName=\"ul\">{`Make large clickable actions`}</li>\n      <li parentName=\"ul\">{`Give clickable elements space`}</li>\n      <li parentName=\"ul\">{`Design with touch screen and mobile in mind`}</li>\n      <li parentName=\"ul\">{`Ensure tasks can be handled through voice commands`}</li>\n      <li parentName=\"ul\">{`Ensure tasks don’t require more than one hand to complete (mouse + hot a button on keyboard)`}</li>\n      <li parentName=\"ul\">{`Follow `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.nngroup.com/articles/keyboard-accessibility/\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`keyboard guidelines`}</a></li>\n    </ul>\n    <br />\n    <h3 {...{\n      \"id\": \"cognitive\"\n    }}>{`Cognitive`}</h3>\n    <p>{`Cognitively impaired individuals can have a broad range of disabilities, from intellectual disabilities to age-related issues with thinking and remembering. The range includes people with mental illnesses, such as depression, schizophrenia, and includes people with learning disabilities, such as dyslexia and attention deficit hyperactivity disorder (ADHD).`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An estimated 15% of the world's population have a significant physical or mental disability. ~785 million`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"hurdles-5\"\n    }}>{`Hurdles`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`May have difficulty understanding content`}</li>\n      <li parentName=\"ul\">{`May have a hard time remembering how to complete tasks`}</li>\n      <li parentName=\"ul\">{`May have confusion caused by inconsistent or non-traditional web page layouts`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"best-practices-5\"\n    }}>{`Best Practices`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Provide consistent layout, navigation, patterns, and clear page hierarchy`}</li>\n      <li parentName=\"ul\">{`Provide different ways to understand the content by delivering it in more than one way`}</li>\n      <li parentName=\"ul\">{`Help users understand with clear to the point copy and images`}</li>\n      <li parentName=\"ul\">{`Ensure processes do not rely on memory`}</li>\n      <li parentName=\"ul\">{`Highlight important content and areas that require attention`}</li>\n      <li parentName=\"ul\">{`Minimize distractions and provide focus`}</li>\n      <li parentName=\"ul\">{`Divide complex processes into logical essential steps with progress indicators`}</li>\n      <li parentName=\"ul\">{`Make forms easy to fill out with clear error guidance`}</li>\n      <li parentName=\"ul\">{`Provide enough time to complete tasks`}</li>\n      <li parentName=\"ul\">{`Steer clear of blinking, scrolling, or auto updating content`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Accessibility/a11y Best Practices', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from '@storybook/addon-links/react';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/Accessibility/Overview\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"accessibility--inclusion\"\n    }}>{`Accessibility & Inclusion`}</h1>\n    <p>{`At Braze, we believe in creating great user experiences that are usable, accessible, and inclusive to as many people as possible. `}</p>\n    <p>{`Accessibility enables people with disabilities to perceive, understand, navigate, interact with, and easily contribute to the web. `}</p>\n    <p>{`We know we have a lot of work to do to make our product more accessible and inclusive, and as a first step, we’re looking into `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/WAI/standards-guidelines/wcag/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Web Content Accessibility Guidelines (WCAG)`}</a>{` to understand the diverse range of visual, auditory, physical, and cognitive abilities our users may possess and what to keep in mind while designing for them. `}</p>\n    <h2 {...{\n      \"id\": \"how-to-use-this-guide\"\n    }}>{`How to use this guide`}</h2>\n    <p>{`Beacon currently has some component-level `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/storybookjs/instant-accessibility-qa-linting-in-storybook-4a474b0f5347\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`accessibility checks`}</a>{` in place (but not all) within Storybook. Our aim is to eventually do an accessibility audit on our entire product and fix accessibility issues. `}</p>\n    <p>{`In the meantime, this guide is intended to help bridge the gap and serve as a high level overview of accessibility best practices for the entire Product, Design, & Engineering organization at Braze to use when designing and developing our product. `}</p>\n    <p><strong parentName=\"p\">{`Accessibility Guide:`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">\n        <LinkTo kind=\"welcome-accessibility-a11y-best-practices--page\" mdxType=\"LinkTo\">A11y Best Practices</LinkTo> overviews a11y user types and best practices to keep in mind while designing for them.  \n      </li>\n      <li parentName=\"ol\">\n        <LinkTo kind=\"welcome-accessibility-checklists-tools--page\" mdxType=\"LinkTo\">Checklists & Tools</LinkTo> provides external links with in-depth information on accessibility as well as tools and plugins to help incorporate accessibility into your workflow.\n      </li>\n    </ol>\n    <p>{`For an in-depth checklist to reference, we recommend using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.a11yproject.com/checklist/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`A11y Project Checklist`}</a>{`. `}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Accessibility/Overview', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Meta title=\"Welcome/Accessibility/Checklists &amp; Tools\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"checklists--tools\"\n    }}>{`Checklists & Tools`}</h1>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/a11y_logo.png\",\n        \"alt\": \"a11y logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"a11y-project-checklist\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://www.a11yproject.com/checklist/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`A11y Project Checklist`}</a></h4>\n    <p>{`This checklist uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/WAI/standards-guidelines/wcag/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`The Web Content Accessibility Guidelines (WCAG)`}</a>{` as a reference point. The issues this checklist prompts you to check for covers a wide range of disability conditions. It’s important to remember that there is no such thing as “perfect accessibility” or a site being “100% accessible.” `}<br />{` `}<br />{` `}<br /></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/IBM_Accessibility_Requirements_logo.jpeg\",\n        \"alt\": \"IBM Accessibility Requirements Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"ibm-accessibility-requirements\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://www.ibm.com/able/requirements/requirements/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`IBM Accessibility Requirements`}</a></h4>\n    <p>{`The IBM Accessibility Requirements are a unified list of requirements that incorporate several accessibility standards and regulations. This reference shares what accessibility requirements a product needs to meet. To find out how to meet these requirements, check out `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/able/toolkit/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`the Equal Access Toolkit`}</a>{`! `}<br />{` `}<br />{` `}<br /></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/Vocie_Over_Screenreader.png\",\n        \"alt\": \"Voice Over Screen Reader Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"voiceover-screenreader\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://webaim.org/articles/voiceover/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`VoiceOver (Screenreader)`}</a></h4>\n    <p>{`VoiceOver is a screen reader program that comes on new Mac computers, iPhones, iPads, and iPod touches. This article is designed to help users who are new to VoiceOver learn the basic controls for testing web content, and to serve as a reference for the occasional VoiceOver user. `}<br />{` `}<br />{` `}<br /></p>\n    <h2 {...{\n      \"id\": \"figma-plugins\"\n    }}>{`Figma Plugins`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/A11y%20Contrast.png\",\n        \"alt\": \"a11y Color Contrast Checker Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"a11y---color-contrast-checker\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://www.figma.com/community/plugin/733159460536249875/A11y---Color-Contrast-Checker\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`a11y - Color Contrast Checker`}</a></h4>\n    <p>{`Ensure there's enough color contrast between text and backgrounds. Build empathy by seeing how others with color blindness see your designs. `}<br /><br /><br /></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/Spelll.png\",\n        \"alt\": \"SPELLL - Spell Checking for Figma Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"spelll---spell-checking-for-figma\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://www.figma.com/community/plugin/754026612866636376/SPELLL---Spell-Checking-for-Figma\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`SPELLL - Spell Checking for Figma`}</a></h4>\n    <p>{`Ensure designs have the correct spelling so that screen readers can read everything correctly. `}<br /><br /><br /></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/FocusOrderer.png\",\n        \"alt\": \"Focus Order Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"focus-order\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://www.figma.com/community/plugin/731310036968334777/A11y---Focus-Orderer\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Focus Order`}</a></h4>\n    <p>{`Helps designers create designs for keyboarding and screen reader users. `}<br /><br /><br /></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/Focus%20CSS.png\",\n        \"alt\": \"Focus CSS Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"focus-css\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://www.figma.com/community/plugin/811977401825396882/Focus-CSS\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Focus CSS`}</a></h4>\n    <p>{`Makes viewing CSS in Figma more convenient and helps spot inconsistent styling. `}<br /><br /><br /></p>\n    <h2 {...{\n      \"id\": \"chrome-plugins\"\n    }}>{`Chrome Plugins`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/IBM_Equal_Access_Checker.jpeg\",\n        \"alt\": \"IBM Equal Access Accessibility Checker Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"ibm-equal-access-accessibility-checker\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://chrome.google.com/webstore/detail/ibm-equal-access-accessib/lkcagbfjnkomcinoddgooolagloogehp\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`IBM Equal Access Accessibility Checker`}</a></h4>\n    <p>{`The IBM Equal Access Accessibility Checker is an open source tool for web developers and auditors that utilizes IBM's accessibility rule engine, which detects accessibility issues for web pages and web applications. The extension integrates into the browser development tools, providing an integrated checking experience, helping users quickly identify the source of accessibility issues and try fixes. `}<br /><br /><br /></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/Spectrum.jpeg\",\n        \"alt\": \"Spectrum Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"spectrum\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://chrome.google.com/webstore/detail/spectrum/ofclemegkcmilinpcimpjkfhjfgmhieb?hl=en\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Spectrum`}</a></h4>\n    <p>{`The Spectrum extension helps you to test web pages for people with different types of CVD. It's particularly useful for websites with data visualizations, because some colors may not be distinguishable from other colors in the charts. `}<br /><br /><br /></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/Headings_Map.jpeg\",\n        \"alt\": \"Headings Map Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"headingsmap\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://chrome.google.com/webstore/detail/headingsmap/flbjommegcjonpdmenkdiocclhjacmbi?hl=en\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`HeadingsMap`}</a></h4>\n    <p>{`The HeadingsMap extension is useful to show, browse, and audit (for accessibility and SEO) the page’s headings structure. The extension generates a documentmap or index of any web document structured with headings and shows the HTML 5 outline. `}<br /><br /><br /></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/accessibility/NerdeFocus_Logo.jpeg\",\n        \"alt\": \"NerdeFocus Logo\"\n      }}></img></p>\n    <h4 {...{\n      \"id\": \"nerdefocus\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"https://chrome.google.com/webstore/detail/nerdefocus/lpfiljldhgjecfepfljnbjnbjfhennpd\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`NerdeFocus`}</a></h4>\n    <p>{`The NerdeFocus extension displays the focus history with CSS selectors and overlays an easy-to-follow focus indicator on the page. NerdeFocus is great for detecting focus resets, testing keyboard focus, and debugging screen reader issues in modern web apps. `}<br /><br /><br /></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Accessibility/Checklists & Tools', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import '@storybook/react';","/* (ignored) */"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAIA;AADA;AAGA;AAAA;AAEA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAKA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAFA;AAAA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AANA;AAAA;AAQA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAFA;AAAA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAoBA;AADA;AAIA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAKA;AADA;AAGA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAKA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AArgCA;AAugCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACphlEA;AAkEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAUA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AAGA;AA/BA;AA+BA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAOA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AA/BA;AA+BA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAGA;AAzBA;AAyBA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAdA;AAcA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AAGA;AAjBA;AAiBA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AAGA;AAxBA;AAwBA;AAOA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AASA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AAjDA;AAiDA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AASA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AAjDA;AAiDA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AASA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AAjDA;AAiDA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAQA;AACA;AAGA;AAtCA;AAsCA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AASA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AA7DA;AA6DA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AASA;AAAA;AAGA;AAAA;AASA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AA7DA;AA6DA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AAGA;AAjBA;AAiBA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAvCA;AAuCA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAGA;AA/BA;AAiCA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3tBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAGA;AAAA;AAAA;AAEA;AAMA;AAJA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;AAlBA;AAAA;AAoBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AAFA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAIA;AACA;AACA;AACA;AACA;AAQA;AAKA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;AChBA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAGA;AAAA;AAAA;AAEA;AAKA;AAHA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAGA;AApBA;AAAA;AAsBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAAA;AAIA;AAEA;AADA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAKA;AAEA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAMA;AAEA;;;;;;;;;;;;;AClBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAGA;AAAA;AAAA;AAEA;AAIA;AAFA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AARA;AAAA;AAWA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAIA;;;;;;;;;;;;;ACPA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AACA;AAAA;AAAA;AAIA;AAIA;AAFA;AACA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAIA;AAhBA;AAAA;AAkBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AAHA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAzBA;AAAA;AA2BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;;;;;;;;;;;;;ACFA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAGA;AAAA;AAAA;AAEA;AAIA;AAFA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAZA;AAAA;AAeA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAAA;AAIA;AAEA;AADA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAMA;AAEA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAIA;AAEA;AADA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAGA;AAFA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAXA;AAAA;AAcA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AACA;AAIA;AAEA;AAOA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AChBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAQA;AANA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AAAA;AAAA;AAEA;AAGA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAKA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;;;;;;;;;;;;;ACFA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAKA;AAIA;AAEA;AADA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAQA;AAEA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AADA;AAGA;AAAA;AAGA;AADA;AAGA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AA3LA;AA6LA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9MA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAKA;AAGA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AATA;AAUA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AAC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;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAwBA;AADA;AAGA;AACA;AADA;AAMA;AADA;AAKA;AADA;AAGA;AACA;AADA;AAaA;AADA;AAGA;AACA;AADA;AAYA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAKA;AA9UA;AAgVA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7VA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAffA;AAIA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAQA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAMA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;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A;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;A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A;AACA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AA7CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAIA;AASA;AAaA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AAEA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAIA;;;;;;;;;;;;;AC/FA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAaA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAIA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAEA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAEA;AAiBA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AACA;AA4BA;AAEA;AAEA;AAIA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACpMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AAAA;AAKA;AADA;AAKA;AADA;AAIA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAOA;AAzSA;AA2SA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7TA;AA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AKA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;A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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;A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AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAIA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAIA;AAIA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAIA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAIA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAIA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAIA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAIA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAIA;AADA;AAGA;AACA;AADA;AAaA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;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;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAKA;AAjTA;AAmTA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChbA;AAaA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AAGA;AARA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AApBA;AAoBA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAXA;AAWA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAjCA;AAmCA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AACA;AAzfA;AA0fA;AACA;AAEA;AAAA;AAKA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAdA;AAAA;AAqBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAKA;AAAA;AAAA;AAAA;AAVA;AAAA;AAkBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;;;;;;;;;;;;;AClBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AADA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAQA;AAAA;AAIA;AAGA;AADA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AAQA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAEA;AAAA;AAIA;AAGA;AADA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAOA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAOA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAIA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AAlZA;AAoZA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjahBA;AAgBA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAXA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AAVA;AAUA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AANA;AAMA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;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AAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAKA;AAHA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAKA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAEA;AAAA;AAGA;AAIA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAGA;AAAA;AAEA;AAIA;AAFA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAGA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAOA;AALA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAQA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAKA;AADA;AAGA;AACA;AADA;AAaA;AADA;AAGA;AACA;AADA;AAYA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AAD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GA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AA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AAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AADA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AADA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAIA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAOA;AACA;AA5kBA;AA6kBA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AARA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AARA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAlBA;AAmBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AARA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAbA;AAcrsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAYA;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAHA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AA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;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAOA;AAlTA;AAoTA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjrBA;AAqBA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAtBA;AAsBA;AAEA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAEA;AAEA;AAGA;AADA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAdA;AAcA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AATA;AASA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AANA;AAMA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAFA;AAEA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAEA;AAGA;AAAA;AAEA;AAcA;AAAA;AAVA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AASA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAIA;AADA;AAAA;AAAA;AACA;AAAA;AAGA;AADA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAQA;AADA;AAAA;AAAA;AACA;AAEA;AA0BA;AADA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAGA;AAIA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AACA;AA7TA;AA8TA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AANA;AAAA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AALA;AAAA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AALA;AAAA;AAUA;AACA;AAAA;AAAA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AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAKA;AAHA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAbA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AA3PA;AA6PA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1QA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAKA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAKA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AA/5BA;AAi6BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/6BA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAFA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AA9CA;AA8CA;AAEA;AAEA;AAIA;AAFA;AACA;AAAA;AAEA;A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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAIA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAYA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;;ACteA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAOA;AAEA;AAcA;AACA;AAMA;AAEA;AASA;AALA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAFA;AAAA;AAGA;AAEA;AADA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AADA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAUA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAMA;AAJA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AArBA;AAAA;AAwBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAGA;AAAA;AAAA;AAEA;AAIA;AAFA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AARA;AAAA;AAWA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AACA;AACA;AAIA;AAkBA;AAAA;AAAA;AAWA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAOA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AApCA;AAAA;AAuCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAEA;AAMA;AAJA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAbA;AAAA;AAgBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AACA;AAIA;AAgBA;AAAA;AAAA;AASA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AAAA;AAKA;AADA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAMA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAWA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AA3mBA;AA6mBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5ojEA;AAiEA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;A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AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAGA;AAIA;AADA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAMA;AAAA;AAGA;AAIA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AADA;AAGA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AACA;AA1TA;AA2TA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAMA;AAAA;AAGA;AAbA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAMA;AAAA;AAGA;AAbA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAIA;AAFA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AAKA;AAHA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAbA;AAAA;AAgBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAGA;AAEA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AADA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;A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ACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAMA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAUA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AA7vCA;AA+vCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5wCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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AMA;AADA;AAOA;AACA;AADA;AAoCA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAOA;AAxhBA;AA0hBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvipCA;AAsCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAepDA;AAoDA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AAGA;AArBA;AAqBA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;A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AAGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AC5HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;ACjeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;ACleA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAUA;;;;;;;;;;;;;ACnGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAFA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACteA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAcA;;;;;;;;;;;;;ACjSA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAEA;AAiBA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AACA;AAIA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAIA;AAAA;AAHA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACxGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACheA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAUA;AANA;AAAA;AAKA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAOA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjIA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAMA;AAJA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AChCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AAEA;AAAA;AACA;AACA;AAGA;AAEA;AAEA;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;ACjeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AACA;AACA;AAAA;AAEA;AAWA;AAPA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAKA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;ACjIA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AClBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AAlYA;AAoYA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjvBA;AAyBA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AANA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAFA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAGA;AApBA;AAszIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AAkBA;AAdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAGA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAIA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAIA;AAAA;AAAA;AAEA;AAKA;AAHA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAUA;AAEA;AACA;AAEA;AAKA;AAHA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;A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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAMA;AAJA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AArBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAaA;AACA;AACA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AAxPA;AA0PA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvrBA;AAqBA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AApBA;AAszIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAEA;AAKA;AACA;AAAA;AAAA;AAGA;AAaA;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AAKA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAKA;AAEA;;;;;;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AAAA;AAIA;AADA;AAAA;AACA;AAKA;AAIA;AADA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAMA;AADA;AAGA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAgBA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAsBA;AAAA;AACA;AACA;AADA;AAYA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AAhgDA;AAkgDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/grGA;AAqGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AAAA;AACA;AACA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AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AAnEA;AAmEA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AAnEA;AAqEA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7hCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAGA;AAAA;AAEA;AAKA;AAHA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAEA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAA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DA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AACA;AAl4BA;AAm4BA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AADA;AAAA;AAeA;AACA;AADA;AAAA;AAiBA;AAAA;AACA;AACA;AADA;AAAA;AAgBA;AAAA;AACA;AACA;AADA;AAAA;AAeA;AACA;AADA;AAAA;AAgBA;AACA;AADA;AAAA;AAuBA;AAvHA;AAwHA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AADA;AAAA;AAeA;AACA;AADA;AAAA;AAiBA;AAAA;AACA;AACA;AADA;AAAA;AAgBA;AAAA;AACA;AACA;AADA;AAAA;AAeA;AACA;AADA;AAAA;AAgBA;AACA;AADA;AAAA;AAuBA;AAvHA;AAwHA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AADA;AAAA;AAeA;AACA;AADA;AAAA;AAiBA;AAAA;AACA;AACA;AADA;AAAA;AAgBA;AAAA;AACA;AACA;AADA;AAAA;AAeA;AACA;AADA;AAAA;AAgBA;AACA;AADA;AAAA;AAuBA;AAxIA;AAyIA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAAA;AAeA;AACA;AADA;AAAA;AAiBA;AAAA;AACA;AACA;AADA;AAAA;AAgBA;AAAA;AACA;AACA;AADA;AAAA;AAeA;AACA;AADA;AAAA;AAgBA;AACA;AADA;AAAA;AAuBA;AA1HA;AA2HA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC95CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAEA;AAMA;AAJA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAZA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AADA;AAAA;AAAA;AAEA;AAGA;AADA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAnBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAEA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAIA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAIA;AADA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA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AA;AAAA;AAAA;AAEA;AADA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AADA;AAOA;AACA;AADA;AAYA;AACA;AADA;AASA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AADA;AAuBA;AACA;AADA;AAaA;AA3RA;AA6RA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClfA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAOA;AANA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AApBA;AAAA;AAuBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AAIA;AAgBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA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;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAKA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AA/YA;AAiZA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9ZA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAHA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtHA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAQA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAOA;AA1EA;AA4EA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACznDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AAAA;AACA;AAAA;AAEA;AAGA;;;;;;;;;;;;;ACdeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;AC9HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AApDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA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","sourceRoot":""}