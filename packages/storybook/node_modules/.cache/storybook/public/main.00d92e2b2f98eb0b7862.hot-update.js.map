{"version":3,"file":"main.00d92e2b2f98eb0b7862.hot-update.js","sources":["webpack:///../core/src/components/Menu/Menu.stories.mdx"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean, select } from \"@storybook/addon-knobs\";\nimport { Button, Flex, placementTypes } from \"@braze/beacon-core\";\nimport { MenuActionButton } from \"../MenuActionButton\";\nimport { MenuCategoryButton } from \"../MenuCategoryButton\";\nimport { MenuGroup } from \"../MenuGroup\";\nimport { Menu, useMenu } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Overlay/Menu\" component={Menu} mdxType=\"Meta\" />\n    <h1>{`Menu`}</h1>\n    <p><inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` is a floating panel that contains a list of actions,\nNOT selected values. These actions can be within the page\nor navigational in their nature.`}</p>\n    <p>{`To ensure that your `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` components are accessible, we\nrecommend the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Give a unique DOM id to the menu target (the target is usually a `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{`, pass the `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` attribute to this button)`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-haspopup=\"true\"`}</inlineCode>{` to the menu target`}</li>\n      <li parentName=\"ul\">{`Give a unique DOM id to the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{` component`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-controls=\"<menu-id>\"`}</inlineCode>{` to the menu target,\nwhere `}<inlineCode parentName=\"li\">{`<menu-id`}</inlineCode>{`> is the DOM id of the menu`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-expanded=\"<value>\"`}</inlineCode>{` to the menu target,\nwhere `}<inlineCode parentName=\"li\">{`<value>`}</inlineCode>{` is the boolean indicating whether the menu is open`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-labelledby=\"<target-id>\"`}</inlineCode>{` to the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{`,\nwhere the `}<inlineCode parentName=\"li\">{`<target-id>`}</inlineCode>{` is the DOM id of the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{` target element`}</li>\n      <li parentName=\"ul\">{`Give unique DOM ids to each button inside a `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode></li>\n    </ul>\n    <p>{`To learn more about menu accessibility, check out `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-actions-active-descendant.html\"\n      }}>{`these`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html\"\n      }}>{`links`}</a>{`.`}</p>\n    <h2>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` component.`}</p>\n    <h3>{`Basic use with action buttons`}</h3>\n    <p>{`Action buttons are typically used to make something happen\nwithout leaving the current page/pill that the user is on.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use w/ action buttons\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Flex justifyContent=\"center\" alignItems=\"center\" style={{\n              height: \"90vh\"\n            }} mdxType=\"Flex\">\n            <Button ref={targetRef} className=\"open-close-button\" id=\"menu1-button\" aria-haspopup=\"true\" aria-controls=\"menu1\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n              Click to open\n            </Button>\n          </Flex>\n          <Menu {...menuState} targetRef={targetRef} placement={select(\"Placement\", placementTypes, \"bottom-start\")} closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu1\" aria-labelledby=\"menu1-button\" mdxType=\"Menu\">\n            <MenuActionButton id=\"mi1\" mdxType=\"MenuActionButton\">User Preview</MenuActionButton>\n            <MenuActionButton id=\"mi2\" mdxType=\"MenuActionButton\">CSV Export User Data</MenuActionButton>\n            <MenuActionButton id=\"mi3\" mdxType=\"MenuActionButton\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi4\" mdxType=\"MenuActionButton\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton disabled id=\"mi32\" mdxType=\"MenuActionButton\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`Basic use with category buttons`}</h3>\n    <p>{`Category buttons are typically navigational in nature and\noften redirect the user to another page/pill on click.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use w/ category buttons\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu2-button\" aria-haspopup=\"true\" aria-controls=\"menu2\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu2\" aria-labelledby=\"menu2-button\" mdxType=\"Menu\">\n            <MenuCategoryButton id=\"mi5\" heading=\"Retention Report\" mdxType=\"MenuCategoryButton\">\n              Identify if users come back over time\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi6\" heading=\"Funnel Report\" mdxType=\"MenuCategoryButton\">\n              Pinpoint where and why users drop off\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi7\" heading=\"Campaign Comparison\" mdxType=\"MenuCategoryButton\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi33\" heading=\"Beta Feature\" disabled mdxType=\"MenuCategoryButton\">\n              This is disabled\n            </MenuCategoryButton>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With action buttons and icons`}</h3>\n    <p>{`Action buttons can also be decorated with icons to visually\nset them apart more easily.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ action buttons + icons\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu3-button\" aria-haspopup=\"true\" aria-controls=\"menu3\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu3\" aria-labelledby=\"menu3-button\" mdxType=\"Menu\">\n            <MenuActionButton id=\"mi8\" iconName=\"eye\" mdxType=\"MenuActionButton\">\n              User Preview\n            </MenuActionButton>\n            <MenuActionButton id=\"mi9\" iconName=\"file-alt\" mdxType=\"MenuActionButton\">\n              CSV Export User Data\n            </MenuActionButton>\n            <MenuActionButton id=\"mi10\" iconName=\"file-alt\" mdxType=\"MenuActionButton\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi11\" iconName={[\"fab\", \"facebook-square\"]} mdxType=\"MenuActionButton\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton id=\"mi34\" iconName={[\"fab\", \"google-plus-square\"]} disabled mdxType=\"MenuActionButton\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With category buttons and icons`}</h3>\n    <p>{`Just like action buttons, category buttons can also\nbe decorated with icons to visually set them apart\nmore easily.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ category buttons + icons\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu4-button\" aria-haspopup=\"true\" aria-controls=\"menu4\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu4\" aria-labelledby=\"menu4-button\" mdxType=\"Menu\">\n            <MenuCategoryButton id=\"mi12\" heading=\"Retention Report\" iconName=\"retention-report\" mdxType=\"MenuCategoryButton\">\n              Identify if users come back over time\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi13\" heading=\"Funnel Report\" iconName=\"funnel-report\" mdxType=\"MenuCategoryButton\">\n              Pinpoint where and why users drop off\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi14\" heading=\"Campaign Comparison\" iconName=\"campaign-comparison\" mdxType=\"MenuCategoryButton\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi34\" heading=\"Beta Feature\" iconName=\"campaign-comparison\" disabled mdxType=\"MenuCategoryButton\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With grouped action buttons and no header`}</h3>\n    <p>{`It may be desirable to group related action buttons\ntogether to make it easier for the user to find what\nthey're looking for via the `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{` component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ grouped action buttons + no header\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu5-button\" aria-haspopup=\"true\" aria-controls=\"menu5\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu5\" aria-labelledby=\"menu5-button\" mdxType=\"Menu\">\n            <MenuGroup mdxType=\"MenuGroup\">\n              <MenuActionButton id=\"mi15\" mdxType=\"MenuActionButton\">Print Chart</MenuActionButton>\n            </MenuGroup>\n            <MenuGroup mdxType=\"MenuGroup\">\n              <MenuActionButton id=\"mi16\" mdxType=\"MenuActionButton\">Download PNG Image</MenuActionButton>\n              <MenuActionButton id=\"mi17\" mdxType=\"MenuActionButton\">Download JPEG Image</MenuActionButton>\n              <MenuActionButton id=\"mi18\" mdxType=\"MenuActionButton\">\n                Download PDF Document\n              </MenuActionButton>\n              <MenuActionButton id=\"mi19\" mdxType=\"MenuActionButton\">\n                Download SVG Vector Image\n              </MenuActionButton>\n              <MenuActionButton id=\"mi20\" mdxType=\"MenuActionButton\">Download CSV</MenuActionButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With grouped action buttons and header`}</h3>\n    <p>{`In addition to grouping buttons together, you may also want\nto denote a specific group by giving it a name. You can do\nso using the `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` prop in `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ grouped action buttons + header\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu6-button\" aria-haspopup=\"true\" aria-controls=\"menu6\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu6\" aria-labelledby=\"menu6-button\" mdxType=\"Menu\">\n            <MenuGroup heading=\"Message One or More Channels\" mdxType=\"MenuGroup\">\n              <MenuActionButton id=\"mi21\" mdxType=\"MenuActionButton\">\n                Multichannel Campaign\n              </MenuActionButton>\n            </MenuGroup>\n            <MenuGroup heading=\"Single Channel With Multivariate Testing\" mdxType=\"MenuGroup\">\n              <MenuActionButton id=\"mi22\" mdxType=\"MenuActionButton\">Email</MenuActionButton>\n              <MenuActionButton id=\"mi23\" mdxType=\"MenuActionButton\">Push Notification</MenuActionButton>\n              <MenuActionButton id=\"mi24\" mdxType=\"MenuActionButton\">In-App Messaging</MenuActionButton>\n              <MenuActionButton id=\"mi25\" mdxType=\"MenuActionButton\">Content Card</MenuActionButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With category buttons and no header`}</h3>\n    <p>{`It may be desirable to group related action buttons\ntogether to make it easier for the user to find what\nthey're looking for via the `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{` component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ grouped category buttons + no header\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu7-button\" aria-haspopup=\"true\" aria-controls=\"menu7\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu7\" aria-labelledby=\"menu7-button\" mdxType=\"Menu\">\n            <MenuGroup mdxType=\"MenuGroup\">\n              <MenuCategoryButton id=\"mi26\" heading=\"Retention Report\" mdxType=\"MenuCategoryButton\">\n                Identify if users come back over time\n              </MenuCategoryButton>\n            </MenuGroup>\n            <MenuGroup mdxType=\"MenuGroup\">\n              <MenuCategoryButton id=\"mi27\" heading=\"Funnel Report\" mdxType=\"MenuCategoryButton\">\n                Pinpoint where and why users drop off\n              </MenuCategoryButton>\n              <MenuCategoryButton id=\"mi28\" heading=\"Campaign Comparison\" mdxType=\"MenuCategoryButton\">\n                Measure the impact of different campaigns\n              </MenuCategoryButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With category buttons and header`}</h3>\n    <p>{`In addition to grouping buttons together, you may also want\nto denote a specific group by giving it a name. You can do\nso using the `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` prop in `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ grouped category buttons + header\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu8-button\" aria-haspopup=\"true\" aria-controls=\"menu8\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu8\" aria-labelledby=\"menu8-button\" mdxType=\"Menu\">\n            <MenuGroup heading=\"Report\" mdxType=\"MenuGroup\">\n              <MenuCategoryButton id=\"mi29\" heading=\"Retention Report\" mdxType=\"MenuCategoryButton\">\n                Identify if users come back over time\n              </MenuCategoryButton>\n            </MenuGroup>\n            <MenuGroup heading=\"Comparison\" mdxType=\"MenuGroup\">\n              <MenuCategoryButton id=\"mi30\" heading=\"Funnel Report\" mdxType=\"MenuCategoryButton\">\n                Pinpoint where and why users drop off\n              </MenuCategoryButton>\n              <MenuCategoryButton id=\"mi31\" heading=\"Campaign Comparison\" mdxType=\"MenuCategoryButton\">\n                Measure the impact of different campaigns\n              </MenuCategoryButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  Menu,\n  MenuActionButton,\n  MenuCategoryButton,\n  MenuGroup,\n} from \"@braze/beacon-labs-menu\";\n`}</code></pre>\n    <h2>{`Properties`}</h2>\n    <h3><inlineCode parentName=\"h3\">{`Menu`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( ReactNode, ReactNode[], ({ activePlacement, targetDimensions, popperDimensions }) => ReactNode )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component, or a render prop that accepts the auto-calculated placement plus the dimensions of the target and the popper (or undefined if not available)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickInside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu should be closed when a user clicks inside the menu; does NOT prevent event handlers from firing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickOutside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu should be closed when a user clicks outside the target or the menu`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`delay`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( `}<inlineCode parentName=\"td\">{`[number OR null, number OR null]`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the amount of time, if any, to delay opening and/or closing the menu by`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`distance`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`8`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from bottom of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fixed`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`set to true if the Popover is not meant to move with the page`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`determines if the component should be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hideTopMargin`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu doesn't have any spacing on top`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be opened`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClose`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be closed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`placement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`,`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bottom`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Popover relative to target`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`portalRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref of Portal inside which Popover will be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed to the parent menu element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM id to be passed to the parent menu element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`skidding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from left of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`styledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`target`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired target component's ID`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`targetRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to pass down to the target object`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`triggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseenter`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`focus`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for menu on behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`untriggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseleave`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`blur`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for menu off behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`1031`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index for the component and its sub-components`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`MenuActionButton`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`iconName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`see `}<inlineCode parentName=\"td\">{`BrazeIcon`}</inlineCode>{` docs for list of allowed icons`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name of spot icon to be rendered, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies the type of button for the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`MenuCategoryButton`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`heading`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`heading to be displayed in the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`iconName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`see `}<inlineCode parentName=\"td\">{`BrazeIcon`}</inlineCode>{` docs for list of allowed icons`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name of spot icon to be rendered, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies the type of button for the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`MenuGroup`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`heading`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`heading to be displayed in the group, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUseWActionButtons = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Flex justifyContent=\"center\" alignItems=\"center\" style={{\n      height: \"90vh\"\n    }}>\n            <Button ref={targetRef} className=\"open-close-button\" id=\"menu1-button\" aria-haspopup=\"true\" aria-controls=\"menu1\" aria-expanded={menuState.isOpen}>\n              Click to open\n            </Button>\n          </Flex>\n          <Menu {...menuState} targetRef={targetRef} placement={select(\"Placement\", placementTypes, \"bottom-start\")} closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu1\" aria-labelledby=\"menu1-button\">\n            <MenuActionButton id=\"mi1\">User Preview</MenuActionButton>\n            <MenuActionButton id=\"mi2\">CSV Export User Data</MenuActionButton>\n            <MenuActionButton id=\"mi3\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi4\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton disabled id=\"mi32\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </React.Fragment>;\n});\nbasicUseWActionButtons.storyName = 'basic use w/ action buttons';\nbasicUseWActionButtons.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Flex justifyContent=\\\"center\\\" alignItems=\\\"center\\\" style={{\\n      height: \\\"90vh\\\"\\n    }}>\\n            <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu1-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu1\\\" aria-expanded={menuState.isOpen}>\\n              Click to open\\n            </Button>\\n          </Flex>\\n          <Menu {...menuState} targetRef={targetRef} placement={select(\\\"Placement\\\", placementTypes, \\\"bottom-start\\\")} closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu1\\\" aria-labelledby=\\\"menu1-button\\\">\\n            <MenuActionButton id=\\\"mi1\\\">User Preview</MenuActionButton>\\n            <MenuActionButton id=\\\"mi2\\\">CSV Export User Data</MenuActionButton>\\n            <MenuActionButton id=\\\"mi3\\\">\\n              CSV Export Email Address\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi4\\\">\\n              Export as Facebook Audience\\n            </MenuActionButton>\\n            <MenuActionButton disabled id=\\\"mi32\\\">\\n              Export as Google+ Audience\\n            </MenuActionButton>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const basicUseWCategoryButtons = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu2-button\" aria-haspopup=\"true\" aria-controls=\"menu2\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu2\" aria-labelledby=\"menu2-button\">\n            <MenuCategoryButton id=\"mi5\" heading=\"Retention Report\">\n              Identify if users come back over time\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi6\" heading=\"Funnel Report\">\n              Pinpoint where and why users drop off\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi7\" heading=\"Campaign Comparison\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi33\" heading=\"Beta Feature\" disabled>\n              This is disabled\n            </MenuCategoryButton>\n          </Menu>\n        </React.Fragment>;\n});\nbasicUseWCategoryButtons.storyName = 'basic use w/ category buttons';\nbasicUseWCategoryButtons.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu2-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu2\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu2\\\" aria-labelledby=\\\"menu2-button\\\">\\n            <MenuCategoryButton id=\\\"mi5\\\" heading=\\\"Retention Report\\\">\\n              Identify if users come back over time\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi6\\\" heading=\\\"Funnel Report\\\">\\n              Pinpoint where and why users drop off\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi7\\\" heading=\\\"Campaign Comparison\\\">\\n              Measure the impact of different campaigns\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi33\\\" heading=\\\"Beta Feature\\\" disabled>\\n              This is disabled\\n            </MenuCategoryButton>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wActionButtonsIcons = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu3-button\" aria-haspopup=\"true\" aria-controls=\"menu3\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu3\" aria-labelledby=\"menu3-button\">\n            <MenuActionButton id=\"mi8\" iconName=\"eye\">\n              User Preview\n            </MenuActionButton>\n            <MenuActionButton id=\"mi9\" iconName=\"file-alt\">\n              CSV Export User Data\n            </MenuActionButton>\n            <MenuActionButton id=\"mi10\" iconName=\"file-alt\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi11\" iconName={[\"fab\", \"facebook-square\"]}>\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton id=\"mi34\" iconName={[\"fab\", \"google-plus-square\"]} disabled>\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </React.Fragment>;\n});\nwActionButtonsIcons.storyName = 'w/ action buttons + icons';\nwActionButtonsIcons.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu3-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu3\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu3\\\" aria-labelledby=\\\"menu3-button\\\">\\n            <MenuActionButton id=\\\"mi8\\\" iconName=\\\"eye\\\">\\n              User Preview\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi9\\\" iconName=\\\"file-alt\\\">\\n              CSV Export User Data\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi10\\\" iconName=\\\"file-alt\\\">\\n              CSV Export Email Address\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi11\\\" iconName={[\\\"fab\\\", \\\"facebook-square\\\"]}>\\n              Export as Facebook Audience\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi34\\\" iconName={[\\\"fab\\\", \\\"google-plus-square\\\"]} disabled>\\n              Export as Google+ Audience\\n            </MenuActionButton>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wCategoryButtonsIcons = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu4-button\" aria-haspopup=\"true\" aria-controls=\"menu4\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu4\" aria-labelledby=\"menu4-button\">\n            <MenuCategoryButton id=\"mi12\" heading=\"Retention Report\" iconName=\"retention-report\">\n              Identify if users come back over time\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi13\" heading=\"Funnel Report\" iconName=\"funnel-report\">\n              Pinpoint where and why users drop off\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi14\" heading=\"Campaign Comparison\" iconName=\"campaign-comparison\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi34\" heading=\"Beta Feature\" iconName=\"campaign-comparison\" disabled>\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n          </Menu>\n        </React.Fragment>;\n});\nwCategoryButtonsIcons.storyName = 'w/ category buttons + icons';\nwCategoryButtonsIcons.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu4-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu4\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu4\\\" aria-labelledby=\\\"menu4-button\\\">\\n            <MenuCategoryButton id=\\\"mi12\\\" heading=\\\"Retention Report\\\" iconName=\\\"retention-report\\\">\\n              Identify if users come back over time\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi13\\\" heading=\\\"Funnel Report\\\" iconName=\\\"funnel-report\\\">\\n              Pinpoint where and why users drop off\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi14\\\" heading=\\\"Campaign Comparison\\\" iconName=\\\"campaign-comparison\\\">\\n              Measure the impact of different campaigns\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi34\\\" heading=\\\"Beta Feature\\\" iconName=\\\"campaign-comparison\\\" disabled>\\n              Measure the impact of different campaigns\\n            </MenuCategoryButton>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wGroupedActionButtonsNoHeader = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu5-button\" aria-haspopup=\"true\" aria-controls=\"menu5\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu5\" aria-labelledby=\"menu5-button\">\n            <MenuGroup>\n              <MenuActionButton id=\"mi15\">Print Chart</MenuActionButton>\n            </MenuGroup>\n            <MenuGroup>\n              <MenuActionButton id=\"mi16\">Download PNG Image</MenuActionButton>\n              <MenuActionButton id=\"mi17\">Download JPEG Image</MenuActionButton>\n              <MenuActionButton id=\"mi18\">\n                Download PDF Document\n              </MenuActionButton>\n              <MenuActionButton id=\"mi19\">\n                Download SVG Vector Image\n              </MenuActionButton>\n              <MenuActionButton id=\"mi20\">Download CSV</MenuActionButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n});\nwGroupedActionButtonsNoHeader.storyName = 'w/ grouped action buttons + no header';\nwGroupedActionButtonsNoHeader.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu5-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu5\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu5\\\" aria-labelledby=\\\"menu5-button\\\">\\n            <MenuGroup>\\n              <MenuActionButton id=\\\"mi15\\\">Print Chart</MenuActionButton>\\n            </MenuGroup>\\n            <MenuGroup>\\n              <MenuActionButton id=\\\"mi16\\\">Download PNG Image</MenuActionButton>\\n              <MenuActionButton id=\\\"mi17\\\">Download JPEG Image</MenuActionButton>\\n              <MenuActionButton id=\\\"mi18\\\">\\n                Download PDF Document\\n              </MenuActionButton>\\n              <MenuActionButton id=\\\"mi19\\\">\\n                Download SVG Vector Image\\n              </MenuActionButton>\\n              <MenuActionButton id=\\\"mi20\\\">Download CSV</MenuActionButton>\\n            </MenuGroup>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wGroupedActionButtonsHeader = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu6-button\" aria-haspopup=\"true\" aria-controls=\"menu6\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu6\" aria-labelledby=\"menu6-button\">\n            <MenuGroup heading=\"Message One or More Channels\">\n              <MenuActionButton id=\"mi21\">\n                Multichannel Campaign\n              </MenuActionButton>\n            </MenuGroup>\n            <MenuGroup heading=\"Single Channel With Multivariate Testing\">\n              <MenuActionButton id=\"mi22\">Email</MenuActionButton>\n              <MenuActionButton id=\"mi23\">Push Notification</MenuActionButton>\n              <MenuActionButton id=\"mi24\">In-App Messaging</MenuActionButton>\n              <MenuActionButton id=\"mi25\">Content Card</MenuActionButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n});\nwGroupedActionButtonsHeader.storyName = 'w/ grouped action buttons + header';\nwGroupedActionButtonsHeader.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu6-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu6\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu6\\\" aria-labelledby=\\\"menu6-button\\\">\\n            <MenuGroup heading=\\\"Message One or More Channels\\\">\\n              <MenuActionButton id=\\\"mi21\\\">\\n                Multichannel Campaign\\n              </MenuActionButton>\\n            </MenuGroup>\\n            <MenuGroup heading=\\\"Single Channel With Multivariate Testing\\\">\\n              <MenuActionButton id=\\\"mi22\\\">Email</MenuActionButton>\\n              <MenuActionButton id=\\\"mi23\\\">Push Notification</MenuActionButton>\\n              <MenuActionButton id=\\\"mi24\\\">In-App Messaging</MenuActionButton>\\n              <MenuActionButton id=\\\"mi25\\\">Content Card</MenuActionButton>\\n            </MenuGroup>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wGroupedCategoryButtonsNoHeader = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu7-button\" aria-haspopup=\"true\" aria-controls=\"menu7\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu7\" aria-labelledby=\"menu7-button\">\n            <MenuGroup>\n              <MenuCategoryButton id=\"mi26\" heading=\"Retention Report\">\n                Identify if users come back over time\n              </MenuCategoryButton>\n            </MenuGroup>\n            <MenuGroup>\n              <MenuCategoryButton id=\"mi27\" heading=\"Funnel Report\">\n                Pinpoint where and why users drop off\n              </MenuCategoryButton>\n              <MenuCategoryButton id=\"mi28\" heading=\"Campaign Comparison\">\n                Measure the impact of different campaigns\n              </MenuCategoryButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n});\nwGroupedCategoryButtonsNoHeader.storyName = 'w/ grouped category buttons + no header';\nwGroupedCategoryButtonsNoHeader.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu7-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu7\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu7\\\" aria-labelledby=\\\"menu7-button\\\">\\n            <MenuGroup>\\n              <MenuCategoryButton id=\\\"mi26\\\" heading=\\\"Retention Report\\\">\\n                Identify if users come back over time\\n              </MenuCategoryButton>\\n            </MenuGroup>\\n            <MenuGroup>\\n              <MenuCategoryButton id=\\\"mi27\\\" heading=\\\"Funnel Report\\\">\\n                Pinpoint where and why users drop off\\n              </MenuCategoryButton>\\n              <MenuCategoryButton id=\\\"mi28\\\" heading=\\\"Campaign Comparison\\\">\\n                Measure the impact of different campaigns\\n              </MenuCategoryButton>\\n            </MenuGroup>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wGroupedCategoryButtonsHeader = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu8-button\" aria-haspopup=\"true\" aria-controls=\"menu8\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu8\" aria-labelledby=\"menu8-button\">\n            <MenuGroup heading=\"Report\">\n              <MenuCategoryButton id=\"mi29\" heading=\"Retention Report\">\n                Identify if users come back over time\n              </MenuCategoryButton>\n            </MenuGroup>\n            <MenuGroup heading=\"Comparison\">\n              <MenuCategoryButton id=\"mi30\" heading=\"Funnel Report\">\n                Pinpoint where and why users drop off\n              </MenuCategoryButton>\n              <MenuCategoryButton id=\"mi31\" heading=\"Campaign Comparison\">\n                Measure the impact of different campaigns\n              </MenuCategoryButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n});\nwGroupedCategoryButtonsHeader.storyName = 'w/ grouped category buttons + header';\nwGroupedCategoryButtonsHeader.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu8-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu8\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu8\\\" aria-labelledby=\\\"menu8-button\\\">\\n            <MenuGroup heading=\\\"Report\\\">\\n              <MenuCategoryButton id=\\\"mi29\\\" heading=\\\"Retention Report\\\">\\n                Identify if users come back over time\\n              </MenuCategoryButton>\\n            </MenuGroup>\\n            <MenuGroup heading=\\\"Comparison\\\">\\n              <MenuCategoryButton id=\\\"mi30\\\" heading=\\\"Funnel Report\\\">\\n                Pinpoint where and why users drop off\\n              </MenuCategoryButton>\\n              <MenuCategoryButton id=\\\"mi31\\\" heading=\\\"Campaign Comparison\\\">\\n                Measure the impact of different campaigns\\n              </MenuCategoryButton>\\n            </MenuGroup>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Overlay/Menu', component: Menu, includeStories: [\"basicUseWActionButtons\",\"basicUseWCategoryButtons\",\"wActionButtonsIcons\",\"wCategoryButtonsIcons\",\"wGroupedActionButtonsNoHeader\",\"wGroupedActionButtonsHeader\",\"wGroupedCategoryButtonsNoHeader\",\"wGroupedCategoryButtonsHeader\"],  };\n\nconst mdxStoryNameToKey = {\"basic use w/ action buttons\":\"basicUseWActionButtons\",\"basic use w/ category buttons\":\"basicUseWCategoryButtons\",\"w/ action buttons + icons\":\"wActionButtonsIcons\",\"w/ category buttons + icons\":\"wCategoryButtonsIcons\",\"w/ grouped action buttons + no header\":\"wGroupedActionButtonsNoHeader\",\"w/ grouped action buttons + header\":\"wGroupedActionButtonsHeader\",\"w/ grouped category buttons + no header\":\"wGroupedCategoryButtonsNoHeader\",\"w/ grouped category buttons + header\":\"wGroupedCategoryButtonsHeader\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAEA;AACA;AADA;AAIA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AAMA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AAMA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAIA;AACA;AADA;AAUA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAMA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AACA;AA7iCA;AA8iCA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAKA;AAxBA;AAyBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AArBA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AAxBA;AAyBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AArBA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAIA;AAvBA;AAwBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AApBA;AAqBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AAtBA;AAuBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AAtBA;AAuBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;;;;A","sourceRoot":""}