{"version":3,"file":"main.b32ee78b0cc2ff7d490b.hot-update.js","sources":["webpack:///../commons/src/components/AlertModal/AlertModal.stories.tsx","webpack:///../commons/src/components/AlertModal/AlertModal.tsx","webpack:///../commons/src/components/AlertModalBody/AlertModalBody.tsx","webpack:///../commons/src/components/AlertModalButton/AlertModalButton.tsx","webpack:///../commons/src/components/AlertModalFooter/AlertModalFooter.tsx","webpack:///../commons/src/components/AlertModalHeading/AlertModalHeading.tsx","webpack:///../commons/src/components/IconCircle/IconCircle.tsx","webpack:///../commons/src/components/IconCircle/StyledIconCircle.ts","webpack:///../commons/src/components/InfoIcon/InfoIcon.stories.mdx","webpack:///../commons/src/components/InfoIcon/InfoIcon.tsx","webpack:///../core/src/components/Button/Button.docs.mdx","webpack:///../core/src/components/Button/Button.stories.tsx","webpack:///../core/src/components/Button/Button.tsx","webpack:///../core/src/components/Checkbox/Checkbox.tsx","webpack:///../core/src/components/EmptyState/EmptyState.stories.mdx","webpack:///../core/src/components/InlineInput/InlineInput.stories.mdx","webpack:///../core/src/components/InputGroup/InputGroup.stories.mdx","webpack:///../core/src/components/Menu/Menu.stories.mdx","webpack:///../core/src/components/NumberInput/NumberInput.stories.mdx","webpack:///../core/src/components/Popper/usePopperEvents/usePopperEvents.ts","webpack:///../core/src/components/ScreenReaderText/ScreenReaderText.stories.mdx","webpack:///../core/src/components/Table/Table.docs.mdx","webpack:///../core/src/components/Table/Table.stories.tsx","webpack:///../core/src/components/TableCell/StyledTableCell.ts","webpack:///../core/src/index.ts","webpack:///../i18n-dev/src/useI18nNamespace.stories.mdx","webpack:///./stories/ContentStrategy.stories.mdx","webpack:///./stories/FAQs.stories.mdx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport { Button } from \\\"@braze/beacon-core\\\";\\n\\nimport { AlertModalHeading } from \\\"../AlertModalHeading\\\";\\nimport { AlertModalButton } from \\\"../AlertModalButton\\\";\\nimport { AlertModalBody } from \\\"../AlertModalBody\\\";\\nimport { AlertModalFooter } from \\\"../AlertModalFooter\\\";\\n\\nimport page from \\\"./AlertModal.docs.mdx\\\";\\n\\nimport { AlertModal, AlertModalProps, useAlertModal } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Commons/Alerts/AlertModal\\\",\\n  component: AlertModal,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = (\\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\\n) => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={toggle}>Click to open modal</Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              {args.modalButtonText}\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nBasicUse.argTypes = {\\n  modalHeading: {\\n    label: \\\"Modal alert heading\\\",\\n  },\\n  modalButtonText: {\\n    label: \\\"Modal button text\\\",\\n  },\\n};\\n\\nBasicUse.args = {\\n  intent: \\\"info\\\",\\n  size: \\\"md\\\",\\n  modalHeading: \\\"Some heading\\\",\\n  modalButtonText: \\\"Click me\\\",\\n};\\n\\nexport const WithHook = (\\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\\n) => {\\n  const [isOpen, toggle] = useAlertModal();\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={toggle}>Click to open modal</Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              {args.modalButtonText}\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nWithHook.storyName = \\\"with hook\\\";\\n\\nWithHook.argTypes = {\\n  modalHeading: {\\n    label: \\\"Modal alert heading\\\",\\n  },\\n  modalButtonText: {\\n    label: \\\"Modal button text\\\",\\n  },\\n};\\n\\nWithHook.args = {\\n  intent: \\\"info\\\",\\n  modalHeading: \\\"Some heading\\\",\\n  modalButtonText: \\\"Click me\\\",\\n};\\n\\nexport const MultipleActionsUse = () => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"warning\\\" onClick={toggle}>\\n        Click to open modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"warning\\\">\\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalButton\\n            variant=\\\"quaternary\\\"\\n            onClick={action(\\\"Modal quartenary button click\\\")}\\n          >\\n            Nutella\\n          </AlertModalButton>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton\\n              variant=\\\"secondary\\\"\\n              onClick={action(\\\"Modal secondary button click\\\")}\\n            >\\n              Peanut Butter\\n            </AlertModalButton>\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Jelly\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nMultipleActionsUse.storyName = \\\"multiple actions use\\\";\\n\\nexport const DifferentSizes = (args: AlertModalProps) => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"success\\\" onClick={toggle}>\\n        Click to open modal\\n      </Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle} intent=\\\"success\\\">\\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalButton\\n            variant=\\\"quaternary\\\"\\n            onClick={action(\\\"Modal quaternary button click\\\")}\\n          >\\n            Nutella\\n          </AlertModalButton>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton\\n              variant=\\\"secondary\\\"\\n              onClick={action(\\\"Modal secondary button click\\\")}\\n            >\\n              Peanut Butter\\n            </AlertModalButton>\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Jelly\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nDifferentSizes.storyName = \\\"different sizes\\\";\\n\\nDifferentSizes.args = {\\n  size: \\\"lg\\\",\\n};\\n\\nexport const DangerUse = () => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"danger\\\" onClick={toggle}>\\n        Click to open danger modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"danger\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nDangerUse.storyName = \\\"danger use\\\";\\n\\nexport const SuccessUse = () => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"success\\\" onClick={toggle}>\\n        Click to open success modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"success\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nSuccessUse.storyName = \\\"success use\\\";\\n\\nexport const WarningUse = () => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"warning\\\" onClick={toggle}>\\n        Click to open warning modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"warning\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n};\\n\\nWarningUse.storyName = \\\"warning use\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":23},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":24,\"line\":23},\"endBody\":{\"col\":1,\"line\":49}},\"WithHook\":{\"startLoc\":{\"col\":24,\"line\":69},\"endLoc\":{\"col\":1,\"line\":94},\"startBody\":{\"col\":24,\"line\":69},\"endBody\":{\"col\":1,\"line\":94}},\"MultipleActionsUse\":{\"startLoc\":{\"col\":34,\"line\":113},\"endLoc\":{\"col\":1,\"line\":151},\"startBody\":{\"col\":34,\"line\":113},\"endBody\":{\"col\":1,\"line\":151}},\"DifferentSizes\":{\"startLoc\":{\"col\":30,\"line\":155},\"endLoc\":{\"col\":1,\"line\":193},\"startBody\":{\"col\":30,\"line\":155},\"endBody\":{\"col\":1,\"line\":193}},\"DangerUse\":{\"startLoc\":{\"col\":25,\"line\":201},\"endLoc\":{\"col\":1,\"line\":227},\"startBody\":{\"col\":25,\"line\":201},\"endBody\":{\"col\":1,\"line\":227}},\"SuccessUse\":{\"startLoc\":{\"col\":26,\"line\":231},\"endLoc\":{\"col\":1,\"line\":257},\"startBody\":{\"col\":26,\"line\":231},\"endBody\":{\"col\":1,\"line\":257}},\"WarningUse\":{\"startLoc\":{\"col\":26,\"line\":261},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":26,\"line\":261},\"endBody\":{\"col\":1,\"line\":287}}};\n    \nimport React from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Button } from \"@braze/beacon-core\";\n\nimport { AlertModalHeading } from \"../AlertModalHeading\";\nimport { AlertModalButton } from \"../AlertModalButton\";\nimport { AlertModalBody } from \"../AlertModalBody\";\nimport { AlertModalFooter } from \"../AlertModalFooter\";\n\nimport page from \"./AlertModal.docs.mdx\";\n\nimport { AlertModal, AlertModalProps, useAlertModal } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Commons/Alerts/AlertModal\",\n  component: AlertModal,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = (\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\n) => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button onClick={toggle}>Click to open modal</Button>\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              {args.modalButtonText}\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nBasicUse.argTypes = {\n  modalHeading: {\n    label: \"Modal alert heading\",\n  },\n  modalButtonText: {\n    label: \"Modal button text\",\n  },\n};\n\nBasicUse.args = {\n  intent: \"info\",\n  size: \"md\",\n  modalHeading: \"Some heading\",\n  modalButtonText: \"Click me\",\n};\n\nexport const WithHook = (\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\n) => {\n  const [isOpen, toggle] = useAlertModal();\n\n  return (\n    <React.Fragment>\n      <Button onClick={toggle}>Click to open modal</Button>\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              {args.modalButtonText}\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nWithHook.storyName = \"with hook\";\n\nWithHook.argTypes = {\n  modalHeading: {\n    label: \"Modal alert heading\",\n  },\n  modalButtonText: {\n    label: \"Modal button text\",\n  },\n};\n\nWithHook.args = {\n  intent: \"info\",\n  modalHeading: \"Some heading\",\n  modalButtonText: \"Click me\",\n};\n\nexport const MultipleActionsUse = () => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"warning\" onClick={toggle}>\n        Click to open modal\n      </Button>\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\"warning\">\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalButton\n            variant=\"quaternary\"\n            onClick={action(\"Modal quartenary button click\")}\n          >\n            Nutella\n          </AlertModalButton>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton\n              variant=\"secondary\"\n              onClick={action(\"Modal secondary button click\")}\n            >\n              Peanut Butter\n            </AlertModalButton>\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Jelly\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nMultipleActionsUse.storyName = \"multiple actions use\";\n\nexport const DifferentSizes = (args: AlertModalProps) => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"success\" onClick={toggle}>\n        Click to open modal\n      </Button>\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle} intent=\"success\">\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalButton\n            variant=\"quaternary\"\n            onClick={action(\"Modal quaternary button click\")}\n          >\n            Nutella\n          </AlertModalButton>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton\n              variant=\"secondary\"\n              onClick={action(\"Modal secondary button click\")}\n            >\n              Peanut Butter\n            </AlertModalButton>\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Jelly\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nDifferentSizes.storyName = \"different sizes\";\n\nDifferentSizes.args = {\n  size: \"lg\",\n};\n\nexport const DangerUse = () => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"danger\" onClick={toggle}>\n        Click to open danger modal\n      </Button>\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\"danger\">\n        <AlertModalHeading>Some heading</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Click me\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nDangerUse.storyName = \"danger use\";\n\nexport const SuccessUse = () => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"success\" onClick={toggle}>\n        Click to open success modal\n      </Button>\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\"success\">\n        <AlertModalHeading>Some heading</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Click me\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};;\n\nSuccessUse.storyName = \"success use\";\n\nexport const WarningUse = () => {\n  const [isOpen, setState] = React.useState(false);\n  const toggle = () => setState(!isOpen);\n\n  return (\n    <React.Fragment>\n      <Button intent=\"warning\" onClick={toggle}>\n        Click to open warning modal\n      </Button>\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\"warning\">\n        <AlertModalHeading>Some heading</AlertModalHeading>\n        <AlertModalBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam.\n        </AlertModalBody>\n        <AlertModalFooter>\n          <AlertModalFooter aligner side=\"right\">\n            <AlertModalButton onClick={action(\"Modal button click\")}>\n              Click me\n            </AlertModalButton>\n          </AlertModalFooter>\n        </AlertModalFooter>\n      </AlertModal>\n    </React.Fragment>\n  );\n};\n\nWarningUse.storyName = \"warning use\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(\\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\\n) => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={toggle}>Click to open modal</Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              {args.modalButtonText}\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...BasicUse.parameters };\nWithHook.parameters = { storySource: { source: \"(\\n  args: AlertModalProps & { modalHeading: string; modalButtonText: string }\\n) => {\\n  const [isOpen, toggle] = useAlertModal();\\n\\n  return (\\n    <React.Fragment>\\n      <Button onClick={toggle}>Click to open modal</Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle}>\\n        <AlertModalHeading>{args.modalHeading}</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              {args.modalButtonText}\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...WithHook.parameters };\nMultipleActionsUse.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"warning\\\" onClick={toggle}>\\n        Click to open modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"warning\\\">\\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalButton\\n            variant=\\\"quaternary\\\"\\n            onClick={action(\\\"Modal quartenary button click\\\")}\\n          >\\n            Nutella\\n          </AlertModalButton>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton\\n              variant=\\\"secondary\\\"\\n              onClick={action(\\\"Modal secondary button click\\\")}\\n            >\\n              Peanut Butter\\n            </AlertModalButton>\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Jelly\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...MultipleActionsUse.parameters };\nDifferentSizes.parameters = { storySource: { source: \"(args: AlertModalProps) => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"success\\\" onClick={toggle}>\\n        Click to open modal\\n      </Button>\\n      <AlertModal {...args} isOpen={isOpen} toggle={toggle} intent=\\\"success\\\">\\n        <AlertModalHeading>Crunchy Toast</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalButton\\n            variant=\\\"quaternary\\\"\\n            onClick={action(\\\"Modal quaternary button click\\\")}\\n          >\\n            Nutella\\n          </AlertModalButton>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton\\n              variant=\\\"secondary\\\"\\n              onClick={action(\\\"Modal secondary button click\\\")}\\n            >\\n              Peanut Butter\\n            </AlertModalButton>\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Jelly\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...DifferentSizes.parameters };\nDangerUse.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"danger\\\" onClick={toggle}>\\n        Click to open danger modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"danger\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...DangerUse.parameters };\nSuccessUse.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"success\\\" onClick={toggle}>\\n        Click to open success modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"success\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...SuccessUse.parameters };\nWarningUse.parameters = { storySource: { source: \"() => {\\n  const [isOpen, setState] = React.useState(false);\\n  const toggle = () => setState(!isOpen);\\n\\n  return (\\n    <React.Fragment>\\n      <Button intent=\\\"warning\\\" onClick={toggle}>\\n        Click to open warning modal\\n      </Button>\\n      <AlertModal isOpen={isOpen} toggle={toggle} intent=\\\"warning\\\">\\n        <AlertModalHeading>Some heading</AlertModalHeading>\\n        <AlertModalBody>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam.\\n        </AlertModalBody>\\n        <AlertModalFooter>\\n          <AlertModalFooter aligner side=\\\"right\\\">\\n            <AlertModalButton onClick={action(\\\"Modal button click\\\")}>\\n              Click me\\n            </AlertModalButton>\\n          </AlertModalFooter>\\n        </AlertModalFooter>\\n      </AlertModal>\\n    </React.Fragment>\\n  );\\n}\" }, ...WarningUse.parameters };","import React, { ReactElement } from \"react\";\nimport classNames from \"classnames\";\nimport { Modal } from \"@braze/beacon-core\";\n\nimport { AlertModalIntentContext } from \"../AlertModalIntentContext\";\n\nimport { AlertModalProps } from \"./types\";\n\nexport const AlertModal = ({\n  children,\n  className,\n  intent,\n  size = \"md\",\n  ...props\n}: AlertModalProps): ReactElement => (\n  <Modal\n    {...props}\n    className={classNames([\"bcl-alert-modal\", className])}\n    size={size}\n  >\n    <AlertModalIntentContext.Provider value={intent}>\n      {children}\n    </AlertModalIntentContext.Provider>\n  </Modal>\n);\n\nAlertModal.displayName = \"AlertModal\";\n","import React from \"react\";\nimport { ModalBody } from \"@braze/beacon-core\";\n\nimport { AlertModalBodyProps } from \"./types\";\n\nexport const AlertModalBody = (\n  props: AlertModalBodyProps\n): React.ReactElement => <ModalBody {...props} />;\n\nAlertModalBody.displayName = \"AlertModalBody\";\n","import React, { useContext, ReactElement } from \"react\";\nimport { Button } from \"@braze/beacon-core\";\n\nimport { AlertModalIntentContext } from \"../AlertModalIntentContext\";\n\nimport { AlertModalButtonProps } from \"./types\";\n\nexport const AlertModalButton = (\n  props: AlertModalButtonProps\n): ReactElement => {\n  const intent = useContext(AlertModalIntentContext);\n\n  return <Button intent={intent} {...props} />;\n};\n\nAlertModalButton.displayName = \"AlertModalButton\";\n","import React from \"react\";\nimport { ModalFooter } from \"@braze/beacon-core\";\n\nimport { AlertModalFooterProps } from \"./types\";\n\nexport const AlertModalFooter = (\n  props: AlertModalFooterProps\n): React.ReactElement => <ModalFooter {...props} />;\n\nAlertModalFooter.displayName = \"AlertModalFooter\";\n","/**\n * @fileoverview a component that handles the heading UI for an alert modal\n */\nimport React, { useContext, ReactElement } from \"react\";\nimport { Box, Flex, ModalHeading } from \"@braze/beacon-core\";\n\nimport { IconCircle } from \"../IconCircle\";\nimport { AlertModalIntentContext } from \"../AlertModalIntentContext\";\n\nimport { AlertModalHeadingProps } from \"./types\";\n\nexport const AlertModalHeading = ({\n  children,\n  ...props\n}: AlertModalHeadingProps): ReactElement => {\n  const intent = useContext(AlertModalIntentContext);\n\n  return (\n    <ModalHeading {...props}>\n      <Flex inline>\n        <IconCircle intent={intent} />\n        <Box boxMargin={{ left: \"lg\" }}>{children}</Box>\n      </Flex>\n    </ModalHeading>\n  );\n};\n\nAlertModalHeading.displayName = \"AlertModalHeading\";\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Icon, IconProps } from \"@braze/beacon-core\";\n\nimport { IconCircleProps } from \"./types\";\nimport { StyledIconCircle } from \"./StyledIconCircle\";\n\nconst getIconByIntent = (\n  intent: IconCircleProps[\"intent\"]\n): IconProps[\"name\"] => {\n  switch (intent) {\n    case \"danger\":\n      return \"times\";\n    case \"success\":\n      return \"check\";\n    case \"warning\":\n      return \"exclamation\";\n    case \"info\":\n    default:\n      return \"info\";\n  }\n};\n\nexport const IconCircle = ({\n  className,\n  intent = \"info\",\n  ...props\n}: IconCircleProps): React.ReactElement | null => (\n  <StyledIconCircle\n    {...props}\n    className={classNames([\"bcl-icon-circle\", className])}\n    intent={intent}\n  >\n    <Icon size=\"1x\" name={getIconByIntent(intent)} />\n  </StyledIconCircle>\n);\n\nIconCircle.displayName = \"IconCircle\";\n","import styled from \"styled-components\";\nimport { intentColorSelector } from \"@braze/beacon-styling\";\nimport { StyledIcon } from \"@braze/beacon-core\";\n\nimport { StyledIconCircleProps } from \"./types\";\n\nexport const StyledIconCircle = styled.div<StyledIconCircleProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background: ${(props) => intentColorSelector(props, props.intent, 100)};\n  min-width: 28px;\n  min-height: 28px;\n  max-width: 28px;\n  max-height: 28px;\n  border-radius: 50%;\n\n  ${StyledIcon} {\n    color: ${(props) => intentColorSelector(props, props.intent, 500)};\n    font-size: 1rem;\n  }\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Box, UncontrolledTooltip } from \"@braze/beacon-core\";\nimport { InfoIcon } from \"./InfoIcon\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Commons/Icons/InfoIcon\" component={InfoIcon} mdxType=\"Meta\" />\n    <h1>{`InfoIcon`}</h1>\n    <p>{`A common component that handles the different info icon use\ncases. Note that info icon should generally be used inside a\n`}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component with `}<inlineCode parentName=\"p\">{`inline`}</inlineCode>{` set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`boxPadding`}</inlineCode>{`\nprops defined for `}<inlineCode parentName=\"p\">{`horizontal`}</inlineCode>{` padding, typically with value\n`}<inlineCode parentName=\"p\">{`sm`}</inlineCode>{`.`}</p>\n    <h2>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`InfoIcon`}</inlineCode>{` component.`}</p>\n    <h3>{`Regular Use`}</h3>\n    <p>{`The basic, default variant for the `}<inlineCode parentName=\"p\">{`InfoIcon`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Regular Use\" mdxType=\"Story\">\n    <Box inline boxPadding={{\n          horizontal: \"sm\"\n        }} mdxType=\"Box\">\n      <InfoIcon mdxType=\"InfoIcon\" />\n    </Box>\n  </Story>\n    </Canvas>\n    <h3>{`Muted Use`}</h3>\n    <p>{`A muted variant for the `}<inlineCode parentName=\"p\">{`InfoIcon`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Muted Use\" mdxType=\"Story\">\n    <Box inline boxPadding={{\n          horizontal: \"sm\"\n        }} mdxType=\"Box\">\n      <InfoIcon variant=\"muted\" mdxType=\"InfoIcon\" />\n    </Box>\n  </Story>\n    </Canvas>\n    <h3>{`Alt Text Use`}</h3>\n    <p>{`The aria label can be set by the `}<inlineCode parentName=\"p\">{`altText`}</inlineCode>{` prop. It is defaulted to\n`}<inlineCode parentName=\"p\">{`Information`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Alt Text Use\" mdxType=\"Story\">\n    <Box inline boxPadding={{\n          horizontal: \"sm\"\n        }} mdxType=\"Box\">\n      <InfoIcon altText=\"Hover for Info!!\" mdxType=\"InfoIcon\" />\n    </Box>\n  </Story>\n    </Canvas>\n    <h3>{`Use with Tooltip`}</h3>\n    <p><inlineCode parentName=\"p\">{`InfoIcon`}</inlineCode>{` can be used with components that require a ref, like an `}<inlineCode parentName=\"p\">{`UncontrolledTooltip`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Use with Tooltip\" mdxType=\"Story\">\n    <Box inline boxPadding={{\n          horizontal: \"sm\"\n        }} mdxType=\"Box\">\n      <UncontrolledTooltip label=\"Hover for Info!!\" mdxType=\"UncontrolledTooltip\">\n        <InfoIcon altText=\"Hover for Info!!\" mdxType=\"InfoIcon\" />\n      </UncontrolledTooltip>\n    </Box>\n  </Story>\n    </Canvas>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { InfoIcon } from \"@braze/beacon-commons\";\n`}</code></pre>\n    <h2>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(\"regular\", \"muted\")`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"regular\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates which variant to use`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`altText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"Information\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`alt text for the info icon`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id for the icon`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const regularUse = () => (\n          <Box inline boxPadding={{\n  horizontal: \"sm\"\n}}>\n      <InfoIcon />\n    </Box>\n        );\nregularUse.storyName = 'Regular Use';\nregularUse.parameters = { storySource: { source: '<Box inline boxPadding={{\\n  horizontal: \\\"sm\\\"\\n}}>\\n      <InfoIcon />\\n    </Box>' } };\n\nexport const mutedUse = () => (\n          <Box inline boxPadding={{\n  horizontal: \"sm\"\n}}>\n      <InfoIcon variant=\"muted\" />\n    </Box>\n        );\nmutedUse.storyName = 'Muted Use';\nmutedUse.parameters = { storySource: { source: '<Box inline boxPadding={{\\n  horizontal: \\\"sm\\\"\\n}}>\\n      <InfoIcon variant=\\\"muted\\\" />\\n    </Box>' } };\n\nexport const altTextUse = () => (\n          <Box inline boxPadding={{\n  horizontal: \"sm\"\n}}>\n      <InfoIcon altText=\"Hover for Info!!\" />\n    </Box>\n        );\naltTextUse.storyName = 'Alt Text Use';\naltTextUse.parameters = { storySource: { source: '<Box inline boxPadding={{\\n  horizontal: \\\"sm\\\"\\n}}>\\n      <InfoIcon altText=\\\"Hover for Info!!\\\" />\\n    </Box>' } };\n\nexport const useWithTooltip = () => (\n          <Box inline boxPadding={{\n  horizontal: \"sm\"\n}}>\n      <UncontrolledTooltip label=\"Hover for Info!!\">\n        <InfoIcon altText=\"Hover for Info!!\" />\n      </UncontrolledTooltip>\n    </Box>\n        );\nuseWithTooltip.storyName = 'Use with Tooltip';\nuseWithTooltip.parameters = { storySource: { source: '<Box inline boxPadding={{\\n  horizontal: \\\"sm\\\"\\n}}>\\n      <UncontrolledTooltip label=\\\"Hover for Info!!\\\">\\n        <InfoIcon altText=\\\"Hover for Info!!\\\" />\\n      </UncontrolledTooltip>\\n    </Box>' } };\n\nconst componentMeta = { title: 'Commons/Icons/InfoIcon', component: InfoIcon, includeStories: [\"regularUse\",\"mutedUse\",\"altTextUse\",\"useWithTooltip\"],  };\n\nconst mdxStoryNameToKey = {\"Regular Use\":\"regularUse\",\"Muted Use\":\"mutedUse\",\"Alt Text Use\":\"altTextUse\",\"Use with Tooltip\":\"useWithTooltip\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Icon } from \"@braze/beacon-core\";\nimport { getIntentColor, getColor } from \"@braze/beacon-styling\";\n\nimport { InfoIconProps } from \"./types\";\n\nexport const InfoIcon = React.forwardRef(\n  (\n    {\n      className,\n      variant = \"regular\",\n      altText = \"Information\",\n      ...props\n    }: InfoIconProps,\n    ref: React.RefObject<HTMLSpanElement>\n  ): React.ReactElement => (\n    <Icon\n      {...props}\n      ref={ref}\n      className={classNames(\"bclcom-info-icon\", className)}\n      aria-label={altText}\n      name=\"info-circle\"\n      color={\n        variant === \"regular\"\n          ? getIntentColor(\"primary\", 500)\n          : getColor(\"gray\", 300)\n      }\n    />\n  )\n);\n\nInfoIcon.displayName = \"InfoIcon\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\nimport {\n  BannerAlert,\n  BannerAlertBody,\n  BannerAlertDescription,\n  BannerAlertDescriptionText,\n} from \"@braze/beacon-core\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"button\"\n    }}>{`Button`}</h1>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` allows the user to make things happen.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`Try clicking! You can also show icons with text by passing it the\nicon as a child.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Go to the canvas tab to interact with the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`muted`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` props!`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"primary-variant\"\n    }}>{`Primary variant`}</h3>\n    <p>{`The most typical use case of the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`\nvariant indicates that the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` has highest relative importance\nand/or impact relative to other `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` variants.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: try clicking into the box below and tabbing through the\n`}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`s to see their focus state!`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--primary-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"secondary-variant\"\n    }}>{`Secondary variant`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`secondary`}</inlineCode>{` variant usually indicates a contrast to the `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`\nbut is not the intended focus of the user's attention. A common use\ncase is in `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` dialogs where there's a `}<inlineCode parentName=\"p\">{`Keep editing`}</inlineCode>{` action as\na contrast to the primary, which might be `}<inlineCode parentName=\"p\">{`Save and close`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--secondary-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"tertiary-variant\"\n    }}>{`Tertiary variant`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{` variant is the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` that is meant to draw\nthe least attention relative to other button variants. A common\nuse case often involves effects that may be destructive.`}</p>\n    <p>{`For example, in `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` dialogs where there's a `}<inlineCode parentName=\"p\">{`Save and close`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` as the `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`, and a `}<inlineCode parentName=\"p\">{`Keep going`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` as the secondary,\na `}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` may say `}<inlineCode parentName=\"p\">{`Don't save and close`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: The `}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{` variant is being considered for deprecation\nand may be replaced by the `}<inlineCode parentName=\"p\">{`quaternary`}</inlineCode>{` variant (below) in the near\nfuture. If you have use cases that require ongoing support for the\n`}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{` variant, please inform the DASHI team at your earliest\nconvenience.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--tertiary-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"quaternary-variant\"\n    }}>{`Quaternary variant`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`quaternary`}</inlineCode>{` variant is the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` that is meant to\nbehave more like a link than a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` and has a much\nsmaller profile. A common use case often involves including\nit among text or with actions that may be destructive.`}</p>\n    <p>{`For example, in `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` dialogs where there's a `}<inlineCode parentName=\"p\">{`Save and close`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` as the `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`, and a `}<inlineCode parentName=\"p\">{`Keep going`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` as the\n`}<inlineCode parentName=\"p\">{`secondary`}</inlineCode>{`, a `}<inlineCode parentName=\"p\">{`quaternary`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` may say `}<inlineCode parentName=\"p\">{`Don't save and close`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--quaternary-variant\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"different-sizes\"\n    }}>{`Different sizes`}</h3>\n    <p>{`Depending on the layout of your application, you may need to use\ndifferently sized `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` components. The following illustrate\nthe available sizing options.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: go to the `}<inlineCode parentName=\"p\">{`canvas`}</inlineCode>{` tab to change how the different sizes\nappear in different prop configurations.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--different-sizes\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled-use\"\n    }}>{`Disabled use`}</h3>\n    <BannerAlert isOpen intent=\"warning\" mdxType=\"BannerAlert\">\n  <BannerAlertBody mdxType=\"BannerAlertBody\">\n    <BannerAlertDescription mdxType=\"BannerAlertDescription\">\n      <BannerAlertDescriptionText mdxType=\"BannerAlertDescriptionText\">\n        When using a <code>ref</code> with a <code>Button</code>, it will attach to the\n        button, unless it is disabled. Disabled buttons cannot be used to trigger tooltips or\n        annotations. To work around this, when the button is disabled, the entire thing is wrapped in\n        a <code>div</code> element, and the ref is attached to this instead. If the ref is being used\n        to trigger the button action, or any other button-specific interaction, it is important that\n        the button cannot be disabled, or that the code referencing the ref prevent attempting to\n        interact with the button when it is disabled.\n      </BannerAlertDescriptionText>\n    </BannerAlertDescription>\n  </BannerAlertBody>\n    </BannerAlert>\n    <p>{`If you need to prevent the user from being able to take any\naction (e.g. because they need to fill out all the required fields\nin a form before submitting), you can disable the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` entirely\nusing the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop.`}</p>\n    <p>{`When disabled, the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` will NOT call the `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` function upon\nuser click.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--disabled-use\" mdxType=\"Story\" />\n    </Canvas>\n    <p>{`Using tooltips or annotations on disabled buttons is directly supported as well`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--disabled-with-tooltip\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"loading-state-w-success\"\n    }}>{`Loading state (w/ success)`}</h3>\n    <p>{`Clicking a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` may sometimes trigger an async action that can take\nsome time to complete. In such cases, you can set the `}<inlineCode parentName=\"p\">{`loadingState`}</inlineCode>{` prop\nto `}<inlineCode parentName=\"p\">{`loading`}</inlineCode>{` to indicate that the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` is currently loading. Note that\nthe button will automatically be disabled when `}<inlineCode parentName=\"p\">{`loadingState`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`loading`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--loading-state-w-success\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"loading-state-w-error\"\n    }}>{`Loading state (w/ error)`}</h3>\n    <p>{`Occasionally, the async action created by the button may result in an\nerror. In such cases, you can set the `}<inlineCode parentName=\"p\">{`loadingState`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` to\ndenote the failure.`}</p>\n    <p>{`By default, an error state will NOT be reset automatically to the\ndefault button state. If you want to modify this behavior, you can pass\nan `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` object with `}<inlineCode parentName=\"p\">{`resetOnError: true`}</inlineCode>{` as the second argument\nof the `}<inlineCode parentName=\"p\">{`useLoadingButton`}</inlineCode>{` hook.`}</p>\n    <p>{`To get out of the error state, a second element of the `}<inlineCode parentName=\"p\">{`useLoadingButton`}</inlineCode>{`\nreturn is an `}<inlineCode parentName=\"p\">{`onReset`}</inlineCode>{` callback that can be called to imperatively reset\nstate.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: It's recommended that you supplement this with information on\nhow to resolve the error, so that the user can remedy the issue.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-primitives-button--loading-state-w-error\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Button } from \"@braze/beacon-core\";\nimport { useLoadingButton } from \"@braze/beacon-hooks\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"button-1\"\n    }}><inlineCode parentName=\"h3\">{`Button`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the button should be visually and functionally disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`getAriaLabel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(loadingState: ButtonLoadingState OR undefined) => string OR undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`*`}{`see below`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function to get aria label for different loading states; should typically only return something for 'error' and 'success' states`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`intent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneof( `}<inlineCode parentName=\"td\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`info`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`succcess`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`warning`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"info\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates to the user the the possible outcome of clicking the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`loadingMessage`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`message to display in the button alongside spinner while loading`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`loadingState`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf(`}<inlineCode parentName=\"td\">{`idle`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`loading`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`success`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`error`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the button is currently in a pending, active, or recently completed loading state`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`minWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimum width the button should take`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLButtonElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to access DOM instance of `}<inlineCode parentName=\"td\">{`Button`}</inlineCode>{` element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`full`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"lg\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size of the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies the type of button for the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`variant`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`primary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`secondary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`tertiary`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`quaternary`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"primary\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`visually indicate to the user the relative importance/impact of the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`*`}{`: by default, the aria-label of `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` is set to \"Button click success\" or \"Button click error\"\n(localized via the `}<inlineCode parentName=\"p\">{`@braze/beacon-translations`}</inlineCode>{` package) for \"success\" and \"error\" loading states, resp.`}</p>\n    <h3 {...{\n      \"id\": \"useloadingbutton\"\n    }}><inlineCode parentName=\"h3\">{`useLoadingButton`}</inlineCode></h3>\n    <p>{`This hook is used to handle loading state management for a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: A separate `}<inlineCode parentName=\"p\">{`useLoadingButton`}</inlineCode>{` hook call should be used for each button.`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`status`}</inlineCode>{`: required; must be one of `}<inlineCode parentName=\"li\">{`idle`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`loading`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`success`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`error`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options`}</inlineCode>{`: optional; must be an object that can have any combination of the following key:value pairs:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ref`}</inlineCode>{`: if you want to pass your own `}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{` into the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{`, pass it here instead of into the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` directly`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`timeout`}</inlineCode>{`: miliseconds after which the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` state will reset to `}<inlineCode parentName=\"li\">{`idle`}</inlineCode>{`; default is `}<inlineCode parentName=\"li\">{`3000`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resetOnError`}</inlineCode>{`: indicates that the loading state of the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` should be reset to `}<inlineCode parentName=\"li\">{`idle`}</inlineCode>{` after `}<inlineCode parentName=\"li\">{`timeout`}</inlineCode>{`; default: `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Returns an array with two elements:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Props to be passed directly into the button, including the following (see `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` properties for details):`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`loadingState`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minWidth`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ref`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`A reset callback that resets the hook's loading state to `}<inlineCode parentName=\"li\">{`idle`}</inlineCode></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useEffect, useReducer, useState } from \\\"react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport { ButtonLoadingState, useLoadingButton } from \\\"@braze/beacon-hooks\\\";\\n\\nimport { Annotation } from \\\"../Annotation\\\";\\nimport { Box } from \\\"../Box\\\";\\nimport { Flex } from \\\"../Flex\\\";\\nimport { Icon, IconComponentName } from \\\"../Icon\\\";\\nimport { UncontrolledTooltip } from \\\"../UncontrolledTooltip\\\";\\n\\nimport page from \\\"./Button.docs.mdx\\\";\\n\\nimport { Button, ButtonProps } from \\\".\\\";\\n\\n\\nexport default {\\n  title: \\\"Core/Primitives/Button\\\",\\n  component: Button,\\n  parameters: {\\n    docs: { page },\\n  },\\n  argTypes: {\\n    disabled: {\\n      control: \\\"boolean\\\",\\n    },\\n  },\\n};\\n\\nexport const BasicUse = (\\n  args: ButtonProps & { icon: IconComponentName }\\n): React.ReactElement => {\\n  const [clicks, increment] = useReducer((clicks) => clicks + 1, 0);\\n\\n  return (\\n    <Flex direction=\\\"column\\\" className=\\\"buttons\\\">\\n      <Flex justifyContent=\\\"space-around\\\">\\n        <Button {...args} onClick={() => increment()} />\\n        <Button {...args} onClick={() => increment()}>\\n          <Icon name={args.icon} />\\n          {args.children}\\n        </Button>\\n      </Flex>\\n      <div id=\\\"clicks\\\">Clicked {clicks} times</div>\\n    </Flex>\\n  );\\n};\\n\\nBasicUse.args = {\\n  children: \\\"Label\\\",\\n  icon: \\\"calendar-alt\\\",\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const PrimaryVariant = (): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"primary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"primary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"primary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"primary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"primary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nPrimaryVariant.storyName = \\\"primary variant\\\";\\n\\nexport const SecondaryVariant = (): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"secondary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"secondary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"secondary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"secondary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"secondary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nSecondaryVariant.storyName = \\\"secondary variant\\\";\\n\\nexport const TertiaryVariant = (): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"tertiary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"tertiary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"tertiary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"tertiary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"tertiary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nTertiaryVariant.storyName = \\\"tertiary variant\\\";\\n\\nexport const QuaternaryVariant = (): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"quaternary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"quaternary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"quaternary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"quaternary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"quaternary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nQuaternaryVariant.storyName = \\\"quaternary variant\\\";\\n\\nexport const DifferentSizes = (args: ButtonProps): React.ReactElement => (\\n  <Flex className=\\\"buttons\\\" direction=\\\"column\\\">\\n    <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n      <Button {...args} onClick={action(\\\"lg button click\\\")} size=\\\"lg\\\">\\n        Large\\n      </Button>\\n    </Box>\\n    <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n      <Button {...args} onClick={action(\\\"sm button click\\\")} size=\\\"sm\\\">\\n        Small\\n      </Button>\\n    </Box>\\n    <Box>\\n      <Button {...args} onClick={action(\\\"full button click\\\")} size=\\\"full\\\">\\n        Full\\n      </Button>\\n    </Box>\\n  </Flex>\\n);\\n\\nDifferentSizes.storyName = \\\"different sizes\\\";\\n\\nexport const DisabledUse = (): React.ReactElement => (\\n  <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n    <Button variant=\\\"primary\\\" disabled>\\n      Primary\\n    </Button>\\n    <Button variant=\\\"secondary\\\" disabled>\\n      Secondary\\n    </Button>\\n    <Button variant=\\\"tertiary\\\" disabled>\\n      Tertiary\\n    </Button>\\n    <Button variant=\\\"quaternary\\\" disabled>\\n      Quaternary\\n    </Button>\\n    <Button intent=\\\"muted\\\" disabled>\\n      Muted\\n    </Button>\\n  </Flex>\\n);\\n\\nDisabledUse.storyName = \\\"disabled use\\\";\\n\\nexport const DisabledWithTooltip = (): React.ReactElement => (\\n  <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n    <UncontrolledTooltip label=\\\"launching is disabled for this archived campaign\\\">\\n      <Button variant=\\\"primary\\\" disabled>\\n        Launch Campaign\\n      </Button>\\n    </UncontrolledTooltip>\\n    <Annotation\\n      label=\\\"There was a problem deleting this current. Refresh your page and try again.\\\"\\n      variant=\\\"error\\\"\\n    >\\n      <Button variant=\\\"primary\\\" disabled>\\n        Delete Current\\n      </Button>\\n    </Annotation>\\n  </Flex>\\n);\\n\\nDisabledWithTooltip.storyName = \\\"disabled with tooltip\\\";\\n\\nexport const LoadingStateWSuccess = (args: ButtonProps): React.ReactElement => {\\n  const [status, setStatus] = useState<ButtonLoadingState>(\\\"idle\\\");\\n\\n  React.useEffect(() => {\\n    if (status !== \\\"loading\\\") {\\n      return;\\n    }\\n\\n    const timeout = setTimeout(() => {\\n      setStatus(\\\"success\\\");\\n    }, 3000);\\n\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }, [status]);\\n\\n  const [buttonProps] = useLoadingButton(status);\\n\\n  return (\\n    <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n      <Button\\n        {...buttonProps}\\n        {...args}\\n        loadingMessage=\\\"Loading...\\\"\\n        onClick={() => setStatus(\\\"loading\\\")}\\n      >\\n        Primary\\n      </Button>\\n    </Flex>\\n  );\\n};\\n\\nLoadingStateWSuccess.storyName = \\\"loading state w/ success\\\";\\n\\nexport const LoadingStateWError = (args: ButtonProps): React.ReactElement => {\\n  const [status, setStatus] = useState<ButtonLoadingState>(\\\"idle\\\");\\n\\n  useEffect(() => {\\n    if (status !== \\\"loading\\\") {\\n      return;\\n    }\\n\\n    const timeout = setTimeout(() => {\\n      setStatus(\\\"error\\\");\\n    }, 3000);\\n\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }, [status]);\\n\\n  const [buttonProps, onReset] = useLoadingButton(status);\\n\\n  const handleReset = () => {\\n    onReset();\\n\\n    setStatus(\\\"idle\\\");\\n  };\\n\\n  return (\\n    <>\\n      <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n        <Annotation\\n          disabled={buttonProps.loadingState !== \\\"error\\\"}\\n          label=\\\"There was a problem deleting this current. Refresh your page and try again.\\\"\\n          variant=\\\"error\\\"\\n        >\\n          <Button\\n            {...buttonProps}\\n            {...args}\\n            loadingMessage=\\\"Loading...\\\"\\n            onClick={() => setStatus(\\\"loading\\\")}\\n          >\\n            Primary\\n          </Button>\\n        </Annotation>\\n      </Flex>\\n      <br />\\n      <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n        <Button\\n          className=\\\"reset-loading-state-btn\\\"\\n          variant=\\\"secondary\\\"\\n          onClick={handleReset}\\n        >\\n          Reset loading state\\n        </Button>\\n      </Flex>\\n    </>\\n  );\\n};\\n\\nLoadingStateWError.storyName = \\\"loading state w/ error\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":29},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":24,\"line\":29},\"endBody\":{\"col\":1,\"line\":46}},\"PrimaryVariant\":{\"startLoc\":{\"col\":30,\"line\":55},\"endLoc\":{\"col\":1,\"line\":97},\"startBody\":{\"col\":30,\"line\":55},\"endBody\":{\"col\":1,\"line\":97}},\"SecondaryVariant\":{\"startLoc\":{\"col\":32,\"line\":101},\"endLoc\":{\"col\":1,\"line\":143},\"startBody\":{\"col\":32,\"line\":101},\"endBody\":{\"col\":1,\"line\":143}},\"TertiaryVariant\":{\"startLoc\":{\"col\":31,\"line\":147},\"endLoc\":{\"col\":1,\"line\":189},\"startBody\":{\"col\":31,\"line\":147},\"endBody\":{\"col\":1,\"line\":189}},\"QuaternaryVariant\":{\"startLoc\":{\"col\":33,\"line\":193},\"endLoc\":{\"col\":1,\"line\":235},\"startBody\":{\"col\":33,\"line\":193},\"endBody\":{\"col\":1,\"line\":235}},\"DifferentSizes\":{\"startLoc\":{\"col\":30,\"line\":239},\"endLoc\":{\"col\":1,\"line\":257},\"startBody\":{\"col\":30,\"line\":239},\"endBody\":{\"col\":1,\"line\":257}},\"DisabledUse\":{\"startLoc\":{\"col\":27,\"line\":261},\"endLoc\":{\"col\":1,\"line\":279},\"startBody\":{\"col\":27,\"line\":261},\"endBody\":{\"col\":1,\"line\":279}},\"DisabledWithTooltip\":{\"startLoc\":{\"col\":35,\"line\":283},\"endLoc\":{\"col\":1,\"line\":299},\"startBody\":{\"col\":35,\"line\":283},\"endBody\":{\"col\":1,\"line\":299}},\"LoadingStateWSuccess\":{\"startLoc\":{\"col\":36,\"line\":303},\"endLoc\":{\"col\":1,\"line\":334},\"startBody\":{\"col\":36,\"line\":303},\"endBody\":{\"col\":1,\"line\":334}},\"LoadingStateWError\":{\"startLoc\":{\"col\":34,\"line\":338},\"endLoc\":{\"col\":1,\"line\":393},\"startBody\":{\"col\":34,\"line\":338},\"endBody\":{\"col\":1,\"line\":393}}};\n    \nimport React, { useEffect, useReducer, useState } from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { ButtonLoadingState, useLoadingButton } from \"@braze/beacon-hooks\";\n\nimport { Annotation } from \"../Annotation\";\nimport { Box } from \"../Box\";\nimport { Flex } from \"../Flex\";\nimport { Icon, IconComponentName } from \"../Icon\";\nimport { UncontrolledTooltip } from \"../UncontrolledTooltip\";\n\nimport page from \"./Button.docs.mdx\";\n\nimport { Button, ButtonProps } from \".\";\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Primitives/Button\",\n  component: Button,\n  parameters: {\n    docs: { page },\n  },\n  argTypes: {\n    disabled: {\n      control: \"boolean\",\n    },\n  },\n};\n\nexport const BasicUse = (\n  args: ButtonProps & { icon: IconComponentName }\n): React.ReactElement => {\n  const [clicks, increment] = useReducer((clicks) => clicks + 1, 0);\n\n  return (\n    <Flex direction=\"column\" className=\"buttons\">\n      <Flex justifyContent=\"space-around\">\n        <Button {...args} onClick={() => increment()} />\n        <Button {...args} onClick={() => increment()}>\n          <Icon name={args.icon} />\n          {args.children}\n        </Button>\n      </Flex>\n      <div id=\"clicks\">Clicked {clicks} times</div>\n    </Flex>\n  );\n};;\n\nBasicUse.args = {\n  children: \"Label\",\n  icon: \"calendar-alt\",\n};\n\nBasicUse.storyName = \"basic use\";\n\nexport const PrimaryVariant = (): React.ReactElement => (\n  <Flex\n    justifyContent=\"space-around\"\n    className=\"buttons\"\n    style={{ backgroundColor: \"#EEE\" }}\n  >\n    <Button\n      variant=\"primary\"\n      intent=\"info\"\n      onClick={action(\"primary info click\")}\n    >\n      Info\n    </Button>\n    <Button\n      variant=\"primary\"\n      intent=\"success\"\n      onClick={action(\"primary success click\")}\n    >\n      Success\n    </Button>\n    <Button\n      variant=\"primary\"\n      intent=\"danger\"\n      onClick={action(\"primary danger click\")}\n    >\n      Danger\n    </Button>\n    <Button\n      variant=\"primary\"\n      intent=\"warning\"\n      onClick={action(\"primary warning click\")}\n    >\n      Warning\n    </Button>\n    <Button\n      variant=\"primary\"\n      intent=\"muted\"\n      onClick={action(\"primary warning click\")}\n    >\n      Muted\n    </Button>\n  </Flex>\n);;\n\nPrimaryVariant.storyName = \"primary variant\";\n\nexport const SecondaryVariant = (): React.ReactElement => (\n  <Flex\n    justifyContent=\"space-around\"\n    className=\"buttons\"\n    style={{ backgroundColor: \"#EEE\" }}\n  >\n    <Button\n      variant=\"secondary\"\n      intent=\"info\"\n      onClick={action(\"secondary info click\")}\n    >\n      Info\n    </Button>\n    <Button\n      variant=\"secondary\"\n      intent=\"success\"\n      onClick={action(\"secondary success click\")}\n    >\n      Success\n    </Button>\n    <Button\n      variant=\"secondary\"\n      intent=\"danger\"\n      onClick={action(\"secondary danger click\")}\n    >\n      Danger\n    </Button>\n    <Button\n      variant=\"secondary\"\n      intent=\"warning\"\n      onClick={action(\"secondary warning click\")}\n    >\n      Warning\n    </Button>\n    <Button\n      variant=\"secondary\"\n      intent=\"muted\"\n      onClick={action(\"secondary warning click\")}\n    >\n      Muted\n    </Button>\n  </Flex>\n);;\n\nSecondaryVariant.storyName = \"secondary variant\";\n\nexport const TertiaryVariant = (): React.ReactElement => (\n  <Flex\n    justifyContent=\"space-around\"\n    className=\"buttons\"\n    style={{ backgroundColor: \"#EEE\" }}\n  >\n    <Button\n      variant=\"tertiary\"\n      intent=\"info\"\n      onClick={action(\"tertiary info click\")}\n    >\n      Info\n    </Button>\n    <Button\n      variant=\"tertiary\"\n      intent=\"success\"\n      onClick={action(\"tertiary success click\")}\n    >\n      Success\n    </Button>\n    <Button\n      variant=\"tertiary\"\n      intent=\"danger\"\n      onClick={action(\"tertiary danger click\")}\n    >\n      Danger\n    </Button>\n    <Button\n      variant=\"tertiary\"\n      intent=\"warning\"\n      onClick={action(\"tertiary warning click\")}\n    >\n      Warning\n    </Button>\n    <Button\n      variant=\"tertiary\"\n      intent=\"muted\"\n      onClick={action(\"tertiary warning click\")}\n    >\n      Muted\n    </Button>\n  </Flex>\n);;\n\nTertiaryVariant.storyName = \"tertiary variant\";\n\nexport const QuaternaryVariant = (): React.ReactElement => (\n  <Flex\n    justifyContent=\"space-around\"\n    className=\"buttons\"\n    style={{ backgroundColor: \"#EEE\" }}\n  >\n    <Button\n      variant=\"quaternary\"\n      intent=\"info\"\n      onClick={action(\"quaternary info click\")}\n    >\n      Info\n    </Button>\n    <Button\n      variant=\"quaternary\"\n      intent=\"success\"\n      onClick={action(\"quaternary success click\")}\n    >\n      Success\n    </Button>\n    <Button\n      variant=\"quaternary\"\n      intent=\"danger\"\n      onClick={action(\"quaternary danger click\")}\n    >\n      Danger\n    </Button>\n    <Button\n      variant=\"quaternary\"\n      intent=\"warning\"\n      onClick={action(\"quaternary warning click\")}\n    >\n      Warning\n    </Button>\n    <Button\n      variant=\"quaternary\"\n      intent=\"muted\"\n      onClick={action(\"quaternary warning click\")}\n    >\n      Muted\n    </Button>\n  </Flex>\n);;\n\nQuaternaryVariant.storyName = \"quaternary variant\";\n\nexport const DifferentSizes = (args: ButtonProps): React.ReactElement => (\n  <Flex className=\"buttons\" direction=\"column\">\n    <Box boxMargin={{ bottom: \"md\" }}>\n      <Button {...args} onClick={action(\"lg button click\")} size=\"lg\">\n        Large\n      </Button>\n    </Box>\n    <Box boxMargin={{ bottom: \"md\" }}>\n      <Button {...args} onClick={action(\"sm button click\")} size=\"sm\">\n        Small\n      </Button>\n    </Box>\n    <Box>\n      <Button {...args} onClick={action(\"full button click\")} size=\"full\">\n        Full\n      </Button>\n    </Box>\n  </Flex>\n);;\n\nDifferentSizes.storyName = \"different sizes\";\n\nexport const DisabledUse = (): React.ReactElement => (\n  <Flex justifyContent=\"space-around\" className=\"buttons\">\n    <Button variant=\"primary\" disabled>\n      Primary\n    </Button>\n    <Button variant=\"secondary\" disabled>\n      Secondary\n    </Button>\n    <Button variant=\"tertiary\" disabled>\n      Tertiary\n    </Button>\n    <Button variant=\"quaternary\" disabled>\n      Quaternary\n    </Button>\n    <Button intent=\"muted\" disabled>\n      Muted\n    </Button>\n  </Flex>\n);;\n\nDisabledUse.storyName = \"disabled use\";\n\nexport const DisabledWithTooltip = (): React.ReactElement => (\n  <Flex justifyContent=\"space-around\" className=\"buttons\">\n    <UncontrolledTooltip label=\"launching is disabled for this archived campaign\">\n      <Button variant=\"primary\" disabled>\n        Launch Campaign\n      </Button>\n    </UncontrolledTooltip>\n    <Annotation\n      label=\"There was a problem deleting this current. Refresh your page and try again.\"\n      variant=\"error\"\n    >\n      <Button variant=\"primary\" disabled>\n        Delete Current\n      </Button>\n    </Annotation>\n  </Flex>\n);;\n\nDisabledWithTooltip.storyName = \"disabled with tooltip\";\n\nexport const LoadingStateWSuccess = (args: ButtonProps): React.ReactElement => {\n  const [status, setStatus] = useState<ButtonLoadingState>(\"idle\");\n\n  React.useEffect(() => {\n    if (status !== \"loading\") {\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      setStatus(\"success\");\n    }, 3000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [status]);\n\n  const [buttonProps] = useLoadingButton(status);\n\n  return (\n    <Flex justifyContent=\"space-around\" className=\"buttons\">\n      <Button\n        {...buttonProps}\n        {...args}\n        loadingMessage=\"Loading...\"\n        onClick={() => setStatus(\"loading\")}\n      >\n        Primary\n      </Button>\n    </Flex>\n  );\n};;\n\nLoadingStateWSuccess.storyName = \"loading state w/ success\";\n\nexport const LoadingStateWError = (args: ButtonProps): React.ReactElement => {\n  const [status, setStatus] = useState<ButtonLoadingState>(\"idle\");\n\n  useEffect(() => {\n    if (status !== \"loading\") {\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      setStatus(\"error\");\n    }, 3000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [status]);\n\n  const [buttonProps, onReset] = useLoadingButton(status);\n\n  const handleReset = () => {\n    onReset();\n\n    setStatus(\"idle\");\n  };\n\n  return (\n    <>\n      <Flex justifyContent=\"space-around\" className=\"buttons\">\n        <Annotation\n          disabled={buttonProps.loadingState !== \"error\"}\n          label=\"There was a problem deleting this current. Refresh your page and try again.\"\n          variant=\"error\"\n        >\n          <Button\n            {...buttonProps}\n            {...args}\n            loadingMessage=\"Loading...\"\n            onClick={() => setStatus(\"loading\")}\n          >\n            Primary\n          </Button>\n        </Annotation>\n      </Flex>\n      <br />\n      <Flex justifyContent=\"space-around\" className=\"buttons\">\n        <Button\n          className=\"reset-loading-state-btn\"\n          variant=\"secondary\"\n          onClick={handleReset}\n        >\n          Reset loading state\n        </Button>\n      </Flex>\n    </>\n  );\n};\n\nLoadingStateWError.storyName = \"loading state w/ error\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"(\\n  args: ButtonProps & { icon: IconComponentName }\\n): React.ReactElement => {\\n  const [clicks, increment] = useReducer((clicks) => clicks + 1, 0);\\n\\n  return (\\n    <Flex direction=\\\"column\\\" className=\\\"buttons\\\">\\n      <Flex justifyContent=\\\"space-around\\\">\\n        <Button {...args} onClick={() => increment()} />\\n        <Button {...args} onClick={() => increment()}>\\n          <Icon name={args.icon} />\\n          {args.children}\\n        </Button>\\n      </Flex>\\n      <div id=\\\"clicks\\\">Clicked {clicks} times</div>\\n    </Flex>\\n  );\\n}\" }, ...BasicUse.parameters };\nPrimaryVariant.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"primary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"primary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"primary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"primary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"primary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"primary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...PrimaryVariant.parameters };\nSecondaryVariant.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"secondary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"secondary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"secondary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"secondary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"secondary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"secondary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...SecondaryVariant.parameters };\nTertiaryVariant.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"tertiary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"tertiary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"tertiary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"tertiary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"tertiary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"tertiary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...TertiaryVariant.parameters };\nQuaternaryVariant.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex\\n    justifyContent=\\\"space-around\\\"\\n    className=\\\"buttons\\\"\\n    style={{ backgroundColor: \\\"#EEE\\\" }}\\n  >\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"info\\\"\\n      onClick={action(\\\"quaternary info click\\\")}\\n    >\\n      Info\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"success\\\"\\n      onClick={action(\\\"quaternary success click\\\")}\\n    >\\n      Success\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"danger\\\"\\n      onClick={action(\\\"quaternary danger click\\\")}\\n    >\\n      Danger\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"warning\\\"\\n      onClick={action(\\\"quaternary warning click\\\")}\\n    >\\n      Warning\\n    </Button>\\n    <Button\\n      variant=\\\"quaternary\\\"\\n      intent=\\\"muted\\\"\\n      onClick={action(\\\"quaternary warning click\\\")}\\n    >\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...QuaternaryVariant.parameters };\nDifferentSizes.parameters = { storySource: { source: \"(args: ButtonProps): React.ReactElement => (\\n  <Flex className=\\\"buttons\\\" direction=\\\"column\\\">\\n    <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n      <Button {...args} onClick={action(\\\"lg button click\\\")} size=\\\"lg\\\">\\n        Large\\n      </Button>\\n    </Box>\\n    <Box boxMargin={{ bottom: \\\"md\\\" }}>\\n      <Button {...args} onClick={action(\\\"sm button click\\\")} size=\\\"sm\\\">\\n        Small\\n      </Button>\\n    </Box>\\n    <Box>\\n      <Button {...args} onClick={action(\\\"full button click\\\")} size=\\\"full\\\">\\n        Full\\n      </Button>\\n    </Box>\\n  </Flex>\\n)\" }, ...DifferentSizes.parameters };\nDisabledUse.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n    <Button variant=\\\"primary\\\" disabled>\\n      Primary\\n    </Button>\\n    <Button variant=\\\"secondary\\\" disabled>\\n      Secondary\\n    </Button>\\n    <Button variant=\\\"tertiary\\\" disabled>\\n      Tertiary\\n    </Button>\\n    <Button variant=\\\"quaternary\\\" disabled>\\n      Quaternary\\n    </Button>\\n    <Button intent=\\\"muted\\\" disabled>\\n      Muted\\n    </Button>\\n  </Flex>\\n)\" }, ...DisabledUse.parameters };\nDisabledWithTooltip.parameters = { storySource: { source: \"(): React.ReactElement => (\\n  <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n    <UncontrolledTooltip label=\\\"launching is disabled for this archived campaign\\\">\\n      <Button variant=\\\"primary\\\" disabled>\\n        Launch Campaign\\n      </Button>\\n    </UncontrolledTooltip>\\n    <Annotation\\n      label=\\\"There was a problem deleting this current. Refresh your page and try again.\\\"\\n      variant=\\\"error\\\"\\n    >\\n      <Button variant=\\\"primary\\\" disabled>\\n        Delete Current\\n      </Button>\\n    </Annotation>\\n  </Flex>\\n)\" }, ...DisabledWithTooltip.parameters };\nLoadingStateWSuccess.parameters = { storySource: { source: \"(args: ButtonProps): React.ReactElement => {\\n  const [status, setStatus] = useState<ButtonLoadingState>(\\\"idle\\\");\\n\\n  React.useEffect(() => {\\n    if (status !== \\\"loading\\\") {\\n      return;\\n    }\\n\\n    const timeout = setTimeout(() => {\\n      setStatus(\\\"success\\\");\\n    }, 3000);\\n\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }, [status]);\\n\\n  const [buttonProps] = useLoadingButton(status);\\n\\n  return (\\n    <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n      <Button\\n        {...buttonProps}\\n        {...args}\\n        loadingMessage=\\\"Loading...\\\"\\n        onClick={() => setStatus(\\\"loading\\\")}\\n      >\\n        Primary\\n      </Button>\\n    </Flex>\\n  );\\n}\" }, ...LoadingStateWSuccess.parameters };\nLoadingStateWError.parameters = { storySource: { source: \"(args: ButtonProps): React.ReactElement => {\\n  const [status, setStatus] = useState<ButtonLoadingState>(\\\"idle\\\");\\n\\n  useEffect(() => {\\n    if (status !== \\\"loading\\\") {\\n      return;\\n    }\\n\\n    const timeout = setTimeout(() => {\\n      setStatus(\\\"error\\\");\\n    }, 3000);\\n\\n    return () => {\\n      clearTimeout(timeout);\\n    };\\n  }, [status]);\\n\\n  const [buttonProps, onReset] = useLoadingButton(status);\\n\\n  const handleReset = () => {\\n    onReset();\\n\\n    setStatus(\\\"idle\\\");\\n  };\\n\\n  return (\\n    <>\\n      <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n        <Annotation\\n          disabled={buttonProps.loadingState !== \\\"error\\\"}\\n          label=\\\"There was a problem deleting this current. Refresh your page and try again.\\\"\\n          variant=\\\"error\\\"\\n        >\\n          <Button\\n            {...buttonProps}\\n            {...args}\\n            loadingMessage=\\\"Loading...\\\"\\n            onClick={() => setStatus(\\\"loading\\\")}\\n          >\\n            Primary\\n          </Button>\\n        </Annotation>\\n      </Flex>\\n      <br />\\n      <Flex justifyContent=\\\"space-around\\\" className=\\\"buttons\\\">\\n        <Button\\n          className=\\\"reset-loading-state-btn\\\"\\n          variant=\\\"secondary\\\"\\n          onClick={handleReset}\\n        >\\n          Reset loading state\\n        </Button>\\n      </Flex>\\n    </>\\n  );\\n}\" }, ...LoadingStateWError.parameters };","import React from \"react\";\nimport styled from \"styled-components\";\nimport classNames from \"classnames\";\nimport { ButtonLoadingState } from \"@braze/beacon-hooks\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\n\nimport { ButtonProps } from \"./types\";\nimport { StyledButton } from \"./StyledButton\";\nimport { ButtonContent } from \"./ButtonContent\";\n\nconst useDefaultAriaLabel = (\n  loadingState: ButtonLoadingState | undefined\n): string | undefined => {\n  const { t } = useI18nNamespace(\"beacon-button\");\n\n  if (!loadingState) {\n    return undefined;\n  }\n\n  switch (loadingState) {\n    case \"success\":\n      return t(\"button-click-success-aria-label\", \"Button click success\");\n    case \"error\":\n      return t(\"button-click-error-aria-label\", \"Button click error\");\n    case \"idle\":\n    case \"loading\":\n      return undefined;\n  }\n};\n\nconst InnerButton = React.forwardRef(\n  (\n    {\n      children,\n      className,\n      disabled,\n      getAriaLabel,\n      intent = \"info\",\n      loadingState,\n      loadingMessage,\n      size = \"lg\",\n      variant = \"primary\",\n      type = \"button\",\n      ...props\n    }: ButtonProps,\n    ref: React.RefObject<HTMLButtonElement>\n  ) => {\n    const defaultAriaLabel = useDefaultAriaLabel(loadingState);\n\n    return (\n      <StyledButton\n        {...props}\n        ref={ref}\n        data-is-loading={loadingState ? loadingState === \"loading\" : false}\n        data-loading-state={loadingState ?? \"idle\"}\n        aria-live={loadingState ? \"polite\" : undefined}\n        aria-label={\n          props[\"aria-label\"] ??\n          (getAriaLabel ? getAriaLabel(loadingState) : defaultAriaLabel)\n        }\n        disabled={\n          disabled || (loadingState ? loadingState !== \"idle\" : undefined)\n        }\n        className={classNames([\n          \"bcl-button\",\n          `bcl-button-${variant}`,\n          className,\n        ])}\n        intent={intent}\n        size={size}\n        type={type}\n        variant={variant}\n      >\n        <ButtonContent\n          intent={intent}\n          loadingMessage={loadingMessage}\n          loadingState={loadingState}\n          variant={variant}\n          size={size}\n        >\n          {children}\n        </ButtonContent>\n      </StyledButton>\n    );\n  }\n);\n\nInnerButton.displayName = \"InnerButton\";\n\nconst DisabledWrapper = styled.div`\n  display: inline-flex;\n`;\n\nexport const Button = React.forwardRef(\n  (props: ButtonProps, ref: React.RefObject<HTMLButtonElement>) => {\n    if (props.disabled) {\n      const castedRef = ref as unknown as React.RefObject<HTMLDivElement>;\n\n      // this allows tooltips to work without modification when the button is disabled\n      return (\n        <DisabledWrapper\n          ref={castedRef}\n          className=\"bcl-button__disabled-wrapper\"\n        >\n          <InnerButton {...props} />\n        </DisabledWrapper>\n      );\n    }\n\n    return <InnerButton {...props} ref={ref} />;\n  }\n);\n\nButton.displayName = \"Button\";\n","import React, { forwardRef, useRef } from \"react\";\nimport { useId } from \"@braze/beacon-hooks\";\n\nimport { Flex } from \"../Flex\";\nimport { HelpText } from \"../HelpText\";\nimport { StatusText } from \"../StatusText\";\n\nimport { StyledCheckbox } from \"./StyledCheckbox\";\nimport { CheckboxContainer } from \"./CheckboxContainer\";\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { CheckboxLabel } from \"./CheckboxLabel\";\nimport { CheckedPolyline } from \"./CheckedPolyline\";\nimport { HiddenCheckbox } from \"./HiddenCheckbox\";\nimport { IndeterminatePolyline } from \"./IndeterminatePolyline\";\nimport { CheckboxProps } from \"./types\";\n\nexport const Checkbox = forwardRef(\n  (\n    {\n      id,\n      children,\n      className,\n      name,\n      checked,\n      disabled,\n      indeterminate,\n      value,\n      onChange,\n      \"aria-label\": ariaLabel,\n      \"data-testid\": testId,\n      helpText,\n      invalid,\n      invalidCheckboxOnly,\n      helpTextClassName,\n      errorText,\n      ...props\n    }: CheckboxProps,\n    ref: React.RefObject<HTMLInputElement>\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const activeRef = ref || inputRef;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (!disabled) {\n        onChange?.(event);\n      }\n    };\n\n    const handleClick = () => {\n      // if activeRef.current not defined, bail\n      if (!activeRef.current) {\n        return;\n      }\n\n      // grab the setter function for the `checked` value\n      const { set: nativeCheckboxCheckedSetter } =\n        Object.getOwnPropertyDescriptor(\n          window.HTMLInputElement.prototype,\n          \"checked\"\n        ) as PropertyDescriptor;\n\n      // set the checkbox `checked` to the reverse of the current\n      nativeCheckboxCheckedSetter?.call(\n        activeRef.current,\n        !activeRef.current.checked\n      );\n\n      // create an event that bubbles up\n      const e2 = new InputEvent(\"input\", { bubbles: true });\n\n      // dispatch the event\n      activeRef.current.dispatchEvent(e2);\n\n      // call the change handler\n      handleChange(e2 as unknown as React.ChangeEvent<HTMLInputElement>);\n    };\n\n    const handleKeyPress = (\n      event: React.KeyboardEvent<HTMLInputElement>\n    ): void => {\n      if (event.key === \" \" && !disabled) {\n        event.preventDefault();\n\n        handleClick();\n      }\n    };\n\n    const defaultId = useId(\"bc-checkbox\");\n    const guaranteedId = id || defaultId;\n\n    return (\n      <CheckboxContainer\n        className={className}\n        disabled={disabled}\n        data-testid={testId}\n      >\n        <Flex>\n          <HiddenCheckbox\n            aria-label={ariaLabel}\n            ref={activeRef}\n            id={guaranteedId}\n            checked={checked}\n            disabled={disabled}\n            name={name}\n            value={value}\n            onChange={handleChange}\n            onKeyPress={handleKeyPress}\n            tabIndex={-1}\n            className=\"bcl-hidden-checkbox\"\n          />\n          <StyledCheckbox\n            {...props}\n            className=\"bcl-styled-checkbox\"\n            tabIndex={0}\n            indeterminate={indeterminate}\n            checked={checked}\n            disabled={disabled}\n            onClick={handleClick}\n            onKeyPress={handleKeyPress}\n            invalid={invalid}\n          >\n            <CheckboxIcon aria-hidden>\n              {indeterminate ? (\n                <IndeterminatePolyline indeterminate={indeterminate} />\n              ) : (\n                <CheckedPolyline checked={checked} aria-hidden />\n              )}\n            </CheckboxIcon>\n          </StyledCheckbox>\n          {children && (\n            <CheckboxLabel htmlFor={guaranteedId} disabled={disabled}>\n              {children}\n            </CheckboxLabel>\n          )}\n        </Flex>\n\n        {helpText && (\n          <HelpText className={helpTextClassName} disabled={disabled}>\n            {helpText}\n          </HelpText>\n        )}\n        {invalid && errorText && !invalidCheckboxOnly && (\n          <StatusText>{errorText}</StatusText>\n        )}\n      </CheckboxContainer>\n    );\n  }\n);\n\nCheckbox.displayName = \"Checkbox\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { text } from \"@storybook/addon-knobs\";\nimport LinkTo from \"@storybook/addon-links/react\";\nimport {\n  Button,\n  Icon,\n  Link,\n  Panel,\n  PanelHeader,\n  PanelBody,\n  Table,\n  TableHeader,\n  TableHeaderCell,\n} from \"@braze/beacon-core\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateHeading,\n  EmptyStateText,\n  EmptyStateButtonGroup,\n} from \"../..\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Content Display/EmptyState\" component={EmptyState} mdxType=\"Meta\" />\n    <h1>{`EmptyState`}</h1>\n    <p>{`Empty states occur when there is no content/data to show users. In general, we want to make empty states informative and actionable.`}</p>\n    <h2>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`EmptyState`}</inlineCode>{` component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tables:`}</strong>{` to use `}<inlineCode parentName=\"p\">{`EmptyState`}</inlineCode>{` inside of a table, use the `}<LinkTo kind=\"lab-content-display-tableemptybody--basic-use#tableemptybody\" mdxType=\"LinkTo\"><inlineCode parentName=\"p\">{`TableEmptyBody`}</inlineCode></LinkTo>{`\ncomponent instead. It wraps an `}<inlineCode parentName=\"p\">{`EmptyState`}</inlineCode>{` in components that allow it to be the body of a table.`}</p>\n    </blockquote>\n    <h3>{`Basic use`}</h3>\n    <p>{`Pass a mix of images, text, and action buttons as children that tell the user why there is no content, and what actions they can take.\nIt is recommended that you model your `}<inlineCode parentName=\"p\">{`EmptyState`}</inlineCode>{` after this example; however, other arrangements of child components will work.`}</p>\n    <p>{`Currently, `}<inlineCode parentName=\"p\">{`EmptyStateIcon`}</inlineCode>{` choices are limited to those available in `}<LinkTo kind=\"lab-icons-brazeicon--basic-use#icons\" mdxType=\"LinkTo\"><inlineCode parentName=\"p\">{`BrazeIcon`}</inlineCode></LinkTo>{`,\nso if you want to use an icon that is not there, please have the new icon added to `}<inlineCode parentName=\"p\">{`BrazeIcon`}</inlineCode>{` first.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    <Panel mdxType=\"Panel\">\n      <PanelHeader mdxType=\"PanelHeader\">Settings For Braze</PanelHeader>\n      <PanelBody mdxType=\"PanelBody\">\n        <EmptyState mdxType=\"EmptyState\">\n          <EmptyStateIcon name=\"add-image-or-document\" mdxType=\"EmptyStateIcon\" />\n          <EmptyStateHeading mdxType=\"EmptyStateHeading\">\n            {text(\"Heading Content\", \"No apps yet\")}\n          </EmptyStateHeading>\n          <EmptyStateText mdxType=\"EmptyStateText\">\n            {text(\"Text Content\", \"Add multiple apps to your App Group acress different platforms and price points.\")}\n          </EmptyStateText>\n          <EmptyStateButtonGroup mdxType=\"EmptyStateButtonGroup\">\n            <Button variant=\"primary\" size=\"lg\" mdxType=\"Button\">\n              <Icon name=\"plus-circle\" mdxType=\"Icon\" /> Add New App\n            </Button>\n          </EmptyStateButtonGroup>\n        </EmptyState>\n      </PanelBody>\n    </Panel>\n  </Story>\n    </Canvas>\n    <h3>{`Inline link for call to action`}</h3>\n    <p>{`If your call to action is navigation to a different page, make it a link embedded in the `}<inlineCode parentName=\"p\">{`EmptyStateText`}</inlineCode></p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"no buttons\" mdxType=\"Story\">\n    <Panel mdxType=\"Panel\">\n      <PanelHeader mdxType=\"PanelHeader\">Global Control Group Report</PanelHeader>\n      <PanelBody mdxType=\"PanelBody\">\n        <EmptyState mdxType=\"EmptyState\">\n          <EmptyStateIcon name=\"add-image-or-document\" mdxType=\"EmptyStateIcon\" />\n          <EmptyStateHeading mdxType=\"EmptyStateHeading\">No Global Control Group set up</EmptyStateHeading>\n          <EmptyStateText mdxType=\"EmptyStateText\">\n            You'll need to first set up a Global Control Group in Global Message\n            Settings in order to view this report.{\" \"}\n            <Link target=\"_blank\" rel=\"noopener\" href=\"https://www.google.com\" mdxType=\"Link\">\n              Learn More\n            </Link>\n          </EmptyStateText>\n        </EmptyState>\n      </PanelBody>\n    </Panel>\n  </Story>\n    </Canvas>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { EmptyState, EmptyState } from \"@braze/beacon-labs-table\";\n`}</code></pre>\n    <h2>{`Properties`}</h2>\n    <h3><inlineCode parentName=\"h3\">{`EmptyState`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`columnCount`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the number of columns that are in this table`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`EmptyStateIcon`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><LinkTo kind=\"lab-icons-brazeicon--basic-use#icons\" mdxType=\"LinkTo\"><inlineCode parentName=\"td\">{`BrazeIcon`}</inlineCode>{` name`}</LinkTo></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the icon to use for this space`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`EmptyStateHeading`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`EmptyStateText`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`EmptyStateButtonGroup`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = () => (\n          <Panel>\n      <PanelHeader>Settings For Braze</PanelHeader>\n      <PanelBody>\n        <EmptyState>\n          <EmptyStateIcon name=\"add-image-or-document\" />\n          <EmptyStateHeading>\n            {text(\"Heading Content\", \"No apps yet\")}\n          </EmptyStateHeading>\n          <EmptyStateText>\n            {text(\"Text Content\", \"Add multiple apps to your App Group acress different platforms and price points.\")}\n          </EmptyStateText>\n          <EmptyStateButtonGroup>\n            <Button variant=\"primary\" size=\"lg\">\n              <Icon name=\"plus-circle\" /> Add New App\n            </Button>\n          </EmptyStateButtonGroup>\n        </EmptyState>\n      </PanelBody>\n    </Panel>\n        );\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '<Panel>\\n      <PanelHeader>Settings For Braze</PanelHeader>\\n      <PanelBody>\\n        <EmptyState>\\n          <EmptyStateIcon name=\\\"add-image-or-document\\\" />\\n          <EmptyStateHeading>\\n            {text(\\\"Heading Content\\\", \\\"No apps yet\\\")}\\n          </EmptyStateHeading>\\n          <EmptyStateText>\\n            {text(\\\"Text Content\\\", \\\"Add multiple apps to your App Group acress different platforms and price points.\\\")}\\n          </EmptyStateText>\\n          <EmptyStateButtonGroup>\\n            <Button variant=\\\"primary\\\" size=\\\"lg\\\">\\n              <Icon name=\\\"plus-circle\\\" /> Add New App\\n            </Button>\\n          </EmptyStateButtonGroup>\\n        </EmptyState>\\n      </PanelBody>\\n    </Panel>' } };\n\nexport const noButtons = () => (\n          <Panel>\n      <PanelHeader>Global Control Group Report</PanelHeader>\n      <PanelBody>\n        <EmptyState>\n          <EmptyStateIcon name=\"add-image-or-document\" />\n          <EmptyStateHeading>No Global Control Group set up</EmptyStateHeading>\n          <EmptyStateText>\n            You'll need to first set up a Global Control Group in Global Message\n            Settings in order to view this report.{\" \"}\n            <Link target=\"_blank\" rel=\"noopener\" href=\"https://www.google.com\">\n              Learn More\n            </Link>\n          </EmptyStateText>\n        </EmptyState>\n      </PanelBody>\n    </Panel>\n        );\nnoButtons.storyName = 'no buttons';\nnoButtons.parameters = { storySource: { source: '<Panel>\\n      <PanelHeader>Global Control Group Report</PanelHeader>\\n      <PanelBody>\\n        <EmptyState>\\n          <EmptyStateIcon name=\\\"add-image-or-document\\\" />\\n          <EmptyStateHeading>No Global Control Group set up</EmptyStateHeading>\\n          <EmptyStateText>\\n            You\\'ll need to first set up a Global Control Group in Global Message\\n            Settings in order to view this report.{\\\" \\\"}\\n            <Link target=\\\"_blank\\\" rel=\\\"noopener\\\" href=\\\"https://www.google.com\\\">\\n              Learn More\\n            </Link>\\n          </EmptyStateText>\\n        </EmptyState>\\n      </PanelBody>\\n    </Panel>' } };\n\nconst componentMeta = { title: 'Core/Content Display/EmptyState', component: EmptyState, includeStories: [\"basicUse\",\"noButtons\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"no buttons\":\"noButtons\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { action } from \"@storybook/addon-actions\";\nimport { boolean, select } from \"@storybook/addon-knobs\";\nimport { Heading, Checkbox, FieldLabel } from \"@braze/beacon-core\";\nimport { InlineInput } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Forms/InlineInput\" component={InlineInput} mdxType=\"Meta\" />\n    <h1>{`InlineInput`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` component is one that appears as plaintext until\nthe user hovers over it, at which point a pencil icon appears\nindicating that the text can be updated. Clicking anywhere on the\ncomponent will then enable \"edit mode\", allowing the user to change\nthe value.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`IMPORTANT NOTE ABOUT USAGE:`}</strong>{` `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` will switch to edit mode\nautomatically when it is NOT `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` `}<em parentName=\"p\">{`and`}</em>{` is `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{`. This is\nto ensure that users don't mistakenly see the view mode and think\nthat whatever is currently entered is valid for submission. However,\nthis also creates an edge case that you must resolve yourself. If,\nfor whatever reason, you expect the `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop to be `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` on load\nand then switch back to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`, it's recommended that you set the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{`\nprop of `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` until you expect `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` to become `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.\nThis will allow you to disable the automatic switchover to edit mode until\nit makes sense.`}</p>\n    </blockquote>\n    <h2>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` component.`}</p>\n    <h3>{`Basic use`}</h3>\n    <p>{`By default, `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` behaves like an `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component,\na `}<inlineCode parentName=\"p\">{`BodyText`}</inlineCode>{` component, and a `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` component all rolled\ninto one.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`TIP: Head over to the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to play around with some of\nthe knobs for `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [disabled, setDisabled] = React.useState(false);\n          const [invalid, setInvalid] = React.useState(false);\n          const [value, setValue] = React.useState(\"hello\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <>\n          <InlineInput disabled={disabled} invalid={invalid} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />\n          <hr />\n          <pre>\n            <code>field value: </code>\n            <code className=\"field-value\">{value}</code>\n          </pre>\n          <Checkbox className=\"disabled-checkbox\" onChange={() => setDisabled(!disabled)} checked={disabled} mdxType=\"Checkbox\">\n            Disabled\n          </Checkbox>\n          <br />\n          <Checkbox className=\"invalid-checkbox\" onChange={() => setInvalid(!invalid)} checked={invalid} mdxType=\"Checkbox\">\n            Invalid\n          </Checkbox>\n        </>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With small vertical size`}</h3>\n    <p>{`If you want the `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` to fit into a smaller space,\nyou can use the `}<inlineCode parentName=\"p\">{`vSize=\"sm\"`}</inlineCode>{` prop.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with size sm\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <InlineInput vSize=\"sm\" value={value} onChange={handleChange} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With overflow`}</h3>\n    <p>{`When the content overflows inside an `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component,\nit will be ellipsesed on blur.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with overflow\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello, world! some of this text should get cut off when editing because it's too long\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <InlineInput invalid={boolean(\"Invalid\", false)} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With errors`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` component can also handle invalid statuses and does\nnot additionally need to be wrapped with `}<inlineCode parentName=\"p\">{`FieldLabel`}</inlineCode>{` to get this\nfunctionality.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with errors\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello, world!\");\n          const [error, setError] = React.useState(undefined);\n\n          const handleChange = event => {\n            // update value state\n            setValue(event.target.value); // update error state based on value\n\n            if (event.target.value !== \"\") {\n              setError(undefined);\n            } else {\n              setError(\"You must enter a value.\");\n            }\n          };\n\n          return <FieldLabel status=\"danger\" statusText={error} mdxType=\"FieldLabel\">\n          <InlineInput vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} invalid={!!error} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />\n        </FieldLabel>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`Disabled use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` component can be disabled via the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop\nto prevent the user from editing its contents. When disabled, the\ncomponent will no longer display the pencil on hover or switch to\nthe edit mode.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled use\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello, world!\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <InlineInput disabled vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" mdxType=\"InlineInput\" />;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With custom view mode text`}</h3>\n    <p>{`Sometimes you may want to render a specific kind of formatting for\nthe text of your view mode. To accommodate for this, the `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{`\ncomponent accepts a `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` prop that accepts a function which\nreturns React elements. This pattern is commonly referred to as\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/render-props.html\"\n      }}>{`Render Props`}</a>{`.`}</p>\n    <p>{`The examples below show how the `}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{` component can be used to\nreplace the default `}<inlineCode parentName=\"p\">{`BodyText`}</inlineCode>{` via the render props method.`}</p>\n    <p><strong parentName=\"p\">{`This usage is considered advanced and should be used sparingly due\nto potential issues around edge cases as explained in the note below.`}</strong></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: You should always make sure to render `}<inlineCode parentName=\"p\">{`value || placeholder`}</inlineCode>{`\nor equivalent within the `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` to ensure that some text is\nalways visible in view mode, as `}<inlineCode parentName=\"p\">{`InlineInput`}</inlineCode>{` only displays the\ncurrent value and a pencil (on hover) when the user is not editing.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with custom view mode text\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"hello, world!\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          const placeholder = \"Please enter a value\";\n          return <InlineInput invalid={boolean(\"Invalid\", false)} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder={placeholder} textComponent={Heading} mdxType=\"InlineInput\">\n          <Heading id=\"inline-input-heading-example\" mdxType=\"Heading\">\n            {value || placeholder}\n          </Heading>\n        </InlineInput>;\n        }}\n  </Story>\n    </Canvas>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { InlineInput } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.ReactNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`render function that returns children to be displayed in view mode`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the value passed to the component is not editable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fullWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`takes up 100% of the width of the container`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`helpText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`help text to be displayed below the field when no error/success present`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM for the label element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the currently inputted value is invalid`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`inputId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM id to be passed into the input as well as into the label as htmlFor`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`label to be displayed on top of the field`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`max`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`max value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`min`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`min value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.ChangeEvent, action: oneOf( \"change\", \"save\", \"cancel\", \"clear\" ) ) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when user makes a change to values; use second `}<inlineCode parentName=\"td\">{`action`}</inlineCode>{` param to determine additional behavior (e.g. when to communicate with backend, etc.)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onSaveClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when save button is clicked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onCancelClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when cancel button is clicked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClearClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when clear icon is clicked`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLInputElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`status`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`success`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the current status of the form, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`statusText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates what message should be displayed as part of the status, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`step`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`step to use when bumping up numbers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`date`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` ,`}<inlineCode parentName=\"td\">{`text`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type of the input field`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`vSize`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`md`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`vertical size of the input field`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [disabled, setDisabled] = React.useState(false);\n  const [invalid, setInvalid] = React.useState(false);\n  const [value, setValue] = React.useState(\"hello\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <>\n          <InlineInput disabled={disabled} invalid={invalid} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" />\n          <hr />\n          <pre>\n            <code>field value: </code>\n            <code className=\"field-value\">{value}</code>\n          </pre>\n          <Checkbox className=\"disabled-checkbox\" onChange={() => setDisabled(!disabled)} checked={disabled}>\n            Disabled\n          </Checkbox>\n          <br />\n          <Checkbox className=\"invalid-checkbox\" onChange={() => setInvalid(!invalid)} checked={invalid}>\n            Invalid\n          </Checkbox>\n        </>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [disabled, setDisabled] = React.useState(false);\\n  const [invalid, setInvalid] = React.useState(false);\\n  const [value, setValue] = React.useState(\\\"hello\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <>\\n          <InlineInput disabled={disabled} invalid={invalid} vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} placeholder=\\\"Please enter a value\\\" />\\n          <hr />\\n          <pre>\\n            <code>field value: </code>\\n            <code className=\\\"field-value\\\">{value}</code>\\n          </pre>\\n          <Checkbox className=\\\"disabled-checkbox\\\" onChange={() => setDisabled(!disabled)} checked={disabled}>\\n            Disabled\\n          </Checkbox>\\n          <br />\\n          <Checkbox className=\\\"invalid-checkbox\\\" onChange={() => setInvalid(!invalid)} checked={invalid}>\\n            Invalid\\n          </Checkbox>\\n        </>;\\n}' } };\n\nexport const withSizeSm = (() => {\n  const [value, setValue] = React.useState(\"hello\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <InlineInput vSize=\"sm\" value={value} onChange={handleChange} placeholder=\"Please enter a value\" />;\n});\nwithSizeSm.storyName = 'with size sm';\nwithSizeSm.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <InlineInput vSize=\\\"sm\\\" value={value} onChange={handleChange} placeholder=\\\"Please enter a value\\\" />;\\n}' } };\n\nexport const withOverflow = (() => {\n  const [value, setValue] = React.useState(\"hello, world! some of this text should get cut off when editing because it's too long\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <InlineInput invalid={boolean(\"Invalid\", false)} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" />;\n});\nwithOverflow.storyName = 'with overflow';\nwithOverflow.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello, world! some of this text should get cut off when editing because it\\'s too long\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <InlineInput invalid={boolean(\\\"Invalid\\\", false)} vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} placeholder=\\\"Please enter a value\\\" />;\\n}' } };\n\nexport const withErrors = (() => {\n  const [value, setValue] = React.useState(\"hello, world!\");\n  const [error, setError] = React.useState(undefined);\n\n  const handleChange = event => {\n    // update value state\n    setValue(event.target.value); // update error state based on value\n\n    if (event.target.value !== \"\") {\n      setError(undefined);\n    } else {\n      setError(\"You must enter a value.\");\n    }\n  };\n\n  return <FieldLabel status=\"danger\" statusText={error}>\n          <InlineInput vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} invalid={!!error} placeholder=\"Please enter a value\" />\n        </FieldLabel>;\n});\nwithErrors.storyName = 'with errors';\nwithErrors.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello, world!\\\");\\n  const [error, setError] = React.useState(undefined);\\n\\n  const handleChange = event => {\\n    // update value state\\n    setValue(event.target.value); // update error state based on value\\n\\n    if (event.target.value !== \\\"\\\") {\\n      setError(undefined);\\n    } else {\\n      setError(\\\"You must enter a value.\\\");\\n    }\\n  };\\n\\n  return <FieldLabel status=\\\"danger\\\" statusText={error}>\\n          <InlineInput vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} invalid={!!error} placeholder=\\\"Please enter a value\\\" />\\n        </FieldLabel>;\\n}' } };\n\nexport const disabledUse = (() => {\n  const [value, setValue] = React.useState(\"hello, world!\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <InlineInput disabled vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder=\"Please enter a value\" />;\n});\ndisabledUse.storyName = 'disabled use';\ndisabledUse.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello, world!\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <InlineInput disabled vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} placeholder=\\\"Please enter a value\\\" />;\\n}' } };\n\nexport const withCustomViewModeText = (() => {\n  const [value, setValue] = React.useState(\"hello, world!\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  const placeholder = \"Please enter a value\";\n  return <InlineInput invalid={boolean(\"Invalid\", false)} vSize={select(\"Vertical size\", [\"sm\", \"md\"], \"md\")} value={value} onChange={handleChange} placeholder={placeholder} textComponent={Heading}>\n          <Heading id=\"inline-input-heading-example\">\n            {value || placeholder}\n          </Heading>\n        </InlineInput>;\n});\nwithCustomViewModeText.storyName = 'with custom view mode text';\nwithCustomViewModeText.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"hello, world!\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  const placeholder = \\\"Please enter a value\\\";\\n  return <InlineInput invalid={boolean(\\\"Invalid\\\", false)} vSize={select(\\\"Vertical size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} value={value} onChange={handleChange} placeholder={placeholder} textComponent={Heading}>\\n          <Heading id=\\\"inline-input-heading-example\\\">\\n            {value || placeholder}\\n          </Heading>\\n        </InlineInput>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Forms/InlineInput', component: InlineInput, includeStories: [\"basicUse\",\"withSizeSm\",\"withOverflow\",\"withErrors\",\"disabledUse\",\"withCustomViewModeText\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"with size sm\":\"withSizeSm\",\"with overflow\":\"withOverflow\",\"with errors\":\"withErrors\",\"disabled use\":\"disabledUse\",\"with custom view mode text\":\"withCustomViewModeText\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean } from \"@storybook/addon-knobs\";\nimport { BodyText, FieldLabel, Icon } from \"@braze/beacon-core\";\nimport { getColor } from \"@braze/beacon-styling\";\nimport { Input } from \"../Input\";\nimport { InputGroupAddon } from \"../InputGroupAddon\";\nimport { NumberInput } from \"../NumberInput\";\nimport { InputGroup } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Forms/InputGroup\" component={InputGroup} mdxType=\"Meta\" />\n    <h1>{`InputGroup`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{`, along with `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{` allows you to add\nicons, text, and more seamlessly into an `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` field.`}</p>\n    <p>{`To use, import `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{`, wrap\nyour `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` field in an `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and place the `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{`\nwhere you need it to appear relative to the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` field. See\nexamples below for more details on how to use.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: You must use the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` field exported from the\n`}<inlineCode parentName=\"p\">{`@braze/beacon-components-input-group`}</inlineCode>{` library for the styles to work\ncorrectly. The props used for `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` are identical, so it should\nbe a simple switchover of imports to get started.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`STYLING: If you want to put custom styles on an `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{`\nplease use the provided `}<inlineCode parentName=\"p\">{`styledCss`}</inlineCode>{`\nprop, rather that calling `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{`\ndirectly on `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{`, to prevent unintended changes.`}</p>\n    </blockquote>\n    <h2>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` component.`}</p>\n    <h3>{`Basic use`}</h3>\n    <p>{`The most common use for `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`InputGroupAddon`}</inlineCode>{` is\nwith an icon.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(\"\");\n\n          const handleChange = event => {\n            setValue(event.target.value);\n          };\n\n          return <>\n          <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n            <InputGroup disabled={boolean(\"Disabled\", false)} mdxType=\"InputGroup\">\n              <Input value={value} onChange={handleChange} mdxType=\"Input\" />\n              <InputGroupAddon mdxType=\"InputGroupAddon\">\n                <Icon size=\"1x\" name=\"key\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n              </InputGroupAddon>\n            </InputGroup>\n          </FieldLabel>\n          <pre>\n            <code>value: </code>\n            <code className=\"input-value\">{value}</code>\n          </pre>\n        </>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`Secondary use`}</h3>\n    <p>{`You can also combine multiple addons to make more complex\nvisual cues.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"secondary use\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n      <InputGroup mdxType=\"InputGroup\">\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"dollar-sign\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n        <Input type=\"number\" mdxType=\"Input\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <BodyText mdxType=\"BodyText\">.00</BodyText>\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3>{`Invalid use`}</h3>\n    <p>{`To properly display an `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{`, you must\npass an `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop to both `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"invalid use\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" status=\"danger\" statusText=\"Oh no, something went wrong\" mdxType=\"FieldLabel\">\n      <InputGroup invalid mdxType=\"InputGroup\">\n        <Input mdxType=\"Input\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"envelope\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3>{`Disabled use`}</h3>\n    <p>{`To properly display an `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{`, you must\npass an `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop to both `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled use\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n      <InputGroup disabled mdxType=\"InputGroup\">\n        <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" mdxType=\"Input\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3>{`With 'NumberInput'`}</h3>\n    <p><inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` also works with the `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` component to provide similar styling.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with number input\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n      <InputGroup fullWidth mdxType=\"InputGroup\">\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"dollar-sign\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n        <NumberInput mdxType=\"NumberInput\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <BodyText mdxType=\"BodyText\">.00</BodyText>\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3>{`Full width`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`fullWidth`}</inlineCode>{` to make the `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` span the full width of its parent container:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"full width\" mdxType=\"Story\">\n    <FieldLabel label=\"Type here\" mdxType=\"FieldLabel\">\n      <InputGroup fullWidth mdxType=\"InputGroup\">\n        <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" mdxType=\"Input\" />\n        <InputGroupAddon mdxType=\"InputGroupAddon\">\n          <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3>{`Different vertical sizes`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`vSize`}</inlineCode>{` to make the `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` vertical size change to fit its parent container:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"vertical size\" mdxType=\"Story\">\n    <React.Fragment>\n      <FieldLabel label=\"Type here (md)\" mdxType=\"FieldLabel\">\n        <InputGroup vSize=\"md\" mdxType=\"InputGroup\">\n          <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" mdxType=\"Input\" />\n          <InputGroupAddon mdxType=\"InputGroupAddon\">\n            <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n          </InputGroupAddon>\n        </InputGroup>\n      </FieldLabel>\n      <FieldLabel label=\"Type here (sm)\" mdxType=\"FieldLabel\">\n        <InputGroup vSize=\"sm\" mdxType=\"InputGroup\">\n          <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" mdxType=\"Input\" />\n          <InputGroupAddon mdxType=\"InputGroupAddon\">\n            <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} mdxType=\"Icon\" />\n          </InputGroupAddon>\n        </InputGroup>\n      </FieldLabel>\n    </React.Fragment>\n  </Story>\n    </Canvas>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { InputGroup, InputGroupAddon, Input } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disabled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the input group and the contained input value are disabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fullWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`takes up 100% of the width of the container`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the input group and the contained input value are invalid`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [value, setValue] = React.useState(\"\");\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <>\n          <FieldLabel label=\"Type here\">\n            <InputGroup disabled={boolean(\"Disabled\", false)}>\n              <Input value={value} onChange={handleChange} />\n              <InputGroupAddon>\n                <Icon size=\"1x\" name=\"key\" color={getColor(\"gray\", 300)} />\n              </InputGroupAddon>\n            </InputGroup>\n          </FieldLabel>\n          <pre>\n            <code>value: </code>\n            <code className=\"input-value\">{value}</code>\n          </pre>\n        </>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(\\\"\\\");\\n\\n  const handleChange = event => {\\n    setValue(event.target.value);\\n  };\\n\\n  return <>\\n          <FieldLabel label=\\\"Type here\\\">\\n            <InputGroup disabled={boolean(\\\"Disabled\\\", false)}>\\n              <Input value={value} onChange={handleChange} />\\n              <InputGroupAddon>\\n                <Icon size=\\\"1x\\\" name=\\\"key\\\" color={getColor(\\\"gray\\\", 300)} />\\n              </InputGroupAddon>\\n            </InputGroup>\\n          </FieldLabel>\\n          <pre>\\n            <code>value: </code>\\n            <code className=\\\"input-value\\\">{value}</code>\\n          </pre>\\n        </>;\\n}' } };\n\nexport const secondaryUse = () => (\n          <FieldLabel label=\"Type here\">\n      <InputGroup>\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"dollar-sign\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n        <Input type=\"number\" />\n        <InputGroupAddon>\n          <BodyText>.00</BodyText>\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\nsecondaryUse.storyName = 'secondary use';\nsecondaryUse.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\">\\n      <InputGroup>\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"dollar-sign\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n        <Input type=\\\"number\\\" />\\n        <InputGroupAddon>\\n          <BodyText>.00</BodyText>\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const invalidUse = () => (\n          <FieldLabel label=\"Type here\" status=\"danger\" statusText=\"Oh no, something went wrong\">\n      <InputGroup invalid>\n        <Input />\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"envelope\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\ninvalidUse.storyName = 'invalid use';\ninvalidUse.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\" status=\\\"danger\\\" statusText=\\\"Oh no, something went wrong\\\">\\n      <InputGroup invalid>\\n        <Input />\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"envelope\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const disabledUse = () => (\n          <FieldLabel label=\"Type here\">\n      <InputGroup disabled>\n        <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" />\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\ndisabledUse.storyName = 'disabled use';\ndisabledUse.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\">\\n      <InputGroup disabled>\\n        <Input type=\\\"number\\\" placeholder=\\\"e.g. 5/10/2030\\\" />\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"calendar\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const withNumberInput = () => (\n          <FieldLabel label=\"Type here\">\n      <InputGroup fullWidth>\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"dollar-sign\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n        <NumberInput />\n        <InputGroupAddon>\n          <BodyText>.00</BodyText>\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\nwithNumberInput.storyName = 'with number input';\nwithNumberInput.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\">\\n      <InputGroup fullWidth>\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"dollar-sign\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n        <NumberInput />\\n        <InputGroupAddon>\\n          <BodyText>.00</BodyText>\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const fullWidth = () => (\n          <FieldLabel label=\"Type here\">\n      <InputGroup fullWidth>\n        <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" />\n        <InputGroupAddon>\n          <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} />\n        </InputGroupAddon>\n      </InputGroup>\n    </FieldLabel>\n        );\nfullWidth.storyName = 'full width';\nfullWidth.parameters = { storySource: { source: '<FieldLabel label=\\\"Type here\\\">\\n      <InputGroup fullWidth>\\n        <Input type=\\\"number\\\" placeholder=\\\"e.g. 5/10/2030\\\" />\\n        <InputGroupAddon>\\n          <Icon size=\\\"1x\\\" name=\\\"calendar\\\" color={getColor(\\\"gray\\\", 300)} />\\n        </InputGroupAddon>\\n      </InputGroup>\\n    </FieldLabel>' } };\n\nexport const verticalSize = () => (\n          <React.Fragment>\n      <FieldLabel label=\"Type here (md)\">\n        <InputGroup vSize=\"md\">\n          <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" />\n          <InputGroupAddon>\n            <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} />\n          </InputGroupAddon>\n        </InputGroup>\n      </FieldLabel>\n      <FieldLabel label=\"Type here (sm)\">\n        <InputGroup vSize=\"sm\">\n          <Input type=\"number\" placeholder=\"e.g. 5/10/2030\" />\n          <InputGroupAddon>\n            <Icon size=\"1x\" name=\"calendar\" color={getColor(\"gray\", 300)} />\n          </InputGroupAddon>\n        </InputGroup>\n      </FieldLabel>\n    </React.Fragment>\n        );\nverticalSize.storyName = 'vertical size';\nverticalSize.parameters = { storySource: { source: '<React.Fragment>\\n      <FieldLabel label=\\\"Type here (md)\\\">\\n        <InputGroup vSize=\\\"md\\\">\\n          <Input type=\\\"number\\\" placeholder=\\\"e.g. 5/10/2030\\\" />\\n          <InputGroupAddon>\\n            <Icon size=\\\"1x\\\" name=\\\"calendar\\\" color={getColor(\\\"gray\\\", 300)} />\\n          </InputGroupAddon>\\n        </InputGroup>\\n      </FieldLabel>\\n      <FieldLabel label=\\\"Type here (sm)\\\">\\n        <InputGroup vSize=\\\"sm\\\">\\n          <Input type=\\\"number\\\" placeholder=\\\"e.g. 5/10/2030\\\" />\\n          <InputGroupAddon>\\n            <Icon size=\\\"1x\\\" name=\\\"calendar\\\" color={getColor(\\\"gray\\\", 300)} />\\n          </InputGroupAddon>\\n        </InputGroup>\\n      </FieldLabel>\\n    </React.Fragment>' } };\n\nconst componentMeta = { title: 'Core/Forms/InputGroup', component: InputGroup, includeStories: [\"basicUse\",\"secondaryUse\",\"invalidUse\",\"disabledUse\",\"withNumberInput\",\"fullWidth\",\"verticalSize\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"secondary use\":\"secondaryUse\",\"invalid use\":\"invalidUse\",\"disabled use\":\"disabledUse\",\"with number input\":\"withNumberInput\",\"full width\":\"fullWidth\",\"vertical size\":\"verticalSize\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { boolean, select } from \"@storybook/addon-knobs\";\nimport { Button, Flex, placementTypes } from \"@braze/beacon-core\";\nimport { MenuActionButton } from \"../MenuActionButton\";\nimport { MenuCategoryButton } from \"../MenuCategoryButton\";\nimport { MenuGroup } from \"../MenuGroup\";\nimport { Menu, useMenu } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core/Overlay/Menu\" component={Menu} mdxType=\"Meta\" />\n    <h1>{`Menu`}</h1>\n    <p><inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` is a floating panel that contains a list of actions,\nNOT selected values. These actions can be within the page\nor navigational in their nature.`}</p>\n    <p>{`To ensure that your `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` components are accessible, we\nrecommend the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Give a unique DOM id to the menu target (the target is usually a `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{`, pass the `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` attribute to this button)`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-haspopup=\"true\"`}</inlineCode>{` to the menu target`}</li>\n      <li parentName=\"ul\">{`Give a unique DOM id to the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{` component`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-controls=\"<menu-id>\"`}</inlineCode>{` to the menu target,\nwhere `}<inlineCode parentName=\"li\">{`<menu-id`}</inlineCode>{`> is the DOM id of the menu`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-expanded=\"<value>\"`}</inlineCode>{` to the menu target,\nwhere `}<inlineCode parentName=\"li\">{`<value>`}</inlineCode>{` is the boolean indicating whether the menu is open`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`aria-labelledby=\"<target-id>\"`}</inlineCode>{` to the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{`,\nwhere the `}<inlineCode parentName=\"li\">{`<target-id>`}</inlineCode>{` is the DOM id of the `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode>{` target element`}</li>\n      <li parentName=\"ul\">{`Give unique DOM ids to each button inside a `}<inlineCode parentName=\"li\">{`Menu`}</inlineCode></li>\n    </ul>\n    <p>{`To learn more about menu accessibility, check out `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-actions-active-descendant.html\"\n      }}>{`these`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html\"\n      }}>{`links`}</a>{`.`}</p>\n    <h2>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` component.`}</p>\n    <h3>{`Basic use with action buttons`}</h3>\n    <p>{`Action buttons are typically used to make something happen\nwithout leaving the current page/pill that the user is on.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use w/ action buttons\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Flex justifyContent=\"center\" alignItems=\"center\" style={{\n              height: \"90vh\"\n            }} mdxType=\"Flex\">\n            <Button ref={targetRef} className=\"open-close-button\" id=\"menu1-button\" aria-haspopup=\"true\" aria-controls=\"menu1\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n              Click to open\n            </Button>\n          </Flex>\n          <Menu {...menuState} targetRef={targetRef} placement={select(\"Placement\", placementTypes, \"bottom-start\")} closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu1\" aria-labelledby=\"menu1-button\" mdxType=\"Menu\">\n            <MenuActionButton id=\"mi1\" mdxType=\"MenuActionButton\">User Preview</MenuActionButton>\n            <MenuActionButton id=\"mi2\" mdxType=\"MenuActionButton\">CSV Export User Data</MenuActionButton>\n            <MenuActionButton id=\"mi3\" mdxType=\"MenuActionButton\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi4\" mdxType=\"MenuActionButton\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton disabled id=\"mi32\" mdxType=\"MenuActionButton\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`Basic use with category buttons`}</h3>\n    <p>{`Category buttons are typically navigational in nature and\noften redirect the user to another page/pill on click.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use w/ category buttons\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu2-button\" aria-haspopup=\"true\" aria-controls=\"menu2\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu2\" aria-labelledby=\"menu2-button\" mdxType=\"Menu\">\n            <MenuCategoryButton id=\"mi5\" heading=\"Retention Report\" mdxType=\"MenuCategoryButton\">\n              Identify if users come back over time\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi6\" heading=\"Funnel Report\" mdxType=\"MenuCategoryButton\">\n              Pinpoint where and why users drop off\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi7\" heading=\"Campaign Comparison\" mdxType=\"MenuCategoryButton\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi33\" heading=\"Beta Feature\" disabled mdxType=\"MenuCategoryButton\">\n              This is disabled\n            </MenuCategoryButton>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With action buttons and icons`}</h3>\n    <p>{`Action buttons can also be decorated with icons to visually\nset them apart more easily.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ action buttons + icons\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu3-button\" aria-haspopup=\"true\" aria-controls=\"menu3\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu3\" aria-labelledby=\"menu3-button\" mdxType=\"Menu\">\n            <MenuActionButton id=\"mi8\" iconName=\"eye\" mdxType=\"MenuActionButton\">\n              User Preview\n            </MenuActionButton>\n            <MenuActionButton id=\"mi9\" iconName=\"file-alt\" mdxType=\"MenuActionButton\">\n              CSV Export User Data\n            </MenuActionButton>\n            <MenuActionButton id=\"mi10\" iconName=\"file-alt\" mdxType=\"MenuActionButton\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi11\" iconName={[\"fab\", \"facebook-square\"]} mdxType=\"MenuActionButton\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton id=\"mi34\" iconName={[\"fab\", \"google-plus-square\"]} disabled mdxType=\"MenuActionButton\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With category buttons and icons`}</h3>\n    <p>{`Just like action buttons, category buttons can also\nbe decorated with icons to visually set them apart\nmore easily.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ category buttons + icons\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu4-button\" aria-haspopup=\"true\" aria-controls=\"menu4\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu4\" aria-labelledby=\"menu4-button\" mdxType=\"Menu\">\n            <MenuCategoryButton id=\"mi12\" heading=\"Retention Report\" iconName=\"retention-report\" mdxType=\"MenuCategoryButton\">\n              Identify if users come back over time\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi13\" heading=\"Funnel Report\" iconName=\"funnel-report\" mdxType=\"MenuCategoryButton\">\n              Pinpoint where and why users drop off\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi14\" heading=\"Campaign Comparison\" iconName=\"campaign-comparison\" mdxType=\"MenuCategoryButton\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi34\" heading=\"Beta Feature\" iconName=\"campaign-comparison\" disabled mdxType=\"MenuCategoryButton\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With grouped action buttons and no header`}</h3>\n    <p>{`It may be desirable to group related action buttons\ntogether to make it easier for the user to find what\nthey're looking for via the `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{` component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ grouped action buttons + no header\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu5-button\" aria-haspopup=\"true\" aria-controls=\"menu5\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu5\" aria-labelledby=\"menu5-button\" mdxType=\"Menu\">\n            <MenuGroup mdxType=\"MenuGroup\">\n              <MenuActionButton id=\"mi15\" mdxType=\"MenuActionButton\">Print Chart</MenuActionButton>\n            </MenuGroup>\n            <MenuGroup mdxType=\"MenuGroup\">\n              <MenuActionButton id=\"mi16\" mdxType=\"MenuActionButton\">Download PNG Image</MenuActionButton>\n              <MenuActionButton id=\"mi17\" mdxType=\"MenuActionButton\">Download JPEG Image</MenuActionButton>\n              <MenuActionButton id=\"mi18\" mdxType=\"MenuActionButton\">\n                Download PDF Document\n              </MenuActionButton>\n              <MenuActionButton id=\"mi19\" mdxType=\"MenuActionButton\">\n                Download SVG Vector Image\n              </MenuActionButton>\n              <MenuActionButton id=\"mi20\" mdxType=\"MenuActionButton\">Download CSV</MenuActionButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With grouped action buttons and header`}</h3>\n    <p>{`In addition to grouping buttons together, you may also want\nto denote a specific group by giving it a name. You can do\nso using the `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` prop in `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ grouped action buttons + header\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu6-button\" aria-haspopup=\"true\" aria-controls=\"menu6\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu6\" aria-labelledby=\"menu6-button\" mdxType=\"Menu\">\n            <MenuGroup heading=\"Message One or More Channels\" mdxType=\"MenuGroup\">\n              <MenuActionButton id=\"mi21\" mdxType=\"MenuActionButton\">\n                Multichannel Campaign\n              </MenuActionButton>\n            </MenuGroup>\n            <MenuGroup heading=\"Single Channel With Multivariate Testing\" mdxType=\"MenuGroup\">\n              <MenuActionButton id=\"mi22\" mdxType=\"MenuActionButton\">Email</MenuActionButton>\n              <MenuActionButton id=\"mi23\" mdxType=\"MenuActionButton\">Push Notification</MenuActionButton>\n              <MenuActionButton id=\"mi24\" mdxType=\"MenuActionButton\">In-App Messaging</MenuActionButton>\n              <MenuActionButton id=\"mi25\" mdxType=\"MenuActionButton\">Content Card</MenuActionButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With category buttons and no header`}</h3>\n    <p>{`It may be desirable to group related action buttons\ntogether to make it easier for the user to find what\nthey're looking for via the `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{` component.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ grouped category buttons + no header\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu7-button\" aria-haspopup=\"true\" aria-controls=\"menu7\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu7\" aria-labelledby=\"menu7-button\" mdxType=\"Menu\">\n            <MenuGroup mdxType=\"MenuGroup\">\n              <MenuCategoryButton id=\"mi26\" heading=\"Retention Report\" mdxType=\"MenuCategoryButton\">\n                Identify if users come back over time\n              </MenuCategoryButton>\n            </MenuGroup>\n            <MenuGroup mdxType=\"MenuGroup\">\n              <MenuCategoryButton id=\"mi27\" heading=\"Funnel Report\" mdxType=\"MenuCategoryButton\">\n                Pinpoint where and why users drop off\n              </MenuCategoryButton>\n              <MenuCategoryButton id=\"mi28\" heading=\"Campaign Comparison\" mdxType=\"MenuCategoryButton\">\n                Measure the impact of different campaigns\n              </MenuCategoryButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With category buttons and header`}</h3>\n    <p>{`In addition to grouping buttons together, you may also want\nto denote a specific group by giving it a name. You can do\nso using the `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` prop in `}<inlineCode parentName=\"p\">{`MenuGroup`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"w/ grouped category buttons + header\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu8-button\" aria-haspopup=\"true\" aria-controls=\"menu8\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu8\" aria-labelledby=\"menu8-button\" mdxType=\"Menu\">\n            <MenuGroup heading=\"Report\" mdxType=\"MenuGroup\">\n              <MenuCategoryButton id=\"mi29\" heading=\"Retention Report\" mdxType=\"MenuCategoryButton\">\n                Identify if users come back over time\n              </MenuCategoryButton>\n            </MenuGroup>\n            <MenuGroup heading=\"Comparison\" mdxType=\"MenuGroup\">\n              <MenuCategoryButton id=\"mi30\" heading=\"Funnel Report\" mdxType=\"MenuCategoryButton\">\n                Pinpoint where and why users drop off\n              </MenuCategoryButton>\n              <MenuCategoryButton id=\"mi31\" heading=\"Campaign Comparison\" mdxType=\"MenuCategoryButton\">\n                Measure the impact of different campaigns\n              </MenuCategoryButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n        }}\n  </Story>\n    </Canvas>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  Menu,\n  MenuActionButton,\n  MenuCategoryButton,\n  MenuGroup,\n} from \"@braze/beacon-labs-menu\";\n`}</code></pre>\n    <h2>{`Properties`}</h2>\n    <h3><inlineCode parentName=\"h3\">{`Menu`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( ReactNode, ReactNode[], ({ activePlacement, targetDimensions, popperDimensions }) => ReactNode )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component, or a render prop that accepts the auto-calculated placement plus the dimensions of the target and the popper (or undefined if not available)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickInside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu should be closed when a user clicks inside the menu; does NOT prevent event handlers from firing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`closeOnClickOutside`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu should be closed when a user clicks outside the target or the menu`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`delay`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( `}<inlineCode parentName=\"td\">{`[number OR null, number OR null]`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates the amount of time, if any, to delay opening and/or closing the menu by`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`distance`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`8`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from bottom of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fixed`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`set to true if the Popover is not meant to move with the page`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`determines if the component should be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hideTopMargin`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the menu doesn't have any spacing on top`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onOpen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be opened`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClose`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent , React.FocusEvent , Event) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`function to call when the tooltip should be closed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`placement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`,`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bottom`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Popover relative to target`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`portalRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref of Portal inside which Popover will be rendered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed to the parent menu element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`popperId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DOM id to be passed to the parent menu element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`skidding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired offset from left of `}<inlineCode parentName=\"td\">{`target`}</inlineCode>{` component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`styledCss`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`return value of the `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` function exported by `}<inlineCode parentName=\"td\">{`styled-components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop to interpolate the returned value of a `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{` call within styled-components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`target`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired target component's ID`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`targetRef`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref object to pass down to the target object`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`triggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseenter`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`focus`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for menu on behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`untriggers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`arrayOf( `}<inlineCode parentName=\"td\">{`click`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`mouseleave`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`blur`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`['click']`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array containing desired trigger(s) for menu off behavior`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zIndex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`1031`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`z-index for the component and its sub-components`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`MenuActionButton`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`iconName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`see `}<inlineCode parentName=\"td\">{`BrazeIcon`}</inlineCode>{` docs for list of allowed icons`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name of spot icon to be rendered, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies the type of button for the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`MenuCategoryButton`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`heading`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`heading to be displayed in the button`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`iconName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`see `}<inlineCode parentName=\"td\">{`BrazeIcon`}</inlineCode>{` docs for list of allowed icons`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name of spot icon to be rendered, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`button`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`submit`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`reset`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"button\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`specifies the type of button for the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: React.MouseEvent<HTMLButtonElement>) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback function on button click; will not be called if `}<inlineCode parentName=\"td\">{`disabled`}</inlineCode>{` prop is `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3><inlineCode parentName=\"h3\">{`MenuGroup`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`heading`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`heading to be displayed in the group, if any`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUseWActionButtons = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Flex justifyContent=\"center\" alignItems=\"center\" style={{\n      height: \"90vh\"\n    }}>\n            <Button ref={targetRef} className=\"open-close-button\" id=\"menu1-button\" aria-haspopup=\"true\" aria-controls=\"menu1\" aria-expanded={menuState.isOpen}>\n              Click to open\n            </Button>\n          </Flex>\n          <Menu {...menuState} targetRef={targetRef} placement={select(\"Placement\", placementTypes, \"bottom-start\")} closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu1\" aria-labelledby=\"menu1-button\">\n            <MenuActionButton id=\"mi1\">User Preview</MenuActionButton>\n            <MenuActionButton id=\"mi2\">CSV Export User Data</MenuActionButton>\n            <MenuActionButton id=\"mi3\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi4\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton disabled id=\"mi32\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </React.Fragment>;\n});\nbasicUseWActionButtons.storyName = 'basic use w/ action buttons';\nbasicUseWActionButtons.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Flex justifyContent=\\\"center\\\" alignItems=\\\"center\\\" style={{\\n      height: \\\"90vh\\\"\\n    }}>\\n            <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu1-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu1\\\" aria-expanded={menuState.isOpen}>\\n              Click to open\\n            </Button>\\n          </Flex>\\n          <Menu {...menuState} targetRef={targetRef} placement={select(\\\"Placement\\\", placementTypes, \\\"bottom-start\\\")} closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu1\\\" aria-labelledby=\\\"menu1-button\\\">\\n            <MenuActionButton id=\\\"mi1\\\">User Preview</MenuActionButton>\\n            <MenuActionButton id=\\\"mi2\\\">CSV Export User Data</MenuActionButton>\\n            <MenuActionButton id=\\\"mi3\\\">\\n              CSV Export Email Address\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi4\\\">\\n              Export as Facebook Audience\\n            </MenuActionButton>\\n            <MenuActionButton disabled id=\\\"mi32\\\">\\n              Export as Google+ Audience\\n            </MenuActionButton>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const basicUseWCategoryButtons = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu2-button\" aria-haspopup=\"true\" aria-controls=\"menu2\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu2\" aria-labelledby=\"menu2-button\">\n            <MenuCategoryButton id=\"mi5\" heading=\"Retention Report\">\n              Identify if users come back over time\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi6\" heading=\"Funnel Report\">\n              Pinpoint where and why users drop off\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi7\" heading=\"Campaign Comparison\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi33\" heading=\"Beta Feature\" disabled>\n              This is disabled\n            </MenuCategoryButton>\n          </Menu>\n        </React.Fragment>;\n});\nbasicUseWCategoryButtons.storyName = 'basic use w/ category buttons';\nbasicUseWCategoryButtons.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu2-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu2\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu2\\\" aria-labelledby=\\\"menu2-button\\\">\\n            <MenuCategoryButton id=\\\"mi5\\\" heading=\\\"Retention Report\\\">\\n              Identify if users come back over time\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi6\\\" heading=\\\"Funnel Report\\\">\\n              Pinpoint where and why users drop off\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi7\\\" heading=\\\"Campaign Comparison\\\">\\n              Measure the impact of different campaigns\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi33\\\" heading=\\\"Beta Feature\\\" disabled>\\n              This is disabled\\n            </MenuCategoryButton>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wActionButtonsIcons = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu3-button\" aria-haspopup=\"true\" aria-controls=\"menu3\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu3\" aria-labelledby=\"menu3-button\">\n            <MenuActionButton id=\"mi8\" iconName=\"eye\">\n              User Preview\n            </MenuActionButton>\n            <MenuActionButton id=\"mi9\" iconName=\"file-alt\">\n              CSV Export User Data\n            </MenuActionButton>\n            <MenuActionButton id=\"mi10\" iconName=\"file-alt\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi11\" iconName={[\"fab\", \"facebook-square\"]}>\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton id=\"mi34\" iconName={[\"fab\", \"google-plus-square\"]} disabled>\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </React.Fragment>;\n});\nwActionButtonsIcons.storyName = 'w/ action buttons + icons';\nwActionButtonsIcons.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu3-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu3\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu3\\\" aria-labelledby=\\\"menu3-button\\\">\\n            <MenuActionButton id=\\\"mi8\\\" iconName=\\\"eye\\\">\\n              User Preview\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi9\\\" iconName=\\\"file-alt\\\">\\n              CSV Export User Data\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi10\\\" iconName=\\\"file-alt\\\">\\n              CSV Export Email Address\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi11\\\" iconName={[\\\"fab\\\", \\\"facebook-square\\\"]}>\\n              Export as Facebook Audience\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi34\\\" iconName={[\\\"fab\\\", \\\"google-plus-square\\\"]} disabled>\\n              Export as Google+ Audience\\n            </MenuActionButton>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wCategoryButtonsIcons = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu4-button\" aria-haspopup=\"true\" aria-controls=\"menu4\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu4\" aria-labelledby=\"menu4-button\">\n            <MenuCategoryButton id=\"mi12\" heading=\"Retention Report\" iconName=\"retention-report\">\n              Identify if users come back over time\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi13\" heading=\"Funnel Report\" iconName=\"funnel-report\">\n              Pinpoint where and why users drop off\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi14\" heading=\"Campaign Comparison\" iconName=\"campaign-comparison\">\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n            <MenuCategoryButton id=\"mi34\" heading=\"Beta Feature\" iconName=\"campaign-comparison\" disabled>\n              Measure the impact of different campaigns\n            </MenuCategoryButton>\n          </Menu>\n        </React.Fragment>;\n});\nwCategoryButtonsIcons.storyName = 'w/ category buttons + icons';\nwCategoryButtonsIcons.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu4-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu4\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu4\\\" aria-labelledby=\\\"menu4-button\\\">\\n            <MenuCategoryButton id=\\\"mi12\\\" heading=\\\"Retention Report\\\" iconName=\\\"retention-report\\\">\\n              Identify if users come back over time\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi13\\\" heading=\\\"Funnel Report\\\" iconName=\\\"funnel-report\\\">\\n              Pinpoint where and why users drop off\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi14\\\" heading=\\\"Campaign Comparison\\\" iconName=\\\"campaign-comparison\\\">\\n              Measure the impact of different campaigns\\n            </MenuCategoryButton>\\n            <MenuCategoryButton id=\\\"mi34\\\" heading=\\\"Beta Feature\\\" iconName=\\\"campaign-comparison\\\" disabled>\\n              Measure the impact of different campaigns\\n            </MenuCategoryButton>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wGroupedActionButtonsNoHeader = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu5-button\" aria-haspopup=\"true\" aria-controls=\"menu5\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu5\" aria-labelledby=\"menu5-button\">\n            <MenuGroup>\n              <MenuActionButton id=\"mi15\">Print Chart</MenuActionButton>\n            </MenuGroup>\n            <MenuGroup>\n              <MenuActionButton id=\"mi16\">Download PNG Image</MenuActionButton>\n              <MenuActionButton id=\"mi17\">Download JPEG Image</MenuActionButton>\n              <MenuActionButton id=\"mi18\">\n                Download PDF Document\n              </MenuActionButton>\n              <MenuActionButton id=\"mi19\">\n                Download SVG Vector Image\n              </MenuActionButton>\n              <MenuActionButton id=\"mi20\">Download CSV</MenuActionButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n});\nwGroupedActionButtonsNoHeader.storyName = 'w/ grouped action buttons + no header';\nwGroupedActionButtonsNoHeader.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu5-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu5\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu5\\\" aria-labelledby=\\\"menu5-button\\\">\\n            <MenuGroup>\\n              <MenuActionButton id=\\\"mi15\\\">Print Chart</MenuActionButton>\\n            </MenuGroup>\\n            <MenuGroup>\\n              <MenuActionButton id=\\\"mi16\\\">Download PNG Image</MenuActionButton>\\n              <MenuActionButton id=\\\"mi17\\\">Download JPEG Image</MenuActionButton>\\n              <MenuActionButton id=\\\"mi18\\\">\\n                Download PDF Document\\n              </MenuActionButton>\\n              <MenuActionButton id=\\\"mi19\\\">\\n                Download SVG Vector Image\\n              </MenuActionButton>\\n              <MenuActionButton id=\\\"mi20\\\">Download CSV</MenuActionButton>\\n            </MenuGroup>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wGroupedActionButtonsHeader = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu6-button\" aria-haspopup=\"true\" aria-controls=\"menu6\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu6\" aria-labelledby=\"menu6-button\">\n            <MenuGroup heading=\"Message One or More Channels\">\n              <MenuActionButton id=\"mi21\">\n                Multichannel Campaign\n              </MenuActionButton>\n            </MenuGroup>\n            <MenuGroup heading=\"Single Channel With Multivariate Testing\">\n              <MenuActionButton id=\"mi22\">Email</MenuActionButton>\n              <MenuActionButton id=\"mi23\">Push Notification</MenuActionButton>\n              <MenuActionButton id=\"mi24\">In-App Messaging</MenuActionButton>\n              <MenuActionButton id=\"mi25\">Content Card</MenuActionButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n});\nwGroupedActionButtonsHeader.storyName = 'w/ grouped action buttons + header';\nwGroupedActionButtonsHeader.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu6-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu6\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu6\\\" aria-labelledby=\\\"menu6-button\\\">\\n            <MenuGroup heading=\\\"Message One or More Channels\\\">\\n              <MenuActionButton id=\\\"mi21\\\">\\n                Multichannel Campaign\\n              </MenuActionButton>\\n            </MenuGroup>\\n            <MenuGroup heading=\\\"Single Channel With Multivariate Testing\\\">\\n              <MenuActionButton id=\\\"mi22\\\">Email</MenuActionButton>\\n              <MenuActionButton id=\\\"mi23\\\">Push Notification</MenuActionButton>\\n              <MenuActionButton id=\\\"mi24\\\">In-App Messaging</MenuActionButton>\\n              <MenuActionButton id=\\\"mi25\\\">Content Card</MenuActionButton>\\n            </MenuGroup>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wGroupedCategoryButtonsNoHeader = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu7-button\" aria-haspopup=\"true\" aria-controls=\"menu7\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu7\" aria-labelledby=\"menu7-button\">\n            <MenuGroup>\n              <MenuCategoryButton id=\"mi26\" heading=\"Retention Report\">\n                Identify if users come back over time\n              </MenuCategoryButton>\n            </MenuGroup>\n            <MenuGroup>\n              <MenuCategoryButton id=\"mi27\" heading=\"Funnel Report\">\n                Pinpoint where and why users drop off\n              </MenuCategoryButton>\n              <MenuCategoryButton id=\"mi28\" heading=\"Campaign Comparison\">\n                Measure the impact of different campaigns\n              </MenuCategoryButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n});\nwGroupedCategoryButtonsNoHeader.storyName = 'w/ grouped category buttons + no header';\nwGroupedCategoryButtonsNoHeader.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu7-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu7\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu7\\\" aria-labelledby=\\\"menu7-button\\\">\\n            <MenuGroup>\\n              <MenuCategoryButton id=\\\"mi26\\\" heading=\\\"Retention Report\\\">\\n                Identify if users come back over time\\n              </MenuCategoryButton>\\n            </MenuGroup>\\n            <MenuGroup>\\n              <MenuCategoryButton id=\\\"mi27\\\" heading=\\\"Funnel Report\\\">\\n                Pinpoint where and why users drop off\\n              </MenuCategoryButton>\\n              <MenuCategoryButton id=\\\"mi28\\\" heading=\\\"Campaign Comparison\\\">\\n                Measure the impact of different campaigns\\n              </MenuCategoryButton>\\n            </MenuGroup>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nexport const wGroupedCategoryButtonsHeader = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <React.Fragment>\n          <Button ref={targetRef} className=\"open-close-button\" id=\"menu8-button\" aria-haspopup=\"true\" aria-controls=\"menu8\" aria-expanded={menuState.isOpen}>\n            Click to open\n          </Button>\n          <Menu {...menuState} targetRef={targetRef} placement=\"bottom-start\" closeOnClickInside={boolean(\"Close on click inside\", false)} id=\"menu8\" aria-labelledby=\"menu8-button\">\n            <MenuGroup heading=\"Report\">\n              <MenuCategoryButton id=\"mi29\" heading=\"Retention Report\">\n                Identify if users come back over time\n              </MenuCategoryButton>\n            </MenuGroup>\n            <MenuGroup heading=\"Comparison\">\n              <MenuCategoryButton id=\"mi30\" heading=\"Funnel Report\">\n                Pinpoint where and why users drop off\n              </MenuCategoryButton>\n              <MenuCategoryButton id=\"mi31\" heading=\"Campaign Comparison\">\n                Measure the impact of different campaigns\n              </MenuCategoryButton>\n            </MenuGroup>\n          </Menu>\n        </React.Fragment>;\n});\nwGroupedCategoryButtonsHeader.storyName = 'w/ grouped category buttons + header';\nwGroupedCategoryButtonsHeader.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <React.Fragment>\\n          <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu8-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu8\\\" aria-expanded={menuState.isOpen}>\\n            Click to open\\n          </Button>\\n          <Menu {...menuState} targetRef={targetRef} placement=\\\"bottom-start\\\" closeOnClickInside={boolean(\\\"Close on click inside\\\", false)} id=\\\"menu8\\\" aria-labelledby=\\\"menu8-button\\\">\\n            <MenuGroup heading=\\\"Report\\\">\\n              <MenuCategoryButton id=\\\"mi29\\\" heading=\\\"Retention Report\\\">\\n                Identify if users come back over time\\n              </MenuCategoryButton>\\n            </MenuGroup>\\n            <MenuGroup heading=\\\"Comparison\\\">\\n              <MenuCategoryButton id=\\\"mi30\\\" heading=\\\"Funnel Report\\\">\\n                Pinpoint where and why users drop off\\n              </MenuCategoryButton>\\n              <MenuCategoryButton id=\\\"mi31\\\" heading=\\\"Campaign Comparison\\\">\\n                Measure the impact of different campaigns\\n              </MenuCategoryButton>\\n            </MenuGroup>\\n          </Menu>\\n        </React.Fragment>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Overlay/Menu', component: Menu, includeStories: [\"basicUseWActionButtons\",\"basicUseWCategoryButtons\",\"wActionButtonsIcons\",\"wCategoryButtonsIcons\",\"wGroupedActionButtonsNoHeader\",\"wGroupedActionButtonsHeader\",\"wGroupedCategoryButtonsNoHeader\",\"wGroupedCategoryButtonsHeader\"],  };\n\nconst mdxStoryNameToKey = {\"basic use w/ action buttons\":\"basicUseWActionButtons\",\"basic use w/ category buttons\":\"basicUseWCategoryButtons\",\"w/ action buttons + icons\":\"wActionButtonsIcons\",\"w/ category buttons + icons\":\"wCategoryButtonsIcons\",\"w/ grouped action buttons + no header\":\"wGroupedActionButtonsNoHeader\",\"w/ grouped action buttons + header\":\"wGroupedActionButtonsHeader\",\"w/ grouped category buttons + no header\":\"wGroupedCategoryButtonsNoHeader\",\"w/ grouped category buttons + header\":\"wGroupedCategoryButtonsHeader\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { number, select, text } from \"@storybook/addon-knobs\";\nimport { FieldLabel } from \"@braze/beacon-core\";\nimport { NumberInput } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Forms/NumberInput\" component={NumberInput} mdxType=\"Meta\" />\n    <h1>{`NumberInput`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` component allows you to accept numerical\nvalues from your user and provide them with helper tools to\nincrement and decrement the current value.`}</p>\n    <h2>{`Use cases`}</h2>\n    <p>{`Below are some common use cases for the `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` component.`}</p>\n    <h3>{`Basic use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` component uses the same props as the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{`\ncomponent and defines custom styles for the up/down steppers\n(hover to see these!).`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: Unlike the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` component, the `}<inlineCode parentName=\"p\">{`NumberInput`}</inlineCode>{` does NOT\naccept the `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` prop and is hardcoded to always use `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(0);\n          return <div>\n          <FieldLabel label=\"This is a number field\" mdxType=\"FieldLabel\">\n            <NumberInput type=\"number\" min={number(\"Min\", 0)} max={number(\"Max\", 100)} step={number(\"Step\", 1)} onChange={event => {\n                setValue(event.target.value);\n              }} value={value} vSize={select(\"Size\", [\"sm\", \"md\"], \"md\")} mdxType=\"NumberInput\" />\n          </FieldLabel>\n          <dl>\n            <dt>Number value:</dt>\n            <dd id=\"number-value\">{value}</dd>\n          </dl>\n        </div>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`With min/max`}</h3>\n    <p>{`To bound your user's stepping to between allowed values, you can\nuse the `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` props.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: The `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` props do NOT prevent the user from\nmanually entering any number value; if you need value validation,\nyou must implement this yourself.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with min/max\" mdxType=\"Story\">\n    <FieldLabel label=\"This is a number field\" mdxType=\"FieldLabel\">\n      <NumberInput type=\"number\" min={1} max={10} mdxType=\"NumberInput\" />\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h3>{`With step`}</h3>\n    <p>{`To allow your user to increment/decrement their values faster,\nyou can define the `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` prop as shown below.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"with step\" mdxType=\"Story\">\n    {() => {\n          const [value, setValue] = React.useState(0);\n          return <div>\n          <FieldLabel label=\"This is a number field\" mdxType=\"FieldLabel\">\n            <NumberInput type=\"number\" step={5} onChange={event => {\n                setValue(event.target.value);\n              }} value={value} mdxType=\"NumberInput\" />\n          </FieldLabel>\n          <dl>\n            <dt>Number value:</dt>\n            <dd id=\"number-value\">{value}</dd>\n          </dl>\n        </div>;\n        }}\n  </Story>\n    </Canvas>\n    <h3>{`Disabled`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` to disable the use of the underlying input.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"disabled\" mdxType=\"Story\">\n    <NumberInput placeholder=\"Enter text in me!\" disabled mdxType=\"NumberInput\" />\n  </Story>\n    </Canvas>\n    <h3>{`Invalid`}</h3>\n    <p>{`Use prop `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` to denote that the value in the input is not valid.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Add a descriptive error message to the field's label to tell your user what went wrong.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"invalid\" mdxType=\"Story\">\n    <FieldLabel label=\"Field Label\" htmlFor=\"invalidInput\" status=\"danger\" statusText={text(\"Error Message\", \"Please enter a valid value in this field\")} mdxType=\"FieldLabel\">\n      <NumberInput id=\"invalidInput\" placeholder=\"Enter text in me!\" invalid mdxType=\"NumberInput\" />\n    </FieldLabel>\n  </Story>\n    </Canvas>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { NumberInput } from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`containerClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name to be passed to the container element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fullWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`takes up 100% of the width of the container`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`invalid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the currently inputted value is invalid`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`max`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`max value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`min`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`min value for the input field; only relevant when `}<inlineCode parentName=\"td\">{`type`}</inlineCode>{` is either `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`date`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLInputElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`step`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`step to use when bumping up numbers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( string, number, string[] )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value to be rendered in the input field`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [value, setValue] = React.useState(0);\n  return <div>\n          <FieldLabel label=\"This is a number field\">\n            <NumberInput type=\"number\" min={number(\"Min\", 0)} max={number(\"Max\", 100)} step={number(\"Step\", 1)} onChange={event => {\n        setValue(event.target.value);\n      }} value={value} vSize={select(\"Size\", [\"sm\", \"md\"], \"md\")} />\n          </FieldLabel>\n          <dl>\n            <dt>Number value:</dt>\n            <dd id=\"number-value\">{value}</dd>\n          </dl>\n        </div>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(0);\\n  return <div>\\n          <FieldLabel label=\\\"This is a number field\\\">\\n            <NumberInput type=\\\"number\\\" min={number(\\\"Min\\\", 0)} max={number(\\\"Max\\\", 100)} step={number(\\\"Step\\\", 1)} onChange={event => {\\n        setValue(event.target.value);\\n      }} value={value} vSize={select(\\\"Size\\\", [\\\"sm\\\", \\\"md\\\"], \\\"md\\\")} />\\n          </FieldLabel>\\n          <dl>\\n            <dt>Number value:</dt>\\n            <dd id=\\\"number-value\\\">{value}</dd>\\n          </dl>\\n        </div>;\\n}' } };\n\nexport const withMinMax = () => (\n          <FieldLabel label=\"This is a number field\">\n      <NumberInput type=\"number\" min={1} max={10} />\n    </FieldLabel>\n        );\nwithMinMax.storyName = 'with min/max';\nwithMinMax.parameters = { storySource: { source: '<FieldLabel label=\\\"This is a number field\\\">\\n      <NumberInput type=\\\"number\\\" min={1} max={10} />\\n    </FieldLabel>' } };\n\nexport const withStep = (() => {\n  const [value, setValue] = React.useState(0);\n  return <div>\n          <FieldLabel label=\"This is a number field\">\n            <NumberInput type=\"number\" step={5} onChange={event => {\n        setValue(event.target.value);\n      }} value={value} />\n          </FieldLabel>\n          <dl>\n            <dt>Number value:</dt>\n            <dd id=\"number-value\">{value}</dd>\n          </dl>\n        </div>;\n});\nwithStep.storyName = 'with step';\nwithStep.parameters = { storySource: { source: '() => {\\n  const [value, setValue] = React.useState(0);\\n  return <div>\\n          <FieldLabel label=\\\"This is a number field\\\">\\n            <NumberInput type=\\\"number\\\" step={5} onChange={event => {\\n        setValue(event.target.value);\\n      }} value={value} />\\n          </FieldLabel>\\n          <dl>\\n            <dt>Number value:</dt>\\n            <dd id=\\\"number-value\\\">{value}</dd>\\n          </dl>\\n        </div>;\\n}' } };\n\nexport const disabled = () => (\n          <NumberInput placeholder=\"Enter text in me!\" disabled />\n        );\ndisabled.storyName = 'disabled';\ndisabled.parameters = { storySource: { source: '<NumberInput placeholder=\\\"Enter text in me!\\\" disabled />' } };\n\nexport const invalid = () => (\n          <FieldLabel label=\"Field Label\" htmlFor=\"invalidInput\" status=\"danger\" statusText={text(\"Error Message\", \"Please enter a valid value in this field\")}>\n      <NumberInput id=\"invalidInput\" placeholder=\"Enter text in me!\" invalid />\n    </FieldLabel>\n        );\ninvalid.storyName = 'invalid';\ninvalid.parameters = { storySource: { source: '<FieldLabel label=\\\"Field Label\\\" htmlFor=\\\"invalidInput\\\" status=\\\"danger\\\" statusText={text(\\\"Error Message\\\", \\\"Please enter a valid value in this field\\\")}>\\n      <NumberInput id=\\\"invalidInput\\\" placeholder=\\\"Enter text in me!\\\" invalid />\\n    </FieldLabel>' } };\n\nconst componentMeta = { title: 'Core/Forms/NumberInput', component: NumberInput, includeStories: [\"basicUse\",\"withMinMax\",\"withStep\",\"disabled\",\"invalid\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\",\"with min/max\":\"withMinMax\",\"with step\":\"withStep\",\"disabled\":\"disabled\",\"invalid\":\"invalid\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import { useCallback, useEffect, useRef } from \"react\";\n\nimport { usePopperContext } from \"../PopperContext\";\nimport { AllowedUnTriggers } from \"../types\";\nimport { useHandleClose } from \"../useHandleClose\";\nimport { useHandleOpen } from \"../useHandleOpen\";\nimport { useMouseLeave } from \"../useMouseLeave\";\nimport { extractInteractiveChildren, getElement } from \"../utils\";\n\n// these untriggers cause buggy behavior when included as is\n// and need to be handled separately\nconst excludedUntriggers: AllowedUnTriggers[] = [\"mouseleave\"];\n\nconst getScrollableParentElements = (\n  node: HTMLElement | undefined | null\n): HTMLElement[] => {\n  const ret: HTMLElement[] = [];\n\n  if (!node) {\n    return ret;\n  }\n\n  if (node.scrollHeight > node.clientHeight) {\n    ret.push(node);\n  }\n\n  return ret.concat(getScrollableParentElements(node.parentElement));\n};\n\n/**\n * Hook that handles event subscription for the popper\n * component and updates its placement when changes are made\n * as necessary\n * @param popperRef ref object pointing to the popper element\n * @param placementCallback function that will recalculate the\n * placement of the popper when invokes\n */\nexport const usePopperEvents = (\n  popperRef: React.RefObject<HTMLDivElement>\n): void => {\n  // get props from context\n  const {\n    placement,\n    triggers,\n    untriggers,\n    target,\n    targetRef,\n    closeOnClickOutside,\n    interactive,\n    isOpen,\n  } = usePopperContext();\n\n  // get open handler fn\n  const [handleOpen] = useHandleOpen();\n\n  // whether the event came from a keyboard or a mouse/touch event\n  const fromKeyboard = useRef(false);\n\n  // get close handler fn\n  const [closePopper] = useHandleClose();\n\n  // interactive elements inside the popper\n  const interactiveElements = useRef<HTMLElement[]>([]);\n\n  const handleClose = useCallback(\n    (event) => {\n      // get the popper if it's in the event path (i.e. is a parent of the target)\n      const eventPath = event?.path || event?.composedPath?.();\n\n      const hasPopperParent = eventPath\n        ? !!eventPath?.find((item) => item === popperRef.current)\n        : false;\n\n      if (\n        interactiveElements.current.includes(event?.relatedTarget) ||\n        // if it is NOT a keyboard event, the popper is interactive and the target is the popper or is inside the popper\n        (!fromKeyboard.current &&\n          interactive &&\n          (hasPopperParent || event?.relatedTarget === popperRef.current)) ||\n        event?.relatedTarget === targetRef?.current\n      ) {\n        // abort - the newly focused element is in the list of elements inside the popper\n        return;\n      }\n\n      closePopper(event);\n    },\n    [closePopper, targetRef, popperRef, fromKeyboard, interactive]\n  );\n\n  const closeOnScroll = useCallback(\n    (event) => {\n      closePopper(event);\n    },\n    [closePopper]\n  );\n\n  useEffect(() => {\n    if (!interactive) {\n      interactiveElements.current = [];\n    } else {\n      interactiveElements.current = extractInteractiveChildren(\n        popperRef.current\n      );\n    }\n\n    interactiveElements.current.forEach((node) => {\n      node.addEventListener(\"blur\", handleClose);\n    });\n\n    const interactives = interactiveElements.current;\n\n    return () => {\n      interactives.forEach((node) => {\n        node.removeEventListener(\"blur\", handleClose);\n      });\n    };\n  });\n\n  // get mouse event listeners\n  const handleMouseLeave = useMouseLeave(handleClose, popperRef);\n\n  /**\n   * main event listeners to turn component display on/off\n   *\n   * This MUST be useEffect. In some cases, running useLayoutEffect will try to attach event listeners\n   * before the target element has rendered. Examples are cases where the child elements call a setState\n   * callback to add a new child which then renders a tooltip, using context to setup new children, and so on.\n   */\n  useEffect(() => {\n    // get element from targetRef or target\n    const element = getElement({ targetRef, target });\n\n    // if element is not defined, short circuit\n    if (!element) {\n      return;\n    }\n\n    const scrollableParentElements = getScrollableParentElements(element);\n\n    const detectKeyboardFocus = () => {\n      fromKeyboard.current = true;\n    };\n\n    const detectMouseFocus = () => {\n      fromKeyboard.current = false;\n    };\n\n    const ifClick = (event) => {\n      if (fromKeyboard.current) {\n        return;\n      }\n\n      if (isOpen) {\n        handleClose(event);\n      } else {\n        handleOpen(event);\n      }\n    };\n\n    const openIfFocus = (event) => {\n      if (!fromKeyboard.current) {\n        return;\n      }\n\n      handleOpen(event);\n    };\n\n    const closeIfBlur = (event) => {\n      if (!fromKeyboard.current) {\n        return;\n      }\n\n      handleClose(event);\n    };\n\n    // set a mousedown event on the popper\n    if (popperRef.current) {\n      popperRef.current.addEventListener(\"mousedown\", detectMouseFocus);\n    }\n\n    // these triggers interfere, so we need to differentiate between keyboard and mouse focus\n    element.addEventListener(\"mousedown\", detectMouseFocus);\n\n    document.addEventListener(\"keydown\", detectKeyboardFocus);\n\n    // exclude certain events to allow for custom handling\n    const activeUntriggers = untriggers?.filter((untrigger) => {\n      // exclude if included in excludedUntriggers list\n      if (excludedUntriggers.includes(untrigger)) {\n        return false;\n      }\n\n      // exclude if untrigger is 'click' and 'closeOnClickOutside' is enabled\n      if (untrigger === \"click\") {\n        if (closeOnClickOutside) {\n          return false;\n        }\n\n        if (triggers?.includes(\"click\")) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    // create trigger listeners\n    triggers?.forEach((trigger) => {\n      if (trigger === \"click\") {\n        element.addEventListener(trigger, ifClick);\n      } else if (trigger === \"focus\") {\n        element.addEventListener(trigger, openIfFocus);\n      } else {\n        element.addEventListener(trigger, handleOpen);\n      }\n    });\n\n    // create untrigger listeners\n    activeUntriggers?.forEach((untrigger) => {\n      if (untrigger === \"click\") {\n        element.addEventListener(untrigger, ifClick);\n      } else if (untrigger === \"blur\") {\n        element.addEventListener(untrigger, closeIfBlur);\n      } else if (untrigger === \"scroll\") {\n        document.addEventListener(untrigger, closeOnScroll);\n\n        scrollableParentElements.forEach((el) =>\n          el.addEventListener(untrigger, closeOnScroll)\n        );\n      } else {\n        element.addEventListener(untrigger, handleClose);\n      }\n    });\n\n    // create mouseleave listener\n    element.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    // cleanup stage\n    return () => {\n      element.removeEventListener(\"mousedown\", detectMouseFocus);\n\n      document.removeEventListener(\"keydown\", detectKeyboardFocus);\n\n      // remove trigger listeners\n      triggers?.forEach((trigger) => {\n        if (trigger === \"click\") {\n          element.removeEventListener(trigger, ifClick);\n        } else if (trigger === \"focus\") {\n          element.removeEventListener(trigger, openIfFocus);\n        } else {\n          element.removeEventListener(trigger, handleOpen);\n        }\n      });\n\n      // remove untrigger listeners\n      activeUntriggers?.forEach((untrigger) => {\n        if (untrigger === \"click\") {\n          element.removeEventListener(untrigger, ifClick);\n        } else if (untrigger === \"blur\") {\n          element.removeEventListener(untrigger, closeIfBlur);\n        } else if (untrigger === \"scroll\") {\n          document.addEventListener(untrigger, closeOnScroll);\n\n          scrollableParentElements.forEach((el) =>\n            el.removeEventListener(untrigger, closeOnScroll)\n          );\n        } else {\n          element.removeEventListener(untrigger, handleClose);\n        }\n      });\n\n      // remove mouseleave listener\n      element.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, [\n    closeOnClickOutside,\n    triggers,\n    untriggers,\n    target,\n    targetRef,\n    handleOpen,\n    handleClose,\n    handleMouseLeave,\n    placement,\n    isOpen,\n    popperRef,\n    closeOnScroll,\n  ]);\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { useState } from \"react\";\nimport { Meta, Story, Canvas } from \"@storybook/addon-docs\";\nimport { Button, placementTypes, IconButton, MenuActionButton, MenuCategoryButton, MenuGroup, Menu, useMenu } from \"@braze/beacon-core\";\nimport { ScreenReaderText } from \".\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Core/Content Display/ScreenReaderText\" component={ScreenReaderText} mdxType=\"Meta\" />\n    <h2>{`Use cases`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ScreenReaderText`}</inlineCode>{` component is used to display information to users of screen readers that should be\ninvisible to sighted users. Note that in most cases, `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` should be used to set the text to read\nto screen readers. `}<inlineCode parentName=\"p\">{`ScreenReaderText`}</inlineCode>{` is only to be used for complex instructions, such as explaining how\nto open and close the menu.`}</p>\n    <h3>{`Basic use`}</h3>\n    <p>{`Here is an example of using an `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` on an `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`ScreenReaderText`}</inlineCode>{` to explain\nhow to access a `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` using an `}<inlineCode parentName=\"p\">{`aria-labelledby`}</inlineCode>{` attribute on the `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode></p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"basic use\" mdxType=\"Story\">\n    {() => {\n          const [menuState, targetRef] = useMenu();\n          return <div>\n          <h1 id=\"info-header\">Info</h1>\n          <IconButton aria-label=\"Get Help.\" name=\"cog\" mdxType=\"IconButton\" />\n          <ScreenReaderText id=\"menu-label\" mdxType=\"ScreenReaderText\">\n            Click the button to open the menu, click outside of the menu to close.\n          </ScreenReaderText>\n          <div>\n            <Button ref={targetRef} className=\"open-close-button\" id=\"menu1-button\" aria-haspopup=\"true\" aria-controls=\"menu1\" aria-expanded={menuState.isOpen} mdxType=\"Button\">\n              Open\n            </Button>\n          </div>\n          <Menu {...menuState} targetRef={targetRef} placement={\"bottom-start\"} closeOnClickInside={false} id=\"menu1\" aria-labelledby=\"menu1-button menu-label\" mdxType=\"Menu\">\n            <MenuActionButton id=\"mi1\" mdxType=\"MenuActionButton\">User Preview</MenuActionButton>\n            <MenuActionButton id=\"mi2\" mdxType=\"MenuActionButton\">CSV Export User Data</MenuActionButton>\n            <MenuActionButton id=\"mi3\" mdxType=\"MenuActionButton\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi4\" mdxType=\"MenuActionButton\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton disabled id=\"mi32\" mdxType=\"MenuActionButton\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </div>;\n        }}\n  </Story>\n    </Canvas>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { ScreenReaderText } from \"@braze/beacon-labs-screen-reader-text\";\n`}</code></pre>\n    <h2>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basicUse = (() => {\n  const [menuState, targetRef] = useMenu();\n  return <div>\n          <h1 id=\"info-header\">Info</h1>\n          <IconButton aria-label=\"Get Help.\" name=\"cog\" />\n          <ScreenReaderText id=\"menu-label\">\n            Click the button to open the menu, click outside of the menu to close.\n          </ScreenReaderText>\n          <div>\n            <Button ref={targetRef} className=\"open-close-button\" id=\"menu1-button\" aria-haspopup=\"true\" aria-controls=\"menu1\" aria-expanded={menuState.isOpen}>\n              Open\n            </Button>\n          </div>\n          <Menu {...menuState} targetRef={targetRef} placement={\"bottom-start\"} closeOnClickInside={false} id=\"menu1\" aria-labelledby=\"menu1-button menu-label\">\n            <MenuActionButton id=\"mi1\">User Preview</MenuActionButton>\n            <MenuActionButton id=\"mi2\">CSV Export User Data</MenuActionButton>\n            <MenuActionButton id=\"mi3\">\n              CSV Export Email Address\n            </MenuActionButton>\n            <MenuActionButton id=\"mi4\">\n              Export as Facebook Audience\n            </MenuActionButton>\n            <MenuActionButton disabled id=\"mi32\">\n              Export as Google+ Audience\n            </MenuActionButton>\n          </Menu>\n        </div>;\n});\nbasicUse.storyName = 'basic use';\nbasicUse.parameters = { storySource: { source: '() => {\\n  const [menuState, targetRef] = useMenu();\\n  return <div>\\n          <h1 id=\\\"info-header\\\">Info</h1>\\n          <IconButton aria-label=\\\"Get Help.\\\" name=\\\"cog\\\" />\\n          <ScreenReaderText id=\\\"menu-label\\\">\\n            Click the button to open the menu, click outside of the menu to close.\\n          </ScreenReaderText>\\n          <div>\\n            <Button ref={targetRef} className=\\\"open-close-button\\\" id=\\\"menu1-button\\\" aria-haspopup=\\\"true\\\" aria-controls=\\\"menu1\\\" aria-expanded={menuState.isOpen}>\\n              Open\\n            </Button>\\n          </div>\\n          <Menu {...menuState} targetRef={targetRef} placement={\\\"bottom-start\\\"} closeOnClickInside={false} id=\\\"menu1\\\" aria-labelledby=\\\"menu1-button menu-label\\\">\\n            <MenuActionButton id=\\\"mi1\\\">User Preview</MenuActionButton>\\n            <MenuActionButton id=\\\"mi2\\\">CSV Export User Data</MenuActionButton>\\n            <MenuActionButton id=\\\"mi3\\\">\\n              CSV Export Email Address\\n            </MenuActionButton>\\n            <MenuActionButton id=\\\"mi4\\\">\\n              Export as Facebook Audience\\n            </MenuActionButton>\\n            <MenuActionButton disabled id=\\\"mi32\\\">\\n              Export as Google+ Audience\\n            </MenuActionButton>\\n          </Menu>\\n        </div>;\\n}' } };\n\nconst componentMeta = { title: 'Core/Content Display/ScreenReaderText', component: ScreenReaderText, includeStories: [\"basicUse\"],  };\n\nconst mdxStoryNameToKey = {\"basic use\":\"basicUse\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Story, Canvas } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h1>\n    <p>{`Tables are meant to display tabular data. The components presented here\nprovide you the semantic tags to do so.`}</p>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <p>{`See below for some sample use cases on how the `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` component can be used\nin different ways.`}</p>\n    <h3 {...{\n      \"id\": \"basic-use\"\n    }}>{`Basic use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` component has a set of composable children components that allow you\nto build a table.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--basic-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"sorting\"\n    }}>{`Sorting`}</h3>\n    <p>{`Headers can display their current sort direction. If the\n`}<inlineCode parentName=\"p\">{`onSortColumn`}</inlineCode>{` callback is passed into a header cell, it will enter a state that\nrenders the column as clickable to enable sorting. The logic of sorting is handled externally.`}</p>\n    <p>{`When clicked, the column will call `}<inlineCode parentName=\"p\">{`onSortColumn`}</inlineCode>{` with the next sorting state as a parameter.\nThe order of sorting states is `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`\"desc\"`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`\"asc\"`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`\"desc\"`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`\"asc\"`}</inlineCode>{` -> ...\nIf a column is not currently being sorted, when clicked, it will call `}<inlineCode parentName=\"p\">{`onSortColumn`}</inlineCode>{` with the value `}<inlineCode parentName=\"p\">{`\"desc\"`}</inlineCode>{`.\nIf is it being sorted in descending order (`}<inlineCode parentName=\"p\">{`sortDirection`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`\"desc\"`}</inlineCode>{`), when clicked, it will call\n`}<inlineCode parentName=\"p\">{`onSortColumn`}</inlineCode>{` with the value `}<inlineCode parentName=\"p\">{`\"asc\"`}</inlineCode>{`. In addition, a tooltip is displayed when hovering over\na column.`}</p>\n    <p>{`The rows in a table should never be in a random/indeterminate order. Instead, when the table is loaded,\nit should be sorted by one of the columns and, whichever column is sorted should\nhave the sorting arrow icon pointing in the sort direction in its header.`}</p>\n    <p>{`The story below shows one possible way in which the sorting logic may be handled.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--sorting\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"custom-component-use\"\n    }}>{`Custom Component use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` and it's subcomponents can handle having custom components passed\nas children. As long as a valid table structure is built, custom content display\nthrough custom components is possible.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--custom-component-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"size-use\"\n    }}>{`Size use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` can display padding in several different ways. Below is an example\nof a `}<inlineCode parentName=\"p\">{`TableRow`}</inlineCode>{`, a `}<inlineCode parentName=\"p\">{`TableCell`}</inlineCode>{`, and a `}<inlineCode parentName=\"p\">{`TableHeaderCell`}</inlineCode>{` with the size overridden.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Use the knobs in the `}<inlineCode parentName=\"p\">{`Canvas`}</inlineCode>{` tab to see the different padding options!`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--size-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"vertical-rule\"\n    }}>{`Vertical Rule`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` component can optionally set vertical rules on the cells.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--vertical-rule\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"cell-styling-text-alignment\"\n    }}>{`Cell styling text alignment`}</h3>\n    <p>{`Header and body cells can be aligned horizontally via the `}<inlineCode parentName=\"p\">{`textAlign`}</inlineCode>{` prop,\nas seen below.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--text-alignment\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"cell-spanning-columns\"\n    }}>{`Cell spanning columns`}</h3>\n    <p>{`Cells can span multiple columns, as seen here:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--column-span\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"cell-spanning-row\"\n    }}>{`Cell spanning row`}</h3>\n    <p>{`Cells can span multiple rows, as seen here:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--row-span\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"table-spanning-full-width\"\n    }}>{`Table spanning full width`}</h3>\n    <p>{`Tables can be configured to be full-width with respect to its parent\ncontainer using the `}<inlineCode parentName=\"p\">{`fullWidth`}</inlineCode>{` prop:`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--full-width-table\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"non-interactive-use\"\n    }}>{`Non-interactive use`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Table`}</inlineCode>{` can have special styling applied if the content is not interactive.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--non-interactive-use\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-fixed-column-widths\"\n    }}>{`With fixed column widths`}</h3>\n    <p>{`To have a more grid-like table layout, you can use the `}<inlineCode parentName=\"p\">{`fixed`}</inlineCode>{` prop. This will ensure that,\nunless otherwise specified, all columns in the table will have the same width. Per the CSS\nspec, using this prop make it such that column spacing is is determined using the first row,\nso you `}<em parentName=\"p\">{`only`}</em>{` need to modify the column widths of the first row to affect the rest of the table.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: When using this prop, it's recommended you also set the `}<inlineCode parentName=\"p\">{`fullWidth`}</inlineCode>{` prop to\nmake sure the table takes up 100% of the width of its container. Otherwise, the table will\nhorizontally stretch depending on `}<inlineCode parentName=\"p\">{`truncation`}</inlineCode>{` settings (see below).`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--with-fixed-widths\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-ellipsis-truncation\"\n    }}>{`With ellipsis truncation`}</h3>\n    <p>{`You can pass `}<inlineCode parentName=\"p\">{`truncation=\"ellipsis\"`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`TableCell`}</inlineCode>{` elements to make their contents\ntruncate using `}<inlineCode parentName=\"p\">{`...`}</inlineCode>{`.`}</p>\n    <p>{`Note that when using this feature, you `}<em parentName=\"p\">{`must`}</em>{` also specify the `}<inlineCode parentName=\"p\">{`maxWidth`}</inlineCode>{` prop for each\ncell truncated using ellipses, otherwise they will not be truncated correctly. It's also\nrecommended that you set the corresponding `}<inlineCode parentName=\"p\">{`TableHeaderCell`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` prop to the same\nvalue. To prevent buggy behavior, ensure that `}<inlineCode parentName=\"p\">{`maxWidth`}</inlineCode>{` values across a column are all\nthe same.`}</p>\n    <p>{`If you need to fine tune column widths further, you should then use the `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` prop in\nthe `}<inlineCode parentName=\"p\">{`TableHeaderCell`}</inlineCode>{` component for the remaining columns.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--with-ellipsis-truncation\" mdxType=\"Story\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"with-forced-wrap\"\n    }}>{`With forced wrap`}</h3>\n    <p>{`You can pass `}<inlineCode parentName=\"p\">{`truncation=\"force-wrap\"`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`TableCell`}</inlineCode>{` elements to make their contents\nwrap around the cell regardless of space breaks.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story id=\"core-content-display-table--with-forced-wrap\" mdxType=\"Story\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableColumn,\n  TableColumnGroup,\n  TableFooter,\n  TableHeader,\n  TableHeaderCell,\n  TableRow,\n} from \"@braze/beacon-core\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"table-1\"\n    }}><inlineCode parentName=\"h3\">{`Table`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fixed`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates that the table should ignore content and use fixed widths for columns`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`interactive`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates if the tables is interactive`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none, `}</inlineCode>{`compact`}<inlineCode parentName=\"td\">{`, `}</inlineCode>{`comfortable\\`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"comfortable\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacing for the cells in the table`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`verticalRule`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates if there should be a vertical rule between the cells`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablebody\"\n    }}><inlineCode parentName=\"h3\">{`TableBody`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableSectionElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablecaption\"\n    }}><inlineCode parentName=\"h3\">{`TableCaption`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<TableCaptionProps>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablecell\"\n    }}><inlineCode parentName=\"h3\">{`TableCell`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( ReactElement, HTMLElement )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`component / HTML tag to render component as instead of default`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`colSpan`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of columns spanned by the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`maxWidth`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( number, string )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximum width to apply to cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableCellElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`rowSpan`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of rows spanned by the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`compact`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`comfortable`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"comfortable\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacing for the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`textAlign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text alignment within the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`truncation`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`ellipsis`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`wrap`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`force-wrap`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"wrap\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates what kind of truncation to apply to the table cell`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablecolumn\"\n    }}><inlineCode parentName=\"h3\">{`TableColumn`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableColElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablecolumngroup\"\n    }}><inlineCode parentName=\"h3\">{`TableColumnGroup`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableColElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tablefooter\"\n    }}><inlineCode parentName=\"h3\">{`TableFooter`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableSectionElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tableheader\"\n    }}><inlineCode parentName=\"h3\">{`TableHeader`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableSectionElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"tableheadercell\"\n    }}><inlineCode parentName=\"h3\">{`TableHeaderCell`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`as`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( ReactElement, HTMLElement )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`component / HTML tag to render component as instead of default`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`colSpan`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of columns spanned by the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`firstSortDirection`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`\"asc\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`\"desc\"`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"desc\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`direction to start with when sorting is initiated. Ignored unless onSortColumn is also passed in`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(e: React.MouseEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`callback invoked when column header is clicked; use for sorting (required to display sorting arrows)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTabelHeaderCellElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`rowSpan`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number of rows spanned by the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`scope`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`row`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`col`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`rowgroup`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`colgroup`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`indicates how the heading cell is being used`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none, `}</inlineCode>{`compact`}<inlineCode parentName=\"td\">{`, `}</inlineCode>{`comfortable\\`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"comfortable\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacing for the cell`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sortDirection`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`\"asc\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`\"desc\"`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`sorting direction for this column. Ignored unless onSortColumn is also passed in`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sortMessages`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`SortMessages`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`aria-label properties for the 3 sort states, `}<inlineCode parentName=\"td\">{`asc`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`desc`}</inlineCode>{`, and `}<inlineCode parentName=\"td\">{`none`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sortTooltipPlacement`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`auto`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`top-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-end`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left-start`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bottom`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desired placement of Tooltip for sorting relative to target. Ignored unless onSortColumn is also passed in`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`textAlign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`center`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text alignment within the cell`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"sortmessages-interface\"\n    }}><inlineCode parentName=\"h4\">{`SortMessages`}</inlineCode>{` interface`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SortMessages`}</inlineCode>{` interface is used to customize the `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` read for screen reader users. By default, the message is customized and localized:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const defaultAriaLabels = {\n  asc: t(\n          \"sorted-aria-label-asc\",\n          \"Sorted column { columnName } ascending. \" +\n            \"{nextSortDirection, select, desc {Select to sort descending} other {Select to remove sort}}\", ...),\n  desc: t(\n          \"sorted-aria-label-desc\",\n          \"Sorted column { columnName } descending. \" +\n            \"{nextSortDirection, select, asc {Select to sort ascending} other {Select to remove sort}}\", ...),\n  // if firstSortDirection is \"asc\"\n  none: t(\n          \"sort-aria-label-asc\",\n          \"Column { columnName }. Select to sort ascending\", ...),\n  // if firstSortDirection is \"desc\"\n  none: t(\n          \"sort-aria-label-desc\",\n          \"Column { columnName }. Select to sort descending\", ...), // if firstSortDirection is \"asc\"\n}\n`}</code></pre>\n    <p>{`To override with custom sort messages, this is the interface to pass. You are responsible for localizing as needed, and ensuring the message\nfits the pattern `}<inlineCode parentName=\"p\">{`Sorted column <column> ... Select to sort <sort info>`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface SortMessages {\n  /** message to display in aria-label for screen readers when the column is sorted in ascending order */\n  asc: string;\n  /** message to display in aria-label for screen readers when the column is sorted in descending order */\n  desc: string;\n  /** message to display in aria-label for screen readers when the column is not sorted */\n  none: string;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"tablerow\"\n    }}><inlineCode parentName=\"h3\">{`TableRow`}</inlineCode></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propName`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`propType`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isRequired`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOfType( node, arrayOf( node ) )`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the children to be passed into component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`className`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is the class name of the component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id to be passed to the DOM`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.RefObject<HTMLTableRowElement>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ref to get access to the DOM node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`oneOf( `}<inlineCode parentName=\"td\">{`none, `}</inlineCode>{`compact`}<inlineCode parentName=\"td\">{`, `}</inlineCode>{`comfortable\\`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"comfortable\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacing for the cell in the row`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useMemo, useState } from \\\"react\\\";\\nimport styled from \\\"styled-components\\\";\\nimport camelCase from \\\"lodash/camelCase\\\";\\nimport {\\n  colorSelector,\\n  getIntentColor,\\n  getSpacing,\\n} from \\\"@braze/beacon-styling\\\";\\nimport { ColorBaseType } from \\\"@braze/beacon-theme\\\";\\n\\nimport { TableHeader } from \\\"../TableHeader\\\";\\nimport { TableBody } from \\\"../TableBody\\\";\\nimport { TableHeaderCell } from \\\"../TableHeaderCell\\\";\\nimport { TableRow } from \\\"../TableRow\\\";\\nimport { TableCell } from \\\"../TableCell\\\";\\nimport { TableCaption } from \\\"../TableCaption\\\";\\nimport { TableFooter } from \\\"../TableFooter\\\";\\n\\nimport { Table } from \\\"./Table\\\";\\nimport page from \\\"./Table.docs.mdx\\\";\\n\\nconst DecoratedHeaderDot = styled.span`\\n  display: inline-block;\\n  margin-left: ${getSpacing(\\\"sm\\\")};\\n  background: ${(props: { color: ColorBaseType }) =>\\n    colorSelector(props, props.color, 300)};\\n  height: 10px;\\n  width: 10px;\\n  border-radius: 100%;\\n`;\\n\\nconst DecoratedHeader = ({ children, color }) => (\\n  <div style={{ display: \\\"flex\\\", alignItems: \\\"center\\\" }}>\\n    <span>{children}</span>\\n    <DecoratedHeaderDot color={color} />\\n  </div>\\n);\\n\\nconst OrangeRow = styled(TableRow)`\\n  background: ${getIntentColor(\\\"warning\\\", 300)};\\n  :hover {\\n    background: ${getIntentColor(\\\"warning\\\", 100)};\\n  }\\n`;\\n\\nconst ColorContent = styled.span<{ favColor: string }>`\\n  color: ${({ favColor }: { favColor: string }) => camelCase(favColor)};\\n`;\\n\\nconst DegreeContent = ({ children }) => (\\n  <React.Fragment>{children}&deg;</React.Fragment>\\n);\\n\\n\\nexport default {\\n  title: \\\"Core/Content Display/Table\\\",\\n  component: Table,\\n  parameters: {\\n    docs: { page },\\n  },\\n};\\n\\nexport const BasicUse = () => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nBasicUse.storyName = \\\"basic use\\\";\\n\\nexport const Sorting = () => {\\n  const data = useMemo(\\n    () => [\\n      {\\n        id: \\\"1\\\",\\n        name: \\\"Sarah\\\",\\n        favoriteColor: \\\"Forest Green\\\",\\n        birthYear: 1989,\\n        favoriteLine:\\n          \\\"She puzzled over this for some time, but at last a bright thought struck her. “Why, it’s a Looking-glass book, of course! And if I hold it up to a glass, the words will all go the right way again.”\\\",\\n      },\\n      {\\n        id: \\\"2\\\",\\n        name: \\\"Jeff\\\",\\n        favoriteColor: \\\"Pink\\\",\\n        birthYear: 1998,\\n        favoriteLine: \\\"The vorpal blade went snicker-snack!\\\",\\n      },\\n      {\\n        id: \\\"3\\\",\\n        name: \\\"Hubert Blaine Wolfesch...\\\",\\n        favoriteColor: \\\"Firebrick\\\",\\n        birthYear: 2002,\\n        favoriteLine: \\\"The Jabberwock, with eyes of flame\\\",\\n      },\\n      {\\n        id: \\\"4\\\",\\n        name: \\\"April\\\",\\n        favoriteColor: \\\"Cadet Blue\\\",\\n        birthYear: 1939,\\n        favoriteLine: \\\"All mimsy were the borogoves\\\",\\n      },\\n      {\\n        id: \\\"5\\\",\\n        name: \\\"Henry\\\",\\n        favoriteColor: \\\"Dark Goldenrod\\\",\\n        birthYear: 1975,\\n        favoriteLine: \\\"Long time the manxome foe he sought\\\",\\n      },\\n    ],\\n    []\\n  );\\n  const [sortDirection, setSortDirection] = useState<{\\n    col: string | undefined;\\n    dir: \\\"asc\\\" | \\\"desc\\\" | undefined | false;\\n  }>({\\n    col: undefined,\\n    dir: undefined,\\n  });\\n  const sorted = useMemo(() => {\\n    const { col, dir } = sortDirection;\\n\\n    if (!col || !dir) {\\n      return data;\\n    }\\n\\n    return [...data].sort((a, b) => {\\n      if (dir === \\\"asc\\\") {\\n        if (a[col] > b[col]) {\\n          return 1;\\n        }\\n\\n        if (a[col] < b[col]) {\\n          return -1;\\n        }\\n      } else if (dir === \\\"desc\\\") {\\n        if (a[col] > b[col]) {\\n          return -1;\\n        }\\n\\n        if (a[col] < b[col]) {\\n          return 1;\\n        }\\n      }\\n\\n      return 0;\\n    });\\n  }, [data, sortDirection]);\\n\\n  const handleClick =\\n    (col: string, firstSortDirection: typeof sortDirection[\\\"dir\\\"] = \\\"desc\\\") =>\\n    () => {\\n      if (col === sortDirection.col) {\\n        if (sortDirection.dir === \\\"asc\\\") {\\n          setSortDirection({ col, dir: \\\"desc\\\" });\\n        }\\n\\n        if (sortDirection.dir === \\\"desc\\\") {\\n          setSortDirection({ col, dir: \\\"asc\\\" });\\n        }\\n      } else {\\n        setSortDirection({ col, dir: firstSortDirection });\\n      }\\n    };\\n\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell\\n            sortDirection={sortDirection.col === \\\"name\\\" && sortDirection.dir}\\n            onClick={handleClick(\\\"name\\\")}\\n            textAlign=\\\"left\\\"\\n          >\\n            Name\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"favoriteColor\\\" && sortDirection.dir\\n            }\\n            onClick={handleClick(\\\"favoriteColor\\\")}\\n            sortMessages={{\\n              asc: \\\"Sorting by Hue, in ascending intensity\\\",\\n              desc: \\\"Sorting by Hue, in descending intensity\\\",\\n              none: \\\"Select to sort Color by Hue in descending intensity\\\",\\n            }}\\n            textAlign=\\\"center\\\"\\n          >\\n            Favorite Color\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"birthYear\\\" && sortDirection.dir\\n            }\\n            onClick={handleClick(\\\"birthYear\\\", \\\"asc\\\")}\\n            sortMessages={{\\n              asc: \\\"Sorting by Birth Year, in ascending awesomeness\\\",\\n              desc: \\\"Sorting by Birth Year, in descending awesomeness\\\",\\n              none: \\\"Select to sort Birth Year in ascending awesomeness\\\",\\n            }}\\n            firstSortDirection=\\\"asc\\\"\\n            textAlign=\\\"right\\\"\\n            width=\\\"80px\\\"\\n          >\\n            Birth Year\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"birthYear\\\" && sortDirection.dir === \\\"asc\\\"\\n                ? \\\"desc\\\"\\n                : \\\"asc\\\"\\n            }\\n            sortTooltipPlacement=\\\"right\\\"\\n            firstSortDirection=\\\"asc\\\"\\n            textAlign=\\\"right\\\"\\n          >\\n            Age\\n          </TableHeaderCell>\\n          <TableHeaderCell textAlign=\\\"left\\\" width=\\\"400px\\\">\\n            Favorite Line\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        {sorted.map((row) => (\\n          <TableRow key={row.id}>\\n            <TableCell textAlign=\\\"left\\\">{row.name}</TableCell>\\n            <TableCell textAlign=\\\"center\\\">\\n              <ColorContent favColor={row.favoriteColor}>\\n                {row.favoriteColor}\\n              </ColorContent>\\n            </TableCell>\\n            <TableCell textAlign=\\\"right\\\">{row.birthYear}</TableCell>\\n            <TableCell textAlign=\\\"right\\\">\\n              {new Date().getFullYear() - row.birthYear}\\n            </TableCell>\\n            <TableCell textAlign=\\\"left\\\">{row.favoriteLine}</TableCell>\\n          </TableRow>\\n        ))}\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nSorting.storyName = \\\"sorting\\\";\\n\\nexport const CustomComponentUse = () => {\\n  return (\\n    <Table>\\n      <TableCaption>\\n        Description of temperatures in different scales\\n      </TableCaption>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>&nbsp;</TableHeaderCell>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"primary\\\">Celcius</DecoratedHeader>\\n          </TableHeaderCell>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"danger\\\">Farenheit</DecoratedHeader>\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>Freezing</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>0</DegreeContent>\\n          </TableCell>\\n          <TableCell width=\\\"300px\\\">\\n            <DegreeContent>32</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>\\n            <span role=\\\"img\\\" aria-label=\\\"Smiling Face with Sunglasses\\\">\\n              😎\\n            </span>\\n          </TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>24</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>75</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>Boiling</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>100</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>212</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <OrangeRow>\\n          <TableHeaderCell>Paper auto-ignition</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>233</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>451</DegreeContent>\\n          </TableCell>\\n        </OrangeRow>\\n      </TableBody>\\n      <TableFooter>\\n        <TableRow>\\n          <TableCell colSpan={3}>\\n            For more information about temperature, visit{\\\" \\\"}\\n            <a\\n              href=\\\"https://en.wikipedia.org/wiki/Scale_of_temperature\\\"\\n              target=\\\"blank\\\"\\n            >\\n              this page\\n            </a>\\n            .\\n          </TableCell>\\n        </TableRow>\\n      </TableFooter>\\n    </Table>\\n  );\\n};\\n\\nCustomComponentUse.storyName = \\\"custom component use\\\";\\n\\nexport const SizeUse = ({\\n  tableSize,\\n  rowSize,\\n  cellSize,\\n  cellSizeApril,\\n}: {\\n  tableSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  rowSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  cellSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  cellSizeApril: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n}) => {\\n  const sizeOrDefault = (\\n    size: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\"\\n  ) => (size === \\\"default\\\" ? undefined : size);\\n\\n  return (\\n    <Table size={sizeOrDefault(tableSize)}>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"primary\\\">Name</DecoratedHeader>\\n          </TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell width=\\\"100px\\\">Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"300px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell\\n            size={sizeOrDefault(cellSize)}\\n            style={{ background: \\\"cadetBlue\\\" }}\\n          >\\n            <div\\n              style={{\\n                background: \\\"pink\\\",\\n                width: \\\"100%\\\",\\n                height: \\\"100%\\\",\\n              }}\\n            >\\n              23\\n            </div>\\n          </TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow size={sizeOrDefault(rowSize)}>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell\\n            size={sizeOrDefault(cellSizeApril)}\\n            style={{ background: \\\"cadetBlue\\\" }}\\n          >\\n            <div\\n              style={{\\n                background: \\\"pink\\\",\\n                width: \\\"100%\\\",\\n                height: \\\"100%\\\",\\n              }}\\n            >\\n              82\\n            </div>\\n          </TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nSizeUse.storyName = \\\"size use\\\";\\n\\nSizeUse.argTypes = {\\n  tableSize: {\\n    control: \\\"radio\\\",\\n    name: \\\"Table Size\\\",\\n    options: [\\\"default\\\", \\\"none\\\", \\\"compact\\\", \\\"comfortable\\\"],\\n    labels: {\\n      default: \\\"default size\\\",\\n      none: \\\"no size adjustment\\\",\\n      compact: \\\"compact\\\",\\n      comfortable: \\\"comfortable\\\",\\n    },\\n  },\\n  rowSize: {\\n    control: \\\"radio\\\",\\n    name: \\\"Row Size (April)\\\",\\n    options: [\\\"default\\\", \\\"none\\\", \\\"compact\\\", \\\"comfortable\\\"],\\n    labels: {\\n      default: \\\"default size\\\",\\n      none: \\\"no size adjustment\\\",\\n      compact: \\\"compact\\\",\\n      comfortable: \\\"comfortable\\\",\\n    },\\n  },\\n  cellSize: {\\n    control: \\\"radio\\\",\\n    name: \\\"Cell Size (Jeff, Age Cell)\\\",\\n    options: [\\\"default\\\", \\\"none\\\", \\\"compact\\\", \\\"comfortable\\\"],\\n    labels: {\\n      default: \\\"default size\\\",\\n      none: \\\"no size adjustment\\\",\\n      compact: \\\"compact\\\",\\n      comfortable: \\\"comfortable\\\",\\n    },\\n  },\\n  cellSizeApril: {\\n    control: \\\"radio\\\",\\n    name: \\\"Cell Size (April, Age Cell)\\\",\\n    options: [\\\"default\\\", \\\"none\\\", \\\"compact\\\", \\\"comfortable\\\"],\\n    labels: {\\n      default: \\\"default size\\\",\\n      none: \\\"no size adjustment\\\",\\n      compact: \\\"compact\\\",\\n      comfortable: \\\"comfortable\\\",\\n    },\\n  },\\n};\\n\\nSizeUse.args = {\\n  tableSize: \\\"default\\\",\\n  cellSize: \\\"comfortable\\\",\\n  rowSize: \\\"none\\\",\\n  cellSizeApril: \\\"none\\\",\\n};\\n\\nexport const VerticalRule = () => {\\n  return (\\n    <Table verticalRule>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"40%\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nVerticalRule.storyName = \\\"vertical rule\\\";\\n\\nexport const TextAlignment = () => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"left\\\">\\n            Left\\n          </TableHeaderCell>\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"center\\\">\\n            Center\\n          </TableHeaderCell>\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"right\\\">\\n            Right\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>\\n            prop <code>textAlign</code>\\n          </TableHeaderCell>\\n          <TableCell textAlign=\\\"left\\\">\\n            <code>left</code>\\n          </TableCell>\\n          <TableCell textAlign=\\\"center\\\">\\n            <code>center</code>\\n          </TableCell>\\n          <TableCell textAlign=\\\"right\\\">\\n            <code>right</code>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>en Français</TableHeaderCell>\\n          <TableCell textAlign=\\\"left\\\">Gauche</TableCell>\\n          <TableCell textAlign=\\\"center\\\">Centre</TableCell>\\n          <TableCell textAlign=\\\"right\\\">Droit</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nTextAlignment.storyName = \\\"text alignment\\\";\\n\\nexport const ColumnSpan = () => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell colSpan={2}>Headers can span too!</TableHeaderCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>1</TableHeaderCell>\\n          <TableHeaderCell>2</TableHeaderCell>\\n          <TableHeaderCell>3</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>no</TableCell>\\n          <TableCell>\\n            <code>colSpan</code>\\n          </TableCell>\\n          <TableCell>specified</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell colSpan={2}>\\n            <code>colSpan={\\\"{2}\\\"}</code>\\n          </TableCell>\\n          <TableCell>3</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell colSpan={3}>\\n            <code>colSpan={\\\"{3}\\\"}</code>\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nColumnSpan.storyName = \\\"column span\\\";\\n\\nexport const RowSpan = () => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell rowSpan={2} />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>1</TableHeaderCell>\\n          <TableCell rowSpan={3}>\\n            <code>\\n              rowSpan={\\\"{\\\"}3{\\\"}\\\"}\\n            </code>\\n          </TableCell>\\n          <TableCell rowSpan={2}>\\n            <code>\\n              rowSpan={\\\"{\\\"}2{\\\"}\\\"}\\n            </code>\\n          </TableCell>\\n          <TableCell>no</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>2</TableHeaderCell>\\n          <TableCell>\\n            <code>rowSpan</code>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>3</TableHeaderCell>\\n          <TableCell />\\n          <TableCell>specified</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nRowSpan.storyName = \\\"row span\\\";\\n\\nexport const FullWidthTable = () => {\\n  return (\\n    <Table fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          {Array(20)\\n            .fill(null)\\n            .map((_, idx) => (\\n              <TableHeaderCell key={idx}>{idx + 1}</TableHeaderCell>\\n            ))}\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        {Array(20)\\n          .fill(null)\\n          .map((_, idx) => (\\n            <TableRow key={idx}>\\n              <TableHeaderCell>{idx + 1}</TableHeaderCell>\\n              {Array(20)\\n                .fill(null)\\n                .map((_, jdx) => (\\n                  <TableCell key={jdx}>{(idx + 1) * (jdx + 1)}</TableCell>\\n                ))}\\n            </TableRow>\\n          ))}\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nFullWidthTable.storyName = \\\"full width table\\\";\\n\\nexport const NonInteractiveUse = () => {\\n  return (\\n    <Table interactive={false}>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nNonInteractiveUse.storyName = \\\"non-interactive use\\\";\\n\\nexport const WithFixedWidths = () => {\\n  return (\\n    <Table interactive={false} fullWidth fixed>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell>Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nWithFixedWidths.storyName = \\\"with fixed widths\\\";\\n\\nexport const WithEllipsisTruncation = () => {\\n  return (\\n    <Table interactive={false} fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\" maxWidth={500}>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nWithEllipsisTruncation.storyName = \\\"with ellipsis truncation\\\";\\n\\nexport const WithForcedWrap = () => {\\n  return (\\n    <Table interactive={false} fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\" maxWidth={500}>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n};\\n\\nWithForcedWrap.storyName = \\\"with forced wrap\\\";\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicUse\":{\"startLoc\":{\"col\":24,\"line\":63},\"endLoc\":{\"col\":1,\"line\":122},\"startBody\":{\"col\":24,\"line\":63},\"endBody\":{\"col\":1,\"line\":122}},\"Sorting\":{\"startLoc\":{\"col\":23,\"line\":126},\"endLoc\":{\"col\":1,\"line\":298},\"startBody\":{\"col\":23,\"line\":126},\"endBody\":{\"col\":1,\"line\":298}},\"CustomComponentUse\":{\"startLoc\":{\"col\":34,\"line\":302},\"endLoc\":{\"col\":1,\"line\":377},\"startBody\":{\"col\":34,\"line\":302},\"endBody\":{\"col\":1,\"line\":377}},\"SizeUse\":{\"startLoc\":{\"col\":23,\"line\":381},\"endLoc\":{\"col\":1,\"line\":482},\"startBody\":{\"col\":23,\"line\":381},\"endBody\":{\"col\":1,\"line\":482}},\"VerticalRule\":{\"startLoc\":{\"col\":28,\"line\":540},\"endLoc\":{\"col\":1,\"line\":599},\"startBody\":{\"col\":28,\"line\":540},\"endBody\":{\"col\":1,\"line\":599}},\"TextAlignment\":{\"startLoc\":{\"col\":29,\"line\":603},\"endLoc\":{\"col\":1,\"line\":644},\"startBody\":{\"col\":29,\"line\":603},\"endBody\":{\"col\":1,\"line\":644}},\"ColumnSpan\":{\"startLoc\":{\"col\":26,\"line\":648},\"endLoc\":{\"col\":1,\"line\":684},\"startBody\":{\"col\":26,\"line\":648},\"endBody\":{\"col\":1,\"line\":684}},\"RowSpan\":{\"startLoc\":{\"col\":23,\"line\":688},\"endLoc\":{\"col\":1,\"line\":733},\"startBody\":{\"col\":23,\"line\":688},\"endBody\":{\"col\":1,\"line\":733}},\"FullWidthTable\":{\"startLoc\":{\"col\":30,\"line\":737},\"endLoc\":{\"col\":1,\"line\":766},\"startBody\":{\"col\":30,\"line\":737},\"endBody\":{\"col\":1,\"line\":766}},\"NonInteractiveUse\":{\"startLoc\":{\"col\":33,\"line\":770},\"endLoc\":{\"col\":1,\"line\":829},\"startBody\":{\"col\":33,\"line\":770},\"endBody\":{\"col\":1,\"line\":829}},\"WithFixedWidths\":{\"startLoc\":{\"col\":31,\"line\":833},\"endLoc\":{\"col\":1,\"line\":900},\"startBody\":{\"col\":31,\"line\":833},\"endBody\":{\"col\":1,\"line\":900}},\"WithEllipsisTruncation\":{\"startLoc\":{\"col\":38,\"line\":904},\"endLoc\":{\"col\":1,\"line\":971},\"startBody\":{\"col\":38,\"line\":904},\"endBody\":{\"col\":1,\"line\":971}},\"WithForcedWrap\":{\"startLoc\":{\"col\":30,\"line\":975},\"endLoc\":{\"col\":1,\"line\":1042},\"startBody\":{\"col\":30,\"line\":975},\"endBody\":{\"col\":1,\"line\":1042}}};\n    \nimport React, { useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport camelCase from \"lodash/camelCase\";\nimport {\n  colorSelector,\n  getIntentColor,\n  getSpacing,\n} from \"@braze/beacon-styling\";\nimport { ColorBaseType } from \"@braze/beacon-theme\";\n\nimport { TableHeader } from \"../TableHeader\";\nimport { TableBody } from \"../TableBody\";\nimport { TableHeaderCell } from \"../TableHeaderCell\";\nimport { TableRow } from \"../TableRow\";\nimport { TableCell } from \"../TableCell\";\nimport { TableCaption } from \"../TableCaption\";\nimport { TableFooter } from \"../TableFooter\";\n\nimport { Table } from \"./Table\";\nimport page from \"./Table.docs.mdx\";\n\nconst DecoratedHeaderDot = styled.span`\n  display: inline-block;\n  margin-left: ${getSpacing(\"sm\")};\n  background: ${(props: { color: ColorBaseType }) =>\n    colorSelector(props, props.color, 300)};\n  height: 10px;\n  width: 10px;\n  border-radius: 100%;\n`;\n\nconst DecoratedHeader = ({ children, color }) => (\n  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n    <span>{children}</span>\n    <DecoratedHeaderDot color={color} />\n  </div>\n);\n\nconst OrangeRow = styled(TableRow)`\n  background: ${getIntentColor(\"warning\", 300)};\n  :hover {\n    background: ${getIntentColor(\"warning\", 100)};\n  }\n`;\n\nconst ColorContent = styled.span<{ favColor: string }>`\n  color: ${({ favColor }: { favColor: string }) => camelCase(favColor)};\n`;\n\nconst DegreeContent = ({ children }) => (\n  <React.Fragment>{children}&deg;</React.Fragment>\n);\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  title: \"Core/Content Display/Table\",\n  component: Table,\n  parameters: {\n    docs: { page },\n  },\n};\n\nexport const BasicUse = () => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"500px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell>All mimsy were the borogoves</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell>Long time the manxome foe he sought</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nBasicUse.storyName = \"basic use\";\n\nexport const Sorting = () => {\n  const data = useMemo(\n    () => [\n      {\n        id: \"1\",\n        name: \"Sarah\",\n        favoriteColor: \"Forest Green\",\n        birthYear: 1989,\n        favoriteLine:\n          \"She puzzled over this for some time, but at last a bright thought struck her. “Why, it’s a Looking-glass book, of course! And if I hold it up to a glass, the words will all go the right way again.”\",\n      },\n      {\n        id: \"2\",\n        name: \"Jeff\",\n        favoriteColor: \"Pink\",\n        birthYear: 1998,\n        favoriteLine: \"The vorpal blade went snicker-snack!\",\n      },\n      {\n        id: \"3\",\n        name: \"Hubert Blaine Wolfesch...\",\n        favoriteColor: \"Firebrick\",\n        birthYear: 2002,\n        favoriteLine: \"The Jabberwock, with eyes of flame\",\n      },\n      {\n        id: \"4\",\n        name: \"April\",\n        favoriteColor: \"Cadet Blue\",\n        birthYear: 1939,\n        favoriteLine: \"All mimsy were the borogoves\",\n      },\n      {\n        id: \"5\",\n        name: \"Henry\",\n        favoriteColor: \"Dark Goldenrod\",\n        birthYear: 1975,\n        favoriteLine: \"Long time the manxome foe he sought\",\n      },\n    ],\n    []\n  );\n  const [sortDirection, setSortDirection] = useState<{\n    col: string | undefined;\n    dir: \"asc\" | \"desc\" | undefined | false;\n  }>({\n    col: undefined,\n    dir: undefined,\n  });\n  const sorted = useMemo(() => {\n    const { col, dir } = sortDirection;\n\n    if (!col || !dir) {\n      return data;\n    }\n\n    return [...data].sort((a, b) => {\n      if (dir === \"asc\") {\n        if (a[col] > b[col]) {\n          return 1;\n        }\n\n        if (a[col] < b[col]) {\n          return -1;\n        }\n      } else if (dir === \"desc\") {\n        if (a[col] > b[col]) {\n          return -1;\n        }\n\n        if (a[col] < b[col]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    });\n  }, [data, sortDirection]);\n\n  const handleClick =\n    (col: string, firstSortDirection: typeof sortDirection[\"dir\"] = \"desc\") =>\n    () => {\n      if (col === sortDirection.col) {\n        if (sortDirection.dir === \"asc\") {\n          setSortDirection({ col, dir: \"desc\" });\n        }\n\n        if (sortDirection.dir === \"desc\") {\n          setSortDirection({ col, dir: \"asc\" });\n        }\n      } else {\n        setSortDirection({ col, dir: firstSortDirection });\n      }\n    };\n\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell\n            sortDirection={sortDirection.col === \"name\" && sortDirection.dir}\n            onClick={handleClick(\"name\")}\n            textAlign=\"left\"\n          >\n            Name\n          </TableHeaderCell>\n          <TableHeaderCell\n            sortDirection={\n              sortDirection.col === \"favoriteColor\" && sortDirection.dir\n            }\n            onClick={handleClick(\"favoriteColor\")}\n            sortMessages={{\n              asc: \"Sorting by Hue, in ascending intensity\",\n              desc: \"Sorting by Hue, in descending intensity\",\n              none: \"Select to sort Color by Hue in descending intensity\",\n            }}\n            textAlign=\"center\"\n          >\n            Favorite Color\n          </TableHeaderCell>\n          <TableHeaderCell\n            sortDirection={\n              sortDirection.col === \"birthYear\" && sortDirection.dir\n            }\n            onClick={handleClick(\"birthYear\", \"asc\")}\n            sortMessages={{\n              asc: \"Sorting by Birth Year, in ascending awesomeness\",\n              desc: \"Sorting by Birth Year, in descending awesomeness\",\n              none: \"Select to sort Birth Year in ascending awesomeness\",\n            }}\n            firstSortDirection=\"asc\"\n            textAlign=\"right\"\n            width=\"80px\"\n          >\n            Birth Year\n          </TableHeaderCell>\n          <TableHeaderCell\n            sortDirection={\n              sortDirection.col === \"birthYear\" && sortDirection.dir === \"asc\"\n                ? \"desc\"\n                : \"asc\"\n            }\n            sortTooltipPlacement=\"right\"\n            firstSortDirection=\"asc\"\n            textAlign=\"right\"\n          >\n            Age\n          </TableHeaderCell>\n          <TableHeaderCell textAlign=\"left\" width=\"400px\">\n            Favorite Line\n          </TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {sorted.map((row) => (\n          <TableRow key={row.id}>\n            <TableCell textAlign=\"left\">{row.name}</TableCell>\n            <TableCell textAlign=\"center\">\n              <ColorContent favColor={row.favoriteColor}>\n                {row.favoriteColor}\n              </ColorContent>\n            </TableCell>\n            <TableCell textAlign=\"right\">{row.birthYear}</TableCell>\n            <TableCell textAlign=\"right\">\n              {new Date().getFullYear() - row.birthYear}\n            </TableCell>\n            <TableCell textAlign=\"left\">{row.favoriteLine}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};;\n\nSorting.storyName = \"sorting\";\n\nexport const CustomComponentUse = () => {\n  return (\n    <Table>\n      <TableCaption>\n        Description of temperatures in different scales\n      </TableCaption>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>&nbsp;</TableHeaderCell>\n          <TableHeaderCell size=\"none\">\n            <DecoratedHeader color=\"primary\">Celcius</DecoratedHeader>\n          </TableHeaderCell>\n          <TableHeaderCell size=\"none\">\n            <DecoratedHeader color=\"danger\">Farenheit</DecoratedHeader>\n          </TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableHeaderCell>Freezing</TableHeaderCell>\n          <TableCell>\n            <DegreeContent>0</DegreeContent>\n          </TableCell>\n          <TableCell width=\"300px\">\n            <DegreeContent>32</DegreeContent>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>\n            <span role=\"img\" aria-label=\"Smiling Face with Sunglasses\">\n              😎\n            </span>\n          </TableHeaderCell>\n          <TableCell>\n            <DegreeContent>24</DegreeContent>\n          </TableCell>\n          <TableCell>\n            <DegreeContent>75</DegreeContent>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>Boiling</TableHeaderCell>\n          <TableCell>\n            <DegreeContent>100</DegreeContent>\n          </TableCell>\n          <TableCell>\n            <DegreeContent>212</DegreeContent>\n          </TableCell>\n        </TableRow>\n        <OrangeRow>\n          <TableHeaderCell>Paper auto-ignition</TableHeaderCell>\n          <TableCell>\n            <DegreeContent>233</DegreeContent>\n          </TableCell>\n          <TableCell>\n            <DegreeContent>451</DegreeContent>\n          </TableCell>\n        </OrangeRow>\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableCell colSpan={3}>\n            For more information about temperature, visit{\" \"}\n            <a\n              href=\"https://en.wikipedia.org/wiki/Scale_of_temperature\"\n              target=\"blank\"\n            >\n              this page\n            </a>\n            .\n          </TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n};;\n\nCustomComponentUse.storyName = \"custom component use\";\n\nexport const SizeUse = ({\n  tableSize,\n  rowSize,\n  cellSize,\n  cellSizeApril,\n}: {\n  tableSize: \"default\" | \"none\" | \"compact\" | \"comfortable\";\n  rowSize: \"default\" | \"none\" | \"compact\" | \"comfortable\";\n  cellSize: \"default\" | \"none\" | \"compact\" | \"comfortable\";\n  cellSizeApril: \"default\" | \"none\" | \"compact\" | \"comfortable\";\n}) => {\n  const sizeOrDefault = (\n    size: \"default\" | \"none\" | \"compact\" | \"comfortable\"\n  ) => (size === \"default\" ? undefined : size);\n\n  return (\n    <Table size={sizeOrDefault(tableSize)}>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell size=\"none\">\n            <DecoratedHeader color=\"primary\">Name</DecoratedHeader>\n          </TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell width=\"100px\">Age</TableHeaderCell>\n          <TableHeaderCell width=\"300px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell\n            size={sizeOrDefault(cellSize)}\n            style={{ background: \"cadetBlue\" }}\n          >\n            <div\n              style={{\n                background: \"pink\",\n                width: \"100%\",\n                height: \"100%\",\n              }}\n            >\n              23\n            </div>\n          </TableCell>\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\n        </TableRow>\n        <TableRow size={sizeOrDefault(rowSize)}>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell\n            size={sizeOrDefault(cellSizeApril)}\n            style={{ background: \"cadetBlue\" }}\n          >\n            <div\n              style={{\n                background: \"pink\",\n                width: \"100%\",\n                height: \"100%\",\n              }}\n            >\n              82\n            </div>\n          </TableCell>\n          <TableCell>All mimsy were the borogoves</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell>Long time the manxome foe he sought</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nSizeUse.storyName = \"size use\";\n\nSizeUse.argTypes = {\n  tableSize: {\n    control: \"radio\",\n    name: \"Table Size\",\n    options: [\"default\", \"none\", \"compact\", \"comfortable\"],\n    labels: {\n      default: \"default size\",\n      none: \"no size adjustment\",\n      compact: \"compact\",\n      comfortable: \"comfortable\",\n    },\n  },\n  rowSize: {\n    control: \"radio\",\n    name: \"Row Size (April)\",\n    options: [\"default\", \"none\", \"compact\", \"comfortable\"],\n    labels: {\n      default: \"default size\",\n      none: \"no size adjustment\",\n      compact: \"compact\",\n      comfortable: \"comfortable\",\n    },\n  },\n  cellSize: {\n    control: \"radio\",\n    name: \"Cell Size (Jeff, Age Cell)\",\n    options: [\"default\", \"none\", \"compact\", \"comfortable\"],\n    labels: {\n      default: \"default size\",\n      none: \"no size adjustment\",\n      compact: \"compact\",\n      comfortable: \"comfortable\",\n    },\n  },\n  cellSizeApril: {\n    control: \"radio\",\n    name: \"Cell Size (April, Age Cell)\",\n    options: [\"default\", \"none\", \"compact\", \"comfortable\"],\n    labels: {\n      default: \"default size\",\n      none: \"no size adjustment\",\n      compact: \"compact\",\n      comfortable: \"comfortable\",\n    },\n  },\n};\n\nSizeUse.args = {\n  tableSize: \"default\",\n  cellSize: \"comfortable\",\n  rowSize: \"none\",\n  cellSizeApril: \"none\",\n};\n\nexport const VerticalRule = () => {\n  return (\n    <Table verticalRule>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"40%\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell>All mimsy were the borogoves</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell>Long time the manxome foe he sought</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nVerticalRule.storyName = \"vertical rule\";\n\nexport const TextAlignment = () => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell />\n          <TableHeaderCell width=\"25%\" textAlign=\"left\">\n            Left\n          </TableHeaderCell>\n          <TableHeaderCell width=\"25%\" textAlign=\"center\">\n            Center\n          </TableHeaderCell>\n          <TableHeaderCell width=\"25%\" textAlign=\"right\">\n            Right\n          </TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableHeaderCell>\n            prop <code>textAlign</code>\n          </TableHeaderCell>\n          <TableCell textAlign=\"left\">\n            <code>left</code>\n          </TableCell>\n          <TableCell textAlign=\"center\">\n            <code>center</code>\n          </TableCell>\n          <TableCell textAlign=\"right\">\n            <code>right</code>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>en Français</TableHeaderCell>\n          <TableCell textAlign=\"left\">Gauche</TableCell>\n          <TableCell textAlign=\"center\">Centre</TableCell>\n          <TableCell textAlign=\"right\">Droit</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nTextAlignment.storyName = \"text alignment\";\n\nexport const ColumnSpan = () => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell />\n          <TableHeaderCell colSpan={2}>Headers can span too!</TableHeaderCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>1</TableHeaderCell>\n          <TableHeaderCell>2</TableHeaderCell>\n          <TableHeaderCell>3</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>no</TableCell>\n          <TableCell>\n            <code>colSpan</code>\n          </TableCell>\n          <TableCell>specified</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={2}>\n            <code>colSpan={\"{2}\"}</code>\n          </TableCell>\n          <TableCell>3</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={3}>\n            <code>colSpan={\"{3}\"}</code>\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nColumnSpan.storyName = \"column span\";\n\nexport const RowSpan = () => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell rowSpan={2} />\n          <TableHeaderCell />\n          <TableHeaderCell />\n          <TableHeaderCell />\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell />\n          <TableHeaderCell />\n          <TableHeaderCell />\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableHeaderCell>1</TableHeaderCell>\n          <TableCell rowSpan={3}>\n            <code>\n              rowSpan={\"{\"}3{\"}\"}\n            </code>\n          </TableCell>\n          <TableCell rowSpan={2}>\n            <code>\n              rowSpan={\"{\"}2{\"}\"}\n            </code>\n          </TableCell>\n          <TableCell>no</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>2</TableHeaderCell>\n          <TableCell>\n            <code>rowSpan</code>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableHeaderCell>3</TableHeaderCell>\n          <TableCell />\n          <TableCell>specified</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nRowSpan.storyName = \"row span\";\n\nexport const FullWidthTable = () => {\n  return (\n    <Table fullWidth>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell />\n          {Array(20)\n            .fill(null)\n            .map((_, idx) => (\n              <TableHeaderCell key={idx}>{idx + 1}</TableHeaderCell>\n            ))}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {Array(20)\n          .fill(null)\n          .map((_, idx) => (\n            <TableRow key={idx}>\n              <TableHeaderCell>{idx + 1}</TableHeaderCell>\n              {Array(20)\n                .fill(null)\n                .map((_, jdx) => (\n                  <TableCell key={jdx}>{(idx + 1) * (jdx + 1)}</TableCell>\n                ))}\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  );\n};;\n\nFullWidthTable.storyName = \"full width table\";\n\nexport const NonInteractiveUse = () => {\n  return (\n    <Table interactive={false}>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"500px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell>All mimsy were the borogoves</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell>Long time the manxome foe he sought</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nNonInteractiveUse.storyName = \"non-interactive use\";\n\nexport const WithFixedWidths = () => {\n  return (\n    <Table interactive={false} fullWidth fixed>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell>Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            The vorpal blade went snicker-snack!\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            The Jabberwock, with eyes of flame\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            All mimsy were the borogoves\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            Long time the manxome foe he sought\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nWithFixedWidths.storyName = \"with fixed widths\";\n\nexport const WithEllipsisTruncation = () => {\n  return (\n    <Table interactive={false} fullWidth>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"500px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell truncation=\"ellipsis\" maxWidth={500}>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            The vorpal blade went snicker-snack!\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            The Jabberwock, with eyes of flame\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            All mimsy were the borogoves\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell truncation=\"ellipsis\">\n            Long time the manxome foe he sought\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};;\n\nWithEllipsisTruncation.storyName = \"with ellipsis truncation\";\n\nexport const WithForcedWrap = () => {\n  return (\n    <Table interactive={false} fullWidth>\n      <TableHeader>\n        <TableRow>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\n          <TableHeaderCell>Age</TableHeaderCell>\n          <TableHeaderCell width=\"500px\">Favorite Line</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableCell>Sarah</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"forestGreen\">Forest Green</ColorContent>\n          </TableCell>\n          <TableCell>32</TableCell>\n          <TableCell truncation=\"force-wrap\" maxWidth={500}>\n            She puzzled over this for some time, but at last a bright thought\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\n            hold it up to a glass, the words will all go the right way again.”\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Jeff</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"pink\">Pink</ColorContent>\n          </TableCell>\n          <TableCell>23</TableCell>\n          <TableCell truncation=\"force-wrap\">\n            The vorpal blade went snicker-snack!\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Janice</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"firebrick\">Firebrick</ColorContent>\n          </TableCell>\n          <TableCell>19</TableCell>\n          <TableCell truncation=\"force-wrap\">\n            The Jabberwock, with eyes of flame\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>April</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"cadetBlue\">Cadet Blue</ColorContent>\n          </TableCell>\n          <TableCell>82</TableCell>\n          <TableCell truncation=\"force-wrap\">\n            All mimsy were the borogoves\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Henry</TableCell>\n          <TableCell>\n            <ColorContent favColor=\"darkGoldenrod\">Dark Goldenrod</ColorContent>\n          </TableCell>\n          <TableCell>46</TableCell>\n          <TableCell truncation=\"force-wrap\">\n            Long time the manxome foe he sought\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n\nWithForcedWrap.storyName = \"with forced wrap\";\n\n\n\nBasicUse.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...BasicUse.parameters };\nSorting.parameters = { storySource: { source: \"() => {\\n  const data = useMemo(\\n    () => [\\n      {\\n        id: \\\"1\\\",\\n        name: \\\"Sarah\\\",\\n        favoriteColor: \\\"Forest Green\\\",\\n        birthYear: 1989,\\n        favoriteLine:\\n          \\\"She puzzled over this for some time, but at last a bright thought struck her. “Why, it’s a Looking-glass book, of course! And if I hold it up to a glass, the words will all go the right way again.”\\\",\\n      },\\n      {\\n        id: \\\"2\\\",\\n        name: \\\"Jeff\\\",\\n        favoriteColor: \\\"Pink\\\",\\n        birthYear: 1998,\\n        favoriteLine: \\\"The vorpal blade went snicker-snack!\\\",\\n      },\\n      {\\n        id: \\\"3\\\",\\n        name: \\\"Hubert Blaine Wolfesch...\\\",\\n        favoriteColor: \\\"Firebrick\\\",\\n        birthYear: 2002,\\n        favoriteLine: \\\"The Jabberwock, with eyes of flame\\\",\\n      },\\n      {\\n        id: \\\"4\\\",\\n        name: \\\"April\\\",\\n        favoriteColor: \\\"Cadet Blue\\\",\\n        birthYear: 1939,\\n        favoriteLine: \\\"All mimsy were the borogoves\\\",\\n      },\\n      {\\n        id: \\\"5\\\",\\n        name: \\\"Henry\\\",\\n        favoriteColor: \\\"Dark Goldenrod\\\",\\n        birthYear: 1975,\\n        favoriteLine: \\\"Long time the manxome foe he sought\\\",\\n      },\\n    ],\\n    []\\n  );\\n  const [sortDirection, setSortDirection] = useState<{\\n    col: string | undefined;\\n    dir: \\\"asc\\\" | \\\"desc\\\" | undefined | false;\\n  }>({\\n    col: undefined,\\n    dir: undefined,\\n  });\\n  const sorted = useMemo(() => {\\n    const { col, dir } = sortDirection;\\n\\n    if (!col || !dir) {\\n      return data;\\n    }\\n\\n    return [...data].sort((a, b) => {\\n      if (dir === \\\"asc\\\") {\\n        if (a[col] > b[col]) {\\n          return 1;\\n        }\\n\\n        if (a[col] < b[col]) {\\n          return -1;\\n        }\\n      } else if (dir === \\\"desc\\\") {\\n        if (a[col] > b[col]) {\\n          return -1;\\n        }\\n\\n        if (a[col] < b[col]) {\\n          return 1;\\n        }\\n      }\\n\\n      return 0;\\n    });\\n  }, [data, sortDirection]);\\n\\n  const handleClick =\\n    (col: string, firstSortDirection: typeof sortDirection[\\\"dir\\\"] = \\\"desc\\\") =>\\n    () => {\\n      if (col === sortDirection.col) {\\n        if (sortDirection.dir === \\\"asc\\\") {\\n          setSortDirection({ col, dir: \\\"desc\\\" });\\n        }\\n\\n        if (sortDirection.dir === \\\"desc\\\") {\\n          setSortDirection({ col, dir: \\\"asc\\\" });\\n        }\\n      } else {\\n        setSortDirection({ col, dir: firstSortDirection });\\n      }\\n    };\\n\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell\\n            sortDirection={sortDirection.col === \\\"name\\\" && sortDirection.dir}\\n            onClick={handleClick(\\\"name\\\")}\\n            textAlign=\\\"left\\\"\\n          >\\n            Name\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"favoriteColor\\\" && sortDirection.dir\\n            }\\n            onClick={handleClick(\\\"favoriteColor\\\")}\\n            sortMessages={{\\n              asc: \\\"Sorting by Hue, in ascending intensity\\\",\\n              desc: \\\"Sorting by Hue, in descending intensity\\\",\\n              none: \\\"Select to sort Color by Hue in descending intensity\\\",\\n            }}\\n            textAlign=\\\"center\\\"\\n          >\\n            Favorite Color\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"birthYear\\\" && sortDirection.dir\\n            }\\n            onClick={handleClick(\\\"birthYear\\\", \\\"asc\\\")}\\n            sortMessages={{\\n              asc: \\\"Sorting by Birth Year, in ascending awesomeness\\\",\\n              desc: \\\"Sorting by Birth Year, in descending awesomeness\\\",\\n              none: \\\"Select to sort Birth Year in ascending awesomeness\\\",\\n            }}\\n            firstSortDirection=\\\"asc\\\"\\n            textAlign=\\\"right\\\"\\n            width=\\\"80px\\\"\\n          >\\n            Birth Year\\n          </TableHeaderCell>\\n          <TableHeaderCell\\n            sortDirection={\\n              sortDirection.col === \\\"birthYear\\\" && sortDirection.dir === \\\"asc\\\"\\n                ? \\\"desc\\\"\\n                : \\\"asc\\\"\\n            }\\n            sortTooltipPlacement=\\\"right\\\"\\n            firstSortDirection=\\\"asc\\\"\\n            textAlign=\\\"right\\\"\\n          >\\n            Age\\n          </TableHeaderCell>\\n          <TableHeaderCell textAlign=\\\"left\\\" width=\\\"400px\\\">\\n            Favorite Line\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        {sorted.map((row) => (\\n          <TableRow key={row.id}>\\n            <TableCell textAlign=\\\"left\\\">{row.name}</TableCell>\\n            <TableCell textAlign=\\\"center\\\">\\n              <ColorContent favColor={row.favoriteColor}>\\n                {row.favoriteColor}\\n              </ColorContent>\\n            </TableCell>\\n            <TableCell textAlign=\\\"right\\\">{row.birthYear}</TableCell>\\n            <TableCell textAlign=\\\"right\\\">\\n              {new Date().getFullYear() - row.birthYear}\\n            </TableCell>\\n            <TableCell textAlign=\\\"left\\\">{row.favoriteLine}</TableCell>\\n          </TableRow>\\n        ))}\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...Sorting.parameters };\nCustomComponentUse.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableCaption>\\n        Description of temperatures in different scales\\n      </TableCaption>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>&nbsp;</TableHeaderCell>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"primary\\\">Celcius</DecoratedHeader>\\n          </TableHeaderCell>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"danger\\\">Farenheit</DecoratedHeader>\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>Freezing</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>0</DegreeContent>\\n          </TableCell>\\n          <TableCell width=\\\"300px\\\">\\n            <DegreeContent>32</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>\\n            <span role=\\\"img\\\" aria-label=\\\"Smiling Face with Sunglasses\\\">\\n              😎\\n            </span>\\n          </TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>24</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>75</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>Boiling</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>100</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>212</DegreeContent>\\n          </TableCell>\\n        </TableRow>\\n        <OrangeRow>\\n          <TableHeaderCell>Paper auto-ignition</TableHeaderCell>\\n          <TableCell>\\n            <DegreeContent>233</DegreeContent>\\n          </TableCell>\\n          <TableCell>\\n            <DegreeContent>451</DegreeContent>\\n          </TableCell>\\n        </OrangeRow>\\n      </TableBody>\\n      <TableFooter>\\n        <TableRow>\\n          <TableCell colSpan={3}>\\n            For more information about temperature, visit{\\\" \\\"}\\n            <a\\n              href=\\\"https://en.wikipedia.org/wiki/Scale_of_temperature\\\"\\n              target=\\\"blank\\\"\\n            >\\n              this page\\n            </a>\\n            .\\n          </TableCell>\\n        </TableRow>\\n      </TableFooter>\\n    </Table>\\n  );\\n}\" }, ...CustomComponentUse.parameters };\nSizeUse.parameters = { storySource: { source: \"({\\n  tableSize,\\n  rowSize,\\n  cellSize,\\n  cellSizeApril,\\n}: {\\n  tableSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  rowSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  cellSize: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n  cellSizeApril: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\";\\n}) => {\\n  const sizeOrDefault = (\\n    size: \\\"default\\\" | \\\"none\\\" | \\\"compact\\\" | \\\"comfortable\\\"\\n  ) => (size === \\\"default\\\" ? undefined : size);\\n\\n  return (\\n    <Table size={sizeOrDefault(tableSize)}>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell size=\\\"none\\\">\\n            <DecoratedHeader color=\\\"primary\\\">Name</DecoratedHeader>\\n          </TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell width=\\\"100px\\\">Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"300px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell\\n            size={sizeOrDefault(cellSize)}\\n            style={{ background: \\\"cadetBlue\\\" }}\\n          >\\n            <div\\n              style={{\\n                background: \\\"pink\\\",\\n                width: \\\"100%\\\",\\n                height: \\\"100%\\\",\\n              }}\\n            >\\n              23\\n            </div>\\n          </TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow size={sizeOrDefault(rowSize)}>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell\\n            size={sizeOrDefault(cellSizeApril)}\\n            style={{ background: \\\"cadetBlue\\\" }}\\n          >\\n            <div\\n              style={{\\n                background: \\\"pink\\\",\\n                width: \\\"100%\\\",\\n                height: \\\"100%\\\",\\n              }}\\n            >\\n              82\\n            </div>\\n          </TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...SizeUse.parameters };\nVerticalRule.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table verticalRule>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"40%\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...VerticalRule.parameters };\nTextAlignment.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"left\\\">\\n            Left\\n          </TableHeaderCell>\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"center\\\">\\n            Center\\n          </TableHeaderCell>\\n          <TableHeaderCell width=\\\"25%\\\" textAlign=\\\"right\\\">\\n            Right\\n          </TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>\\n            prop <code>textAlign</code>\\n          </TableHeaderCell>\\n          <TableCell textAlign=\\\"left\\\">\\n            <code>left</code>\\n          </TableCell>\\n          <TableCell textAlign=\\\"center\\\">\\n            <code>center</code>\\n          </TableCell>\\n          <TableCell textAlign=\\\"right\\\">\\n            <code>right</code>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>en Français</TableHeaderCell>\\n          <TableCell textAlign=\\\"left\\\">Gauche</TableCell>\\n          <TableCell textAlign=\\\"center\\\">Centre</TableCell>\\n          <TableCell textAlign=\\\"right\\\">Droit</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...TextAlignment.parameters };\nColumnSpan.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell colSpan={2}>Headers can span too!</TableHeaderCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>1</TableHeaderCell>\\n          <TableHeaderCell>2</TableHeaderCell>\\n          <TableHeaderCell>3</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>no</TableCell>\\n          <TableCell>\\n            <code>colSpan</code>\\n          </TableCell>\\n          <TableCell>specified</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell colSpan={2}>\\n            <code>colSpan={\\\"{2}\\\"}</code>\\n          </TableCell>\\n          <TableCell>3</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell colSpan={3}>\\n            <code>colSpan={\\\"{3}\\\"}</code>\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...ColumnSpan.parameters };\nRowSpan.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell rowSpan={2} />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n          <TableHeaderCell />\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableHeaderCell>1</TableHeaderCell>\\n          <TableCell rowSpan={3}>\\n            <code>\\n              rowSpan={\\\"{\\\"}3{\\\"}\\\"}\\n            </code>\\n          </TableCell>\\n          <TableCell rowSpan={2}>\\n            <code>\\n              rowSpan={\\\"{\\\"}2{\\\"}\\\"}\\n            </code>\\n          </TableCell>\\n          <TableCell>no</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>2</TableHeaderCell>\\n          <TableCell>\\n            <code>rowSpan</code>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableHeaderCell>3</TableHeaderCell>\\n          <TableCell />\\n          <TableCell>specified</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...RowSpan.parameters };\nFullWidthTable.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell />\\n          {Array(20)\\n            .fill(null)\\n            .map((_, idx) => (\\n              <TableHeaderCell key={idx}>{idx + 1}</TableHeaderCell>\\n            ))}\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        {Array(20)\\n          .fill(null)\\n          .map((_, idx) => (\\n            <TableRow key={idx}>\\n              <TableHeaderCell>{idx + 1}</TableHeaderCell>\\n              {Array(20)\\n                .fill(null)\\n                .map((_, jdx) => (\\n                  <TableCell key={jdx}>{(idx + 1) * (jdx + 1)}</TableCell>\\n                ))}\\n            </TableRow>\\n          ))}\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...FullWidthTable.parameters };\nNonInteractiveUse.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table interactive={false}>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell>The vorpal blade went snicker-snack!</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell>The Jabberwock, with eyes of flame</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell>All mimsy were the borogoves</TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell>Long time the manxome foe he sought</TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...NonInteractiveUse.parameters };\nWithFixedWidths.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table interactive={false} fullWidth fixed>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell>Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...WithFixedWidths.parameters };\nWithEllipsisTruncation.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table interactive={false} fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\" maxWidth={500}>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"ellipsis\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...WithEllipsisTruncation.parameters };\nWithForcedWrap.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Table interactive={false} fullWidth>\\n      <TableHeader>\\n        <TableRow>\\n          <TableHeaderCell>Name</TableHeaderCell>\\n          <TableHeaderCell>Favorite Color</TableHeaderCell>\\n          <TableHeaderCell>Age</TableHeaderCell>\\n          <TableHeaderCell width=\\\"500px\\\">Favorite Line</TableHeaderCell>\\n        </TableRow>\\n      </TableHeader>\\n      <TableBody>\\n        <TableRow>\\n          <TableCell>Sarah</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"forestGreen\\\">Forest Green</ColorContent>\\n          </TableCell>\\n          <TableCell>32</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\" maxWidth={500}>\\n            She puzzled over this for some time, but at last a bright thought\\n            struck her. “Why, it’s a Looking-glass book, of course! And if I\\n            hold it up to a glass, the words will all go the right way again.”\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Jeff</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"pink\\\">Pink</ColorContent>\\n          </TableCell>\\n          <TableCell>23</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            The vorpal blade went snicker-snack!\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Janice</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"firebrick\\\">Firebrick</ColorContent>\\n          </TableCell>\\n          <TableCell>19</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            The Jabberwock, with eyes of flame\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>April</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"cadetBlue\\\">Cadet Blue</ColorContent>\\n          </TableCell>\\n          <TableCell>82</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            All mimsy were the borogoves\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>Henry</TableCell>\\n          <TableCell>\\n            <ColorContent favColor=\\\"darkGoldenrod\\\">Dark Goldenrod</ColorContent>\\n          </TableCell>\\n          <TableCell>46</TableCell>\\n          <TableCell truncation=\\\"force-wrap\\\">\\n            Long time the manxome foe he sought\\n          </TableCell>\\n        </TableRow>\\n      </TableBody>\\n    </Table>\\n  );\\n}\" }, ...WithForcedWrap.parameters };","import classNames from \"classnames\";\nimport styled, { css } from \"styled-components\";\n\nimport { getSizeSpacing } from \"../../services/getSizeSpacing\";\n\nimport { StyledTableCellProps } from \"./types\";\n\nconst getTruncation = ({ truncation }: StyledTableCellProps) => {\n  if (truncation === \"ellipsis\") {\n    return css`\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      overflow: hidden;\n    `;\n  }\n\n  if (truncation === \"force-wrap\") {\n    return css`\n      overflow-wrap: anywhere;\n    `;\n  }\n\n  return null;\n};\n\nexport const StyledTableCell = styled.td.attrs(({ className, ...props }) => ({\n  ...props,\n  className: classNames([\"bcl-td\", className]),\n}))<StyledTableCellProps>`\n  text-align: ${(props) => props.textAlign};\n  position: relative;\n\n  ${({ size }) =>\n    size &&\n    css`\n      && {\n        padding: ${getSizeSpacing(size)};\n      }\n    `}\n\n  ${getTruncation};\n`;\n","/* eslint-disable padding-line-between-statements */\n// export all components\nexport * from \"./components/Annotation\";\nexport * from \"./components/BannerAlert\";\nexport * from \"./components/BannerAlertAccordion\";\nexport * from \"./components/BannerAlertAccordionBody\";\nexport * from \"./components/BannerAlertAccordionFooter\";\nexport * from \"./components/BannerAlertAccordionHeader\";\nexport * from \"./components/BannerAlertAction\";\nexport * from \"./components/BannerAlertBody\";\nexport * from \"./components/BannerAlertClose\";\nexport * from \"./components/BannerAlertDescription\";\nexport * from \"./components/BannerAlertDescriptionText\";\nexport * from \"./components/BannerAlertIcon\";\nexport * from \"./components/BannerAlertLink\";\nexport * from \"./components/BannerAlertTitle\";\nexport * from \"./components/BodyText\";\nexport * from \"./components/Box\";\nexport * from \"./components/BrazeIcon\";\nexport * from \"./components/Button\";\nexport * from \"./components/ButtonGroup\";\nexport * from \"./components/Checkbox\";\nexport * from \"./components/CloseButton\";\nexport * from \"./components/Collapsible\";\nexport * from \"./components/CollapsibleBody\";\nexport * from \"./components/CollapsibleButton\";\nexport * from \"./components/CollapsibleContext\";\nexport * from \"./components/CollapsibleHeader\";\nexport * from \"./components/CollapsibleHeaderText\";\nexport * from \"./components/CollapsibleIconButton\";\nexport * from \"./components/CollapsibleList\";\nexport * from \"./components/CollapsibleListItem\";\nexport * from \"./components/CopyField\";\nexport * from \"./components/EmptyState\";\nexport * from \"./components/EmptyStateButtonGroup\";\nexport * from \"./components/EmptyStateHeading\";\nexport * from \"./components/EmptyStateIcon\";\nexport * from \"./components/EmptyStateText\";\nexport * from \"./components/FieldLabel\";\nexport * from \"./components/Flex\";\nexport * from \"./components/FlexBox\";\nexport * from \"./components/FormGroup\";\nexport * from \"./components/FormGroupLegend\";\nexport * from \"./components/Heading\";\nexport * from \"./components/HelpText\";\nexport * from \"./components/Icon\";\nexport * from \"./components/IconButton\";\nexport * from \"./components/InlineInput\";\nexport * from \"./components/Input\";\nexport * from \"./components/InputGroup\";\nexport * from \"./components/InputGroupAddon\";\nexport * from \"./components/InputGroupContext\";\nexport * from \"./components/Label\";\nexport * from \"./components/LevelsContext\";\nexport * from \"./components/Link\";\nexport * from \"./components/LoremIpsum\";\nexport * from \"./components/Menu\";\nexport * from \"./components/MenuActionButton\";\nexport * from \"./components/MenuButton\";\nexport * from \"./components/MenuCategoryButton\";\nexport * from \"./components/MenuGroup\";\nexport * from \"./components/Modal\";\nexport * from \"./components/ModalBody\";\nexport * from \"./components/ModalContext\";\nexport * from \"./components/ModalFooter\";\nexport * from \"./components/ModalHeading\";\nexport * from \"./components/NumberInput\";\nexport * from \"./components/Panel\";\nexport * from \"./components/PanelBody\";\nexport * from \"./components/PanelHeader\";\nexport * from \"./components/Popover\";\nexport * from \"./components/PopoverBody\";\nexport * from \"./components/PopoverHeading\";\nexport * from \"./components/Popper\";\nexport * from \"./components/Portal\";\nexport * from \"./components/RadioButton\";\nexport * from \"./components/RadioButtonGroup\";\nexport * from \"./components/ScreenReaderText\";\nexport * from \"./components/SimpleBannerAlert\";\nexport * from \"./components/SkeletonLoader\";\nexport * from \"./components/StatusText\";\nexport * from \"./components/Switch\";\nexport * from \"./components/Tab\";\nexport * from \"./components/TabContent\";\nexport * from \"./components/Table\";\nexport * from \"./components/TableBody\";\nexport * from \"./components/TableCaption\";\nexport * from \"./components/TableCell\";\nexport * from \"./components/TableFooter\";\nexport * from \"./components/TableHeader\";\nexport * from \"./components/TableHeaderCell\";\nexport * from \"./components/TableRow\";\nexport * from \"./components/Tabs\";\nexport * from \"./components/TabsContext\";\nexport * from \"./components/Textarea\";\nexport * from \"./components/Toaster\";\nexport * from \"./components/Tooltip\";\nexport * from \"./components/UncontrolledTab\";\nexport * from \"./components/UncontrolledTabContent\";\nexport * from \"./components/UncontrolledTabs\";\nexport * from \"./components/UncontrolledTabsContext\";\nexport * from \"./components/UncontrolledTooltip\";\nexport * from \"./components/UntransitionedBannerAlert\";\n\n// export all services\nexport * from \"./services/getSizeSpacing\";\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { useState } from \"react\";\nimport { Meta, Story, Preview } from \"@storybook/addon-docs\";\nimport LinkTo from \"@storybook/addon-links/react\";\nimport { Input } from \"@braze/beacon-core\";\nimport { useI18nNamespace } from \"@braze/beacon-translations\";\nimport { name, version } from \"@braze/beacon-i18n-dev/../package.json\";\nimport { MockUsage } from \"./components/MockUsage\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Core Developers/I18n/useI18nNamespace\" component={Input} mdxType=\"Meta\" />\n    <h1>{`useI18nNamespace`}</h1>\n    <a href={`https://www.npmjs.com/package/${name}`} target=\"_blank\">\n  <img alt=\"npm\" src={`https://img.shields.io/badge/npm-v${version.replace(\"-\", \"--\")}-blue`} />\n    </a>\n    <p>{`The `}<inlineCode parentName=\"p\">{`useI18nNamespace`}</inlineCode>{` hook exported from `}<inlineCode parentName=\"p\">{`\"@braze/beacon-translations\"`}</inlineCode>{` is an alias\nto the `}<code><LinkTo kind=\"lab-i18n-usei18nnamespace--usage\" mdxType=\"LinkTo\">{`useI18nNamespace`}</LinkTo></code>{`\nhook that is typed for usage inside Beacon components.`}</p>\n    <Preview mdxType=\"Preview\">\n  <Story name=\"usage\" mdxType=\"Story\">\n    {() => {\n          const [name, setName] = useState(\"\");\n          const {\n            t,\n            k\n          } = useI18nNamespace(\"beacon-examples\");\n          return <div>\n          <p>\n            useI18nNamespace can be used in 2 separate contexts: a storybook\n            story or in a component. This story demonstrates both use cases, and\n            can be used as a reference for developing beacon-labs components.\n          </p>\n          <div id=\"storybook\">\n            <h1>Using useI18nNamespace in a storybook story</h1>\n            <ol>\n              <li>\n                translating{\" \"}\n                <code>\n                  Hello {`{ place }`} number {`{num, number, ::currency/USD}`}\n                </code>{\" \"}\n                with &quot;5.234&quot;\n              </li>\n              <li>\n                <Input placeholder=\"enter your name\" value={name} onChange={e => setName(e.target.value)} mdxType=\"Input\" />\n              </li>\n            </ol>\n            <ul>\n              <li>\n                Translation{\" \"}\n                <code className=\"translation\">\n                  {t(\"hello-world\", \"Hello { place } number {num, number, ::currency/USD}\", {\n                      place: name,\n                      num: 5.234\n                    })}\n                </code>\n              </li>\n              <li>\n                Key <code className=\"key\">{k(\"hello-world\")}</code>\n              </li>\n            </ul>\n            <ul>\n              <li>\n                translating <code>This is a simple translation</code>\n              </li>\n              <li className=\"simple-translation\">\n                {t(\"simple\", \"This is a is simple translation\")}\n              </li>\n              <li>\n                Key: <code className=\"simple-key\">{k(\"simple\")}</code>\n              </li>\n            </ul>\n          </div>\n          <MockUsage mdxType=\"MockUsage\" />\n        </div>;\n        }}\n  </Story>\n    </Preview>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const usage = (() => {\n  const [name, setName] = useState(\"\");\n  const {\n    t,\n    k\n  } = useI18nNamespace(\"beacon-examples\");\n  return <div>\n          <p>\n            useI18nNamespace can be used in 2 separate contexts: a storybook\n            story or in a component. This story demonstrates both use cases, and\n            can be used as a reference for developing beacon-labs components.\n          </p>\n          <div id=\"storybook\">\n            <h1>Using useI18nNamespace in a storybook story</h1>\n            <ol>\n              <li>\n                translating{\" \"}\n                <code>\n                  Hello {`{ place }`} number {`{num, number, ::currency/USD}`}\n                </code>{\" \"}\n                with &quot;5.234&quot;\n              </li>\n              <li>\n                <Input placeholder=\"enter your name\" value={name} onChange={e => setName(e.target.value)} />\n              </li>\n            </ol>\n            <ul>\n              <li>\n                Translation{\" \"}\n                <code className=\"translation\">\n                  {t(\"hello-world\", \"Hello { place } number {num, number, ::currency/USD}\", {\n              place: name,\n              num: 5.234\n            })}\n                </code>\n              </li>\n              <li>\n                Key <code className=\"key\">{k(\"hello-world\")}</code>\n              </li>\n            </ul>\n            <ul>\n              <li>\n                translating <code>This is a simple translation</code>\n              </li>\n              <li className=\"simple-translation\">\n                {t(\"simple\", \"This is a is simple translation\")}\n              </li>\n              <li>\n                Key: <code className=\"simple-key\">{k(\"simple\")}</code>\n              </li>\n            </ul>\n          </div>\n          <MockUsage />\n        </div>;\n});\nusage.storyName = 'usage';\nusage.parameters = { storySource: { source: '() => {\\n  const [name, setName] = useState(\\\"\\\");\\n  const {\\n    t,\\n    k\\n  } = useI18nNamespace(\\\"beacon-examples\\\");\\n  return <div>\\n          <p>\\n            useI18nNamespace can be used in 2 separate contexts: a storybook\\n            story or in a component. This story demonstrates both use cases, and\\n            can be used as a reference for developing beacon-labs components.\\n          </p>\\n          <div id=\\\"storybook\\\">\\n            <h1>Using useI18nNamespace in a storybook story</h1>\\n            <ol>\\n              <li>\\n                translating{\\\" \\\"}\\n                <code>\\n                  Hello {`{ place }`} number {`{num, number, ::currency/USD}`}\\n                </code>{\\\" \\\"}\\n                with &quot;5.234&quot;\\n              </li>\\n              <li>\\n                <Input placeholder=\\\"enter your name\\\" value={name} onChange={e => setName(e.target.value)} />\\n              </li>\\n            </ol>\\n            <ul>\\n              <li>\\n                Translation{\\\" \\\"}\\n                <code className=\\\"translation\\\">\\n                  {t(\\\"hello-world\\\", \\\"Hello { place } number {num, number, ::currency/USD}\\\", {\\n              place: name,\\n              num: 5.234\\n            })}\\n                </code>\\n              </li>\\n              <li>\\n                Key <code className=\\\"key\\\">{k(\\\"hello-world\\\")}</code>\\n              </li>\\n            </ul>\\n            <ul>\\n              <li>\\n                translating <code>This is a simple translation</code>\\n              </li>\\n              <li className=\\\"simple-translation\\\">\\n                {t(\\\"simple\\\", \\\"This is a is simple translation\\\")}\\n              </li>\\n              <li>\\n                Key: <code className=\\\"simple-key\\\">{k(\\\"simple\\\")}</code>\\n              </li>\\n            </ul>\\n          </div>\\n          <MockUsage />\\n        </div>;\\n}' } };\n\nconst componentMeta = { title: 'Core Developers/I18n/useI18nNamespace', component: Input, includeStories: [\"usage\"],  };\n\nconst mdxStoryNameToKey = {\"usage\":\"usage\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport {\n  BodyText,\n  Box,\n  Button,\n  Heading,\n  Flex,\n  FlexBox,\n} from \"@braze/beacon-core\";\nimport styled from \"styled-components\";\nexport const HeaderRow = styled.div`\n  display: grid;\n  margin: 1rem 0;\n  padding: 1rem;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  gap: 0;\n  background: #2e3c47;\n  & > div:not(:last-of-type) {\n    padding-right: 1.5rem;\n    margin-right: 1.5rem;\n    border-right: 1px solid lightgrey;\n  }\n`;\nexport const LeftSideRow = styled.div`\n  display: grid;\n  margin: 1rem 0;\n  padding: 1rem;\n  grid-template-columns: 1fr 3fr;\n`;\nexport const HeaderItem = ({\n  title,\n  children\n}) => {\n  return <div>\n      <Heading level={4} style={{\n      color: \"white\"\n    }} mdxType=\"Heading\">\n        {title}\n      </Heading>\n      <Box boxMargin={{\n      top: \"sm\"\n    }} mdxType=\"Box\">\n        <BodyText style={{\n        color: \"white\"\n      }} mdxType=\"BodyText\">{children}</BodyText>\n      </Box>\n    </div>;\n};\nexport const LeftSideDesc = ({\n  title,\n  subtitle,\n  children\n}) => {\n  return <LeftSideRow mdxType=\"LeftSideRow\">\n      <Box boxPadding={{\n      right: \"xxl\"\n    }} boxMargin={{\n      right: \"xxl\"\n    }} style={{\n      borderRight: \"1px solid lightgrey\",\n      marginRight: \"1.5rem\"\n    }} mdxType=\"Box\">\n        <Heading level={4} mdxType=\"Heading\">{title}</Heading>\n        <Box boxMargin={{\n        top: \"sm\"\n      }} mdxType=\"Box\">\n          <BodyText mdxType=\"BodyText\">{subtitle}</BodyText>\n        </Box>\n      </Box>\n      <div style={{\n      marginLeft: \"1.5rem\"\n    }}>{children}</div>\n    </LeftSideRow>;\n};\nexport const DoDont = ({\n  children,\n  helpText,\n  isDo\n}) => {\n  return <div style={{\n    width: \"47.5%\"\n  }}>\n      <div style={{\n      border: \"1px solid black\",\n      padding: \"1rem\",\n      marginBottom: \"1rem\"\n    }}>\n        {children}\n      </div>\n      <div style={{\n      borderTop: `3px solid ${isDo ? \"green\" : \"red\"}`,\n      marginTop: \"0.25rem\",\n      paddingTop: \"0.25rem\"\n    }}>\n        <BodyText fontWeight=\"bold\" style={{\n        color: isDo ? \"green\" : \"red\",\n        marginRight: \"0.25rem\"\n      }} mdxType=\"BodyText\">\n          {isDo ? \"Do\" : \"Don't\"}\n        </BodyText>\n        <BodyText variant=\"hint\" mdxType=\"BodyText\">{helpText}</BodyText>\n      </div>\n    </div>;\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  HeaderRow,\nLeftSideRow,\nHeaderItem,\nLeftSideDesc,\nDoDont\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/Content Strategy\" mdxType=\"Meta\" />\n\n\n\n\n\n    <h2>{`Content Strategy Differentiators`}</h2>\n    <br />\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Brand & Content`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Documentation`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Product Copy`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Suited for marketing material, Braze brand & content copy paints the strengths of the company to prospective and existing customers.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Meant to be as informative as possible, documentation copy explains how the platform works from a holistic POV. Think of a patient and informative professor.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Similar to documentation copy, product copy is meant to be as informative as possible. Unlike documentation copy, product copy is localized to the platform area in question with an extra emphasis on conciseness. Think of traffic signs.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"`}<em parentName=\"td\">{`Build dynamic audiences in minutes (or less) and deploy personalized customer journeys with our intuitive drag-and-drop interface.`}</em>{`\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"`}<em parentName=\"td\">{`When a user profile is first recognized via the SDK, an ‘anonymous’ user profile is created with an associated `}<inlineCode parentName=\"em\">{`braze_id`}</inlineCode>{`: a unique user identifier that is set by Braze. This identifier can be used to delete users through the REST API.`}</em>{`\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"`}<em parentName=\"td\">{`Select at least one Content Test Group or individual user to receive this test message. Messages will be customized with recipients' attributes by default.`}</em>{`\"`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <br />\n    <h2>{`Product Copy Principles`}</h2>\n    <p>{`Principles are the high-level goals we’re hoping to achieve with product copy. These help establish the “tone” of product copy.`}</p>\n    <HeaderRow mdxType=\"HeaderRow\">\n  <HeaderItem title=\"Empower\" mdxType=\"HeaderItem\">\n    Give readers the tools they need to use the Braze platform by using language\n    that informs them and leaves them feeling confident in their ability to use\n    our products.\n  </HeaderItem>\n  <HeaderItem title=\"Educate\" mdxType=\"HeaderItem\">\n    Give readers the information that they need in the immediate.\n  </HeaderItem>\n  <HeaderItem title=\"Guide\" mdxType=\"HeaderItem\">\n    Help your readers navigate the platform in a way that’s informative and\n    friendly.\n  </HeaderItem>\n  <HeaderItem title=\"Respect\" mdxType=\"HeaderItem\">\n    Meet readers where they are and assume best intent. Put yourselves in their\n    position and communicate appropriately. Be inclusive and considerate of\n    their time and effort.\n  </HeaderItem>\n    </HeaderRow>\n    <LeftSideDesc title=\"Empower\" subtitle=\"Here we anticipate the question “can I add campaigns to this report after it’s created?” to **empower** users in their decision making.\" mdxType=\"LeftSideDesc\">\n  <img src=\"/content-strategy/Empower.png\" alt=\"Empower example screenshot\" />\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Educate\" subtitle=\"Here we use placeholder copy to **educate** users on examples of acceptable form inputs.\" mdxType=\"LeftSideDesc\">\n  <img src=\"/content-strategy/Educate.png\" alt=\"Educate example screenshot\" />\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Guide\" subtitle=\"Here we use an empty state to **guide** users to create a Global Control Group—a prerequisite to viewing this report.\" mdxType=\"LeftSideDesc\">\n  <img src=\"/content-strategy/Guide.png\" alt=\"Guide example screenshot\" />\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Respect\" subtitle=\"Here we give the user a heads up that this action might not work as expected with their current user count, but **respect** their decision to create it anyways.\" mdxType=\"LeftSideDesc\">\n  <img src=\"/content-strategy/Respect.png\" alt=\"Respect example screenshot\" />\n    </LeftSideDesc>\n    <h2>{`Guidelines`}</h2>\n    <p>{`Guidelines are the boxes to check off when writing any product copy. If a piece of copy adheres to the following guidelines, it will help achieve our goals:`}</p>\n    <HeaderRow mdxType=\"HeaderRow\">\n  <HeaderItem title=\"Clear\" mdxType=\"HeaderItem\">\n    Use simple words and sentences to communicate the topic you’re writing\n    about. Avoid jargon and excessive use of acronyms.\n  </HeaderItem>\n  <HeaderItem title=\"Concise\" mdxType=\"HeaderItem\">\n    Keep your writing short and sweet. Try and use as small an amount of words\n    as you can to get your point across.\n  </HeaderItem>\n  <HeaderItem title=\"Useful\" mdxType=\"HeaderItem\">\n    Make sure you know what the purpose of your content is before writing. What\n    problem are you trying to solve and how does this content help?\n  </HeaderItem>\n  <HeaderItem title=\"Human\" mdxType=\"HeaderItem\">\n    Talk to the user like a human. Try and strike an optimistic and\n    conversational tone—imagine yourself explaining something to a friend. The\n    only exceptions are for error messages and financial transactions.\n  </HeaderItem>\n    </HeaderRow>\n    <LeftSideDesc title=\"Clear\" subtitle=\"Use simple words and sentences to communicate the topic you’re writing about. Avoid jargon and excessive use of acronyms.\" mdxType=\"LeftSideDesc\">\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"use button verbs that reinforce the action the user is taking.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Deactivate this campaign?</BodyText>\n      <FlexBox boxMargin={{\n            top: \"lg\"\n          }} mdxType=\"FlexBox\">\n        <Button style={{\n              marginLeft: \"auto\",\n              marginRight: \"0.5rem\"\n            }} variant=\"secondary\" size=\"sm\" mdxType=\"Button\">\n          Cancel\n        </Button>\n        <Button size=\"sm\" mdxType=\"Button\">Deactivate</Button>\n      </FlexBox>\n    </DoDont>\n    <DoDont helpText=\"use words and phrases that don't directly connect to the action.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Deactivate this campaign?</BodyText>\n      <FlexBox boxMargin={{\n            top: \"lg\"\n          }} mdxType=\"FlexBox\">\n        <Button style={{\n              marginLeft: \"auto\",\n              marginRight: \"0.5rem\"\n            }} variant=\"secondary\" size=\"sm\" mdxType=\"Button\">\n          Cancel\n        </Button>\n        <Button size=\"sm\" mdxType=\"Button\">OK</Button>\n      </FlexBox>\n    </DoDont>\n  </FlexBox>\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Concise\" subtitle=\"Keep your writing short and sweet. Try and use as small an amount of words as you can to get your point across.\" mdxType=\"LeftSideDesc\">\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"keep UI text short.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Archive News Feed card?</BodyText>\n    </DoDont>\n    <DoDont helpText=\"use filter introductions in confirmations, like 'Are you sure?'.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        Are you sure you want to archive this Archive News Feed card?\n      </BodyText>\n    </DoDont>\n  </FlexBox>\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"get to the point.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Leaving this page will delete all unsaved changes.</BodyText>\n    </DoDont>\n    <DoDont helpText=\"write instructions that are longer than necessary.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        If you leave this page, all unsaved changes will be lost. Are you sure\n        you want to leave this page?\n      </BodyText>\n    </DoDont>\n  </FlexBox>\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Useful\" subtitle=\"Make sure you know what the purpose of your content is before writing. What problem are you trying to solve and how does this content help?\" mdxType=\"LeftSideDesc\">\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"communicate essential details needed to understand a state or action.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        Track user behavior (sessions, purchases, custom events) by segment for\n        up to 25 segments.\n      </BodyText>\n    </DoDont>\n    <DoDont helpText=\"sacrifice clarity for brevity.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Track user behavior by segment.</BodyText>\n    </DoDont>\n  </FlexBox>\n    </LeftSideDesc>\n    <LeftSideDesc title=\"Human\" subtitle=\"Talk to the user like a human. Try and strike an optimistic and conversational tone—imagine yourself explaining something to a friend. The only exceptions are for error messages and financial transactions.\" mdxType=\"LeftSideDesc\">\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"give the user solutions instead of problems.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">Adjust your filters to continue.</BodyText>\n    </DoDont>\n    <DoDont helpText=\"blame the user for an error (especially if they really did do something wrong).\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">You need to adjust your filters.</BodyText>\n    </DoDont>\n  </FlexBox>\n  <FlexBox boxMargin={{\n        vertical: \"xxl\"\n      }} justifyContent=\"space-between\" mdxType=\"FlexBox\">\n    <DoDont isDo helpText=\"speak directly to the user in the second person.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        As an Admin, you have full access to everything on the Dashboard.\n      </BodyText>\n    </DoDont>\n    <DoDont helpText=\"refer to the user in the third person.\" mdxType=\"DoDont\">\n      <BodyText mdxType=\"BodyText\">\n        This is an Admin account. Admins have full access to everything on the\n        Dashboard.\n      </BodyText>\n    </DoDont>\n  </FlexBox>\n    </LeftSideDesc>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/Content Strategy', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport LinkTo from \"@storybook/addon-links/react\";\nimport { Link } from \"@braze/beacon-core\";\nexport const TableOfContents = () => {\n  const [toc, setTOC] = React.useState([]);\n  React.useEffect(() => {\n    const headerIds = Array.from(document.getElementsByTagName(\"h2\")).map(elem => ({\n      id: elem.id,\n      children: elem.textContent\n    }));\n    setTOC(headerIds);\n  }, []);\n\n  if (toc.length === 0) {\n    return <>\n        <br />\n        <div>Loading Table of Contents...</div>\n      </>;\n  }\n\n  return <ul>\n      {toc.map(elem => <li key={elem.id}>\n          <LinkTo kind={`welcome-faqs--page#${elem.id}`} mdxType=\"LinkTo\">\n            <Link onClick={() => location.hash = \"#\" + elem.id} mdxType=\"Link\">\n              {elem.children}\n            </Link>\n          </LinkTo>\n        </li>)}\n    </ul>;\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  TableOfContents\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Welcome/FAQs\" mdxType=\"Meta\" />\n\n    <h1>{`Frequently Asked Questions (FAQs)`}</h1>\n    <TableOfContents mdxType=\"TableOfContents\" />\n    <br />\n    <h2>{`1. Why do I have to use `}<inlineCode parentName=\"h2\">{`npm login`}</inlineCode>{` instead of `}<inlineCode parentName=\"h2\">{`yarn login`}</inlineCode>{`?`}</h2>\n    <p>{`Per the `}<a parentName=\"p\" {...{\n        \"href\": \"https://classic.yarnpkg.com/en/docs/cli/login/\"\n      }}><inlineCode parentName=\"a\">{`yarn login`}</inlineCode>{` documentation`}</a>{`:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Running this command will prompt you for your username and email for the npm registry. It will `}<strong parentName=\"p\">{`not`}</strong>{` ask for your password.\nLater when you run a command that requires authentication such as yarn publish, you will have to enter your password to do so.`}</p>\n    </blockquote>\n    <p>{`However, our use case requires the password to be entered when logging in to gain access to private repositories, which is a\nfeature `}<inlineCode parentName=\"p\">{`NPM`}</inlineCode>{` offers. As a result, the login step must be performed via `}<inlineCode parentName=\"p\">{`npm login`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` later uses this login information\nwhen you run commands like `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add`}</inlineCode>{`.`}</p>\n    <h2>{`2. Why did you choose `}<inlineCode parentName=\"h2\">{`yarn`}</inlineCode>{` over `}<inlineCode parentName=\"h2\">{`npm`}</inlineCode>{`?`}</h2>\n    <p>{`There are many benefits of `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` over `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{` that specifically work for the Beacon repository use case and more generally.`}</p>\n    <p>{`The most significant reason we chose `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` was because it offers a feature called `}<a parentName=\"p\" {...{\n        \"href\": \"https://classic.yarnpkg.com/en/docs/workspaces/\"\n      }}><inlineCode parentName=\"a\">{`workspaces`}</inlineCode></a>{`,\nwhich allows projects with multiple packages (like Beacon, which is a monorepo that uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/lerna/lerna\"\n      }}>{`lerna`}</a>{`)\nto link and install all the dependencies together at the root level of the project. This allows `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` to better optimize\ndependency management, generate a single `}<inlineCode parentName=\"p\">{`yarn.lock`}</inlineCode>{` file at the root, install most external dependencies at a root-level\n`}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{`, and allow developers to make changes to the various packages and immediately have access to those changes\nwithout having to muck around with things like `}<inlineCode parentName=\"p\">{`yarn link`}</inlineCode>{`.`}</p>\n    <p>{`Additionally, `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` has other smaller benefits over `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{`, such as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Better caching that results in faster reinstalls (try running `}<inlineCode parentName=\"li\">{`npm install`}</inlineCode>{` 3 times; now do `}<inlineCode parentName=\"li\">{`yarn`}</inlineCode>{` 3 times-- sweet, right?),\nwhich is useful when switching between branches with different dependencies`}</li>\n      <li parentName=\"ul\">{`Autocleaning that allows for the automatic deletion of sub-dependencies you may not `}<em parentName=\"li\">{`actually`}</em>{` need via the `}<inlineCode parentName=\"li\">{`.yarnclean`}</inlineCode>{`\nfile (case in point: `}<inlineCode parentName=\"li\">{`@types/react-native`}</inlineCode>{` is a dependency of `}<inlineCode parentName=\"li\">{`@types/styled-components`}</inlineCode>{` but is known to cause issues in\nweb React projects; so `}<inlineCode parentName=\"li\">{`.yarnclean`}</inlineCode>{` allows us to automatically get rid of it after every installation)`}</li>\n      <li parentName=\"ul\">{`Pinned version resolutions, which can make working with sub-dependencies easier, especially if certain dependencies are not\nmaintained as frequently`}</li>\n    </ul>\n    <h2>{`3. How can I contribute and/or propose new components or ideas?`}</h2>\n    <p>{`Check out our `}<LinkTo kind=\"welcome-contributing-overview--page\" mdxType=\"LinkTo\">{`contribution overview`}</LinkTo>{` to learn all about the\ndifferent ways to contribute.`}</p>\n    <h2>{`4. When do lab components move to the core library?`}</h2>\n    <p>{`When Dashboard Infrastructure engineers feel confident on the state and performance of Lab components, they are then moved\nto Core.`}</p>\n    <h2>{`5. How does Beacon handle versioning?`}</h2>\n    <p>{`Beacon uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://semver.org/\"\n      }}>{`SemVer`}</a>{`, which is a standard used to communicate what kinds of changes are in a release.`}</p>\n    <p>{`When changes are made to Platform by DASHI engineers, teams who are impacted are tagged to review the pull request.`}</p>\n    <p>{`Changes made outside of Platform (e.g. Beacon) must be manually pulled into Platform via package upgrades through NPM so\nthat Engineers and teams can decide when to upgrade to the new version. We encourage teams to stay as up-to-date as possible.`}</p>\n    <h2>{`6. How often do you review component, pattern, or workflow requests?`}</h2>\n    <p>{`We review new Beacon requests and move them into a Jira backlog once a month. At that point they will go through a\nresearch process to gather more information and be vetted.`}</p>\n    <h2>{`7. How can I track the status of a request?`}</h2>\n    <p>{`If you have submitted a request, we will tag you on the Jira ticket so you can be notified of updates to your request.`}</p>\n    <h2>{`8. How does Beacon handle breaking changes and deprecation?`}</h2>\n    <p>{`Beacon uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://semver.org/\"\n      }}>{`SemVer`}</a>{`, which is a standard used to communicate what kinds of changes are in a release.\nIf any Beacon component has a breaking change, it increases the major version of affected package(s) so that an Eng team\ncan see if it might break their code. The changelog for the package that had a major version bump will also specifically\nreflect the nature of the breaking change and how to address it. This practice is followed in all DASHI-owned repositories,\nincluding Beacon and Beacon Labs.`}</p>\n    <p>{`If a Beacon update does NOT include a major version bump, then you can be sure the new version of Beacon is compatible with\nthe version currently installed in your project.`}</p>\n    <h2>{`9. Who works on the Beacon Product System?`}</h2>\n    <p>{`Beacon has a core team of designers and developers who are dedicated to building and supporting the system.`}</p>\n    <p>{`The core team includes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Nick Willett-Jeffries - Director of Engineering`}</li>\n      <li parentName=\"ul\">{`Bill Abresch - Engineering Manager`}</li>\n      <li parentName=\"ul\">{`Dan Garrett - Senior Software Engineer`}</li>\n      <li parentName=\"ul\">{`Greg Beaver - Senior Software Engineer`}</li>\n      <li parentName=\"ul\">{`Hal Anil - Senior Software Engineer`}</li>\n      <li parentName=\"ul\">{`Samantha Abbott - Senior Software Engineer`}</li>\n      <li parentName=\"ul\">{`Nick Robin - Interim Product Manager`}</li>\n      <li parentName=\"ul\">{`Melissa Haworth - Senior Product Design Manager`}</li>\n      <li parentName=\"ul\">{`Jucelle Lim - Senior Product Designer`}</li>\n    </ul>\n    <h2>{`10. What’s on the roadmap?`}</h2>\n    <p>{`See the `}<LinkTo kind=\"welcome-status-and-roadmap\" mdxType=\"LinkTo\">{`Roadmap`}</LinkTo>{` page for up to date plans.`}</p>\n    <h2>{`11. What browsers are supported?`}</h2>\n    <p>{`Beacon components are supported in all of the browsers Braze’s officially supports as noted on\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://confluence.braze.com/display/DASHINFRA/Dashboard+Browser+Support+Guidelines\"\n      }}>{`Confluence here`}</a>{`\nand which include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Chrome (version 58 or newer)`}</li>\n      <li parentName=\"ul\">{`Firefox (version 54 or newer)`}</li>\n      <li parentName=\"ul\">{`Safari (version 10.1 or newer)`}</li>\n      <li parentName=\"ul\">{`Edge (any version)`}</li>\n    </ul>\n    <h2>{`12. What’s the best way to confirm if Beacon issues are known bugs or not?`}</h2>\n    <p>{`To check if a bug is known, view the `}<a parentName=\"p\" {...{\n        \"href\": \"https://jira.braze.com/browse/DASHI-1085?jql=project%20%3D%20%22Dashboard%20Infrastructure%22%20AND%20type%20%3D%20Bug%20\"\n      }}>{`Beacon Jira bug backlog`}</a>{`.`}</p>\n    <p>{`If you have a bug to report or are not sure, please submit it to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://pbug.braze.com\"\n      }}>{`PBUG reporter`}</a>{`.`}</p>\n    <p>{`You can also reach out to us on `}<a parentName=\"p\" {...{\n        \"href\": \"https://brazetechnology.slack.com/archives/C01145XABT9\"\n      }}>{`#product-dash-infra-team`}</a>{`.`}</p>\n    <h2>{`13. When does Beacon release merged code?`}</h2>\n    <p>{`Beacon has a build time of ~30-45 minutes and is released to NPM immediately after the code is merged.\nAny changes are also simultaneously reflected on the Beacon Storybook.`}</p>\n    <h2>{`14. Why build our own Design System instead of utilizing existing libraries like Material UI?`}</h2>\n    <p>{`The ability to customize components to our needs and cater to the complexity of the Braze product is the primary\nreason we decided to build our own design system. Furthermore, whitelabeling an existing library can cause maintenance\nand scalability issues especially as we evolve the components and mold them to our specific use cases.`}</p>\n    <h2>{`15. What goes into Beacon’s component library vs Platform’s component library?`}</h2>\n    <p>{`Beacon’s component library follows our Beacon Criteria `}{`[Link to our Contribution page]`}{` and is unique, reusable, and agnostic\nto the product. These are self contained components that do not contain any business logic which you would find on the Platform’s\ncomponent library.`}</p>\n    <p>{`While the largest user of Beacon is Platform, Beacon can and is also used in various projects across Braze, including PBUG,\nWebinole, and more!`}</p>\n    <h2>{`16. How do I get started?`}</h2>\n    <p>{`Visit our `}<LinkTo kind=\"welcome-getting-started\" mdxType=\"LinkTo\">{`Getting Started Page`}</LinkTo>{` for both Engineering and Design guidance.`}</p>\n    <br />\n    <br />\n    <hr />\n    <p><strong parentName=\"p\">{`Didn’t see what you need here? Reach out to us on our `}<a parentName=\"strong\" {...{\n          \"href\": \"https://brazetechnology.slack.com/archives/CBDKVUF2P\"\n        }}>{`Slack Channel (#beacon-product-system)`}</a></strong></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Welcome/FAQs', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"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AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAMA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;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AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AADA;AAKA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAMA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAMA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAMA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAMA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;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AAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AAMA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAIA;AACA;AADA;AAUA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAMA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;A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CA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAGA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAMA;AAAA;AAGA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AACA;AAxSA;AAySA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAMA;AAAA;AAGA;AAbA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAMA;AAAA;AAGA;AAbA;AAcjXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAfA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;;;AAEA;AAEA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAJA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AARA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AADA;AAEA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AAeA;AACA;AAlBA;AAAA;AAAA;AACA;AACA;AAqBA;AAEA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AALA;AACA;AAOA;AAGA;AAIA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AACA;AATA;AAoBA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAtDA;AA0DA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AARA;AASA;AAAA;AAAA;AACA;AACA;AAEA;AAbA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1FA;AA0FA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AATA;AACA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAdA;AACA;AAcA;AAAA;AAAA;AACA;AACA;AACA;AAlBA;AACA;AAkBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA9BA;AACA;AA8BA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AAtCA;AACA;AAsCA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AA/CA;AACA;AA+CA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AACA;AAlDA;AAqDA;AArDA;AAuDA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AA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GA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAGA;AACA;AADA;AAgBA;AADA;AAIA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAsBA;AAAA;AACA;AACA;AADA;AAYA;AADA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAOA;AAhgDA;AAkgDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/grCA;AATA;AAyDA;AA3DA;AA2DA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AA9BA;AACA;AAHA;AA8CA;AACA;AAFA;AA7CA;AAAA;AAAA;AACA;AAgDA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAbA;AACA;AAcA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAQA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAVA;AAAA;AAeA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAZA;AAAA;AAiBA;AAKA;AACA;AACA;AARA;AAAA;AAYA;AAAA;AAAA;AAAA;AAlDA;AADA;AAwDA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAXA;AADA;AADA;AAzDA;AA4EA;AA5KA;AA4KA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AALA;AADA;AAWA;AACA;AACA;AAAA;AACA;AACA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AADA;AALA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AATA;AAaA;AACA;AAAA;AACA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AALA;AASA;AACA;AAAA;AACA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AALA;AAhCA;AA0CA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAAA;AAFA;AADA;AADA;AAzDA;AAyEA;AA3EA;AA2EA;AAEA;AAEA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AADA;AAUA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AANA;AAYA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAJA;AAcA;AAAA;AAnBA;AAqBA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAJA;AAcA;AAAA;AAnBA;AAqBA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AANA;AA/DA;AAXA;AAqFA;AArGA;AAqGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAlCA;AA+CA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAJA;AADA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AANA;AAYA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AANA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AANA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AANA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AANA;AArCA;AATA;AAyDA;AA3DA;AA2DA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AARA;AADA;AAcA;AACA;AACA;AACA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AADA;AAVA;AAcA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAfA;AAfA;AAuCA;AAzCA;AAyCA;AAEA;AAEA;AAC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","sourceRoot":""}