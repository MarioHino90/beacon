export interface Translation {
    [locale: string]: {
        braze: {
            [ns: string]: {
                [messageKey: string]: string;
            };
        };
    };
}
export interface TranslationWithParametersType {
    [argument: string]: "number" | "Date" | "string" | string;
}
export declare type IndexTsEntry = "never" | TranslationWithParametersType;
export interface NamespacedTranslationData {
    getFilename: (locale: string) => string;
    namespace: string;
    translations: {
        [messageKey: string]: string;
    };
}
export interface MissingTranslations {
    [dottedMessageKey: string]: string;
}
export declare type NamespacedKeyTranslation = Translation[string]["braze"];
export declare type IndexDTsDefs<Translations> = {
    [N in keyof Translations]: {
        [T in keyof Translations[N]]: string;
    };
};
export interface RepoPathConnection {
    dev: string;
    translations: string;
}
export interface I18nConfig {
    locales: string[];
    translationsPaths: string[];
    savePath: string;
    gitRootPath: string;
    typescriptDefinitionPath: string;
    mergedTranslationsPath: string;
    indexDTsInterfaceName: string;
    translationRepoPaths: RepoPathConnection[];
    devRepo: string;
    devMainBranch: string;
    translationSyncLanguages: string[];
    devSyncLanguages: string[];
}
