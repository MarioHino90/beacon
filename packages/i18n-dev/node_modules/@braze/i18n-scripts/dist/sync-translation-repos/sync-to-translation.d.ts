import type { RepoPathConnection } from "../i18n";
import { ArgType } from "./utils";
interface Configurations {
    translationRepo: string;
    translationRepoPaths: RepoPathConnection[];
}
interface CLIConfigurations extends Partial<Pick<Configurations, "translationRepo">> {
}
declare type PossibleConfigurations = Partial<Configurations> & Partial<CLIConfigurations>;
/**
 * validates that the translationRepo configuration option is valid
 *
 *
 * @param translationRepo the current configuration option
 * @param getError function to get error string
 *
 * @throws if config is not valid
 */
export declare const validateTranslationRepoConfig: (translationRepo: Configurations["translationRepo"] | undefined, getError: (configuration: string, configType: ArgType) => string) => void;
/**
 * validates that the translationRepoPaths configuration option is valid
 *
 * @param translationRepoPaths the current configuration option
 * @param getError function to get error string
 *
 * @throws if config is not valid
 */
export declare const validateTranslationRepoPathsConfig: (translationRepoPaths: Configurations["translationRepoPaths"] | undefined, getError: (configuration: string, configType: ArgType) => string) => void;
/**
 * gets error text for configuration validation error
 *
 * @param err the raised error
 */
export declare const getValidationError: (err: Error) => string;
/**
 * validates that all of the configuration options are valid
 *
 * Exits process if checks fail
 *
 * @param config the current configuration options
 * @param getError function to get error string
 */
export declare const validateArgs: (config: PossibleConfigurations, getError: (configuration: string, configType: ArgType) => string) => Promise<void>;
/**
 * removes all "old-version" files for the main locale
 *
 * @param path the folder to remove files from
 * @param mainLocale the locale to remove "old-version" files of (default: "en")
 */
export declare const removeMainLocaleFiles: (path: string, mainLocale?: string) => Promise<void>;
/**
 * copies files from the dev directory to the translation directory
 *
 * @param langs list of languages to sync
 * @param secondaryLangs list of languages to clean after sync
 * @param repoPath a link between a dev folder and a translation folder
 */
export declare const buildSyncFiles: (langs: string[], secondaryLangs: string[]) => (repoPath: RepoPathConnection) => Promise<string[]>;
/**
 * check if there are any git changes and throw error if so
 */
export declare const checkIfDirty: () => Promise<void>;
/**
 * check if the process of copying files caused changes - exits process if no
 * changes are found
 *
 * @param cleanTranslationBranches callback function to clean git repo on no changes found
 */
export declare const checkForTranslationChanges: (cleanTranslationBranches: () => Promise<void>) => Promise<void>;
/**
 * Commits changes to git and pushes the branch
 *
 * @param cleanTranslationBranches callback to clean branches on error
 * @param branchName name of the current branch
 */
export declare const addChanges: (cleanTranslationBranches: () => Promise<void>, branchName: string) => Promise<void>;
/**
 * handles syncing translations from the development repo to the
 * translation repo
 *
 * @param args the command line arguements
 * @param configPath the file path to the config file
 */
export declare const syncToTranslationRepo: (args: CLIConfigurations, configPath: string) => Promise<void>;
export default syncToTranslationRepo;
