"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigurationError = exports.checkArrayConfig = exports.checkStringConfig = void 0;
const types_1 = require("./types");
/**
 * Checks for required string configuration
 *
 * @param configuration the config item to check
 * @param getErrorText callback function to get text on error
 *
 * @throw if validation fails
 */
const checkStringConfig = (configuration, getErrorText) => {
    if (!configuration) {
        throw new Error(getErrorText());
    }
};
exports.checkStringConfig = checkStringConfig;
/**
 * Validates required array configuration
 *
 * Note: It also checks that the array has length
 *
 * @param configuration the config item to check
 * @param getErrorText function that gets text of error
 * @param validateItem optional callback function that checks every item in an array
 *
 * @throw if validation fails
 */
const checkArrayConfig = (configuration, getErrorText, validateItem) => {
    if (!(configuration && configuration.length)) {
        throw new Error(getErrorText());
    }
    if (validateItem) {
        const errors = configuration
            .map((item) => {
            const error = validateItem(item);
            if (error)
                return error;
            return "";
        })
            .filter((e) => !!e);
        if (errors.length) {
            const error = errors.join("\n");
            throw new Error(error);
        }
    }
};
exports.checkArrayConfig = checkArrayConfig;
/**
 * Gets the error text for a required configuration based on configuration type
 *
 * @param configPath the path to the config file
 * @param configuration the text representation of the configuration option
 * @param configType whether the config option can be set in CLI, config file, or both
 *
 * @returns the string error text
 */
const getConfigurationError = (configPath) => (configuration, configType) => {
    if (configType === types_1.ArgType.config) {
        return `The "${configuration}" configuration must be set in "${configPath}"`;
    }
    if (configType === types_1.ArgType.cli) {
        return `The "${configuration}" configuration must be passed as a command argument`;
    }
    // this is the CLI or Config case
    return `The "${configuration}" configuration must be set in "${configPath}" or passed as a command argument`;
};
exports.getConfigurationError = getConfigurationError;
//# sourceMappingURL=configurationErrorHandling.js.map