"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addErrorHandler = exports.handleError = void 0;
const chalk_1 = require("chalk");
const process_1 = __importDefault(require("process"));
/**
 * Handle error synchronously
 *
 * @param error the error (or a string representation) that was the cause
 */
const handleError = (error) => {
    console.error((0, chalk_1.redBright)(error));
    process_1.default.exit(1);
};
exports.handleError = handleError;
/**
 * Adds error handling to functions
 *
 * Exits process if error occurs
 *
 * @param func the async function to call
 * @param getErrorMessage a callback function to get the error message printed to console
 * @param clean optional callback function that cleans up on error
 */
const addErrorHandler = (func, getErrorMessage, clean) => async () => {
    try {
        const info = await func();
        return info;
    }
    catch (err) {
        // this does not use handleError because `clean` might exit
        console.error((0, chalk_1.redBright)(getErrorMessage(err)));
        if (clean) {
            await clean();
        }
        process_1.default.exit(1);
    }
};
exports.addErrorHandler = addErrorHandler;
//# sourceMappingURL=handleError.js.map