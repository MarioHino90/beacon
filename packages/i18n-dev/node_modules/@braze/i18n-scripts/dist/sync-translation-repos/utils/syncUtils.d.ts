import path from "path";
import type { Translation } from "../../i18n";
/**
 * gets the regex for which files to copy
 *
 * @param langs which languages to pull - if none are set, all will be fetched
 *
 * @returns the regex for which files to copy as string
 */
export declare const getSyncRegex: (langs: string[]) => string;
/**
 * copies all translation json files that do not currently exist
 *
 * @param srcPath directory to copy from
 * @param destPath directory to copy to
 * @param srcFiles the files to copy from
 * @param destFiles the files that currently exist in the destination directory
 *
 * @returns a promise that resolves when copying is finished
 */
export declare const copyFiles: (srcPath: string, destPath: string, srcFiles: string[], destFiles: string[]) => Promise<void>;
/**
 * writes a translation object to a file
 *
 * @param path path of the file
 * @param data the translation data to save
 *
 * @returns a promise that resolves when file writing is completed
 */
export declare const writeTranslationToFile: (path: string, data: Translation) => Promise<void>;
/**
 * merges the translations from one src file into one dest file
 *
 * @param srcPath directory to merge from
 * @param destPath directory to merge to
 * @param file the file to merge
 *
 * @returns a promise that resolves when merging is finished
 */
export declare const buildMergeFile: (srcPath: string, destPath: string) => (file: string) => Promise<{
    path: string;
    data: Translation;
}>;
/**
 * merges all translation json files that currently exist
 *
 * @param srcPath directory to copy from
 * @param destPath directory to copy to
 * @param srcFiles the files to copy from
 * @param destFiles the files that currently exist in the destination directory
 *
 * @returns a promise that resolves when merging is finished
 */
export declare const mergeFiles: (srcPath: string, destPath: string, srcFiles: string[], destFiles: string[]) => Promise<void>;
/**
 * handles syncing files from one directory to another
 *
 * @param srcPath directory to copy from
 * @param destPath directory to copy to
 * @param locales the list of languages to handle
 */
export declare const syncDirectoryFiles: (srcPath: string, destPath: string, locales: string[]) => Promise<string[]>;
/**
 * cleans up non-english files by deleting files and keys that have no english
 * equivilant
 *
 * @param destPath directory to clean
 * @param mainFiles the list of file names from the main locale files in source directory
 * @param locales the list of languages to handle
 * @param mainLocal the locale to compare against
 */
export declare const getDeletionSecondaryFiles: (destPath: string, mainFiles: string[], locales: string[], mainLocale: string) => (file: string) => Promise<(string | undefined)[]>;
/**
 * cleans up non-english files by deleting files and keys that have no english
 * equivilant
 *
 * @param mainFiles files to compare against
 * @param path directory to delete from
 * @param locales the list of languages to handle
 * @param mainLocal the locale to compare against
 */
export declare const buildDeleteExtraFiles: (mainFiles: string[], path: string, locales: string[], mainLocale: string) => (file: string) => Promise<void>;
/**
 * cleans up non-english files by deleting files and keys that have no english
 * equivilant
 *
 * @param mainFiles files to compare against
 * @param srcPath directory to compare against
 * @param destPath directory to clean
 * @param locales the list of languages to handle
 * @param mainLocal the locale to compare against
 */
export declare const buildDeleteExtraKeys: (mainFiles: string[], srcPath: string, destPath: string, locales: string[], mainLocale: string) => (file: string) => Promise<void>;
/**
 * cleans up non-english files by deleting files and keys that have no english
 * equivilant
 *
 * @param srcPath directory to compare against
 * @param destPath directory to clean
 * @param locales the list of languages to handle
 * @param mainLocal the locale to compare against (default: english)
 */
export declare const cleanLocaleFiles: (srcPath: string, destPath: string, locales: string[], mainLocale?: string) => Promise<void>;
