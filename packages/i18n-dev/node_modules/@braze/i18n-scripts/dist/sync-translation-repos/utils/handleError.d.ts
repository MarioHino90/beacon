/**
 * Handle error synchronously
 *
 * @param error the error (or a string representation) that was the cause
 */
export declare const handleError: (error: string | Error) => never;
/**
 * Adds error handling to functions
 *
 * Exits process if error occurs
 *
 * @param func the async function to call
 * @param getErrorMessage a callback function to get the error message printed to console
 * @param clean optional callback function that cleans up on error
 */
export declare const addErrorHandler: <T>(func: () => T | Promise<T>, getErrorMessage: (err: Error) => string, clean?: (() => Promise<void> | Promise<never> | void | never) | undefined) => () => Promise<T>;
