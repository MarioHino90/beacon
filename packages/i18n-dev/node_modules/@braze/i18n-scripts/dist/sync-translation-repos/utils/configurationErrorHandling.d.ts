import { ArgType } from "./types";
/**
 * Checks for required string configuration
 *
 * @param configuration the config item to check
 * @param getErrorText callback function to get text on error
 *
 * @throw if validation fails
 */
export declare const checkStringConfig: (configuration: string | undefined, getErrorText: () => string) => void;
/**
 * Validates required array configuration
 *
 * Note: It also checks that the array has length
 *
 * @param configuration the config item to check
 * @param getErrorText function that gets text of error
 * @param validateItem optional callback function that checks every item in an array
 *
 * @throw if validation fails
 */
export declare const checkArrayConfig: <T>(configuration: T[] | undefined, getErrorText: () => string, validateItem?: ((item: any) => string) | undefined) => void;
/**
 * Gets the error text for a required configuration based on configuration type
 *
 * @param configPath the path to the config file
 * @param configuration the text representation of the configuration option
 * @param configType whether the config option can be set in CLI, config file, or both
 *
 * @returns the string error text
 */
export declare const getConfigurationError: (configPath: string) => (configuration: string, configType: ArgType) => string;
