import type { RepoPathConnection } from "../i18n";
import { ArgType } from "./utils";
interface Configurations {
    /** url link to the dev repo  */
    devRepo: string;
    /** relative path to the translation repo */
    translationRepo: string;
    /** link of dev folders <-> translations folders */
    translationRepoPaths: RepoPathConnection[];
}
interface CLIConfigurations extends Partial<Pick<Configurations, "translationRepo">> {
}
declare type PossibleConfigurations = Partial<Configurations> & Partial<CLIConfigurations>;
/**
 * validates that all of the configuration options are valid
 *
 * Exits process if checks fail
 *
 * @param config the current configuration options
 * @param getError function to get error string
 */
export declare const validateArgs: (config: PossibleConfigurations, getError: (configuration: string, configType: ArgType) => string) => Promise<void>;
/**
 * copies files from the dev directory to the translation directory
 *
 * @param translationRepo relative path to the translation repo
 * @param langs list of languages to sync
 * @param repoPath a link between a dev folder and a translation folder
 */
export declare const buildSyncFiles: (translationRepo: string, langs: string[]) => (repoPath: RepoPathConnection) => Promise<string[]>;
/**
 * check if there are any git changes and throw error if so
 */
export declare const checkIfDirty: () => Promise<void>;
/**
 * check if the process of copying files caused changes - exits process if no
 * changes are found
 *
 * @param cleanTranslationBranches callback function to clean git repo on no changes found
 */
export declare const checkForDevelopmentChanges: (cleanTranslationBranches: () => Promise<void>) => Promise<void>;
/**
 * Commits changes to git and pushes the branch
 *
 * @param cleanTranslationBranches callback to clean branches on error
 * @param branchName name of the current branch
 */
export declare const addChanges: (cleanTranslationBranches: () => Promise<void>, branchName: string) => Promise<void>;
/**
 * handles syncing translations from the development repo to the
 * translation repo
 *
 * NOTE: This handles multiple cases for keys. The expected behaviour is as follows:
 *
 * English Key removed in Dev -> Do not copy to Dev
 * English Key added in Dev -> Do not remove from Dev
 * English Value edited in Dev -> Do not overwrite in Dev
 * English Value, Translation Value the same in Translation  -> Do not overwrite
 * English Value Same as Translation Repo's, Translation Value different -> Overwrite Translation Value
 *
 * NOTE: This also handles multiple cases for files. The expected behaviour is as follows:
 *
 * File removed in Dev -> Do not copy to Dev
 * File added in Dev -> Do not remove from Dev
 * File exists in both Dev and Translation -> Merge keys in file as per above behaviour
 *
 * @param args the command line arguements
 * @param configPath the file path to the config file
 */
export declare const syncToDevRepo: (args: CLIConfigurations, configPath: string) => Promise<void>;
export default syncToDevRepo;
