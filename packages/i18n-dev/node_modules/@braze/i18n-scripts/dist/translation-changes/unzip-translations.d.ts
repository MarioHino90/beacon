import type { ICUFormat, TempFileFormat } from "./types";
interface Configurations {
    /** indicates if the temp files should be removed after unzipping  */
    removeTempFiles: boolean;
    /** indicates if the changes should be pushed to the remote repo */
    pushChanges: boolean;
}
/** the data from the file needed to process the temp file */
interface FileData {
    /** data from the file */
    info: TempFileFormat;
    /** the locale of the file */
    locale: string;
}
/** the data from a temp file in a consumable format */
interface FormatedFileData {
    /** the data from the temp file */
    info: {
        [key: string]: string;
    };
    /** the namespace of the data */
    namespace: string;
    /** the locale of the data */
    locale: string;
}
/** the data from the temp files in a consumable format */
interface ReformatedInfo {
    /** the path of the file */
    [filename: string]: FormatedFileData;
}
/** temp file info */
declare type FileName = {
    /** the file path */
    file: string;
    /** the locale of the file */
    locale: string;
};
/**
 * check if there are any git changes and throw error if so
 */
export declare const checkIfDirty: () => Promise<void>;
/**
 * formats the data from the temporary files in a consumable format
 *
 * @param fileInfo the data from the files
 *
 * @returns the data from the files in a consumable format
 */
export declare const formatTranslations: (fileInfo: FileData[]) => ReformatedInfo;
/**
 * gets the path and locale of the temporary file
 *
 * @param file the filename
 *
 * @returns the full path of the file and the locale of the file
 */
export declare const getFilename: (file: string) => FileName;
/**
 * gets the translations from the temp files
 *
 * @returns the translation data in a consumable format
 */
export declare const getTranslations: () => Promise<ReformatedInfo>;
/**
 * formats data in the ICU format
 *
 * @param info the file data
 * @param locale the locale of the data
 * @param namespace the namespace for the data
 *
 * @returns the data in the ICU format
 */
export declare const formatDataICU: ({ info, locale, namespace, }: FormatedFileData) => ICUFormat;
/**
 * merges the new translation data with the previous translation data
 *
 * @param filename the path of the file
 * @param item the new translation data
 *
 * @returns the combinded data
 */
export declare const mergeTranslationData: (filename: string, item: FormatedFileData) => Promise<{
    [key: string]: string;
}>;
/**
 * updates or creates a formal translation file
 *
 * @param items the data from the temporary files
 * @param filename the file name of the file to process
 *
 * @returns a promise that resolves when the file is updated/created
 */
export declare const createUpdateTranslationFile: (items: ReformatedInfo) => (filename: string) => Promise<void>;
/**
 * gets all changes from before a specific date and moves them into a
 * temporary translator-friendly file
 */
declare const unzipTranslations: ({ pushChanges, removeTempFiles, }: Partial<Configurations>) => Promise<void>;
export default unzipTranslations;
