import type { InnerICUFileFormat, TempFileFormat } from "./types";
declare type ChangedItems = {
    [key: string]: string | ChangedItems;
};
interface ConfigurationOptions {
    /** number of days back to compare */
    days?: number;
    /** list of locales to create temp files for */
    locales?: string[];
    /** indicates if the temp files should be forcibly overwritten */
    force?: boolean;
}
/**
 * indicates if a file is an english JSON file
 *
 * @param file the filename to check
 *
 * @returns whether or not the file is an english JSON file
 */
export declare const isEnglishJSON: (file: string) => boolean;
/**
 * gets only the files that need to be processed for changes
 *
 * @param files all changed files
 *
 * @returns all changed files for processing
 */
export declare const getEnglishJSONFiles: (files: string[]) => string[];
/**
 * gets translations from JSON file
 *
 * @param gitRoot the root of the git repo
 * @param files the files to get
 * @param locale the locale to fetch. Usually this should be "en"
 *
 * @returns a promise with the info from all JSON files
 */
export declare const getJSONItems: (gitRoot: string, files: string[], locale?: string) => Promise<{
    filename: string;
    info: InnerICUFileFormat;
}[]>;
/**
 * get differences between translations
 *
 * @param newTranslations the new data
 * @param oldTranslations the old data
 *
 * @return an object with only the new/changed translations
 */
export declare const getDifferences: (newTranslations: ChangedItems | InnerICUFileFormat, oldTranslations: ChangedItems | InnerICUFileFormat) => ChangedItems;
/**
 * get the folder of a particular file
 *
 * @param filename the file path
 *
 * @returns a string representation of the folder the file is in
 */
export declare const getFolder: (filename: string) => string;
/**
 * gets items that have changed in JSON files in an object, grouped by directory
 *
 * @param commit the hash of the commit to compare against
 * @param gitRoot the root of the git repo
 * @param files the filenames of the files to get changes from
 *
 * @returns the changed items as an object
 */
declare const getChangedJSONItems: (commit: string, gitRoot: string, files: string[]) => Promise<TempFileFormat>;
/**
 * gets all changes from before a specific date and moves them into a
 * temporary translator-friendly file
 */
declare const getTranslationChanges: (getChangedItems: (commit: string, rootGit: string, files: string[]) => Promise<TempFileFormat>) => ({ days, locales, force, }?: ConfigurationOptions) => Promise<void>;
export { getChangedJSONItems };
export default getTranslationChanges;
