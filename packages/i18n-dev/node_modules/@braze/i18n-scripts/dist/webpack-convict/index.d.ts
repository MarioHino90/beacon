export = convict;
/**
 * @returns a config object
 */
declare function convict(def: any): {
    /**
     * Exports all the properties (that is the keys and their current values) as JSON
     */
    getProperties: () => any;
    /**
     * Exports all the properties (that is the keys and their current values) as
     * a JSON string
     */
    toString: () => string;
    /**
     * Exports the schema as JSON.
     */
    getSchema: () => any;
    /**
     * Exports the schema as a JSON string
     */
    getSchemaString: () => string;
    /**
     * @returns the current value of the name property. name can use dot
     *     notation to reference nested values
     */
    get: (path: any) => any;
    /**
     * @returns the default value of the name property. name can use dot
     *     notation to reference nested values
     */
    default: (path: any) => any;
    /**
     * Resets a property to its default value as defined in the schema
     */
    reset: (prop_name: any) => void;
    /**
     * @returns true if the property name is defined, or false otherwise
     */
    has: (path: any) => boolean;
    /**
     * Sets the value of name to value. name can use dot notation to reference
     * nested values, e.g. "database.port". If objects in the chain don't yet
     * exist, they will be initialized to empty objects
     */
    set: (k: any, v: any) => any;
    /**
     * Loads and merges a JavaScript object into config
     */
    load: (conf: any) => any;
    /**
     * Loads and merges one or multiple JSON configuration files into config
     */
    loadFile: (paths: any) => any;
    /**
     * Validates config against the schema used to initialize it
     */
    validate: (options: any) => any;
};
declare namespace convict {
    /**
     * Adds a new custom format
     */
    function addFormat(name: any, validate: any, coerce: any): void;
    /**
     * Adds new custom formats
     */
    function addFormats(formats: any): void;
}
