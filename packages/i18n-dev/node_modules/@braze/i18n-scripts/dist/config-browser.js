"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveConfig = exports.loadConfig = exports.validatePath = void 0;
const webpack_convict_1 = __importDefault(require("./webpack-convict"));
const config_shared_1 = require("./config-shared");
const convict = webpack_convict_1.default;
const validatePath = (type) => (sources) => {
    if (typeof sources !== "string") {
        throw new Error(`${type} must be a string`);
    }
};
exports.validatePath = validatePath;
function loadConfig(config) {
    // unlike in the node version, we don't want to memoize the configuration.
    // we will have multiple configurations load in the dashboard (one for dashboard,
    // one for beacon-labs, one for beacon, etc.)
    if (typeof config === "string") {
        throw new Error("loadConfig can only be called with JSON in the frontend, was called with a configuration path");
    }
    const i18nConfig = (0, config_shared_1.getI18nConfig)(convict, exports.validatePath);
    i18nConfig.load(config);
    i18nConfig.validate({ strict: true });
    return i18nConfig;
}
exports.loadConfig = loadConfig;
/**
 * This is a no-op in the browser
 */
function saveConfig() {
    return;
}
exports.saveConfig = saveConfig;
//# sourceMappingURL=config-browser.js.map