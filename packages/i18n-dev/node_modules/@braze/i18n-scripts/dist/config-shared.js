"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getI18nConfig = void 0;
function getI18nConfig(convict, validatePath) {
    convict.addFormat({
        name: "string-array",
        validate: (sources) => {
            if (!Array.isArray(sources)) {
                throw new Error("must be of type Array of strings");
            }
            for (const source of sources) {
                if (typeof source !== "string") {
                    throw new Error("must be of type Array of strings");
                }
            }
        },
    });
    convict.addFormat({
        name: "path-array",
        validate: (sources) => {
            if (!Array.isArray(sources)) {
                throw new Error("must be of type Array of paths");
            }
            for (const source of sources) {
                const pathConfig = convict({
                    translationPath: {
                        format: "path",
                        default: "",
                    },
                });
                pathConfig.load({ translationPath: source }).validate();
            }
        },
    });
    convict.addFormat({
        name: "repo-connection-array",
        validate: (sources) => {
            if (!Array.isArray(sources)) {
                throw new Error("must be of type Array of Connection Objects ({ dev: string; translations: string })");
            }
            for (const source of sources) {
                if (typeof source !== "object" &&
                    typeof source.dev !== "string" &&
                    typeof source.translations !== "string") {
                    throw new Error("must be of type Array of Connection Objects ({ dev: string; translations: string })");
                }
                validatePath("path")(source.dev);
            }
        },
    });
    convict.addFormat({
        name: "path",
        validate: validatePath("path"),
    });
    convict.addFormat({
        name: "file",
        validate: validatePath("file"),
    });
    const i18nConfig = convict({
        locales: {
            doc: "supported locales",
            format: "string-array",
            default: [],
            env: "I18N_LOCALES",
        },
        translationsPaths: {
            doc: "paths where locale files should be loaded from to merge",
            format: "path-array",
            default: [],
            env: "I18N_T9N_PATHS",
        },
        savePath: {
            doc: "directory to save new translations into",
            format: "path",
            default: "",
            env: "I18N_SAVE_PATH",
        },
        gitRootPath: {
            doc: "directory of the root of the git repository",
            format: "path",
            default: "",
            env: "I18N_GITROOT_PATH",
        },
        typescriptDefinitionPath: {
            doc: "file to save typescript translation types in",
            format: "file",
            default: "types/translations/index.ts",
            env: "I18N_TSDEF_PATH",
        },
        mergedTranslationsPath: {
            doc: "path to save translations.braze.json",
            format: "path",
            default: "",
            env: "I18N_ALL_T9N_PATH",
        },
        indexDTsInterfaceName: {
            doc: "interface name to use in translation types file. This must be unique to each repository",
            format: String,
            default: "MessageValues",
            env: "I18N_TS_INTERFACE",
        },
        translationRepoPaths: {
            doc: "paths where locale files should be pushed to in the translation repo",
            format: "repo-connection-array",
            default: [],
            env: "I18N_T9N_REPO_PATHS",
        },
        devRepo: {
            doc: "url link to dev repo (no trailing slash)",
            format: String,
            default: "",
            env: "I18N_DEV_REPO",
        },
        devMainBranch: {
            doc: "name of the main branch of the development repo",
            format: String,
            default: "main",
            env: "I18N_DEV_MAIN_BRANCH",
        },
        translationSyncLanguages: {
            doc: "locales synced TO the translation repo for translation",
            format: "string-array",
            default: [],
            env: "I18N_TRANSLATION_LOCALES",
        },
        devSyncLanguages: {
            doc: "locales synced TO the dev repo after translation",
            format: "string-array",
            default: [],
            env: "I18N_DEV_LOCALES",
        },
    });
    return i18nConfig;
}
exports.getI18nConfig = getI18nConfig;
//# sourceMappingURL=config-shared.js.map