"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeAllTranslationsEventually = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const proper_lockfile_1 = __importDefault(require("proper-lockfile"));
const generateIndexDTsFromTranslations_1 = require("./generateIndexDTsFromTranslations");
const generateMergedTranslations_1 = require("./generateMergedTranslations");
/**
 * @param translationFilePath the full path where to save the merged translations
 * @param localesPaths an array of all locale paths to search for translations
 * @param pattern the filename glob pattern to find all translation files in the localePaths
 */
async function mergeAllTranslationsEventually(translationFilePath, localesPaths, typescriptDefinitionPath, indexDTsInterfaceName, pattern = "**/*.braze.json") {
    const lockPath = path_1.default.resolve(translationFilePath, "translations.braze.json.txt");
    fs_1.default.writeFileSync(lockPath, "SEMAPHORE FOR TRANSLATIONS SERVER");
    // memoize the last modified time
    const { mtime } = fs_1.default.statSync(lockPath);
    await new Promise((resolve) => setTimeout(resolve, 1000));
    const { mtime: now } = fs_1.default.statSync(lockPath);
    if (now > mtime) {
        // this way, the last write will always win for the slower ts generation
        return;
    }
    const release = await proper_lockfile_1.default.lock(lockPath, { retries: 1000 });
    const translations = (0, generateMergedTranslations_1.generateMergedTranslations)(localesPaths, pattern);
    await (0, generateIndexDTsFromTranslations_1.generateIndexDTsFromTranslations)(translations.en.braze, typescriptDefinitionPath, indexDTsInterfaceName);
    await fs_1.default.promises.writeFile(path_1.default.resolve(translationFilePath, "translations.braze.json"), JSON.stringify(translations, null, 2));
    await release();
}
exports.mergeAllTranslationsEventually = mergeAllTranslationsEventually;
//# sourceMappingURL=mergeAllTranslationsEventually.js.map