"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepMerge = exports.maxDepthIndexTs = exports.maxDepthTranslations = void 0;
// do a straight merge after we reach locale(0) -> braze(1) -> namespace(2)
exports.maxDepthTranslations = 3;
// stop recursing at the namespace key, and do a straight merge of new to old values
exports.maxDepthIndexTs = 1;
/**
 * Do a deep merge of the recursive structure of all translation keys.
 *
 * This allows sub-keys to be defined in separate files (multiple files for dashboard keys, for instance)
 *
 * @param target the target object to merge new things in
 * @param source the source object to merge into the target
 * @param maxDepth the maximum depth to recurse into.
 * @param parentKey internal recursion field to get the combined key for error messages
 * @param depth internal recursion field to determine what depth recursion we have hit
 */
const deepMerge = (target, source, maxDepth, parentKey = "", depth = 0) => {
    if (typeof target === "string" && typeof source === "string") {
        return source;
    }
    if (typeof target !== "object" || typeof source !== "object") {
        throw new Error(`ERROR: Cannot merge translations for key "${parentKey}", got "${target}" to merge with a ${typeof source} ("${source}")`);
    }
    if (depth === maxDepth) {
        // at maximum depth, do a straight merge
        return {
            ...target,
            ...source,
        };
    }
    return Object.keys(source).reduce((coll, key) => {
        // the translation key tree does not exist, copy it into the collected output
        if (!target[key]) {
            return {
                ...coll,
                [key]: source[key],
            };
        }
        const mergeKey = parentKey ? `${parentKey}.${key}` : key;
        // the key exists in both the source and target, do a deep merge and assign to the key
        return {
            ...coll,
            [key]: (0, exports.deepMerge)(target[key], source[key], maxDepth, mergeKey, depth + 1),
        };
    }, target);
};
exports.deepMerge = deepMerge;
//# sourceMappingURL=deepMerge.js.map