"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTypescriptParametersFromTranslation = void 0;
const icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
/**
 * Extract the Typescript types of parameters from the ICU string.
 * @param translation English translation in ICU MessageFormat
 */
function parseTypescriptParametersFromTranslation(translation) {
    const parameters = {};
    let hasParameters = false;
    function traverse(tokens) {
        for (const token of tokens) {
            if ((0, icu_messageformat_parser_1.isArgumentElement)(token)) {
                parameters[token.value] = "string";
                hasParameters = true;
                continue;
            }
            if ((0, icu_messageformat_parser_1.isDateElement)(token) || (0, icu_messageformat_parser_1.isTimeElement)(token)) {
                parameters[token.value] = "Date";
                hasParameters = true;
                continue;
            }
            if ((0, icu_messageformat_parser_1.isNumberElement)(token)) {
                parameters[token.value] = "number";
                hasParameters = true;
                continue;
            }
            if ((0, icu_messageformat_parser_1.isPluralElement)(token)) {
                parameters[token.value] = "number";
                hasParameters = true;
                Object.values(token.options).forEach(({ value }) => traverse(value));
                continue;
            }
            if ((0, icu_messageformat_parser_1.isSelectElement)(token)) {
                parameters[token.value] = `"${Object.keys(token.options)
                    .filter((key) => key !== "other")
                    .join('" | "')}"`;
                hasParameters = true;
                Object.values(token.options).forEach(({ value }) => traverse(value));
                continue;
            }
        }
    }
    const ast = (0, icu_messageformat_parser_1.parse)(translation, {
        ignoreTag: true,
        shouldParseSkeletons: false,
        captureLocation: false,
    });
    traverse(ast);
    if (!hasParameters) {
        return "never";
    }
    return parameters;
}
exports.parseTypescriptParametersFromTranslation = parseTypescriptParametersFromTranslation;
//# sourceMappingURL=parseTypescriptParametersFromTranslation.js.map