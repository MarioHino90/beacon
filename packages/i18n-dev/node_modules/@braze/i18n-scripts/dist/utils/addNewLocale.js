"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addNewLocale = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const getTranslationMetaData_1 = require("./getTranslationMetaData");
const mergeAllTranslations_1 = require("./mergeAllTranslations");
/**
 * Prepare for adding a new locale by copying all of the English translations over to the new locale
 * @param translationsPaths list of all paths to load translations for merged translations
 * @param savePath path to save the translations into
 * @param newLocale
 * @param translationFilePath
 */
const addNewLocale = (translationsPaths, savePath, newLocale, translationFilePath, typescriptDefinitionPath, indexDTsInterfaceName) => {
    // copy all of the English translations into the new locale
    const files = (0, getTranslationMetaData_1.getAllEnglishTranslations)(savePath);
    files.forEach((file) => {
        const contents = fs_1.default.readFileSync(path_1.default.resolve(savePath, file), {
            encoding: "utf8",
            flag: "r",
        });
        const newLocalePath = file.replace(".en.", `.${newLocale}.`);
        const decodedContents = JSON.parse(contents);
        decodedContents[newLocale] = decodedContents.en;
        delete decodedContents.en;
        fs_1.default.writeFileSync(path_1.default.resolve(savePath, newLocalePath), JSON.stringify(decodedContents, null, 2));
    });
    (0, mergeAllTranslations_1.mergeAllTranslations)(translationFilePath, translationsPaths, typescriptDefinitionPath, indexDTsInterfaceName);
};
exports.addNewLocale = addNewLocale;
//# sourceMappingURL=addNewLocale.js.map