"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMergedTranslations = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const glob_1 = __importDefault(require("glob"));
const deepMerge_1 = require("./deepMerge");
const sortMergedTranslations_1 = require("./sortMergedTranslations");
const getLocaleFiles = (localesPath, pattern) => {
    return glob_1.default.sync(pattern, { cwd: localesPath });
};
/**
 *
 * @param localesPaths an array of all locale paths to search for translations
 * @param pattern the filename glob pattern to find all translation files in the localePaths
 */
function generateMergedTranslations(localesPaths, pattern = "**/*.braze.json") {
    const allTranslations = localesPaths.reduce((mergedTranslations, localesPath) => {
        // get all locale files
        const files = getLocaleFiles(localesPath, pattern);
        // load the translations
        return files.reduce((acc, fileName) => {
            // get path to file
            const filePath = path_1.default.join(localesPath, fileName);
            // read file using fs
            const file = fs_1.default.readFileSync(filePath, "utf-8");
            // parse the json directly
            try {
                const jsonDoc = JSON.parse(file);
                return (0, deepMerge_1.deepMerge)(acc, jsonDoc, deepMerge_1.maxDepthTranslations);
            }
            catch (e) {
                throw new Error(`failed parsing JSON for file ${file}, ${e.message}`);
            }
        }, mergedTranslations);
    }, {});
    return (0, sortMergedTranslations_1.sortMergedTranslations)(allTranslations);
}
exports.generateMergedTranslations = generateMergedTranslations;
//# sourceMappingURL=generateMergedTranslations.js.map