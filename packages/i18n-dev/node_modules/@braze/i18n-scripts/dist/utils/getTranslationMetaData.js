"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTranslationMetaData = exports.getAllEnglishTranslations = void 0;
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const getEntryPaths = (localesPath) => (namespace) => (locale) => path_1.default.resolve(localesPath, `${namespace}.${locale}.braze.json`);
const getLocaleFiles = (savePath, pattern) => {
    return glob_1.default.sync(pattern, { cwd: savePath });
};
/**
 * Get a list of all namespaces present in the translations savePath
 */
function getAllEnglishTranslations(savePath, pattern = "**/*.braze.json") {
    return getLocaleFiles(savePath, pattern).filter((path) => path.indexOf(".en.") !== -1);
}
exports.getAllEnglishTranslations = getAllEnglishTranslations;
/**
 * Transform a list of missing translations into an array of data about the translations that can be used to merge with existing namespaced translations
 *
 * By convention, all translations are organized into `locale.braze.namespace` as in `en.braze.account-settings`, and each namespace is
 * saved into a file with the namespace name as in `account-settings.en.braze.json`. This function takes the list of all missing translations,
 * and returns the data and metadata needed to handle the merge.
 *
 * - `getFilename` takes a locale and returns the absolute path to the locale file.
 * - `namespace` is the namespace of this group of translations
 * - `translations` are the key=>translation pairs for this namespace.
 * @param jsonEntries translation entries ready for insertion
 * @param localesPath the path in which to save the translations
 */
function getTranslationMetaData(jsonEntries, localesPath) {
    const getLocalePaths = getEntryPaths(localesPath);
    return Object.keys(jsonEntries).map((namespace) => ({
        getFilename: getLocalePaths(namespace),
        namespace,
        translations: jsonEntries[namespace],
    }));
}
exports.getTranslationMetaData = getTranslationMetaData;
//# sourceMappingURL=getTranslationMetaData.js.map