"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useI18nNamespace = void 0;

var _react = require("react");

var _reactI18next = require("react-i18next");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Namespace-aware retrieval of translation functions
 *
 * For a key like "account settings.account profile" the namespace is "account settings"
 *
 * This allows type-safe auto-completion and other cleverness
 * docs: https://confluence.braze.com/display/DASHINFRA/Internationalization+for+dashboard+developers
 * @param ns the braze translation namespace, like "dashboard" or "account settings"
 * @param useTranslationOptions the options (i18n, useSuspense) to pass to the underlying useTranslation
 */
var useI18nNamespace = function useI18nNamespace(ns) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _useTranslation = (0, _reactI18next.useTranslation)(undefined, options),
      t = _useTranslation.t,
      i18n = _useTranslation.i18n;

  var bt = (0, _react.useCallback)(function (key, defaultValue, options) {
    if (options) {
      return t("".concat(ns, ".").concat(key), _objectSpread(_objectSpread({}, options), {}, {
        defaultValue: defaultValue
      }));
    } else {
      return t("".concat(ns, ".").concat(key), {
        defaultValue: defaultValue
      });
    }
  }, [ns, t]);
  var k = (0, _react.useCallback)(function (key) {
    return "".concat(ns, ".").concat(key);
  }, [ns]);
  return {
    t: bt,
    k: k,
    i18n: i18n
  };
};

exports.useI18nNamespace = useI18nNamespace;